apiVersion: v1
data:
  uploads-Carbon-src-Carbon-Carbon.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon;

    use Carbon\Traits\Date;
    use DateTime;
    use DateTimeInterface;
    use DateTimeZone;

    /**
     * A simple API extension for DateTime.
     *
     * <autodoc generated by `composer phpdoc`>
     *
     * @property      int                 $year
     * @property      int                 $yearIso
     * @property      int                 $month
     * @property      int                 $day
     * @property      int                 $hour
     * @property      int                 $minute
     * @property      int                 $second
     * @property      int                 $micro
     * @property      int                 $microsecond
     * @property      int|float|string    $timestamp                                                                           seconds since the Unix Epoch
     * @property      string              $englishDayOfWeek                                                                    the day of week in English
     * @property      string              $shortEnglishDayOfWeek                                                               the abbreviated day of week in English
     * @property      string              $englishMonth                                                                        the month in English
     * @property      string              $shortEnglishMonth                                                                   the abbreviated month in English
     * @property      string              $localeDayOfWeek                                                                     the day of week in current locale LC_TIME
     * @property      string              $shortLocaleDayOfWeek                                                                the abbreviated day of week in current locale LC_TIME
     * @property      string              $localeMonth                                                                         the month in current locale LC_TIME
     * @property      string              $shortLocaleMonth                                                                    the abbreviated month in current locale LC_TIME
     * @property      int                 $milliseconds
     * @property      int                 $millisecond
     * @property      int                 $milli
     * @property      int                 $week                                                                                1 through 53
     * @property      int                 $isoWeek                                                                             1 through 53
     * @property      int                 $weekYear                                                                            year according to week format
     * @property      int                 $isoWeekYear                                                                         year according to ISO week format
     * @property      int                 $dayOfYear                                                                           1 through 366
     * @property      int                 $age                                                                                 does a diffInYears() with default parameters
     * @property      int                 $offset                                                                              the timezone offset in seconds from UTC
     * @property      int                 $offsetMinutes                                                                       the timezone offset in minutes from UTC
     * @property      int                 $offsetHours                                                                         the timezone offset in hours from UTC
     * @property      CarbonTimeZone      $timezone                                                                            the current timezone
     * @property      CarbonTimeZone      $tz                                                                                  alias of $timezone
     * @property-read int                 $dayOfWeek                                                                           0 (for Sunday) through 6 (for Saturday)
     * @property-read int                 $dayOfWeekIso                                                                        1 (for Monday) through 7 (for Sunday)
     * @property-read int                 $weekOfYear                                                                          ISO-8601 week number of year, weeks starting on Monday
     * @property-read int                 $daysInMonth                                                                         number of days in the given month
     * @property-read string              $latinMeridiem                                                                       "am"/"pm" (Ante meridiem or Post meridiem latin lowercase mark)
     * @property-read string              $latinUpperMeridiem                                                                  "AM"/"PM" (Ante meridiem or Post meridiem latin uppercase mark)
     * @property-read string              $timezoneAbbreviatedName                                                             the current timezone abbreviated name
     * @property-read string              $tzAbbrName                                                                          alias of $timezoneAbbreviatedName
     * @property-read string              $dayName                                                                             long name of weekday translated according to Carbon locale, in english if no translation available for current language
     * @property-read string              $shortDayName                                                                        short name of weekday translated according to Carbon locale, in english if no translation available for current language
     * @property-read string              $minDayName                                                                          very short name of weekday translated according to Carbon locale, in english if no translation available for current language
     * @property-read string              $monthName                                                                           long name of month translated according to Carbon locale, in english if no translation available for current language
     * @property-read string              $shortMonthName                                                                      short name of month translated according to Carbon locale, in english if no translation available for current language
     * @property-read string              $meridiem                                                                            lowercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
     * @property-read string              $upperMeridiem                                                                       uppercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
     * @property-read int                 $noZeroHour                                                                          current hour from 1 to 24
     * @property-read int                 $weeksInYear                                                                         51 through 53
     * @property-read int                 $isoWeeksInYear                                                                      51 through 53
     * @property-read int                 $weekOfMonth                                                                         1 through 5
     * @property-read int                 $weekNumberInMonth                                                                   1 through 5
     * @property-read int                 $firstWeekDay                                                                        0 through 6
     * @property-read int                 $lastWeekDay                                                                         0 through 6
     * @property-read int                 $daysInYear                                                                          365 or 366
     * @property-read int                 $quarter                                                                             the quarter of this instance, 1 - 4
     * @property-read int                 $decade                                                                              the decade of this instance
     * @property-read int                 $century                                                                             the century of this instance
     * @property-read int                 $millennium                                                                          the millennium of this instance
     * @property-read bool                $dst                                                                                 daylight savings time indicator, true if DST, false otherwise
     * @property-read bool                $local                                                                               checks if the timezone is local, true if local, false otherwise
     * @property-read bool                $utc                                                                                 checks if the timezone is UTC, true if UTC, false otherwise
     * @property-read string              $timezoneName                                                                        the current timezone name
     * @property-read string              $tzName                                                                              alias of $timezoneName
     * @property-read string              $locale                                                                              locale of the current instance
     *
     * @method        bool                isUtc()                                                                              Check if the current instance has UTC timezone. (Both isUtc and isUTC cases are valid.)
     * @method        bool                isLocal()                                                                            Check if the current instance has non-UTC timezone.
     * @method        bool                isValid()                                                                            Check if the current instance is a valid date.
     * @method        bool                isDST()                                                                              Check if the current instance is in a daylight saving time.
     * @method        bool                isSunday()                                                                           Checks if the instance day is sunday.
     * @method        bool                isMonday()                                                                           Checks if the instance day is monday.
     * @method        bool                isTuesday()                                                                          Checks if the instance day is tuesday.
     * @method        bool                isWednesday()                                                                        Checks if the instance day is wednesday.
     * @method        bool                isThursday()                                                                         Checks if the instance day is thursday.
     * @method        bool                isFriday()                                                                           Checks if the instance day is friday.
     * @method        bool                isSaturday()                                                                         Checks if the instance day is saturday.
     * @method        bool                isSameYear(Carbon|DateTimeInterface|string|null $date = null)                        Checks if the given date is in the same year as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                isCurrentYear()                                                                      Checks if the instance is in the same year as the current moment.
     * @method        bool                isNextYear()                                                                         Checks if the instance is in the same year as the current moment next year.
     * @method        bool                isLastYear()                                                                         Checks if the instance is in the same year as the current moment last year.
     * @method        bool                isSameWeek(Carbon|DateTimeInterface|string|null $date = null)                        Checks if the given date is in the same week as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                isCurrentWeek()                                                                      Checks if the instance is in the same week as the current moment.
     * @method        bool                isNextWeek()                                                                         Checks if the instance is in the same week as the current moment next week.
     * @method        bool                isLastWeek()                                                                         Checks if the instance is in the same week as the current moment last week.
     * @method        bool                isSameDay(Carbon|DateTimeInterface|string|null $date = null)                         Checks if the given date is in the same day as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                isCurrentDay()                                                                       Checks if the instance is in the same day as the current moment.
     * @method        bool                isNextDay()                                                                          Checks if the instance is in the same day as the current moment next day.
     * @method        bool                isLastDay()                                                                          Checks if the instance is in the same day as the current moment last day.
     * @method        bool                isSameHour(Carbon|DateTimeInterface|string|null $date = null)                        Checks if the given date is in the same hour as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                isCurrentHour()                                                                      Checks if the instance is in the same hour as the current moment.
     * @method        bool                isNextHour()                                                                         Checks if the instance is in the same hour as the current moment next hour.
     * @method        bool                isLastHour()                                                                         Checks if the instance is in the same hour as the current moment last hour.
     * @method        bool                isSameMinute(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same minute as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                isCurrentMinute()                                                                    Checks if the instance is in the same minute as the current moment.
     * @method        bool                isNextMinute()                                                                       Checks if the instance is in the same minute as the current moment next minute.
     * @method        bool                isLastMinute()                                                                       Checks if the instance is in the same minute as the current moment last minute.
     * @method        bool                isSameSecond(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same second as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                isCurrentSecond()                                                                    Checks if the instance is in the same second as the current moment.
     * @method        bool                isNextSecond()                                                                       Checks if the instance is in the same second as the current moment next second.
     * @method        bool                isLastSecond()                                                                       Checks if the instance is in the same second as the current moment last second.
     * @method        bool                isSameMicro(Carbon|DateTimeInterface|string|null $date = null)                       Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                isCurrentMicro()                                                                     Checks if the instance is in the same microsecond as the current moment.
     * @method        bool                isNextMicro()                                                                        Checks if the instance is in the same microsecond as the current moment next microsecond.
     * @method        bool                isLastMicro()                                                                        Checks if the instance is in the same microsecond as the current moment last microsecond.
     * @method        bool                isSameMicrosecond(Carbon|DateTimeInterface|string|null $date = null)                 Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                isCurrentMicrosecond()                                                               Checks if the instance is in the same microsecond as the current moment.
     * @method        bool                isNextMicrosecond()                                                                  Checks if the instance is in the same microsecond as the current moment next microsecond.
     * @method        bool                isLastMicrosecond()                                                                  Checks if the instance is in the same microsecond as the current moment last microsecond.
     * @method        bool                isCurrentMonth()                                                                     Checks if the instance is in the same month as the current moment.
     * @method        bool                isNextMonth()                                                                        Checks if the instance is in the same month as the current moment next month.
     * @method        bool                isLastMonth()                                                                        Checks if the instance is in the same month as the current moment last month.
     * @method        bool                isCurrentQuarter()                                                                   Checks if the instance is in the same quarter as the current moment.
     * @method        bool                isNextQuarter()                                                                      Checks if the instance is in the same quarter as the current moment next quarter.
     * @method        bool                isLastQuarter()                                                                      Checks if the instance is in the same quarter as the current moment last quarter.
     * @method        bool                isSameDecade(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same decade as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                isCurrentDecade()                                                                    Checks if the instance is in the same decade as the current moment.
     * @method        bool                isNextDecade()                                                                       Checks if the instance is in the same decade as the current moment next decade.
     * @method        bool                isLastDecade()                                                                       Checks if the instance is in the same decade as the current moment last decade.
     * @method        bool                isSameCentury(Carbon|DateTimeInterface|string|null $date = null)                     Checks if the given date is in the same century as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                isCurrentCentury()                                                                   Checks if the instance is in the same century as the current moment.
     * @method        bool                isNextCentury()                                                                      Checks if the instance is in the same century as the current moment next century.
     * @method        bool                isLastCentury()                                                                      Checks if the instance is in the same century as the current moment last century.
     * @method        bool                isSameMillennium(Carbon|DateTimeInterface|string|null $date = null)                  Checks if the given date is in the same millennium as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                isCurrentMillennium()                                                                Checks if the instance is in the same millennium as the current moment.
     * @method        bool                isNextMillennium()                                                                   Checks if the instance is in the same millennium as the current moment next millennium.
     * @method        bool                isLastMillennium()                                                                   Checks if the instance is in the same millennium as the current moment last millennium.
     * @method        $this               years(int $value)                                                                    Set current instance year to the given value.
     * @method        $this               year(int $value)                                                                     Set current instance year to the given value.
     * @method        $this               setYears(int $value)                                                                 Set current instance year to the given value.
     * @method        $this               setYear(int $value)                                                                  Set current instance year to the given value.
     * @method        $this               months(int $value)                                                                   Set current instance month to the given value.
     * @method        $this               month(int $value)                                                                    Set current instance month to the given value.
     * @method        $this               setMonths(int $value)                                                                Set current instance month to the given value.
     * @method        $this               setMonth(int $value)                                                                 Set current instance month to the given value.
     * @method        $this               days(int $value)                                                                     Set current instance day to the given value.
     * @method        $this               day(int $value)                                                                      Set current instance day to the given value.
     * @method        $this               setDays(int $value)                                                                  Set current instance day to the given value.
     * @method        $this               setDay(int $value)                                                                   Set current instance day to the given value.
     * @method        $this               hours(int $value)                                                                    Set current instance hour to the given value.
     * @method        $this               hour(int $value)                                                                     Set current instance hour to the given value.
     * @method        $this               setHours(int $value)                                                                 Set current instance hour to the given value.
     * @method        $this               setHour(int $value)                                                                  Set current instance hour to the given value.
     * @method        $this               minutes(int $value)                                                                  Set current instance minute to the given value.
     * @method        $this               minute(int $value)                                                                   Set current instance minute to the given value.
     * @method        $this               setMinutes(int $value)                                                               Set current instance minute to the given value.
     * @method        $this               setMinute(int $value)                                                                Set current instance minute to the given value.
     * @method        $this               seconds(int $value)                                                                  Set current instance second to the given value.
     * @method        $this               second(int $value)                                                                   Set current instance second to the given value.
     * @method        $this               setSeconds(int $value)                                                               Set current instance second to the given value.
     * @method        $this               setSecond(int $value)                                                                Set current instance second to the given value.
     * @method        $this               millis(int $value)                                                                   Set current instance millisecond to the given value.
     * @method        $this               milli(int $value)                                                                    Set current instance millisecond to the given value.
     * @method        $this               setMillis(int $value)                                                                Set current instance millisecond to the given value.
     * @method        $this               setMilli(int $value)                                                                 Set current instance millisecond to the given value.
     * @method        $this               milliseconds(int $value)                                                             Set current instance millisecond to the given value.
     * @method        $this               millisecond(int $value)                                                              Set current instance millisecond to the given value.
     * @method        $this               setMilliseconds(int $value)                                                          Set current instance millisecond to the given value.
     * @method        $this               setMillisecond(int $value)                                                           Set current instance millisecond to the given value.
     * @method        $this               micros(int $value)                                                                   Set current instance microsecond to the given value.
     * @method        $this               micro(int $value)                                                                    Set current instance microsecond to the given value.
     * @method        $this               setMicros(int $value)                                                                Set current instance microsecond to the given value.
     * @method        $this               setMicro(int $value)                                                                 Set current instance microsecond to the given value.
     * @method        $this               microseconds(int $value)                                                             Set current instance microsecond to the given value.
     * @method        $this               microsecond(int $value)                                                              Set current instance microsecond to the given value.
     * @method        $this               setMicroseconds(int $value)                                                          Set current instance microsecond to the given value.
     * @method        $this               setMicrosecond(int $value)                                                           Set current instance microsecond to the given value.
     * @method        $this               addYears(int $value = 1)                                                             Add years (the $value count passed in) to the instance (using date interval).
     * @method        $this               addYear()                                                                            Add one year to the instance (using date interval).
     * @method        $this               subYears(int $value = 1)                                                             Sub years (the $value count passed in) to the instance (using date interval).
     * @method        $this               subYear()                                                                            Sub one year to the instance (using date interval).
     * @method        $this               addYearsWithOverflow(int $value = 1)                                                 Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               addYearWithOverflow()                                                                Add one year to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               subYearsWithOverflow(int $value = 1)                                                 Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               subYearWithOverflow()                                                                Sub one year to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               addYearsWithoutOverflow(int $value = 1)                                              Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addYearWithoutOverflow()                                                             Add one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subYearsWithoutOverflow(int $value = 1)                                              Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subYearWithoutOverflow()                                                             Sub one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addYearsWithNoOverflow(int $value = 1)                                               Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addYearWithNoOverflow()                                                              Add one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subYearsWithNoOverflow(int $value = 1)                                               Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subYearWithNoOverflow()                                                              Sub one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addYearsNoOverflow(int $value = 1)                                                   Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addYearNoOverflow()                                                                  Add one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subYearsNoOverflow(int $value = 1)                                                   Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subYearNoOverflow()                                                                  Sub one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addMonths(int $value = 1)                                                            Add months (the $value count passed in) to the instance (using date interval).
     * @method        $this               addMonth()                                                                           Add one month to the instance (using date interval).
     * @method        $this               subMonths(int $value = 1)                                                            Sub months (the $value count passed in) to the instance (using date interval).
     * @method        $this               subMonth()                                                                           Sub one month to the instance (using date interval).
     * @method        $this               addMonthsWithOverflow(int $value = 1)                                                Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               addMonthWithOverflow()                                                               Add one month to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               subMonthsWithOverflow(int $value = 1)                                                Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               subMonthWithOverflow()                                                               Sub one month to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               addMonthsWithoutOverflow(int $value = 1)                                             Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addMonthWithoutOverflow()                                                            Add one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subMonthsWithoutOverflow(int $value = 1)                                             Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subMonthWithoutOverflow()                                                            Sub one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addMonthsWithNoOverflow(int $value = 1)                                              Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addMonthWithNoOverflow()                                                             Add one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subMonthsWithNoOverflow(int $value = 1)                                              Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subMonthWithNoOverflow()                                                             Sub one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addMonthsNoOverflow(int $value = 1)                                                  Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addMonthNoOverflow()                                                                 Add one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subMonthsNoOverflow(int $value = 1)                                                  Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subMonthNoOverflow()                                                                 Sub one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addDays(int $value = 1)                                                              Add days (the $value count passed in) to the instance (using date interval).
     * @method        $this               addDay()                                                                             Add one day to the instance (using date interval).
     * @method        $this               subDays(int $value = 1)                                                              Sub days (the $value count passed in) to the instance (using date interval).
     * @method        $this               subDay()                                                                             Sub one day to the instance (using date interval).
     * @method        $this               addHours(int $value = 1)                                                             Add hours (the $value count passed in) to the instance (using date interval).
     * @method        $this               addHour()                                                                            Add one hour to the instance (using date interval).
     * @method        $this               subHours(int $value = 1)                                                             Sub hours (the $value count passed in) to the instance (using date interval).
     * @method        $this               subHour()                                                                            Sub one hour to the instance (using date interval).
     * @method        $this               addMinutes(int $value = 1)                                                           Add minutes (the $value count passed in) to the instance (using date interval).
     * @method        $this               addMinute()                                                                          Add one minute to the instance (using date interval).
     * @method        $this               subMinutes(int $value = 1)                                                           Sub minutes (the $value count passed in) to the instance (using date interval).
     * @method        $this               subMinute()                                                                          Sub one minute to the instance (using date interval).
     * @method        $this               addSeconds(int $value = 1)                                                           Add seconds (the $value count passed in) to the instance (using date interval).
     * @method        $this               addSecond()                                                                          Add one second to the instance (using date interval).
     * @method        $this               subSeconds(int $value = 1)                                                           Sub seconds (the $value count passed in) to the instance (using date interval).
     * @method        $this               subSecond()                                                                          Sub one second to the instance (using date interval).
     * @method        $this               addMillis(int $value = 1)                                                            Add milliseconds (the $value count passed in) to the instance (using date interval).
     * @method        $this               addMilli()                                                                           Add one millisecond to the instance (using date interval).
     * @method        $this               subMillis(int $value = 1)                                                            Sub milliseconds (the $value count passed in) to the instance (using date interval).
     * @method        $this               subMilli()                                                                           Sub one millisecond to the instance (using date interval).
     * @method        $this               addMilliseconds(int $value = 1)                                                      Add milliseconds (the $value count passed in) to the instance (using date interval).
     * @method        $this               addMillisecond()                                                                     Add one millisecond to the instance (using date interval).
     * @method        $this               subMilliseconds(int $value = 1)                                                      Sub milliseconds (the $value count passed in) to the instance (using date interval).
     * @method        $this               subMillisecond()                                                                     Sub one millisecond to the instance (using date interval).
     * @method        $this               addMicros(int $value = 1)                                                            Add microseconds (the $value count passed in) to the instance (using date interval).
     * @method        $this               addMicro()                                                                           Add one microsecond to the instance (using date interval).
     * @method        $this               subMicros(int $value = 1)                                                            Sub microseconds (the $value count passed in) to the instance (using date interval).
     * @method        $this               subMicro()                                                                           Sub one microsecond to the instance (using date interval).
     * @method        $this               addMicroseconds(int $value = 1)                                                      Add microseconds (the $value count passed in) to the instance (using date interval).
     * @method        $this               addMicrosecond()                                                                     Add one microsecond to the instance (using date interval).
     * @method        $this               subMicroseconds(int $value = 1)                                                      Sub microseconds (the $value count passed in) to the instance (using date interval).
     * @method        $this               subMicrosecond()                                                                     Sub one microsecond to the instance (using date interval).
     * @method        $this               addMillennia(int $value = 1)                                                         Add millennia (the $value count passed in) to the instance (using date interval).
     * @method        $this               addMillennium()                                                                      Add one millennium to the instance (using date interval).
     * @method        $this               subMillennia(int $value = 1)                                                         Sub millennia (the $value count passed in) to the instance (using date interval).
     * @method        $this               subMillennium()                                                                      Sub one millennium to the instance (using date interval).
     * @method        $this               addMillenniaWithOverflow(int $value = 1)                                             Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               addMillenniumWithOverflow()                                                          Add one millennium to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               subMillenniaWithOverflow(int $value = 1)                                             Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               subMillenniumWithOverflow()                                                          Sub one millennium to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               addMillenniaWithoutOverflow(int $value = 1)                                          Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addMillenniumWithoutOverflow()                                                       Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subMillenniaWithoutOverflow(int $value = 1)                                          Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subMillenniumWithoutOverflow()                                                       Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addMillenniaWithNoOverflow(int $value = 1)                                           Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addMillenniumWithNoOverflow()                                                        Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subMillenniaWithNoOverflow(int $value = 1)                                           Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subMillenniumWithNoOverflow()                                                        Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addMillenniaNoOverflow(int $value = 1)                                               Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addMillenniumNoOverflow()                                                            Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subMillenniaNoOverflow(int $value = 1)                                               Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subMillenniumNoOverflow()                                                            Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addCenturies(int $value = 1)                                                         Add centuries (the $value count passed in) to the instance (using date interval).
     * @method        $this               addCentury()                                                                         Add one century to the instance (using date interval).
     * @method        $this               subCenturies(int $value = 1)                                                         Sub centuries (the $value count passed in) to the instance (using date interval).
     * @method        $this               subCentury()                                                                         Sub one century to the instance (using date interval).
     * @method        $this               addCenturiesWithOverflow(int $value = 1)                                             Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               addCenturyWithOverflow()                                                             Add one century to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               subCenturiesWithOverflow(int $value = 1)                                             Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               subCenturyWithOverflow()                                                             Sub one century to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               addCenturiesWithoutOverflow(int $value = 1)                                          Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addCenturyWithoutOverflow()                                                          Add one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subCenturiesWithoutOverflow(int $value = 1)                                          Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subCenturyWithoutOverflow()                                                          Sub one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addCenturiesWithNoOverflow(int $value = 1)                                           Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addCenturyWithNoOverflow()                                                           Add one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subCenturiesWithNoOverflow(int $value = 1)                                           Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subCenturyWithNoOverflow()                                                           Sub one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addCenturiesNoOverflow(int $value = 1)                                               Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addCenturyNoOverflow()                                                               Add one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subCenturiesNoOverflow(int $value = 1)                                               Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subCenturyNoOverflow()                                                               Sub one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addDecades(int $value = 1)                                                           Add decades (the $value count passed in) to the instance (using date interval).
     * @method        $this               addDecade()                                                                          Add one decade to the instance (using date interval).
     * @method        $this               subDecades(int $value = 1)                                                           Sub decades (the $value count passed in) to the instance (using date interval).
     * @method        $this               subDecade()                                                                          Sub one decade to the instance (using date interval).
     * @method        $this               addDecadesWithOverflow(int $value = 1)                                               Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               addDecadeWithOverflow()                                                              Add one decade to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               subDecadesWithOverflow(int $value = 1)                                               Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               subDecadeWithOverflow()                                                              Sub one decade to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               addDecadesWithoutOverflow(int $value = 1)                                            Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addDecadeWithoutOverflow()                                                           Add one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subDecadesWithoutOverflow(int $value = 1)                                            Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subDecadeWithoutOverflow()                                                           Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addDecadesWithNoOverflow(int $value = 1)                                             Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addDecadeWithNoOverflow()                                                            Add one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subDecadesWithNoOverflow(int $value = 1)                                             Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subDecadeWithNoOverflow()                                                            Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addDecadesNoOverflow(int $value = 1)                                                 Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addDecadeNoOverflow()                                                                Add one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subDecadesNoOverflow(int $value = 1)                                                 Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subDecadeNoOverflow()                                                                Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addQuarters(int $value = 1)                                                          Add quarters (the $value count passed in) to the instance (using date interval).
     * @method        $this               addQuarter()                                                                         Add one quarter to the instance (using date interval).
     * @method        $this               subQuarters(int $value = 1)                                                          Sub quarters (the $value count passed in) to the instance (using date interval).
     * @method        $this               subQuarter()                                                                         Sub one quarter to the instance (using date interval).
     * @method        $this               addQuartersWithOverflow(int $value = 1)                                              Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               addQuarterWithOverflow()                                                             Add one quarter to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               subQuartersWithOverflow(int $value = 1)                                              Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               subQuarterWithOverflow()                                                             Sub one quarter to the instance (using date interval) with overflow explicitly allowed.
     * @method        $this               addQuartersWithoutOverflow(int $value = 1)                                           Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addQuarterWithoutOverflow()                                                          Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subQuartersWithoutOverflow(int $value = 1)                                           Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subQuarterWithoutOverflow()                                                          Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addQuartersWithNoOverflow(int $value = 1)                                            Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addQuarterWithNoOverflow()                                                           Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subQuartersWithNoOverflow(int $value = 1)                                            Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subQuarterWithNoOverflow()                                                           Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addQuartersNoOverflow(int $value = 1)                                                Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addQuarterNoOverflow()                                                               Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subQuartersNoOverflow(int $value = 1)                                                Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               subQuarterNoOverflow()                                                               Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        $this               addWeeks(int $value = 1)                                                             Add weeks (the $value count passed in) to the instance (using date interval).
     * @method        $this               addWeek()                                                                            Add one week to the instance (using date interval).
     * @method        $this               subWeeks(int $value = 1)                                                             Sub weeks (the $value count passed in) to the instance (using date interval).
     * @method        $this               subWeek()                                                                            Sub one week to the instance (using date interval).
     * @method        $this               addWeekdays(int $value = 1)                                                          Add weekdays (the $value count passed in) to the instance (using date interval).
     * @method        $this               addWeekday()                                                                         Add one weekday to the instance (using date interval).
     * @method        $this               subWeekdays(int $value = 1)                                                          Sub weekdays (the $value count passed in) to the instance (using date interval).
     * @method        $this               subWeekday()                                                                         Sub one weekday to the instance (using date interval).
     * @method        $this               addRealMicros(int $value = 1)                                                        Add microseconds (the $value count passed in) to the instance (using timestamp).
     * @method        $this               addRealMicro()                                                                       Add one microsecond to the instance (using timestamp).
     * @method        $this               subRealMicros(int $value = 1)                                                        Sub microseconds (the $value count passed in) to the instance (using timestamp).
     * @method        $this               subRealMicro()                                                                       Sub one microsecond to the instance (using timestamp).
     * @method        CarbonPeriod        microsUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
     * @method        $this               addRealMicroseconds(int $value = 1)                                                  Add microseconds (the $value count passed in) to the instance (using timestamp).
     * @method        $this               addRealMicrosecond()                                                                 Add one microsecond to the instance (using timestamp).
     * @method        $this               subRealMicroseconds(int $value = 1)                                                  Sub microseconds (the $value count passed in) to the instance (using timestamp).
     * @method        $this               subRealMicrosecond()                                                                 Sub one microsecond to the instance (using timestamp).
     * @method        CarbonPeriod        microsecondsUntil($endDate = null, int $factor = 1)                                  Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
     * @method        $this               addRealMillis(int $value = 1)                                                        Add milliseconds (the $value count passed in) to the instance (using timestamp).
     * @method        $this               addRealMilli()                                                                       Add one millisecond to the instance (using timestamp).
     * @method        $this               subRealMillis(int $value = 1)                                                        Sub milliseconds (the $value count passed in) to the instance (using timestamp).
     * @method        $this               subRealMilli()                                                                       Sub one millisecond to the instance (using timestamp).
     * @method        CarbonPeriod        millisUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
     * @method        $this               addRealMilliseconds(int $value = 1)                                                  Add milliseconds (the $value count passed in) to the instance (using timestamp).
     * @method        $this               addRealMillisecond()                                                                 Add one millisecond to the instance (using timestamp).
     * @method        $this               subRealMilliseconds(int $value = 1)                                                  Sub milliseconds (the $value count passed in) to the instance (using timestamp).
     * @method        $this               subRealMillisecond()                                                                 Sub one millisecond to the instance (using timestamp).
     * @method        CarbonPeriod        millisecondsUntil($endDate = null, int $factor = 1)                                  Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
     * @method        $this               addRealSeconds(int $value = 1)                                                       Add seconds (the $value count passed in) to the instance (using timestamp).
     * @method        $this               addRealSecond()                                                                      Add one second to the instance (using timestamp).
     * @method        $this               subRealSeconds(int $value = 1)                                                       Sub seconds (the $value count passed in) to the instance (using timestamp).
     * @method        $this               subRealSecond()                                                                      Sub one second to the instance (using timestamp).
     * @method        CarbonPeriod        secondsUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each second or every X seconds if a factor is given.
     * @method        $this               addRealMinutes(int $value = 1)                                                       Add minutes (the $value count passed in) to the instance (using timestamp).
     * @method        $this               addRealMinute()                                                                      Add one minute to the instance (using timestamp).
     * @method        $this               subRealMinutes(int $value = 1)                                                       Sub minutes (the $value count passed in) to the instance (using timestamp).
     * @method        $this               subRealMinute()                                                                      Sub one minute to the instance (using timestamp).
     * @method        CarbonPeriod        minutesUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each minute or every X minutes if a factor is given.
     * @method        $this               addRealHours(int $value = 1)                                                         Add hours (the $value count passed in) to the instance (using timestamp).
     * @method        $this               addRealHour()                                                                        Add one hour to the instance (using timestamp).
     * @method        $this               subRealHours(int $value = 1)                                                         Sub hours (the $value count passed in) to the instance (using timestamp).
     * @method        $this               subRealHour()                                                                        Sub one hour to the instance (using timestamp).
     * @method        CarbonPeriod        hoursUntil($endDate = null, int $factor = 1)                                         Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each hour or every X hours if a factor is given.
     * @method        $this               addRealDays(int $value = 1)                                                          Add days (the $value count passed in) to the instance (using timestamp).
     * @method        $this               addRealDay()                                                                         Add one day to the instance (using timestamp).
     * @method        $this               subRealDays(int $value = 1)                                                          Sub days (the $value count passed in) to the instance (using timestamp).
     * @method        $this               subRealDay()                                                                         Sub one day to the instance (using timestamp).
     * @method        CarbonPeriod        daysUntil($endDate = null, int $factor = 1)                                          Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each day or every X days if a factor is given.
     * @method        $this               addRealWeeks(int $value = 1)                                                         Add weeks (the $value count passed in) to the instance (using timestamp).
     * @method        $this               addRealWeek()                                                                        Add one week to the instance (using timestamp).
     * @method        $this               subRealWeeks(int $value = 1)                                                         Sub weeks (the $value count passed in) to the instance (using timestamp).
     * @method        $this               subRealWeek()                                                                        Sub one week to the instance (using timestamp).
     * @method        CarbonPeriod        weeksUntil($endDate = null, int $factor = 1)                                         Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each week or every X weeks if a factor is given.
     * @method        $this               addRealMonths(int $value = 1)                                                        Add months (the $value count passed in) to the instance (using timestamp).
     * @method        $this               addRealMonth()                                                                       Add one month to the instance (using timestamp).
     * @method        $this               subRealMonths(int $value = 1)                                                        Sub months (the $value count passed in) to the instance (using timestamp).
     * @method        $this               subRealMonth()                                                                       Sub one month to the instance (using timestamp).
     * @method        CarbonPeriod        monthsUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each month or every X months if a factor is given.
     * @method        $this               addRealQuarters(int $value = 1)                                                      Add quarters (the $value count passed in) to the instance (using timestamp).
     * @method        $this               addRealQuarter()                                                                     Add one quarter to the instance (using timestamp).
     * @method        $this               subRealQuarters(int $value = 1)                                                      Sub quarters (the $value count passed in) to the instance (using timestamp).
     * @method        $this               subRealQuarter()                                                                     Sub one quarter to the instance (using timestamp).
     * @method        CarbonPeriod        quartersUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each quarter or every X quarters if a factor is given.
     * @method        $this               addRealYears(int $value = 1)                                                         Add years (the $value count passed in) to the instance (using timestamp).
     * @method        $this               addRealYear()                                                                        Add one year to the instance (using timestamp).
     * @method        $this               subRealYears(int $value = 1)                                                         Sub years (the $value count passed in) to the instance (using timestamp).
     * @method        $this               subRealYear()                                                                        Sub one year to the instance (using timestamp).
     * @method        CarbonPeriod        yearsUntil($endDate = null, int $factor = 1)                                         Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each year or every X years if a factor is given.
     * @method        $this               addRealDecades(int $value = 1)                                                       Add decades (the $value count passed in) to the instance (using timestamp).
     * @method        $this               addRealDecade()                                                                      Add one decade to the instance (using timestamp).
     * @method        $this               subRealDecades(int $value = 1)                                                       Sub decades (the $value count passed in) to the instance (using timestamp).
     * @method        $this               subRealDecade()                                                                      Sub one decade to the instance (using timestamp).
     * @method        CarbonPeriod        decadesUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each decade or every X decades if a factor is given.
     * @method        $this               addRealCenturies(int $value = 1)                                                     Add centuries (the $value count passed in) to the instance (using timestamp).
     * @method        $this               addRealCentury()                                                                     Add one century to the instance (using timestamp).
     * @method        $this               subRealCenturies(int $value = 1)                                                     Sub centuries (the $value count passed in) to the instance (using timestamp).
     * @method        $this               subRealCentury()                                                                     Sub one century to the instance (using timestamp).
     * @method        CarbonPeriod        centuriesUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each century or every X centuries if a factor is given.
     * @method        $this               addRealMillennia(int $value = 1)                                                     Add millennia (the $value count passed in) to the instance (using timestamp).
     * @method        $this               addRealMillennium()                                                                  Add one millennium to the instance (using timestamp).
     * @method        $this               subRealMillennia(int $value = 1)                                                     Sub millennia (the $value count passed in) to the instance (using timestamp).
     * @method        $this               subRealMillennium()                                                                  Sub one millennium to the instance (using timestamp).
     * @method        CarbonPeriod        millenniaUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millennium or every X millennia if a factor is given.
     * @method        $this               roundYear(float $precision = 1, string $function = "round")                          Round the current instance year with given precision using the given function.
     * @method        $this               roundYears(float $precision = 1, string $function = "round")                         Round the current instance year with given precision using the given function.
     * @method        $this               floorYear(float $precision = 1)                                                      Truncate the current instance year with given precision.
     * @method        $this               floorYears(float $precision = 1)                                                     Truncate the current instance year with given precision.
     * @method        $this               ceilYear(float $precision = 1)                                                       Ceil the current instance year with given precision.
     * @method        $this               ceilYears(float $precision = 1)                                                      Ceil the current instance year with given precision.
     * @method        $this               roundMonth(float $precision = 1, string $function = "round")                         Round the current instance month with given precision using the given function.
     * @method        $this               roundMonths(float $precision = 1, string $function = "round")                        Round the current instance month with given precision using the given function.
     * @method        $this               floorMonth(float $precision = 1)                                                     Truncate the current instance month with given precision.
     * @method        $this               floorMonths(float $precision = 1)                                                    Truncate the current instance month with given precision.
     * @method        $this               ceilMonth(float $precision = 1)                                                      Ceil the current instance month with given precision.
     * @method        $this               ceilMonths(float $precision = 1)                                                     Ceil the current instance month with given precision.
     * @method        $this               roundDay(float $precision = 1, string $function = "round")                           Round the current instance day with given precision using the given function.
     * @method        $this               roundDays(float $precision = 1, string $function = "round")                          Round the current instance day with given precision using the given function.
     * @method        $this               floorDay(float $precision = 1)                                                       Truncate the current instance day with given precision.
     * @method        $this               floorDays(float $precision = 1)                                                      Truncate the current instance day with given precision.
     * @method        $this               ceilDay(float $precision = 1)                                                        Ceil the current instance day with given precision.
     * @method        $this               ceilDays(float $precision = 1)                                                       Ceil the current instance day with given precision.
     * @method        $this               roundHour(float $precision = 1, string $function = "round")                          Round the current instance hour with given precision using the given function.
     * @method        $this               roundHours(float $precision = 1, string $function = "round")                         Round the current instance hour with given precision using the given function.
     * @method        $this               floorHour(float $precision = 1)                                                      Truncate the current instance hour with given precision.
     * @method        $this               floorHours(float $precision = 1)                                                     Truncate the current instance hour with given precision.
     * @method        $this               ceilHour(float $precision = 1)                                                       Ceil the current instance hour with given precision.
     * @method        $this               ceilHours(float $precision = 1)                                                      Ceil the current instance hour with given precision.
     * @method        $this               roundMinute(float $precision = 1, string $function = "round")                        Round the current instance minute with given precision using the given function.
     * @method        $this               roundMinutes(float $precision = 1, string $function = "round")                       Round the current instance minute with given precision using the given function.
     * @method        $this               floorMinute(float $precision = 1)                                                    Truncate the current instance minute with given precision.
     * @method        $this               floorMinutes(float $precision = 1)                                                   Truncate the current instance minute with given precision.
     * @method        $this               ceilMinute(float $precision = 1)                                                     Ceil the current instance minute with given precision.
     * @method        $this               ceilMinutes(float $precision = 1)                                                    Ceil the current instance minute with given precision.
     * @method        $this               roundSecond(float $precision = 1, string $function = "round")                        Round the current instance second with given precision using the given function.
     * @method        $this               roundSeconds(float $precision = 1, string $function = "round")                       Round the current instance second with given precision using the given function.
     * @method        $this               floorSecond(float $precision = 1)                                                    Truncate the current instance second with given precision.
     * @method        $this               floorSeconds(float $precision = 1)                                                   Truncate the current instance second with given precision.
     * @method        $this               ceilSecond(float $precision = 1)                                                     Ceil the current instance second with given precision.
     * @method        $this               ceilSeconds(float $precision = 1)                                                    Ceil the current instance second with given precision.
     * @method        $this               roundMillennium(float $precision = 1, string $function = "round")                    Round the current instance millennium with given precision using the given function.
     * @method        $this               roundMillennia(float $precision = 1, string $function = "round")                     Round the current instance millennium with given precision using the given function.
     * @method        $this               floorMillennium(float $precision = 1)                                                Truncate the current instance millennium with given precision.
     * @method        $this               floorMillennia(float $precision = 1)                                                 Truncate the current instance millennium with given precision.
     * @method        $this               ceilMillennium(float $precision = 1)                                                 Ceil the current instance millennium with given precision.
     * @method        $this               ceilMillennia(float $precision = 1)                                                  Ceil the current instance millennium with given precision.
     * @method        $this               roundCentury(float $precision = 1, string $function = "round")                       Round the current instance century with given precision using the given function.
     * @method        $this               roundCenturies(float $precision = 1, string $function = "round")                     Round the current instance century with given precision using the given function.
     * @method        $this               floorCentury(float $precision = 1)                                                   Truncate the current instance century with given precision.
     * @method        $this               floorCenturies(float $precision = 1)                                                 Truncate the current instance century with given precision.
     * @method        $this               ceilCentury(float $precision = 1)                                                    Ceil the current instance century with given precision.
     * @method        $this               ceilCenturies(float $precision = 1)                                                  Ceil the current instance century with given precision.
     * @method        $this               roundDecade(float $precision = 1, string $function = "round")                        Round the current instance decade with given precision using the given function.
     * @method        $this               roundDecades(float $precision = 1, string $function = "round")                       Round the current instance decade with given precision using the given function.
     * @method        $this               floorDecade(float $precision = 1)                                                    Truncate the current instance decade with given precision.
     * @method        $this               floorDecades(float $precision = 1)                                                   Truncate the current instance decade with given precision.
     * @method        $this               ceilDecade(float $precision = 1)                                                     Ceil the current instance decade with given precision.
     * @method        $this               ceilDecades(float $precision = 1)                                                    Ceil the current instance decade with given precision.
     * @method        $this               roundQuarter(float $precision = 1, string $function = "round")                       Round the current instance quarter with given precision using the given function.
     * @method        $this               roundQuarters(float $precision = 1, string $function = "round")                      Round the current instance quarter with given precision using the given function.
     * @method        $this               floorQuarter(float $precision = 1)                                                   Truncate the current instance quarter with given precision.
     * @method        $this               floorQuarters(float $precision = 1)                                                  Truncate the current instance quarter with given precision.
     * @method        $this               ceilQuarter(float $precision = 1)                                                    Ceil the current instance quarter with given precision.
     * @method        $this               ceilQuarters(float $precision = 1)                                                   Ceil the current instance quarter with given precision.
     * @method        $this               roundMillisecond(float $precision = 1, string $function = "round")                   Round the current instance millisecond with given precision using the given function.
     * @method        $this               roundMilliseconds(float $precision = 1, string $function = "round")                  Round the current instance millisecond with given precision using the given function.
     * @method        $this               floorMillisecond(float $precision = 1)                                               Truncate the current instance millisecond with given precision.
     * @method        $this               floorMilliseconds(float $precision = 1)                                              Truncate the current instance millisecond with given precision.
     * @method        $this               ceilMillisecond(float $precision = 1)                                                Ceil the current instance millisecond with given precision.
     * @method        $this               ceilMilliseconds(float $precision = 1)                                               Ceil the current instance millisecond with given precision.
     * @method        $this               roundMicrosecond(float $precision = 1, string $function = "round")                   Round the current instance microsecond with given precision using the given function.
     * @method        $this               roundMicroseconds(float $precision = 1, string $function = "round")                  Round the current instance microsecond with given precision using the given function.
     * @method        $this               floorMicrosecond(float $precision = 1)                                               Truncate the current instance microsecond with given precision.
     * @method        $this               floorMicroseconds(float $precision = 1)                                              Truncate the current instance microsecond with given precision.
     * @method        $this               ceilMicrosecond(float $precision = 1)                                                Ceil the current instance microsecond with given precision.
     * @method        $this               ceilMicroseconds(float $precision = 1)                                               Ceil the current instance microsecond with given precision.
     * @method        string              shortAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)          Get the difference (short format, 'Absolute' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string              longAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)           Get the difference (long format, 'Absolute' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string              shortRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)          Get the difference (short format, 'Relative' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string              longRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)           Get the difference (long format, 'Relative' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string              shortRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)     Get the difference (short format, 'RelativeToNow' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string              longRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)      Get the difference (long format, 'RelativeToNow' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string              shortRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1)   Get the difference (short format, 'RelativeToOther' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string              longRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1)    Get the difference (long format, 'RelativeToOther' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        static Carbon|false createFromFormat(string $format, string $time, string|DateTimeZone $timezone = null) Parse a string into a new Carbon object according to the specified format.
     * @method        static Carbon       __set_state(array $array)                                                            https://php.net/manual/en/datetime.set-state.php
     *
     * </autodoc>
     */
    class Carbon extends DateTime implements CarbonInterface
    {
        use Date;

        /**
         * Returns true if the current class/instance is mutable.
         *
         * @return bool
         */
        public static function isMutable()
        {
            return true;
        }
    }
  uploads-Carbon-src-Carbon-CarbonConverterInterface.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon;

    use DateTimeInterface;

    interface CarbonConverterInterface
    {
        public function convertDate(DateTimeInterface $dateTime, bool $negated = false): CarbonInterface;
    }
  uploads-Carbon-src-Carbon-CarbonImmutable.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon;

    use Carbon\Traits\Date;
    use DateTimeImmutable;
    use DateTimeInterface;
    use DateTimeZone;

    /**
     * A simple API extension for DateTimeImmutable.
     *
     * <autodoc generated by `composer phpdoc`>
     *
     * @property      int                          $year
     * @property      int                          $yearIso
     * @property      int                          $month
     * @property      int                          $day
     * @property      int                          $hour
     * @property      int                          $minute
     * @property      int                          $second
     * @property      int                          $micro
     * @property      int                          $microsecond
     * @property      int|float|string             $timestamp                                                                           seconds since the Unix Epoch
     * @property      string                       $englishDayOfWeek                                                                    the day of week in English
     * @property      string                       $shortEnglishDayOfWeek                                                               the abbreviated day of week in English
     * @property      string                       $englishMonth                                                                        the month in English
     * @property      string                       $shortEnglishMonth                                                                   the abbreviated month in English
     * @property      string                       $localeDayOfWeek                                                                     the day of week in current locale LC_TIME
     * @property      string                       $shortLocaleDayOfWeek                                                                the abbreviated day of week in current locale LC_TIME
     * @property      string                       $localeMonth                                                                         the month in current locale LC_TIME
     * @property      string                       $shortLocaleMonth                                                                    the abbreviated month in current locale LC_TIME
     * @property      int                          $milliseconds
     * @property      int                          $millisecond
     * @property      int                          $milli
     * @property      int                          $week                                                                                1 through 53
     * @property      int                          $isoWeek                                                                             1 through 53
     * @property      int                          $weekYear                                                                            year according to week format
     * @property      int                          $isoWeekYear                                                                         year according to ISO week format
     * @property      int                          $dayOfYear                                                                           1 through 366
     * @property      int                          $age                                                                                 does a diffInYears() with default parameters
     * @property      int                          $offset                                                                              the timezone offset in seconds from UTC
     * @property      int                          $offsetMinutes                                                                       the timezone offset in minutes from UTC
     * @property      int                          $offsetHours                                                                         the timezone offset in hours from UTC
     * @property      CarbonTimeZone               $timezone                                                                            the current timezone
     * @property      CarbonTimeZone               $tz                                                                                  alias of $timezone
     * @property-read int                          $dayOfWeek                                                                           0 (for Sunday) through 6 (for Saturday)
     * @property-read int                          $dayOfWeekIso                                                                        1 (for Monday) through 7 (for Sunday)
     * @property-read int                          $weekOfYear                                                                          ISO-8601 week number of year, weeks starting on Monday
     * @property-read int                          $daysInMonth                                                                         number of days in the given month
     * @property-read string                       $latinMeridiem                                                                       "am"/"pm" (Ante meridiem or Post meridiem latin lowercase mark)
     * @property-read string                       $latinUpperMeridiem                                                                  "AM"/"PM" (Ante meridiem or Post meridiem latin uppercase mark)
     * @property-read string                       $timezoneAbbreviatedName                                                             the current timezone abbreviated name
     * @property-read string                       $tzAbbrName                                                                          alias of $timezoneAbbreviatedName
     * @property-read string                       $dayName                                                                             long name of weekday translated according to Carbon locale, in english if no translation available for current language
     * @property-read string                       $shortDayName                                                                        short name of weekday translated according to Carbon locale, in english if no translation available for current language
     * @property-read string                       $minDayName                                                                          very short name of weekday translated according to Carbon locale, in english if no translation available for current language
     * @property-read string                       $monthName                                                                           long name of month translated according to Carbon locale, in english if no translation available for current language
     * @property-read string                       $shortMonthName                                                                      short name of month translated according to Carbon locale, in english if no translation available for current language
     * @property-read string                       $meridiem                                                                            lowercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
     * @property-read string                       $upperMeridiem                                                                       uppercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
     * @property-read int                          $noZeroHour                                                                          current hour from 1 to 24
     * @property-read int                          $weeksInYear                                                                         51 through 53
     * @property-read int                          $isoWeeksInYear                                                                      51 through 53
     * @property-read int                          $weekOfMonth                                                                         1 through 5
     * @property-read int                          $weekNumberInMonth                                                                   1 through 5
     * @property-read int                          $firstWeekDay                                                                        0 through 6
     * @property-read int                          $lastWeekDay                                                                         0 through 6
     * @property-read int                          $daysInYear                                                                          365 or 366
     * @property-read int                          $quarter                                                                             the quarter of this instance, 1 - 4
     * @property-read int                          $decade                                                                              the decade of this instance
     * @property-read int                          $century                                                                             the century of this instance
     * @property-read int                          $millennium                                                                          the millennium of this instance
     * @property-read bool                         $dst                                                                                 daylight savings time indicator, true if DST, false otherwise
     * @property-read bool                         $local                                                                               checks if the timezone is local, true if local, false otherwise
     * @property-read bool                         $utc                                                                                 checks if the timezone is UTC, true if UTC, false otherwise
     * @property-read string                       $timezoneName                                                                        the current timezone name
     * @property-read string                       $tzName                                                                              alias of $timezoneName
     * @property-read string                       $locale                                                                              locale of the current instance
     *
     * @method        bool                         isUtc()                                                                              Check if the current instance has UTC timezone. (Both isUtc and isUTC cases are valid.)
     * @method        bool                         isLocal()                                                                            Check if the current instance has non-UTC timezone.
     * @method        bool                         isValid()                                                                            Check if the current instance is a valid date.
     * @method        bool                         isDST()                                                                              Check if the current instance is in a daylight saving time.
     * @method        bool                         isSunday()                                                                           Checks if the instance day is sunday.
     * @method        bool                         isMonday()                                                                           Checks if the instance day is monday.
     * @method        bool                         isTuesday()                                                                          Checks if the instance day is tuesday.
     * @method        bool                         isWednesday()                                                                        Checks if the instance day is wednesday.
     * @method        bool                         isThursday()                                                                         Checks if the instance day is thursday.
     * @method        bool                         isFriday()                                                                           Checks if the instance day is friday.
     * @method        bool                         isSaturday()                                                                         Checks if the instance day is saturday.
     * @method        bool                         isSameYear(Carbon|DateTimeInterface|string|null $date = null)                        Checks if the given date is in the same year as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                         isCurrentYear()                                                                      Checks if the instance is in the same year as the current moment.
     * @method        bool                         isNextYear()                                                                         Checks if the instance is in the same year as the current moment next year.
     * @method        bool                         isLastYear()                                                                         Checks if the instance is in the same year as the current moment last year.
     * @method        bool                         isSameWeek(Carbon|DateTimeInterface|string|null $date = null)                        Checks if the given date is in the same week as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                         isCurrentWeek()                                                                      Checks if the instance is in the same week as the current moment.
     * @method        bool                         isNextWeek()                                                                         Checks if the instance is in the same week as the current moment next week.
     * @method        bool                         isLastWeek()                                                                         Checks if the instance is in the same week as the current moment last week.
     * @method        bool                         isSameDay(Carbon|DateTimeInterface|string|null $date = null)                         Checks if the given date is in the same day as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                         isCurrentDay()                                                                       Checks if the instance is in the same day as the current moment.
     * @method        bool                         isNextDay()                                                                          Checks if the instance is in the same day as the current moment next day.
     * @method        bool                         isLastDay()                                                                          Checks if the instance is in the same day as the current moment last day.
     * @method        bool                         isSameHour(Carbon|DateTimeInterface|string|null $date = null)                        Checks if the given date is in the same hour as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                         isCurrentHour()                                                                      Checks if the instance is in the same hour as the current moment.
     * @method        bool                         isNextHour()                                                                         Checks if the instance is in the same hour as the current moment next hour.
     * @method        bool                         isLastHour()                                                                         Checks if the instance is in the same hour as the current moment last hour.
     * @method        bool                         isSameMinute(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same minute as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                         isCurrentMinute()                                                                    Checks if the instance is in the same minute as the current moment.
     * @method        bool                         isNextMinute()                                                                       Checks if the instance is in the same minute as the current moment next minute.
     * @method        bool                         isLastMinute()                                                                       Checks if the instance is in the same minute as the current moment last minute.
     * @method        bool                         isSameSecond(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same second as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                         isCurrentSecond()                                                                    Checks if the instance is in the same second as the current moment.
     * @method        bool                         isNextSecond()                                                                       Checks if the instance is in the same second as the current moment next second.
     * @method        bool                         isLastSecond()                                                                       Checks if the instance is in the same second as the current moment last second.
     * @method        bool                         isSameMicro(Carbon|DateTimeInterface|string|null $date = null)                       Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                         isCurrentMicro()                                                                     Checks if the instance is in the same microsecond as the current moment.
     * @method        bool                         isNextMicro()                                                                        Checks if the instance is in the same microsecond as the current moment next microsecond.
     * @method        bool                         isLastMicro()                                                                        Checks if the instance is in the same microsecond as the current moment last microsecond.
     * @method        bool                         isSameMicrosecond(Carbon|DateTimeInterface|string|null $date = null)                 Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                         isCurrentMicrosecond()                                                               Checks if the instance is in the same microsecond as the current moment.
     * @method        bool                         isNextMicrosecond()                                                                  Checks if the instance is in the same microsecond as the current moment next microsecond.
     * @method        bool                         isLastMicrosecond()                                                                  Checks if the instance is in the same microsecond as the current moment last microsecond.
     * @method        bool                         isCurrentMonth()                                                                     Checks if the instance is in the same month as the current moment.
     * @method        bool                         isNextMonth()                                                                        Checks if the instance is in the same month as the current moment next month.
     * @method        bool                         isLastMonth()                                                                        Checks if the instance is in the same month as the current moment last month.
     * @method        bool                         isCurrentQuarter()                                                                   Checks if the instance is in the same quarter as the current moment.
     * @method        bool                         isNextQuarter()                                                                      Checks if the instance is in the same quarter as the current moment next quarter.
     * @method        bool                         isLastQuarter()                                                                      Checks if the instance is in the same quarter as the current moment last quarter.
     * @method        bool                         isSameDecade(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same decade as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                         isCurrentDecade()                                                                    Checks if the instance is in the same decade as the current moment.
     * @method        bool                         isNextDecade()                                                                       Checks if the instance is in the same decade as the current moment next decade.
     * @method        bool                         isLastDecade()                                                                       Checks if the instance is in the same decade as the current moment last decade.
     * @method        bool                         isSameCentury(Carbon|DateTimeInterface|string|null $date = null)                     Checks if the given date is in the same century as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                         isCurrentCentury()                                                                   Checks if the instance is in the same century as the current moment.
     * @method        bool                         isNextCentury()                                                                      Checks if the instance is in the same century as the current moment next century.
     * @method        bool                         isLastCentury()                                                                      Checks if the instance is in the same century as the current moment last century.
     * @method        bool                         isSameMillennium(Carbon|DateTimeInterface|string|null $date = null)                  Checks if the given date is in the same millennium as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool                         isCurrentMillennium()                                                                Checks if the instance is in the same millennium as the current moment.
     * @method        bool                         isNextMillennium()                                                                   Checks if the instance is in the same millennium as the current moment next millennium.
     * @method        bool                         isLastMillennium()                                                                   Checks if the instance is in the same millennium as the current moment last millennium.
     * @method        CarbonImmutable              years(int $value)                                                                    Set current instance year to the given value.
     * @method        CarbonImmutable              year(int $value)                                                                     Set current instance year to the given value.
     * @method        CarbonImmutable              setYears(int $value)                                                                 Set current instance year to the given value.
     * @method        CarbonImmutable              setYear(int $value)                                                                  Set current instance year to the given value.
     * @method        CarbonImmutable              months(int $value)                                                                   Set current instance month to the given value.
     * @method        CarbonImmutable              month(int $value)                                                                    Set current instance month to the given value.
     * @method        CarbonImmutable              setMonths(int $value)                                                                Set current instance month to the given value.
     * @method        CarbonImmutable              setMonth(int $value)                                                                 Set current instance month to the given value.
     * @method        CarbonImmutable              days(int $value)                                                                     Set current instance day to the given value.
     * @method        CarbonImmutable              day(int $value)                                                                      Set current instance day to the given value.
     * @method        CarbonImmutable              setDays(int $value)                                                                  Set current instance day to the given value.
     * @method        CarbonImmutable              setDay(int $value)                                                                   Set current instance day to the given value.
     * @method        CarbonImmutable              hours(int $value)                                                                    Set current instance hour to the given value.
     * @method        CarbonImmutable              hour(int $value)                                                                     Set current instance hour to the given value.
     * @method        CarbonImmutable              setHours(int $value)                                                                 Set current instance hour to the given value.
     * @method        CarbonImmutable              setHour(int $value)                                                                  Set current instance hour to the given value.
     * @method        CarbonImmutable              minutes(int $value)                                                                  Set current instance minute to the given value.
     * @method        CarbonImmutable              minute(int $value)                                                                   Set current instance minute to the given value.
     * @method        CarbonImmutable              setMinutes(int $value)                                                               Set current instance minute to the given value.
     * @method        CarbonImmutable              setMinute(int $value)                                                                Set current instance minute to the given value.
     * @method        CarbonImmutable              seconds(int $value)                                                                  Set current instance second to the given value.
     * @method        CarbonImmutable              second(int $value)                                                                   Set current instance second to the given value.
     * @method        CarbonImmutable              setSeconds(int $value)                                                               Set current instance second to the given value.
     * @method        CarbonImmutable              setSecond(int $value)                                                                Set current instance second to the given value.
     * @method        CarbonImmutable              millis(int $value)                                                                   Set current instance millisecond to the given value.
     * @method        CarbonImmutable              milli(int $value)                                                                    Set current instance millisecond to the given value.
     * @method        CarbonImmutable              setMillis(int $value)                                                                Set current instance millisecond to the given value.
     * @method        CarbonImmutable              setMilli(int $value)                                                                 Set current instance millisecond to the given value.
     * @method        CarbonImmutable              milliseconds(int $value)                                                             Set current instance millisecond to the given value.
     * @method        CarbonImmutable              millisecond(int $value)                                                              Set current instance millisecond to the given value.
     * @method        CarbonImmutable              setMilliseconds(int $value)                                                          Set current instance millisecond to the given value.
     * @method        CarbonImmutable              setMillisecond(int $value)                                                           Set current instance millisecond to the given value.
     * @method        CarbonImmutable              micros(int $value)                                                                   Set current instance microsecond to the given value.
     * @method        CarbonImmutable              micro(int $value)                                                                    Set current instance microsecond to the given value.
     * @method        CarbonImmutable              setMicros(int $value)                                                                Set current instance microsecond to the given value.
     * @method        CarbonImmutable              setMicro(int $value)                                                                 Set current instance microsecond to the given value.
     * @method        CarbonImmutable              microseconds(int $value)                                                             Set current instance microsecond to the given value.
     * @method        CarbonImmutable              microsecond(int $value)                                                              Set current instance microsecond to the given value.
     * @method        CarbonImmutable              setMicroseconds(int $value)                                                          Set current instance microsecond to the given value.
     * @method        CarbonImmutable              setMicrosecond(int $value)                                                           Set current instance microsecond to the given value.
     * @method        CarbonImmutable              addYears(int $value = 1)                                                             Add years (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              addYear()                                                                            Add one year to the instance (using date interval).
     * @method        CarbonImmutable              subYears(int $value = 1)                                                             Sub years (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              subYear()                                                                            Sub one year to the instance (using date interval).
     * @method        CarbonImmutable              addYearsWithOverflow(int $value = 1)                                                 Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              addYearWithOverflow()                                                                Add one year to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              subYearsWithOverflow(int $value = 1)                                                 Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              subYearWithOverflow()                                                                Sub one year to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              addYearsWithoutOverflow(int $value = 1)                                              Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addYearWithoutOverflow()                                                             Add one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subYearsWithoutOverflow(int $value = 1)                                              Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subYearWithoutOverflow()                                                             Sub one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addYearsWithNoOverflow(int $value = 1)                                               Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addYearWithNoOverflow()                                                              Add one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subYearsWithNoOverflow(int $value = 1)                                               Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subYearWithNoOverflow()                                                              Sub one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addYearsNoOverflow(int $value = 1)                                                   Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addYearNoOverflow()                                                                  Add one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subYearsNoOverflow(int $value = 1)                                                   Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subYearNoOverflow()                                                                  Sub one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addMonths(int $value = 1)                                                            Add months (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              addMonth()                                                                           Add one month to the instance (using date interval).
     * @method        CarbonImmutable              subMonths(int $value = 1)                                                            Sub months (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              subMonth()                                                                           Sub one month to the instance (using date interval).
     * @method        CarbonImmutable              addMonthsWithOverflow(int $value = 1)                                                Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              addMonthWithOverflow()                                                               Add one month to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              subMonthsWithOverflow(int $value = 1)                                                Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              subMonthWithOverflow()                                                               Sub one month to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              addMonthsWithoutOverflow(int $value = 1)                                             Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addMonthWithoutOverflow()                                                            Add one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subMonthsWithoutOverflow(int $value = 1)                                             Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subMonthWithoutOverflow()                                                            Sub one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addMonthsWithNoOverflow(int $value = 1)                                              Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addMonthWithNoOverflow()                                                             Add one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subMonthsWithNoOverflow(int $value = 1)                                              Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subMonthWithNoOverflow()                                                             Sub one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addMonthsNoOverflow(int $value = 1)                                                  Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addMonthNoOverflow()                                                                 Add one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subMonthsNoOverflow(int $value = 1)                                                  Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subMonthNoOverflow()                                                                 Sub one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addDays(int $value = 1)                                                              Add days (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              addDay()                                                                             Add one day to the instance (using date interval).
     * @method        CarbonImmutable              subDays(int $value = 1)                                                              Sub days (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              subDay()                                                                             Sub one day to the instance (using date interval).
     * @method        CarbonImmutable              addHours(int $value = 1)                                                             Add hours (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              addHour()                                                                            Add one hour to the instance (using date interval).
     * @method        CarbonImmutable              subHours(int $value = 1)                                                             Sub hours (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              subHour()                                                                            Sub one hour to the instance (using date interval).
     * @method        CarbonImmutable              addMinutes(int $value = 1)                                                           Add minutes (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              addMinute()                                                                          Add one minute to the instance (using date interval).
     * @method        CarbonImmutable              subMinutes(int $value = 1)                                                           Sub minutes (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              subMinute()                                                                          Sub one minute to the instance (using date interval).
     * @method        CarbonImmutable              addSeconds(int $value = 1)                                                           Add seconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              addSecond()                                                                          Add one second to the instance (using date interval).
     * @method        CarbonImmutable              subSeconds(int $value = 1)                                                           Sub seconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              subSecond()                                                                          Sub one second to the instance (using date interval).
     * @method        CarbonImmutable              addMillis(int $value = 1)                                                            Add milliseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              addMilli()                                                                           Add one millisecond to the instance (using date interval).
     * @method        CarbonImmutable              subMillis(int $value = 1)                                                            Sub milliseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              subMilli()                                                                           Sub one millisecond to the instance (using date interval).
     * @method        CarbonImmutable              addMilliseconds(int $value = 1)                                                      Add milliseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              addMillisecond()                                                                     Add one millisecond to the instance (using date interval).
     * @method        CarbonImmutable              subMilliseconds(int $value = 1)                                                      Sub milliseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              subMillisecond()                                                                     Sub one millisecond to the instance (using date interval).
     * @method        CarbonImmutable              addMicros(int $value = 1)                                                            Add microseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              addMicro()                                                                           Add one microsecond to the instance (using date interval).
     * @method        CarbonImmutable              subMicros(int $value = 1)                                                            Sub microseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              subMicro()                                                                           Sub one microsecond to the instance (using date interval).
     * @method        CarbonImmutable              addMicroseconds(int $value = 1)                                                      Add microseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              addMicrosecond()                                                                     Add one microsecond to the instance (using date interval).
     * @method        CarbonImmutable              subMicroseconds(int $value = 1)                                                      Sub microseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              subMicrosecond()                                                                     Sub one microsecond to the instance (using date interval).
     * @method        CarbonImmutable              addMillennia(int $value = 1)                                                         Add millennia (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              addMillennium()                                                                      Add one millennium to the instance (using date interval).
     * @method        CarbonImmutable              subMillennia(int $value = 1)                                                         Sub millennia (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              subMillennium()                                                                      Sub one millennium to the instance (using date interval).
     * @method        CarbonImmutable              addMillenniaWithOverflow(int $value = 1)                                             Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              addMillenniumWithOverflow()                                                          Add one millennium to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              subMillenniaWithOverflow(int $value = 1)                                             Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              subMillenniumWithOverflow()                                                          Sub one millennium to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              addMillenniaWithoutOverflow(int $value = 1)                                          Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addMillenniumWithoutOverflow()                                                       Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subMillenniaWithoutOverflow(int $value = 1)                                          Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subMillenniumWithoutOverflow()                                                       Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addMillenniaWithNoOverflow(int $value = 1)                                           Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addMillenniumWithNoOverflow()                                                        Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subMillenniaWithNoOverflow(int $value = 1)                                           Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subMillenniumWithNoOverflow()                                                        Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addMillenniaNoOverflow(int $value = 1)                                               Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addMillenniumNoOverflow()                                                            Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subMillenniaNoOverflow(int $value = 1)                                               Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subMillenniumNoOverflow()                                                            Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addCenturies(int $value = 1)                                                         Add centuries (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              addCentury()                                                                         Add one century to the instance (using date interval).
     * @method        CarbonImmutable              subCenturies(int $value = 1)                                                         Sub centuries (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              subCentury()                                                                         Sub one century to the instance (using date interval).
     * @method        CarbonImmutable              addCenturiesWithOverflow(int $value = 1)                                             Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              addCenturyWithOverflow()                                                             Add one century to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              subCenturiesWithOverflow(int $value = 1)                                             Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              subCenturyWithOverflow()                                                             Sub one century to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              addCenturiesWithoutOverflow(int $value = 1)                                          Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addCenturyWithoutOverflow()                                                          Add one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subCenturiesWithoutOverflow(int $value = 1)                                          Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subCenturyWithoutOverflow()                                                          Sub one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addCenturiesWithNoOverflow(int $value = 1)                                           Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addCenturyWithNoOverflow()                                                           Add one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subCenturiesWithNoOverflow(int $value = 1)                                           Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subCenturyWithNoOverflow()                                                           Sub one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addCenturiesNoOverflow(int $value = 1)                                               Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addCenturyNoOverflow()                                                               Add one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subCenturiesNoOverflow(int $value = 1)                                               Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subCenturyNoOverflow()                                                               Sub one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addDecades(int $value = 1)                                                           Add decades (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              addDecade()                                                                          Add one decade to the instance (using date interval).
     * @method        CarbonImmutable              subDecades(int $value = 1)                                                           Sub decades (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              subDecade()                                                                          Sub one decade to the instance (using date interval).
     * @method        CarbonImmutable              addDecadesWithOverflow(int $value = 1)                                               Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              addDecadeWithOverflow()                                                              Add one decade to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              subDecadesWithOverflow(int $value = 1)                                               Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              subDecadeWithOverflow()                                                              Sub one decade to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              addDecadesWithoutOverflow(int $value = 1)                                            Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addDecadeWithoutOverflow()                                                           Add one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subDecadesWithoutOverflow(int $value = 1)                                            Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subDecadeWithoutOverflow()                                                           Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addDecadesWithNoOverflow(int $value = 1)                                             Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addDecadeWithNoOverflow()                                                            Add one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subDecadesWithNoOverflow(int $value = 1)                                             Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subDecadeWithNoOverflow()                                                            Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addDecadesNoOverflow(int $value = 1)                                                 Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addDecadeNoOverflow()                                                                Add one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subDecadesNoOverflow(int $value = 1)                                                 Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subDecadeNoOverflow()                                                                Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addQuarters(int $value = 1)                                                          Add quarters (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              addQuarter()                                                                         Add one quarter to the instance (using date interval).
     * @method        CarbonImmutable              subQuarters(int $value = 1)                                                          Sub quarters (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              subQuarter()                                                                         Sub one quarter to the instance (using date interval).
     * @method        CarbonImmutable              addQuartersWithOverflow(int $value = 1)                                              Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              addQuarterWithOverflow()                                                             Add one quarter to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              subQuartersWithOverflow(int $value = 1)                                              Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              subQuarterWithOverflow()                                                             Sub one quarter to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonImmutable              addQuartersWithoutOverflow(int $value = 1)                                           Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addQuarterWithoutOverflow()                                                          Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subQuartersWithoutOverflow(int $value = 1)                                           Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subQuarterWithoutOverflow()                                                          Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addQuartersWithNoOverflow(int $value = 1)                                            Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addQuarterWithNoOverflow()                                                           Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subQuartersWithNoOverflow(int $value = 1)                                            Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subQuarterWithNoOverflow()                                                           Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addQuartersNoOverflow(int $value = 1)                                                Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addQuarterNoOverflow()                                                               Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subQuartersNoOverflow(int $value = 1)                                                Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              subQuarterNoOverflow()                                                               Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonImmutable              addWeeks(int $value = 1)                                                             Add weeks (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              addWeek()                                                                            Add one week to the instance (using date interval).
     * @method        CarbonImmutable              subWeeks(int $value = 1)                                                             Sub weeks (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              subWeek()                                                                            Sub one week to the instance (using date interval).
     * @method        CarbonImmutable              addWeekdays(int $value = 1)                                                          Add weekdays (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              addWeekday()                                                                         Add one weekday to the instance (using date interval).
     * @method        CarbonImmutable              subWeekdays(int $value = 1)                                                          Sub weekdays (the $value count passed in) to the instance (using date interval).
     * @method        CarbonImmutable              subWeekday()                                                                         Sub one weekday to the instance (using date interval).
     * @method        CarbonImmutable              addRealMicros(int $value = 1)                                                        Add microseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              addRealMicro()                                                                       Add one microsecond to the instance (using timestamp).
     * @method        CarbonImmutable              subRealMicros(int $value = 1)                                                        Sub microseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              subRealMicro()                                                                       Sub one microsecond to the instance (using timestamp).
     * @method        CarbonPeriod                 microsUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
     * @method        CarbonImmutable              addRealMicroseconds(int $value = 1)                                                  Add microseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              addRealMicrosecond()                                                                 Add one microsecond to the instance (using timestamp).
     * @method        CarbonImmutable              subRealMicroseconds(int $value = 1)                                                  Sub microseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              subRealMicrosecond()                                                                 Sub one microsecond to the instance (using timestamp).
     * @method        CarbonPeriod                 microsecondsUntil($endDate = null, int $factor = 1)                                  Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
     * @method        CarbonImmutable              addRealMillis(int $value = 1)                                                        Add milliseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              addRealMilli()                                                                       Add one millisecond to the instance (using timestamp).
     * @method        CarbonImmutable              subRealMillis(int $value = 1)                                                        Sub milliseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              subRealMilli()                                                                       Sub one millisecond to the instance (using timestamp).
     * @method        CarbonPeriod                 millisUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
     * @method        CarbonImmutable              addRealMilliseconds(int $value = 1)                                                  Add milliseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              addRealMillisecond()                                                                 Add one millisecond to the instance (using timestamp).
     * @method        CarbonImmutable              subRealMilliseconds(int $value = 1)                                                  Sub milliseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              subRealMillisecond()                                                                 Sub one millisecond to the instance (using timestamp).
     * @method        CarbonPeriod                 millisecondsUntil($endDate = null, int $factor = 1)                                  Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
     * @method        CarbonImmutable              addRealSeconds(int $value = 1)                                                       Add seconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              addRealSecond()                                                                      Add one second to the instance (using timestamp).
     * @method        CarbonImmutable              subRealSeconds(int $value = 1)                                                       Sub seconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              subRealSecond()                                                                      Sub one second to the instance (using timestamp).
     * @method        CarbonPeriod                 secondsUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each second or every X seconds if a factor is given.
     * @method        CarbonImmutable              addRealMinutes(int $value = 1)                                                       Add minutes (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              addRealMinute()                                                                      Add one minute to the instance (using timestamp).
     * @method        CarbonImmutable              subRealMinutes(int $value = 1)                                                       Sub minutes (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              subRealMinute()                                                                      Sub one minute to the instance (using timestamp).
     * @method        CarbonPeriod                 minutesUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each minute or every X minutes if a factor is given.
     * @method        CarbonImmutable              addRealHours(int $value = 1)                                                         Add hours (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              addRealHour()                                                                        Add one hour to the instance (using timestamp).
     * @method        CarbonImmutable              subRealHours(int $value = 1)                                                         Sub hours (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              subRealHour()                                                                        Sub one hour to the instance (using timestamp).
     * @method        CarbonPeriod                 hoursUntil($endDate = null, int $factor = 1)                                         Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each hour or every X hours if a factor is given.
     * @method        CarbonImmutable              addRealDays(int $value = 1)                                                          Add days (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              addRealDay()                                                                         Add one day to the instance (using timestamp).
     * @method        CarbonImmutable              subRealDays(int $value = 1)                                                          Sub days (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              subRealDay()                                                                         Sub one day to the instance (using timestamp).
     * @method        CarbonPeriod                 daysUntil($endDate = null, int $factor = 1)                                          Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each day or every X days if a factor is given.
     * @method        CarbonImmutable              addRealWeeks(int $value = 1)                                                         Add weeks (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              addRealWeek()                                                                        Add one week to the instance (using timestamp).
     * @method        CarbonImmutable              subRealWeeks(int $value = 1)                                                         Sub weeks (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              subRealWeek()                                                                        Sub one week to the instance (using timestamp).
     * @method        CarbonPeriod                 weeksUntil($endDate = null, int $factor = 1)                                         Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each week or every X weeks if a factor is given.
     * @method        CarbonImmutable              addRealMonths(int $value = 1)                                                        Add months (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              addRealMonth()                                                                       Add one month to the instance (using timestamp).
     * @method        CarbonImmutable              subRealMonths(int $value = 1)                                                        Sub months (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              subRealMonth()                                                                       Sub one month to the instance (using timestamp).
     * @method        CarbonPeriod                 monthsUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each month or every X months if a factor is given.
     * @method        CarbonImmutable              addRealQuarters(int $value = 1)                                                      Add quarters (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              addRealQuarter()                                                                     Add one quarter to the instance (using timestamp).
     * @method        CarbonImmutable              subRealQuarters(int $value = 1)                                                      Sub quarters (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              subRealQuarter()                                                                     Sub one quarter to the instance (using timestamp).
     * @method        CarbonPeriod                 quartersUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each quarter or every X quarters if a factor is given.
     * @method        CarbonImmutable              addRealYears(int $value = 1)                                                         Add years (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              addRealYear()                                                                        Add one year to the instance (using timestamp).
     * @method        CarbonImmutable              subRealYears(int $value = 1)                                                         Sub years (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              subRealYear()                                                                        Sub one year to the instance (using timestamp).
     * @method        CarbonPeriod                 yearsUntil($endDate = null, int $factor = 1)                                         Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each year or every X years if a factor is given.
     * @method        CarbonImmutable              addRealDecades(int $value = 1)                                                       Add decades (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              addRealDecade()                                                                      Add one decade to the instance (using timestamp).
     * @method        CarbonImmutable              subRealDecades(int $value = 1)                                                       Sub decades (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              subRealDecade()                                                                      Sub one decade to the instance (using timestamp).
     * @method        CarbonPeriod                 decadesUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each decade or every X decades if a factor is given.
     * @method        CarbonImmutable              addRealCenturies(int $value = 1)                                                     Add centuries (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              addRealCentury()                                                                     Add one century to the instance (using timestamp).
     * @method        CarbonImmutable              subRealCenturies(int $value = 1)                                                     Sub centuries (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              subRealCentury()                                                                     Sub one century to the instance (using timestamp).
     * @method        CarbonPeriod                 centuriesUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each century or every X centuries if a factor is given.
     * @method        CarbonImmutable              addRealMillennia(int $value = 1)                                                     Add millennia (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              addRealMillennium()                                                                  Add one millennium to the instance (using timestamp).
     * @method        CarbonImmutable              subRealMillennia(int $value = 1)                                                     Sub millennia (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonImmutable              subRealMillennium()                                                                  Sub one millennium to the instance (using timestamp).
     * @method        CarbonPeriod                 millenniaUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millennium or every X millennia if a factor is given.
     * @method        CarbonImmutable              roundYear(float $precision = 1, string $function = "round")                          Round the current instance year with given precision using the given function.
     * @method        CarbonImmutable              roundYears(float $precision = 1, string $function = "round")                         Round the current instance year with given precision using the given function.
     * @method        CarbonImmutable              floorYear(float $precision = 1)                                                      Truncate the current instance year with given precision.
     * @method        CarbonImmutable              floorYears(float $precision = 1)                                                     Truncate the current instance year with given precision.
     * @method        CarbonImmutable              ceilYear(float $precision = 1)                                                       Ceil the current instance year with given precision.
     * @method        CarbonImmutable              ceilYears(float $precision = 1)                                                      Ceil the current instance year with given precision.
     * @method        CarbonImmutable              roundMonth(float $precision = 1, string $function = "round")                         Round the current instance month with given precision using the given function.
     * @method        CarbonImmutable              roundMonths(float $precision = 1, string $function = "round")                        Round the current instance month with given precision using the given function.
     * @method        CarbonImmutable              floorMonth(float $precision = 1)                                                     Truncate the current instance month with given precision.
     * @method        CarbonImmutable              floorMonths(float $precision = 1)                                                    Truncate the current instance month with given precision.
     * @method        CarbonImmutable              ceilMonth(float $precision = 1)                                                      Ceil the current instance month with given precision.
     * @method        CarbonImmutable              ceilMonths(float $precision = 1)                                                     Ceil the current instance month with given precision.
     * @method        CarbonImmutable              roundDay(float $precision = 1, string $function = "round")                           Round the current instance day with given precision using the given function.
     * @method        CarbonImmutable              roundDays(float $precision = 1, string $function = "round")                          Round the current instance day with given precision using the given function.
     * @method        CarbonImmutable              floorDay(float $precision = 1)                                                       Truncate the current instance day with given precision.
     * @method        CarbonImmutable              floorDays(float $precision = 1)                                                      Truncate the current instance day with given precision.
     * @method        CarbonImmutable              ceilDay(float $precision = 1)                                                        Ceil the current instance day with given precision.
     * @method        CarbonImmutable              ceilDays(float $precision = 1)                                                       Ceil the current instance day with given precision.
     * @method        CarbonImmutable              roundHour(float $precision = 1, string $function = "round")                          Round the current instance hour with given precision using the given function.
     * @method        CarbonImmutable              roundHours(float $precision = 1, string $function = "round")                         Round the current instance hour with given precision using the given function.
     * @method        CarbonImmutable              floorHour(float $precision = 1)                                                      Truncate the current instance hour with given precision.
     * @method        CarbonImmutable              floorHours(float $precision = 1)                                                     Truncate the current instance hour with given precision.
     * @method        CarbonImmutable              ceilHour(float $precision = 1)                                                       Ceil the current instance hour with given precision.
     * @method        CarbonImmutable              ceilHours(float $precision = 1)                                                      Ceil the current instance hour with given precision.
     * @method        CarbonImmutable              roundMinute(float $precision = 1, string $function = "round")                        Round the current instance minute with given precision using the given function.
     * @method        CarbonImmutable              roundMinutes(float $precision = 1, string $function = "round")                       Round the current instance minute with given precision using the given function.
     * @method        CarbonImmutable              floorMinute(float $precision = 1)                                                    Truncate the current instance minute with given precision.
     * @method        CarbonImmutable              floorMinutes(float $precision = 1)                                                   Truncate the current instance minute with given precision.
     * @method        CarbonImmutable              ceilMinute(float $precision = 1)                                                     Ceil the current instance minute with given precision.
     * @method        CarbonImmutable              ceilMinutes(float $precision = 1)                                                    Ceil the current instance minute with given precision.
     * @method        CarbonImmutable              roundSecond(float $precision = 1, string $function = "round")                        Round the current instance second with given precision using the given function.
     * @method        CarbonImmutable              roundSeconds(float $precision = 1, string $function = "round")                       Round the current instance second with given precision using the given function.
     * @method        CarbonImmutable              floorSecond(float $precision = 1)                                                    Truncate the current instance second with given precision.
     * @method        CarbonImmutable              floorSeconds(float $precision = 1)                                                   Truncate the current instance second with given precision.
     * @method        CarbonImmutable              ceilSecond(float $precision = 1)                                                     Ceil the current instance second with given precision.
     * @method        CarbonImmutable              ceilSeconds(float $precision = 1)                                                    Ceil the current instance second with given precision.
     * @method        CarbonImmutable              roundMillennium(float $precision = 1, string $function = "round")                    Round the current instance millennium with given precision using the given function.
     * @method        CarbonImmutable              roundMillennia(float $precision = 1, string $function = "round")                     Round the current instance millennium with given precision using the given function.
     * @method        CarbonImmutable              floorMillennium(float $precision = 1)                                                Truncate the current instance millennium with given precision.
     * @method        CarbonImmutable              floorMillennia(float $precision = 1)                                                 Truncate the current instance millennium with given precision.
     * @method        CarbonImmutable              ceilMillennium(float $precision = 1)                                                 Ceil the current instance millennium with given precision.
     * @method        CarbonImmutable              ceilMillennia(float $precision = 1)                                                  Ceil the current instance millennium with given precision.
     * @method        CarbonImmutable              roundCentury(float $precision = 1, string $function = "round")                       Round the current instance century with given precision using the given function.
     * @method        CarbonImmutable              roundCenturies(float $precision = 1, string $function = "round")                     Round the current instance century with given precision using the given function.
     * @method        CarbonImmutable              floorCentury(float $precision = 1)                                                   Truncate the current instance century with given precision.
     * @method        CarbonImmutable              floorCenturies(float $precision = 1)                                                 Truncate the current instance century with given precision.
     * @method        CarbonImmutable              ceilCentury(float $precision = 1)                                                    Ceil the current instance century with given precision.
     * @method        CarbonImmutable              ceilCenturies(float $precision = 1)                                                  Ceil the current instance century with given precision.
     * @method        CarbonImmutable              roundDecade(float $precision = 1, string $function = "round")                        Round the current instance decade with given precision using the given function.
     * @method        CarbonImmutable              roundDecades(float $precision = 1, string $function = "round")                       Round the current instance decade with given precision using the given function.
     * @method        CarbonImmutable              floorDecade(float $precision = 1)                                                    Truncate the current instance decade with given precision.
     * @method        CarbonImmutable              floorDecades(float $precision = 1)                                                   Truncate the current instance decade with given precision.
     * @method        CarbonImmutable              ceilDecade(float $precision = 1)                                                     Ceil the current instance decade with given precision.
     * @method        CarbonImmutable              ceilDecades(float $precision = 1)                                                    Ceil the current instance decade with given precision.
     * @method        CarbonImmutable              roundQuarter(float $precision = 1, string $function = "round")                       Round the current instance quarter with given precision using the given function.
     * @method        CarbonImmutable              roundQuarters(float $precision = 1, string $function = "round")                      Round the current instance quarter with given precision using the given function.
     * @method        CarbonImmutable              floorQuarter(float $precision = 1)                                                   Truncate the current instance quarter with given precision.
     * @method        CarbonImmutable              floorQuarters(float $precision = 1)                                                  Truncate the current instance quarter with given precision.
     * @method        CarbonImmutable              ceilQuarter(float $precision = 1)                                                    Ceil the current instance quarter with given precision.
     * @method        CarbonImmutable              ceilQuarters(float $precision = 1)                                                   Ceil the current instance quarter with given precision.
     * @method        CarbonImmutable              roundMillisecond(float $precision = 1, string $function = "round")                   Round the current instance millisecond with given precision using the given function.
     * @method        CarbonImmutable              roundMilliseconds(float $precision = 1, string $function = "round")                  Round the current instance millisecond with given precision using the given function.
     * @method        CarbonImmutable              floorMillisecond(float $precision = 1)                                               Truncate the current instance millisecond with given precision.
     * @method        CarbonImmutable              floorMilliseconds(float $precision = 1)                                              Truncate the current instance millisecond with given precision.
     * @method        CarbonImmutable              ceilMillisecond(float $precision = 1)                                                Ceil the current instance millisecond with given precision.
     * @method        CarbonImmutable              ceilMilliseconds(float $precision = 1)                                               Ceil the current instance millisecond with given precision.
     * @method        CarbonImmutable              roundMicrosecond(float $precision = 1, string $function = "round")                   Round the current instance microsecond with given precision using the given function.
     * @method        CarbonImmutable              roundMicroseconds(float $precision = 1, string $function = "round")                  Round the current instance microsecond with given precision using the given function.
     * @method        CarbonImmutable              floorMicrosecond(float $precision = 1)                                               Truncate the current instance microsecond with given precision.
     * @method        CarbonImmutable              floorMicroseconds(float $precision = 1)                                              Truncate the current instance microsecond with given precision.
     * @method        CarbonImmutable              ceilMicrosecond(float $precision = 1)                                                Ceil the current instance microsecond with given precision.
     * @method        CarbonImmutable              ceilMicroseconds(float $precision = 1)                                               Ceil the current instance microsecond with given precision.
     * @method        string                       shortAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)          Get the difference (short format, 'Absolute' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string                       longAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)           Get the difference (long format, 'Absolute' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string                       shortRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)          Get the difference (short format, 'Relative' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string                       longRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)           Get the difference (long format, 'Relative' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string                       shortRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)     Get the difference (short format, 'RelativeToNow' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string                       longRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)      Get the difference (long format, 'RelativeToNow' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string                       shortRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1)   Get the difference (short format, 'RelativeToOther' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string                       longRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1)    Get the difference (long format, 'RelativeToOther' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        static CarbonImmutable|false createFromFormat(string $format, string $time, string|DateTimeZone $timezone = null) Parse a string into a new CarbonImmutable object according to the specified format.
     * @method        static CarbonImmutable       __set_state(array $array)                                                            https://php.net/manual/en/datetime.set-state.php
     *
     * </autodoc>
     */
    class CarbonImmutable extends DateTimeImmutable implements CarbonInterface
    {
        use Date {
            __clone as dateTraitClone;
        }

        public function __clone()
        {
            $this->dateTraitClone();
            $this->endOfTime = false;
            $this->startOfTime = false;
        }

        /**
         * Create a very old date representing start of time.
         *
         * @return static
         */
        public static function startOfTime(): self
        {
            $date = static::parse('0001-01-01')->years(self::getStartOfTimeYear());
            $date->startOfTime = true;

            return $date;
        }

        /**
         * Create a very far date representing end of time.
         *
         * @return static
         */
        public static function endOfTime(): self
        {
            $date = static::parse('9999-12-31 23:59:59.999999')->years(self::getEndOfTimeYear());
            $date->endOfTime = true;

            return $date;
        }

        /**
         * @codeCoverageIgnore
         */
        private static function getEndOfTimeYear(): int
        {
            if (version_compare(PHP_VERSION, '7.3.0-dev', '<')) {
                return 145261681241552;
            }

            // Remove if https://bugs.php.net/bug.php?id=81107 is fixed
            if (version_compare(PHP_VERSION, '8.1.0-dev', '>=')) {
                return 1118290769066902787;
            }

            return PHP_INT_MAX;
        }

        /**
         * @codeCoverageIgnore
         */
        private static function getStartOfTimeYear(): int
        {
            if (version_compare(PHP_VERSION, '7.3.0-dev', '<')) {
                return -135908816449551;
            }

            // Remove if https://bugs.php.net/bug.php?id=81107 is fixed
            if (version_compare(PHP_VERSION, '8.1.0-dev', '>=')) {
                return -1118290769066898816;
            }

            return max(PHP_INT_MIN, -9223372036854773760);
        }
    }
  uploads-Carbon-src-Carbon-CarbonInterface.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon;

    use BadMethodCallException;
    use Carbon\Exceptions\BadComparisonUnitException;
    use Carbon\Exceptions\ImmutableException;
    use Carbon\Exceptions\InvalidDateException;
    use Carbon\Exceptions\InvalidFormatException;
    use Carbon\Exceptions\UnknownGetterException;
    use Carbon\Exceptions\UnknownMethodException;
    use Carbon\Exceptions\UnknownSetterException;
    use Closure;
    use DateInterval;
    use DateTime;
    use DateTimeImmutable;
    use DateTimeInterface;
    use DateTimeZone;
    use JsonSerializable;
    use ReflectionException;
    use ReturnTypeWillChange;
    use Symfony\Component\Translation\TranslatorInterface;
    use Throwable;

    /**
     * Common interface for Carbon and CarbonImmutable.
     *
     * <autodoc generated by `composer phpdoc`>
     *
     * @property      int              $year
     * @property      int              $yearIso
     * @property      int              $month
     * @property      int              $day
     * @property      int              $hour
     * @property      int              $minute
     * @property      int              $second
     * @property      int              $micro
     * @property      int              $microsecond
     * @property      int|float|string $timestamp                                                                         seconds since the Unix Epoch
     * @property      string           $englishDayOfWeek                                                                  the day of week in English
     * @property      string           $shortEnglishDayOfWeek                                                             the abbreviated day of week in English
     * @property      string           $englishMonth                                                                      the month in English
     * @property      string           $shortEnglishMonth                                                                 the abbreviated month in English
     * @property      string           $localeDayOfWeek                                                                   the day of week in current locale LC_TIME
     * @property      string           $shortLocaleDayOfWeek                                                              the abbreviated day of week in current locale LC_TIME
     * @property      string           $localeMonth                                                                       the month in current locale LC_TIME
     * @property      string           $shortLocaleMonth                                                                  the abbreviated month in current locale LC_TIME
     * @property      int              $milliseconds
     * @property      int              $millisecond
     * @property      int              $milli
     * @property      int              $week                                                                              1 through 53
     * @property      int              $isoWeek                                                                           1 through 53
     * @property      int              $weekYear                                                                          year according to week format
     * @property      int              $isoWeekYear                                                                       year according to ISO week format
     * @property      int              $dayOfYear                                                                         1 through 366
     * @property      int              $age                                                                               does a diffInYears() with default parameters
     * @property      int              $offset                                                                            the timezone offset in seconds from UTC
     * @property      int              $offsetMinutes                                                                     the timezone offset in minutes from UTC
     * @property      int              $offsetHours                                                                       the timezone offset in hours from UTC
     * @property      CarbonTimeZone   $timezone                                                                          the current timezone
     * @property      CarbonTimeZone   $tz                                                                                alias of $timezone
     * @property-read int              $dayOfWeek                                                                         0 (for Sunday) through 6 (for Saturday)
     * @property-read int              $dayOfWeekIso                                                                      1 (for Monday) through 7 (for Sunday)
     * @property-read int              $weekOfYear                                                                        ISO-8601 week number of year, weeks starting on Monday
     * @property-read int              $daysInMonth                                                                       number of days in the given month
     * @property-read string           $latinMeridiem                                                                     "am"/"pm" (Ante meridiem or Post meridiem latin lowercase mark)
     * @property-read string           $latinUpperMeridiem                                                                "AM"/"PM" (Ante meridiem or Post meridiem latin uppercase mark)
     * @property-read string           $timezoneAbbreviatedName                                                           the current timezone abbreviated name
     * @property-read string           $tzAbbrName                                                                        alias of $timezoneAbbreviatedName
     * @property-read string           $dayName                                                                           long name of weekday translated according to Carbon locale, in english if no translation available for current language
     * @property-read string           $shortDayName                                                                      short name of weekday translated according to Carbon locale, in english if no translation available for current language
     * @property-read string           $minDayName                                                                        very short name of weekday translated according to Carbon locale, in english if no translation available for current language
     * @property-read string           $monthName                                                                         long name of month translated according to Carbon locale, in english if no translation available for current language
     * @property-read string           $shortMonthName                                                                    short name of month translated according to Carbon locale, in english if no translation available for current language
     * @property-read string           $meridiem                                                                          lowercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
     * @property-read string           $upperMeridiem                                                                     uppercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
     * @property-read int              $noZeroHour                                                                        current hour from 1 to 24
     * @property-read int              $weeksInYear                                                                       51 through 53
     * @property-read int              $isoWeeksInYear                                                                    51 through 53
     * @property-read int              $weekOfMonth                                                                       1 through 5
     * @property-read int              $weekNumberInMonth                                                                 1 through 5
     * @property-read int              $firstWeekDay                                                                      0 through 6
     * @property-read int              $lastWeekDay                                                                       0 through 6
     * @property-read int              $daysInYear                                                                        365 or 366
     * @property-read int              $quarter                                                                           the quarter of this instance, 1 - 4
     * @property-read int              $decade                                                                            the decade of this instance
     * @property-read int              $century                                                                           the century of this instance
     * @property-read int              $millennium                                                                        the millennium of this instance
     * @property-read bool             $dst                                                                               daylight savings time indicator, true if DST, false otherwise
     * @property-read bool             $local                                                                             checks if the timezone is local, true if local, false otherwise
     * @property-read bool             $utc                                                                               checks if the timezone is UTC, true if UTC, false otherwise
     * @property-read string           $timezoneName                                                                      the current timezone name
     * @property-read string           $tzName                                                                            alias of $timezoneName
     * @property-read string           $locale                                                                            locale of the current instance
     *
     * @method        bool             isUtc()                                                                            Check if the current instance has UTC timezone. (Both isUtc and isUTC cases are valid.)
     * @method        bool             isLocal()                                                                          Check if the current instance has non-UTC timezone.
     * @method        bool             isValid()                                                                          Check if the current instance is a valid date.
     * @method        bool             isDST()                                                                            Check if the current instance is in a daylight saving time.
     * @method        bool             isSunday()                                                                         Checks if the instance day is sunday.
     * @method        bool             isMonday()                                                                         Checks if the instance day is monday.
     * @method        bool             isTuesday()                                                                        Checks if the instance day is tuesday.
     * @method        bool             isWednesday()                                                                      Checks if the instance day is wednesday.
     * @method        bool             isThursday()                                                                       Checks if the instance day is thursday.
     * @method        bool             isFriday()                                                                         Checks if the instance day is friday.
     * @method        bool             isSaturday()                                                                       Checks if the instance day is saturday.
     * @method        bool             isSameYear(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same year as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentYear()                                                                    Checks if the instance is in the same year as the current moment.
     * @method        bool             isNextYear()                                                                       Checks if the instance is in the same year as the current moment next year.
     * @method        bool             isLastYear()                                                                       Checks if the instance is in the same year as the current moment last year.
     * @method        bool             isSameWeek(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same week as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentWeek()                                                                    Checks if the instance is in the same week as the current moment.
     * @method        bool             isNextWeek()                                                                       Checks if the instance is in the same week as the current moment next week.
     * @method        bool             isLastWeek()                                                                       Checks if the instance is in the same week as the current moment last week.
     * @method        bool             isSameDay(Carbon|DateTimeInterface|string|null $date = null)                       Checks if the given date is in the same day as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentDay()                                                                     Checks if the instance is in the same day as the current moment.
     * @method        bool             isNextDay()                                                                        Checks if the instance is in the same day as the current moment next day.
     * @method        bool             isLastDay()                                                                        Checks if the instance is in the same day as the current moment last day.
     * @method        bool             isSameHour(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same hour as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentHour()                                                                    Checks if the instance is in the same hour as the current moment.
     * @method        bool             isNextHour()                                                                       Checks if the instance is in the same hour as the current moment next hour.
     * @method        bool             isLastHour()                                                                       Checks if the instance is in the same hour as the current moment last hour.
     * @method        bool             isSameMinute(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same minute as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentMinute()                                                                  Checks if the instance is in the same minute as the current moment.
     * @method        bool             isNextMinute()                                                                     Checks if the instance is in the same minute as the current moment next minute.
     * @method        bool             isLastMinute()                                                                     Checks if the instance is in the same minute as the current moment last minute.
     * @method        bool             isSameSecond(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same second as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentSecond()                                                                  Checks if the instance is in the same second as the current moment.
     * @method        bool             isNextSecond()                                                                     Checks if the instance is in the same second as the current moment next second.
     * @method        bool             isLastSecond()                                                                     Checks if the instance is in the same second as the current moment last second.
     * @method        bool             isSameMicro(Carbon|DateTimeInterface|string|null $date = null)                     Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentMicro()                                                                   Checks if the instance is in the same microsecond as the current moment.
     * @method        bool             isNextMicro()                                                                      Checks if the instance is in the same microsecond as the current moment next microsecond.
     * @method        bool             isLastMicro()                                                                      Checks if the instance is in the same microsecond as the current moment last microsecond.
     * @method        bool             isSameMicrosecond(Carbon|DateTimeInterface|string|null $date = null)               Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentMicrosecond()                                                             Checks if the instance is in the same microsecond as the current moment.
     * @method        bool             isNextMicrosecond()                                                                Checks if the instance is in the same microsecond as the current moment next microsecond.
     * @method        bool             isLastMicrosecond()                                                                Checks if the instance is in the same microsecond as the current moment last microsecond.
     * @method        bool             isCurrentMonth()                                                                   Checks if the instance is in the same month as the current moment.
     * @method        bool             isNextMonth()                                                                      Checks if the instance is in the same month as the current moment next month.
     * @method        bool             isLastMonth()                                                                      Checks if the instance is in the same month as the current moment last month.
     * @method        bool             isCurrentQuarter()                                                                 Checks if the instance is in the same quarter as the current moment.
     * @method        bool             isNextQuarter()                                                                    Checks if the instance is in the same quarter as the current moment next quarter.
     * @method        bool             isLastQuarter()                                                                    Checks if the instance is in the same quarter as the current moment last quarter.
     * @method        bool             isSameDecade(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same decade as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentDecade()                                                                  Checks if the instance is in the same decade as the current moment.
     * @method        bool             isNextDecade()                                                                     Checks if the instance is in the same decade as the current moment next decade.
     * @method        bool             isLastDecade()                                                                     Checks if the instance is in the same decade as the current moment last decade.
     * @method        bool             isSameCentury(Carbon|DateTimeInterface|string|null $date = null)                   Checks if the given date is in the same century as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentCentury()                                                                 Checks if the instance is in the same century as the current moment.
     * @method        bool             isNextCentury()                                                                    Checks if the instance is in the same century as the current moment next century.
     * @method        bool             isLastCentury()                                                                    Checks if the instance is in the same century as the current moment last century.
     * @method        bool             isSameMillennium(Carbon|DateTimeInterface|string|null $date = null)                Checks if the given date is in the same millennium as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentMillennium()                                                              Checks if the instance is in the same millennium as the current moment.
     * @method        bool             isNextMillennium()                                                                 Checks if the instance is in the same millennium as the current moment next millennium.
     * @method        bool             isLastMillennium()                                                                 Checks if the instance is in the same millennium as the current moment last millennium.
     * @method        CarbonInterface  years(int $value)                                                                  Set current instance year to the given value.
     * @method        CarbonInterface  year(int $value)                                                                   Set current instance year to the given value.
     * @method        CarbonInterface  setYears(int $value)                                                               Set current instance year to the given value.
     * @method        CarbonInterface  setYear(int $value)                                                                Set current instance year to the given value.
     * @method        CarbonInterface  months(int $value)                                                                 Set current instance month to the given value.
     * @method        CarbonInterface  month(int $value)                                                                  Set current instance month to the given value.
     * @method        CarbonInterface  setMonths(int $value)                                                              Set current instance month to the given value.
     * @method        CarbonInterface  setMonth(int $value)                                                               Set current instance month to the given value.
     * @method        CarbonInterface  days(int $value)                                                                   Set current instance day to the given value.
     * @method        CarbonInterface  day(int $value)                                                                    Set current instance day to the given value.
     * @method        CarbonInterface  setDays(int $value)                                                                Set current instance day to the given value.
     * @method        CarbonInterface  setDay(int $value)                                                                 Set current instance day to the given value.
     * @method        CarbonInterface  hours(int $value)                                                                  Set current instance hour to the given value.
     * @method        CarbonInterface  hour(int $value)                                                                   Set current instance hour to the given value.
     * @method        CarbonInterface  setHours(int $value)                                                               Set current instance hour to the given value.
     * @method        CarbonInterface  setHour(int $value)                                                                Set current instance hour to the given value.
     * @method        CarbonInterface  minutes(int $value)                                                                Set current instance minute to the given value.
     * @method        CarbonInterface  minute(int $value)                                                                 Set current instance minute to the given value.
     * @method        CarbonInterface  setMinutes(int $value)                                                             Set current instance minute to the given value.
     * @method        CarbonInterface  setMinute(int $value)                                                              Set current instance minute to the given value.
     * @method        CarbonInterface  seconds(int $value)                                                                Set current instance second to the given value.
     * @method        CarbonInterface  second(int $value)                                                                 Set current instance second to the given value.
     * @method        CarbonInterface  setSeconds(int $value)                                                             Set current instance second to the given value.
     * @method        CarbonInterface  setSecond(int $value)                                                              Set current instance second to the given value.
     * @method        CarbonInterface  millis(int $value)                                                                 Set current instance millisecond to the given value.
     * @method        CarbonInterface  milli(int $value)                                                                  Set current instance millisecond to the given value.
     * @method        CarbonInterface  setMillis(int $value)                                                              Set current instance millisecond to the given value.
     * @method        CarbonInterface  setMilli(int $value)                                                               Set current instance millisecond to the given value.
     * @method        CarbonInterface  milliseconds(int $value)                                                           Set current instance millisecond to the given value.
     * @method        CarbonInterface  millisecond(int $value)                                                            Set current instance millisecond to the given value.
     * @method        CarbonInterface  setMilliseconds(int $value)                                                        Set current instance millisecond to the given value.
     * @method        CarbonInterface  setMillisecond(int $value)                                                         Set current instance millisecond to the given value.
     * @method        CarbonInterface  micros(int $value)                                                                 Set current instance microsecond to the given value.
     * @method        CarbonInterface  micro(int $value)                                                                  Set current instance microsecond to the given value.
     * @method        CarbonInterface  setMicros(int $value)                                                              Set current instance microsecond to the given value.
     * @method        CarbonInterface  setMicro(int $value)                                                               Set current instance microsecond to the given value.
     * @method        CarbonInterface  microseconds(int $value)                                                           Set current instance microsecond to the given value.
     * @method        CarbonInterface  microsecond(int $value)                                                            Set current instance microsecond to the given value.
     * @method        CarbonInterface  setMicroseconds(int $value)                                                        Set current instance microsecond to the given value.
     * @method        CarbonInterface  setMicrosecond(int $value)                                                         Set current instance microsecond to the given value.
     * @method        CarbonInterface  addYears(int $value = 1)                                                           Add years (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addYear()                                                                          Add one year to the instance (using date interval).
     * @method        CarbonInterface  subYears(int $value = 1)                                                           Sub years (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subYear()                                                                          Sub one year to the instance (using date interval).
     * @method        CarbonInterface  addYearsWithOverflow(int $value = 1)                                               Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addYearWithOverflow()                                                              Add one year to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subYearsWithOverflow(int $value = 1)                                               Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subYearWithOverflow()                                                              Sub one year to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addYearsWithoutOverflow(int $value = 1)                                            Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addYearWithoutOverflow()                                                           Add one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subYearsWithoutOverflow(int $value = 1)                                            Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subYearWithoutOverflow()                                                           Sub one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addYearsWithNoOverflow(int $value = 1)                                             Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addYearWithNoOverflow()                                                            Add one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subYearsWithNoOverflow(int $value = 1)                                             Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subYearWithNoOverflow()                                                            Sub one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addYearsNoOverflow(int $value = 1)                                                 Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addYearNoOverflow()                                                                Add one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subYearsNoOverflow(int $value = 1)                                                 Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subYearNoOverflow()                                                                Sub one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMonths(int $value = 1)                                                          Add months (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addMonth()                                                                         Add one month to the instance (using date interval).
     * @method        CarbonInterface  subMonths(int $value = 1)                                                          Sub months (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subMonth()                                                                         Sub one month to the instance (using date interval).
     * @method        CarbonInterface  addMonthsWithOverflow(int $value = 1)                                              Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addMonthWithOverflow()                                                             Add one month to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subMonthsWithOverflow(int $value = 1)                                              Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subMonthWithOverflow()                                                             Sub one month to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addMonthsWithoutOverflow(int $value = 1)                                           Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMonthWithoutOverflow()                                                          Add one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMonthsWithoutOverflow(int $value = 1)                                           Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMonthWithoutOverflow()                                                          Sub one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMonthsWithNoOverflow(int $value = 1)                                            Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMonthWithNoOverflow()                                                           Add one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMonthsWithNoOverflow(int $value = 1)                                            Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMonthWithNoOverflow()                                                           Sub one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMonthsNoOverflow(int $value = 1)                                                Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMonthNoOverflow()                                                               Add one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMonthsNoOverflow(int $value = 1)                                                Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMonthNoOverflow()                                                               Sub one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addDays(int $value = 1)                                                            Add days (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addDay()                                                                           Add one day to the instance (using date interval).
     * @method        CarbonInterface  subDays(int $value = 1)                                                            Sub days (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subDay()                                                                           Sub one day to the instance (using date interval).
     * @method        CarbonInterface  addHours(int $value = 1)                                                           Add hours (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addHour()                                                                          Add one hour to the instance (using date interval).
     * @method        CarbonInterface  subHours(int $value = 1)                                                           Sub hours (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subHour()                                                                          Sub one hour to the instance (using date interval).
     * @method        CarbonInterface  addMinutes(int $value = 1)                                                         Add minutes (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addMinute()                                                                        Add one minute to the instance (using date interval).
     * @method        CarbonInterface  subMinutes(int $value = 1)                                                         Sub minutes (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subMinute()                                                                        Sub one minute to the instance (using date interval).
     * @method        CarbonInterface  addSeconds(int $value = 1)                                                         Add seconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addSecond()                                                                        Add one second to the instance (using date interval).
     * @method        CarbonInterface  subSeconds(int $value = 1)                                                         Sub seconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subSecond()                                                                        Sub one second to the instance (using date interval).
     * @method        CarbonInterface  addMillis(int $value = 1)                                                          Add milliseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addMilli()                                                                         Add one millisecond to the instance (using date interval).
     * @method        CarbonInterface  subMillis(int $value = 1)                                                          Sub milliseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subMilli()                                                                         Sub one millisecond to the instance (using date interval).
     * @method        CarbonInterface  addMilliseconds(int $value = 1)                                                    Add milliseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addMillisecond()                                                                   Add one millisecond to the instance (using date interval).
     * @method        CarbonInterface  subMilliseconds(int $value = 1)                                                    Sub milliseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subMillisecond()                                                                   Sub one millisecond to the instance (using date interval).
     * @method        CarbonInterface  addMicros(int $value = 1)                                                          Add microseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addMicro()                                                                         Add one microsecond to the instance (using date interval).
     * @method        CarbonInterface  subMicros(int $value = 1)                                                          Sub microseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subMicro()                                                                         Sub one microsecond to the instance (using date interval).
     * @method        CarbonInterface  addMicroseconds(int $value = 1)                                                    Add microseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addMicrosecond()                                                                   Add one microsecond to the instance (using date interval).
     * @method        CarbonInterface  subMicroseconds(int $value = 1)                                                    Sub microseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subMicrosecond()                                                                   Sub one microsecond to the instance (using date interval).
     * @method        CarbonInterface  addMillennia(int $value = 1)                                                       Add millennia (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addMillennium()                                                                    Add one millennium to the instance (using date interval).
     * @method        CarbonInterface  subMillennia(int $value = 1)                                                       Sub millennia (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subMillennium()                                                                    Sub one millennium to the instance (using date interval).
     * @method        CarbonInterface  addMillenniaWithOverflow(int $value = 1)                                           Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addMillenniumWithOverflow()                                                        Add one millennium to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subMillenniaWithOverflow(int $value = 1)                                           Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subMillenniumWithOverflow()                                                        Sub one millennium to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addMillenniaWithoutOverflow(int $value = 1)                                        Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMillenniumWithoutOverflow()                                                     Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMillenniaWithoutOverflow(int $value = 1)                                        Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMillenniumWithoutOverflow()                                                     Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMillenniaWithNoOverflow(int $value = 1)                                         Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMillenniumWithNoOverflow()                                                      Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMillenniaWithNoOverflow(int $value = 1)                                         Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMillenniumWithNoOverflow()                                                      Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMillenniaNoOverflow(int $value = 1)                                             Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMillenniumNoOverflow()                                                          Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMillenniaNoOverflow(int $value = 1)                                             Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMillenniumNoOverflow()                                                          Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addCenturies(int $value = 1)                                                       Add centuries (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addCentury()                                                                       Add one century to the instance (using date interval).
     * @method        CarbonInterface  subCenturies(int $value = 1)                                                       Sub centuries (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subCentury()                                                                       Sub one century to the instance (using date interval).
     * @method        CarbonInterface  addCenturiesWithOverflow(int $value = 1)                                           Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addCenturyWithOverflow()                                                           Add one century to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subCenturiesWithOverflow(int $value = 1)                                           Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subCenturyWithOverflow()                                                           Sub one century to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addCenturiesWithoutOverflow(int $value = 1)                                        Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addCenturyWithoutOverflow()                                                        Add one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subCenturiesWithoutOverflow(int $value = 1)                                        Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subCenturyWithoutOverflow()                                                        Sub one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addCenturiesWithNoOverflow(int $value = 1)                                         Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addCenturyWithNoOverflow()                                                         Add one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subCenturiesWithNoOverflow(int $value = 1)                                         Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subCenturyWithNoOverflow()                                                         Sub one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addCenturiesNoOverflow(int $value = 1)                                             Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addCenturyNoOverflow()                                                             Add one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subCenturiesNoOverflow(int $value = 1)                                             Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subCenturyNoOverflow()                                                             Sub one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addDecades(int $value = 1)                                                         Add decades (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addDecade()                                                                        Add one decade to the instance (using date interval).
     * @method        CarbonInterface  subDecades(int $value = 1)                                                         Sub decades (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subDecade()                                                                        Sub one decade to the instance (using date interval).
     * @method        CarbonInterface  addDecadesWithOverflow(int $value = 1)                                             Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addDecadeWithOverflow()                                                            Add one decade to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subDecadesWithOverflow(int $value = 1)                                             Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subDecadeWithOverflow()                                                            Sub one decade to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addDecadesWithoutOverflow(int $value = 1)                                          Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addDecadeWithoutOverflow()                                                         Add one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subDecadesWithoutOverflow(int $value = 1)                                          Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subDecadeWithoutOverflow()                                                         Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addDecadesWithNoOverflow(int $value = 1)                                           Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addDecadeWithNoOverflow()                                                          Add one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subDecadesWithNoOverflow(int $value = 1)                                           Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subDecadeWithNoOverflow()                                                          Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addDecadesNoOverflow(int $value = 1)                                               Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addDecadeNoOverflow()                                                              Add one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subDecadesNoOverflow(int $value = 1)                                               Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subDecadeNoOverflow()                                                              Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addQuarters(int $value = 1)                                                        Add quarters (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addQuarter()                                                                       Add one quarter to the instance (using date interval).
     * @method        CarbonInterface  subQuarters(int $value = 1)                                                        Sub quarters (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subQuarter()                                                                       Sub one quarter to the instance (using date interval).
     * @method        CarbonInterface  addQuartersWithOverflow(int $value = 1)                                            Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addQuarterWithOverflow()                                                           Add one quarter to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subQuartersWithOverflow(int $value = 1)                                            Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subQuarterWithOverflow()                                                           Sub one quarter to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addQuartersWithoutOverflow(int $value = 1)                                         Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addQuarterWithoutOverflow()                                                        Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subQuartersWithoutOverflow(int $value = 1)                                         Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subQuarterWithoutOverflow()                                                        Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addQuartersWithNoOverflow(int $value = 1)                                          Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addQuarterWithNoOverflow()                                                         Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subQuartersWithNoOverflow(int $value = 1)                                          Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subQuarterWithNoOverflow()                                                         Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addQuartersNoOverflow(int $value = 1)                                              Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addQuarterNoOverflow()                                                             Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subQuartersNoOverflow(int $value = 1)                                              Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subQuarterNoOverflow()                                                             Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addWeeks(int $value = 1)                                                           Add weeks (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addWeek()                                                                          Add one week to the instance (using date interval).
     * @method        CarbonInterface  subWeeks(int $value = 1)                                                           Sub weeks (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subWeek()                                                                          Sub one week to the instance (using date interval).
     * @method        CarbonInterface  addWeekdays(int $value = 1)                                                        Add weekdays (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addWeekday()                                                                       Add one weekday to the instance (using date interval).
     * @method        CarbonInterface  subWeekdays(int $value = 1)                                                        Sub weekdays (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subWeekday()                                                                       Sub one weekday to the instance (using date interval).
     * @method        CarbonInterface  addRealMicros(int $value = 1)                                                      Add microseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealMicro()                                                                     Add one microsecond to the instance (using timestamp).
     * @method        CarbonInterface  subRealMicros(int $value = 1)                                                      Sub microseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealMicro()                                                                     Sub one microsecond to the instance (using timestamp).
     * @method        CarbonPeriod     microsUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
     * @method        CarbonInterface  addRealMicroseconds(int $value = 1)                                                Add microseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealMicrosecond()                                                               Add one microsecond to the instance (using timestamp).
     * @method        CarbonInterface  subRealMicroseconds(int $value = 1)                                                Sub microseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealMicrosecond()                                                               Sub one microsecond to the instance (using timestamp).
     * @method        CarbonPeriod     microsecondsUntil($endDate = null, int $factor = 1)                                Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
     * @method        CarbonInterface  addRealMillis(int $value = 1)                                                      Add milliseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealMilli()                                                                     Add one millisecond to the instance (using timestamp).
     * @method        CarbonInterface  subRealMillis(int $value = 1)                                                      Sub milliseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealMilli()                                                                     Sub one millisecond to the instance (using timestamp).
     * @method        CarbonPeriod     millisUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
     * @method        CarbonInterface  addRealMilliseconds(int $value = 1)                                                Add milliseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealMillisecond()                                                               Add one millisecond to the instance (using timestamp).
     * @method        CarbonInterface  subRealMilliseconds(int $value = 1)                                                Sub milliseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealMillisecond()                                                               Sub one millisecond to the instance (using timestamp).
     * @method        CarbonPeriod     millisecondsUntil($endDate = null, int $factor = 1)                                Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
     * @method        CarbonInterface  addRealSeconds(int $value = 1)                                                     Add seconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealSecond()                                                                    Add one second to the instance (using timestamp).
     * @method        CarbonInterface  subRealSeconds(int $value = 1)                                                     Sub seconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealSecond()                                                                    Sub one second to the instance (using timestamp).
     * @method        CarbonPeriod     secondsUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each second or every X seconds if a factor is given.
     * @method        CarbonInterface  addRealMinutes(int $value = 1)                                                     Add minutes (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealMinute()                                                                    Add one minute to the instance (using timestamp).
     * @method        CarbonInterface  subRealMinutes(int $value = 1)                                                     Sub minutes (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealMinute()                                                                    Sub one minute to the instance (using timestamp).
     * @method        CarbonPeriod     minutesUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each minute or every X minutes if a factor is given.
     * @method        CarbonInterface  addRealHours(int $value = 1)                                                       Add hours (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealHour()                                                                      Add one hour to the instance (using timestamp).
     * @method        CarbonInterface  subRealHours(int $value = 1)                                                       Sub hours (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealHour()                                                                      Sub one hour to the instance (using timestamp).
     * @method        CarbonPeriod     hoursUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each hour or every X hours if a factor is given.
     * @method        CarbonInterface  addRealDays(int $value = 1)                                                        Add days (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealDay()                                                                       Add one day to the instance (using timestamp).
     * @method        CarbonInterface  subRealDays(int $value = 1)                                                        Sub days (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealDay()                                                                       Sub one day to the instance (using timestamp).
     * @method        CarbonPeriod     daysUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each day or every X days if a factor is given.
     * @method        CarbonInterface  addRealWeeks(int $value = 1)                                                       Add weeks (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealWeek()                                                                      Add one week to the instance (using timestamp).
     * @method        CarbonInterface  subRealWeeks(int $value = 1)                                                       Sub weeks (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealWeek()                                                                      Sub one week to the instance (using timestamp).
     * @method        CarbonPeriod     weeksUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each week or every X weeks if a factor is given.
     * @method        CarbonInterface  addRealMonths(int $value = 1)                                                      Add months (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealMonth()                                                                     Add one month to the instance (using timestamp).
     * @method        CarbonInterface  subRealMonths(int $value = 1)                                                      Sub months (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealMonth()                                                                     Sub one month to the instance (using timestamp).
     * @method        CarbonPeriod     monthsUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each month or every X months if a factor is given.
     * @method        CarbonInterface  addRealQuarters(int $value = 1)                                                    Add quarters (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealQuarter()                                                                   Add one quarter to the instance (using timestamp).
     * @method        CarbonInterface  subRealQuarters(int $value = 1)                                                    Sub quarters (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealQuarter()                                                                   Sub one quarter to the instance (using timestamp).
     * @method        CarbonPeriod     quartersUntil($endDate = null, int $factor = 1)                                    Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each quarter or every X quarters if a factor is given.
     * @method        CarbonInterface  addRealYears(int $value = 1)                                                       Add years (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealYear()                                                                      Add one year to the instance (using timestamp).
     * @method        CarbonInterface  subRealYears(int $value = 1)                                                       Sub years (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealYear()                                                                      Sub one year to the instance (using timestamp).
     * @method        CarbonPeriod     yearsUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each year or every X years if a factor is given.
     * @method        CarbonInterface  addRealDecades(int $value = 1)                                                     Add decades (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealDecade()                                                                    Add one decade to the instance (using timestamp).
     * @method        CarbonInterface  subRealDecades(int $value = 1)                                                     Sub decades (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealDecade()                                                                    Sub one decade to the instance (using timestamp).
     * @method        CarbonPeriod     decadesUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each decade or every X decades if a factor is given.
     * @method        CarbonInterface  addRealCenturies(int $value = 1)                                                   Add centuries (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealCentury()                                                                   Add one century to the instance (using timestamp).
     * @method        CarbonInterface  subRealCenturies(int $value = 1)                                                   Sub centuries (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealCentury()                                                                   Sub one century to the instance (using timestamp).
     * @method        CarbonPeriod     centuriesUntil($endDate = null, int $factor = 1)                                   Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each century or every X centuries if a factor is given.
     * @method        CarbonInterface  addRealMillennia(int $value = 1)                                                   Add millennia (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealMillennium()                                                                Add one millennium to the instance (using timestamp).
     * @method        CarbonInterface  subRealMillennia(int $value = 1)                                                   Sub millennia (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealMillennium()                                                                Sub one millennium to the instance (using timestamp).
     * @method        CarbonPeriod     millenniaUntil($endDate = null, int $factor = 1)                                   Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millennium or every X millennia if a factor is given.
     * @method        CarbonInterface  roundYear(float $precision = 1, string $function = "round")                        Round the current instance year with given precision using the given function.
     * @method        CarbonInterface  roundYears(float $precision = 1, string $function = "round")                       Round the current instance year with given precision using the given function.
     * @method        CarbonInterface  floorYear(float $precision = 1)                                                    Truncate the current instance year with given precision.
     * @method        CarbonInterface  floorYears(float $precision = 1)                                                   Truncate the current instance year with given precision.
     * @method        CarbonInterface  ceilYear(float $precision = 1)                                                     Ceil the current instance year with given precision.
     * @method        CarbonInterface  ceilYears(float $precision = 1)                                                    Ceil the current instance year with given precision.
     * @method        CarbonInterface  roundMonth(float $precision = 1, string $function = "round")                       Round the current instance month with given precision using the given function.
     * @method        CarbonInterface  roundMonths(float $precision = 1, string $function = "round")                      Round the current instance month with given precision using the given function.
     * @method        CarbonInterface  floorMonth(float $precision = 1)                                                   Truncate the current instance month with given precision.
     * @method        CarbonInterface  floorMonths(float $precision = 1)                                                  Truncate the current instance month with given precision.
     * @method        CarbonInterface  ceilMonth(float $precision = 1)                                                    Ceil the current instance month with given precision.
     * @method        CarbonInterface  ceilMonths(float $precision = 1)                                                   Ceil the current instance month with given precision.
     * @method        CarbonInterface  roundDay(float $precision = 1, string $function = "round")                         Round the current instance day with given precision using the given function.
     * @method        CarbonInterface  roundDays(float $precision = 1, string $function = "round")                        Round the current instance day with given precision using the given function.
     * @method        CarbonInterface  floorDay(float $precision = 1)                                                     Truncate the current instance day with given precision.
     * @method        CarbonInterface  floorDays(float $precision = 1)                                                    Truncate the current instance day with given precision.
     * @method        CarbonInterface  ceilDay(float $precision = 1)                                                      Ceil the current instance day with given precision.
     * @method        CarbonInterface  ceilDays(float $precision = 1)                                                     Ceil the current instance day with given precision.
     * @method        CarbonInterface  roundHour(float $precision = 1, string $function = "round")                        Round the current instance hour with given precision using the given function.
     * @method        CarbonInterface  roundHours(float $precision = 1, string $function = "round")                       Round the current instance hour with given precision using the given function.
     * @method        CarbonInterface  floorHour(float $precision = 1)                                                    Truncate the current instance hour with given precision.
     * @method        CarbonInterface  floorHours(float $precision = 1)                                                   Truncate the current instance hour with given precision.
     * @method        CarbonInterface  ceilHour(float $precision = 1)                                                     Ceil the current instance hour with given precision.
     * @method        CarbonInterface  ceilHours(float $precision = 1)                                                    Ceil the current instance hour with given precision.
     * @method        CarbonInterface  roundMinute(float $precision = 1, string $function = "round")                      Round the current instance minute with given precision using the given function.
     * @method        CarbonInterface  roundMinutes(float $precision = 1, string $function = "round")                     Round the current instance minute with given precision using the given function.
     * @method        CarbonInterface  floorMinute(float $precision = 1)                                                  Truncate the current instance minute with given precision.
     * @method        CarbonInterface  floorMinutes(float $precision = 1)                                                 Truncate the current instance minute with given precision.
     * @method        CarbonInterface  ceilMinute(float $precision = 1)                                                   Ceil the current instance minute with given precision.
     * @method        CarbonInterface  ceilMinutes(float $precision = 1)                                                  Ceil the current instance minute with given precision.
     * @method        CarbonInterface  roundSecond(float $precision = 1, string $function = "round")                      Round the current instance second with given precision using the given function.
     * @method        CarbonInterface  roundSeconds(float $precision = 1, string $function = "round")                     Round the current instance second with given precision using the given function.
     * @method        CarbonInterface  floorSecond(float $precision = 1)                                                  Truncate the current instance second with given precision.
     * @method        CarbonInterface  floorSeconds(float $precision = 1)                                                 Truncate the current instance second with given precision.
     * @method        CarbonInterface  ceilSecond(float $precision = 1)                                                   Ceil the current instance second with given precision.
     * @method        CarbonInterface  ceilSeconds(float $precision = 1)                                                  Ceil the current instance second with given precision.
     * @method        CarbonInterface  roundMillennium(float $precision = 1, string $function = "round")                  Round the current instance millennium with given precision using the given function.
     * @method        CarbonInterface  roundMillennia(float $precision = 1, string $function = "round")                   Round the current instance millennium with given precision using the given function.
     * @method        CarbonInterface  floorMillennium(float $precision = 1)                                              Truncate the current instance millennium with given precision.
     * @method        CarbonInterface  floorMillennia(float $precision = 1)                                               Truncate the current instance millennium with given precision.
     * @method        CarbonInterface  ceilMillennium(float $precision = 1)                                               Ceil the current instance millennium with given precision.
     * @method        CarbonInterface  ceilMillennia(float $precision = 1)                                                Ceil the current instance millennium with given precision.
     * @method        CarbonInterface  roundCentury(float $precision = 1, string $function = "round")                     Round the current instance century with given precision using the given function.
     * @method        CarbonInterface  roundCenturies(float $precision = 1, string $function = "round")                   Round the current instance century with given precision using the given function.
     * @method        CarbonInterface  floorCentury(float $precision = 1)                                                 Truncate the current instance century with given precision.
     * @method        CarbonInterface  floorCenturies(float $precision = 1)                                               Truncate the current instance century with given precision.
     * @method        CarbonInterface  ceilCentury(float $precision = 1)                                                  Ceil the current instance century with given precision.
     * @method        CarbonInterface  ceilCenturies(float $precision = 1)                                                Ceil the current instance century with given precision.
     * @method        CarbonInterface  roundDecade(float $precision = 1, string $function = "round")                      Round the current instance decade with given precision using the given function.
     * @method        CarbonInterface  roundDecades(float $precision = 1, string $function = "round")                     Round the current instance decade with given precision using the given function.
     * @method        CarbonInterface  floorDecade(float $precision = 1)                                                  Truncate the current instance decade with given precision.
     * @method        CarbonInterface  floorDecades(float $precision = 1)                                                 Truncate the current instance decade with given precision.
     * @method        CarbonInterface  ceilDecade(float $precision = 1)                                                   Ceil the current instance decade with given precision.
     * @method        CarbonInterface  ceilDecades(float $precision = 1)                                                  Ceil the current instance decade with given precision.
     * @method        CarbonInterface  roundQuarter(float $precision = 1, string $function = "round")                     Round the current instance quarter with given precision using the given function.
     * @method        CarbonInterface  roundQuarters(float $precision = 1, string $function = "round")                    Round the current instance quarter with given precision using the given function.
     * @method        CarbonInterface  floorQuarter(float $precision = 1)                                                 Truncate the current instance quarter with given precision.
     * @method        CarbonInterface  floorQuarters(float $precision = 1)                                                Truncate the current instance quarter with given precision.
     * @method        CarbonInterface  ceilQuarter(float $precision = 1)                                                  Ceil the current instance quarter with given precision.
     * @method        CarbonInterface  ceilQuarters(float $precision = 1)                                                 Ceil the current instance quarter with given precision.
     * @method        CarbonInterface  roundMillisecond(float $precision = 1, string $function = "round")                 Round the current instance millisecond with given precision using the given function.
     * @method        CarbonInterface  roundMilliseconds(float $precision = 1, string $function = "round")                Round the current instance millisecond with given precision using the given function.
     * @method        CarbonInterface  floorMillisecond(float $precision = 1)                                             Truncate the current instance millisecond with given precision.
     * @method        CarbonInterface  floorMilliseconds(float $precision = 1)                                            Truncate the current instance millisecond with given precision.
     * @method        CarbonInterface  ceilMillisecond(float $precision = 1)                                              Ceil the current instance millisecond with given precision.
     * @method        CarbonInterface  ceilMilliseconds(float $precision = 1)                                             Ceil the current instance millisecond with given precision.
     * @method        CarbonInterface  roundMicrosecond(float $precision = 1, string $function = "round")                 Round the current instance microsecond with given precision using the given function.
     * @method        CarbonInterface  roundMicroseconds(float $precision = 1, string $function = "round")                Round the current instance microsecond with given precision using the given function.
     * @method        CarbonInterface  floorMicrosecond(float $precision = 1)                                             Truncate the current instance microsecond with given precision.
     * @method        CarbonInterface  floorMicroseconds(float $precision = 1)                                            Truncate the current instance microsecond with given precision.
     * @method        CarbonInterface  ceilMicrosecond(float $precision = 1)                                              Ceil the current instance microsecond with given precision.
     * @method        CarbonInterface  ceilMicroseconds(float $precision = 1)                                             Ceil the current instance microsecond with given precision.
     * @method        string           shortAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)        Get the difference (short format, 'Absolute' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string           longAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)         Get the difference (long format, 'Absolute' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string           shortRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)        Get the difference (short format, 'Relative' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string           longRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)         Get the difference (long format, 'Relative' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string           shortRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)   Get the difference (short format, 'RelativeToNow' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string           longRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)    Get the difference (long format, 'RelativeToNow' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string           shortRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1) Get the difference (short format, 'RelativeToOther' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string           longRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1)  Get the difference (long format, 'RelativeToOther' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     *
     * </autodoc>
     */
    interface CarbonInterface extends DateTimeInterface, JsonSerializable
    {
        /**
         * Diff wording options(expressed in octal).
         */
        public const NO_ZERO_DIFF = 01;
        public const JUST_NOW = 02;
        public const ONE_DAY_WORDS = 04;
        public const TWO_DAY_WORDS = 010;
        public const SEQUENTIAL_PARTS_ONLY = 020;
        public const ROUND = 040;
        public const FLOOR = 0100;
        public const CEIL = 0200;

        /**
         * Diff syntax options.
         */
        public const DIFF_ABSOLUTE = 1; // backward compatibility with true
        public const DIFF_RELATIVE_AUTO = 0; // backward compatibility with false
        public const DIFF_RELATIVE_TO_NOW = 2;
        public const DIFF_RELATIVE_TO_OTHER = 3;

        /**
         * Translate string options.
         */
        public const TRANSLATE_MONTHS = 1;
        public const TRANSLATE_DAYS = 2;
        public const TRANSLATE_UNITS = 4;
        public const TRANSLATE_MERIDIEM = 8;
        public const TRANSLATE_DIFF = 0x10;
        public const TRANSLATE_ALL = self::TRANSLATE_MONTHS | self::TRANSLATE_DAYS | self::TRANSLATE_UNITS | self::TRANSLATE_MERIDIEM | self::TRANSLATE_DIFF;

        /**
         * The day constants.
         */
        public const SUNDAY = 0;
        public const MONDAY = 1;
        public const TUESDAY = 2;
        public const WEDNESDAY = 3;
        public const THURSDAY = 4;
        public const FRIDAY = 5;
        public const SATURDAY = 6;

        /**
         * The month constants.
         * These aren't used by Carbon itself but exist for
         * convenience sake alone.
         */
        public const JANUARY = 1;
        public const FEBRUARY = 2;
        public const MARCH = 3;
        public const APRIL = 4;
        public const MAY = 5;
        public const JUNE = 6;
        public const JULY = 7;
        public const AUGUST = 8;
        public const SEPTEMBER = 9;
        public const OCTOBER = 10;
        public const NOVEMBER = 11;
        public const DECEMBER = 12;

        /**
         * Number of X in Y.
         */
        public const YEARS_PER_MILLENNIUM = 1000;
        public const YEARS_PER_CENTURY = 100;
        public const YEARS_PER_DECADE = 10;
        public const MONTHS_PER_YEAR = 12;
        public const MONTHS_PER_QUARTER = 3;
        public const WEEKS_PER_YEAR = 52;
        public const WEEKS_PER_MONTH = 4;
        public const DAYS_PER_YEAR = 365;
        public const DAYS_PER_WEEK = 7;
        public const HOURS_PER_DAY = 24;
        public const MINUTES_PER_HOUR = 60;
        public const SECONDS_PER_MINUTE = 60;
        public const MILLISECONDS_PER_SECOND = 1000;
        public const MICROSECONDS_PER_MILLISECOND = 1000;
        public const MICROSECONDS_PER_SECOND = 1000000;

        /**
         * Special settings to get the start of week from current locale culture.
         */
        public const WEEK_DAY_AUTO = 'auto';

        /**
         * RFC7231 DateTime format.
         *
         * @var string
         */
        public const RFC7231_FORMAT = 'D, d M Y H:i:s \G\M\T';

        /**
         * Default format to use for __toString method when type juggling occurs.
         *
         * @var string
         */
        public const DEFAULT_TO_STRING_FORMAT = 'Y-m-d H:i:s';

        /**
         * Format for converting mocked time, includes microseconds.
         *
         * @var string
         */
        public const MOCK_DATETIME_FORMAT = 'Y-m-d H:i:s.u';

        /**
         * Pattern detection for ->isoFormat and ::createFromIsoFormat.
         *
         * @var string
         */
        public const ISO_FORMAT_REGEXP = '(O[YMDHhms]|[Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY?|g{1,5}|G{1,5}|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?)';

        // <methods>

        /**
         * Dynamically handle calls to the class.
         *
         * @param string $method     magic method name called
         * @param array  $parameters parameters list
         *
         * @throws UnknownMethodException|BadMethodCallException|ReflectionException|Throwable
         *
         * @return mixed
         */
        public function __call($method, $parameters);

        /**
         * Dynamically handle calls to the class.
         *
         * @param string $method     magic method name called
         * @param array  $parameters parameters list
         *
         * @throws BadMethodCallException
         *
         * @return mixed
         */
        public static function __callStatic($method, $parameters);

        /**
         * Update constructedObjectId on cloned.
         */
        public function __clone();

        /**
         * Create a new Carbon instance.
         *
         * Please see the testing aids section (specifically static::setTestNow())
         * for more on the possibility of this constructor returning a test instance.
         *
         * @param DateTimeInterface|string|null $time
         * @param DateTimeZone|string|null      $tz
         *
         * @throws InvalidFormatException
         */
        public function __construct($time = null, $tz = null);

        /**
         * Show truthy properties on var_dump().
         *
         * @return array
         */
        public function __debugInfo();

        /**
         * Get a part of the Carbon object
         *
         * @param string $name
         *
         * @throws UnknownGetterException
         *
         * @return string|int|bool|DateTimeZone|null
         */
        public function __get($name);

        /**
         * Check if an attribute exists on the object
         *
         * @param string $name
         *
         * @return bool
         */
        public function __isset($name);

        /**
         * Set a part of the Carbon object
         *
         * @param string                  $name
         * @param string|int|DateTimeZone $value
         *
         * @throws UnknownSetterException|ReflectionException
         *
         * @return void
         */
        public function __set($name, $value);

        /**
         * The __set_state handler.
         *
         * @param string|array $dump
         *
         * @return static
         */
        #[ReturnTypeWillChange]
        public static function __set_state($dump);

        /**
         * Returns the list of properties to dump on serialize() called on.
         *
         * @return array
         */
        public function __sleep();

        /**
         * Format the instance as a string using the set format
         *
         * @example
         * ```
         * echo Carbon::now(); // Carbon instances can be casted to string
         * ```
         *
         * @return string
         */
        public function __toString();

        /**
         * Add given units or interval to the current instance.
         *
         * @example $date->add('hour', 3)
         * @example $date->add(15, 'days')
         * @example $date->add(CarbonInterval::days(4))
         *
         * @param string|DateInterval|Closure|CarbonConverterInterface $unit
         * @param int                                                  $value
         * @param bool|null                                            $overflow
         *
         * @return static
         */
        #[ReturnTypeWillChange]
        public function add($unit, $value = 1, $overflow = null);

        /**
         * Add seconds to the instance using timestamp. Positive $value travels
         * forward while negative $value travels into the past.
         *
         * @param string $unit
         * @param int    $value
         *
         * @return static
         */
        public function addRealUnit($unit, $value = 1);

        /**
         * Add given units to the current instance.
         *
         * @param string    $unit
         * @param int       $value
         * @param bool|null $overflow
         *
         * @return static
         */
        public function addUnit($unit, $value = 1, $overflow = null);

        /**
         * Add any unit to a new value without overflowing current other unit given.
         *
         * @param string $valueUnit    unit name to modify
         * @param int    $value        amount to add to the input unit
         * @param string $overflowUnit unit name to not overflow
         *
         * @return static
         */
        public function addUnitNoOverflow($valueUnit, $value, $overflowUnit);

        /**
         * Get the difference in a human readable format in the current locale from an other
         * instance given to now
         *
         * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
         *                           - 'syntax' entry (see below)
         *                           - 'short' entry (see below)
         *                           - 'parts' entry (see below)
         *                           - 'options' entry (see below)
         *                           - 'join' entry determines how to join multiple parts of the string
         *                           `  - if $join is a string, it's used as a joiner glue
         *                           `  - if $join is a callable/closure, it get the list of string and should return a string
         *                           `  - if $join is an array, the first item will be the default glue, and the second item
         *                           `    will be used instead of the glue for the last item
         *                           `  - if $join is true, it will be guessed from the locale ('list' translation file entry)
         *                           `  - if $join is missing, a space will be used as glue
         *                           if int passed, it add modifiers:
         *                           Possible values:
         *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
         *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
         *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
         *                           Default value: CarbonInterface::DIFF_ABSOLUTE
         * @param bool      $short   displays short format of time units
         * @param int       $parts   maximum number of parts to display (default value: 1: single part)
         * @param int       $options human diff options
         *
         * @return string
         */
        public function ago($syntax = null, $short = false, $parts = 1, $options = null);

        /**
         * Modify the current instance to the average of a given instance (default now) and the current instance
         * (second-precision).
         *
         * @param \Carbon\Carbon|\DateTimeInterface|null $date
         *
         * @return static
         */
        public function average($date = null);

        /**
         * Clone the current instance if it's mutable.
         *
         * This method is convenient to ensure you don't mutate the initial object
         * but avoid to make a useless copy of it if it's already immutable.
         *
         * @return static
         */
        public function avoidMutation();

        /**
         * Determines if the instance is between two others.
         *
         * The third argument allow you to specify if bounds are included or not (true by default)
         * but for when you including/excluding bounds may produce different results in your application,
         * we recommend to use the explicit methods ->betweenIncluded() or ->betweenExcluded() instead.
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25')->between('2018-07-14', '2018-08-01'); // true
         * Carbon::parse('2018-07-25')->between('2018-08-01', '2018-08-20'); // false
         * Carbon::parse('2018-07-25')->between('2018-07-25', '2018-08-01'); // true
         * Carbon::parse('2018-07-25')->between('2018-07-25', '2018-08-01', false); // false
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date1
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date2
         * @param bool                                    $equal Indicates if an equal to comparison should be done
         *
         * @return bool
         */
        public function between($date1, $date2, $equal = true): bool;

        /**
         * Determines if the instance is between two others, bounds excluded.
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25')->betweenExcluded('2018-07-14', '2018-08-01'); // true
         * Carbon::parse('2018-07-25')->betweenExcluded('2018-08-01', '2018-08-20'); // false
         * Carbon::parse('2018-07-25')->betweenExcluded('2018-07-25', '2018-08-01'); // false
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date1
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date2
         *
         * @return bool
         */
        public function betweenExcluded($date1, $date2): bool;

        /**
         * Determines if the instance is between two others, bounds included.
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25')->betweenIncluded('2018-07-14', '2018-08-01'); // true
         * Carbon::parse('2018-07-25')->betweenIncluded('2018-08-01', '2018-08-20'); // false
         * Carbon::parse('2018-07-25')->betweenIncluded('2018-07-25', '2018-08-01'); // true
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date1
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date2
         *
         * @return bool
         */
        public function betweenIncluded($date1, $date2): bool;

        /**
         * Returns either day of week + time (e.g. "Last Friday at 3:30 PM") if reference time is within 7 days,
         * or a calendar date (e.g. "10/29/2017") otherwise.
         *
         * Language, date and time formats will change according to the current locale.
         *
         * @param Carbon|\DateTimeInterface|string|null $referenceTime
         * @param array                                 $formats
         *
         * @return string
         */
        public function calendar($referenceTime = null, array $formats = []);

        /**
         * Checks if the (date)time string is in a given format and valid to create a
         * new instance.
         *
         * @example
         * ```
         * Carbon::canBeCreatedFromFormat('11:12:45', 'h:i:s'); // true
         * Carbon::canBeCreatedFromFormat('13:12:45', 'h:i:s'); // false
         * ```
         *
         * @param string $date
         * @param string $format
         *
         * @return bool
         */
        public static function canBeCreatedFromFormat($date, $format);

        /**
         * Return the Carbon instance passed through, a now instance in the same timezone
         * if null given or parse the input if string given.
         *
         * @param Carbon|\Carbon\CarbonPeriod|\Carbon\CarbonInterval|\DateInterval|\DatePeriod|DateTimeInterface|string|null $date
         *
         * @return static
         */
        public function carbonize($date = null);

        /**
         * Cast the current instance into the given class.
         *
         * @param string $className The $className::instance() method will be called to cast the current object.
         *
         * @return DateTimeInterface
         */
        public function cast(string $className);

        /**
         * Ceil the current instance second with given precision if specified.
         *
         * @param float|int|string|\DateInterval|null $precision
         *
         * @return CarbonInterface
         */
        public function ceil($precision = 1);

        /**
         * Ceil the current instance at the given unit with given precision if specified.
         *
         * @param string    $unit
         * @param float|int $precision
         *
         * @return CarbonInterface
         */
        public function ceilUnit($unit, $precision = 1);

        /**
         * Ceil the current instance week.
         *
         * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
         *
         * @return CarbonInterface
         */
        public function ceilWeek($weekStartsAt = null);

        /**
         * Similar to native modify() method of DateTime but can handle more grammars.
         *
         * @example
         * ```
         * echo Carbon::now()->change('next 2pm');
         * ```
         *
         * @link https://php.net/manual/en/datetime.modify.php
         *
         * @param string $modifier
         *
         * @return static
         */
        public function change($modifier);

        /**
         * Cleanup properties attached to the public scope of DateTime when a dump of the date is requested.
         * foreach ($date as $_) {}
         * serializer($date)
         * var_export($date)
         * get_object_vars($date)
         */
        public function cleanupDumpProperties();

        /**
         * @alias copy
         *
         * Get a copy of the instance.
         *
         * @return static
         */
        public function clone();

        /**
         * Get the closest date from the instance (second-precision).
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date1
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date2
         *
         * @return static
         */
        public function closest($date1, $date2);

        /**
         * Get a copy of the instance.
         *
         * @return static
         */
        public function copy();

        /**
         * Create a new Carbon instance from a specific date and time.
         *
         * If any of $year, $month or $day are set to null their now() values will
         * be used.
         *
         * If $hour is null it will be set to its now() value and the default
         * values for $minute and $second will be their now() values.
         *
         * If $hour is not null then the default values for $minute and $second
         * will be 0.
         *
         * @param int|null                 $year
         * @param int|null                 $month
         * @param int|null                 $day
         * @param int|null                 $hour
         * @param int|null                 $minute
         * @param int|null                 $second
         * @param DateTimeZone|string|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static|false
         */
        public static function create($year = 0, $month = 1, $day = 1, $hour = 0, $minute = 0, $second = 0, $tz = null);

        /**
         * Create a Carbon instance from just a date. The time portion is set to now.
         *
         * @param int|null                 $year
         * @param int|null                 $month
         * @param int|null                 $day
         * @param DateTimeZone|string|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function createFromDate($year = null, $month = null, $day = null, $tz = null);

        /**
         * Create a Carbon instance from a specific format.
         *
         * @param string                         $format Datetime format
         * @param string                         $time
         * @param DateTimeZone|string|false|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static|false
         */
        #[ReturnTypeWillChange]
        public static function createFromFormat($format, $time, $tz = null);

        /**
         * Create a Carbon instance from a specific ISO format (same replacements as ->isoFormat()).
         *
         * @param string                                             $format     Datetime format
         * @param string                                             $time
         * @param DateTimeZone|string|false|null                     $tz         optional timezone
         * @param string|null                                        $locale     locale to be used for LTS, LT, LL, LLL, etc. macro-formats (en by fault, unneeded if no such macro-format in use)
         * @param \Symfony\Component\Translation\TranslatorInterface $translator optional custom translator to use for macro-formats
         *
         * @throws InvalidFormatException
         *
         * @return static|false
         */
        public static function createFromIsoFormat($format, $time, $tz = null, $locale = 'en', $translator = null);

        /**
         * Create a Carbon instance from a specific format and a string in a given language.
         *
         * @param string                         $format Datetime format
         * @param string                         $locale
         * @param string                         $time
         * @param DateTimeZone|string|false|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static|false
         */
        public static function createFromLocaleFormat($format, $locale, $time, $tz = null);

        /**
         * Create a Carbon instance from a specific ISO format and a string in a given language.
         *
         * @param string                         $format Datetime ISO format
         * @param string                         $locale
         * @param string                         $time
         * @param DateTimeZone|string|false|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static|false
         */
        public static function createFromLocaleIsoFormat($format, $locale, $time, $tz = null);

        /**
         * Create a Carbon instance from just a time. The date portion is set to today.
         *
         * @param int|null                 $hour
         * @param int|null                 $minute
         * @param int|null                 $second
         * @param DateTimeZone|string|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function createFromTime($hour = 0, $minute = 0, $second = 0, $tz = null);

        /**
         * Create a Carbon instance from a time string. The date portion is set to today.
         *
         * @param string                   $time
         * @param DateTimeZone|string|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function createFromTimeString($time, $tz = null);

        /**
         * Create a Carbon instance from a timestamp and set the timezone (use default one if not specified).
         *
         * Timestamp input can be given as int, float or a string containing one or more numbers.
         *
         * @param float|int|string          $timestamp
         * @param \DateTimeZone|string|null $tz
         *
         * @return static
         */
        public static function createFromTimestamp($timestamp, $tz = null);

        /**
         * Create a Carbon instance from a timestamp in milliseconds.
         *
         * Timestamp input can be given as int, float or a string containing one or more numbers.
         *
         * @param float|int|string          $timestamp
         * @param \DateTimeZone|string|null $tz
         *
         * @return static
         */
        public static function createFromTimestampMs($timestamp, $tz = null);

        /**
         * Create a Carbon instance from a timestamp in milliseconds.
         *
         * Timestamp input can be given as int, float or a string containing one or more numbers.
         *
         * @param float|int|string $timestamp
         *
         * @return static
         */
        public static function createFromTimestampMsUTC($timestamp);

        /**
         * Create a Carbon instance from an timestamp keeping the timezone to UTC.
         *
         * Timestamp input can be given as int, float or a string containing one or more numbers.
         *
         * @param float|int|string $timestamp
         *
         * @return static
         */
        public static function createFromTimestampUTC($timestamp);

        /**
         * Create a Carbon instance from just a date. The time portion is set to midnight.
         *
         * @param int|null                 $year
         * @param int|null                 $month
         * @param int|null                 $day
         * @param DateTimeZone|string|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function createMidnightDate($year = null, $month = null, $day = null, $tz = null);

        /**
         * Create a new safe Carbon instance from a specific date and time.
         *
         * If any of $year, $month or $day are set to null their now() values will
         * be used.
         *
         * If $hour is null it will be set to its now() value and the default
         * values for $minute and $second will be their now() values.
         *
         * If $hour is not null then the default values for $minute and $second
         * will be 0.
         *
         * If one of the set values is not valid, an InvalidDateException
         * will be thrown.
         *
         * @param int|null                 $year
         * @param int|null                 $month
         * @param int|null                 $day
         * @param int|null                 $hour
         * @param int|null                 $minute
         * @param int|null                 $second
         * @param DateTimeZone|string|null $tz
         *
         * @throws InvalidDateException
         *
         * @return static|false
         */
        public static function createSafe($year = null, $month = null, $day = null, $hour = null, $minute = null, $second = null, $tz = null);

        /**
         * Create a new Carbon instance from a specific date and time using strict validation.
         *
         * @see create()
         *
         * @param int|null                 $year
         * @param int|null                 $month
         * @param int|null                 $day
         * @param int|null                 $hour
         * @param int|null                 $minute
         * @param int|null                 $second
         * @param DateTimeZone|string|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function createStrict(?int $year = 0, ?int $month = 1, ?int $day = 1, ?int $hour = 0, ?int $minute = 0, ?int $second = 0, $tz = null);

        /**
         * Get/set the day of year.
         *
         * @param int|null $value new value for day of year if using as setter.
         *
         * @return static|int
         */
        public function dayOfYear($value = null);

        /**
         * Get the difference as a CarbonInterval instance.
         * Return absolute interval (always positive) unless you pass false to the second argument.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return CarbonInterval
         */
        public function diffAsCarbonInterval($date = null, $absolute = true);

        /**
         * Get the difference by the given interval using a filter closure.
         *
         * @param CarbonInterval                                         $ci       An interval to traverse by
         * @param Closure                                                $callback
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffFiltered(CarbonInterval $ci, Closure $callback, $date = null, $absolute = true);

        /**
         * Get the difference in a human readable format in the current locale from current instance to an other
         * instance given (or now if null given).
         *
         * @example
         * ```
         * echo Carbon::tomorrow()->diffForHumans() . "\n";
         * echo Carbon::tomorrow()->diffForHumans(['parts' => 2]) . "\n";
         * echo Carbon::tomorrow()->diffForHumans(['parts' => 3, 'join' => true]) . "\n";
         * echo Carbon::tomorrow()->diffForHumans(Carbon::yesterday()) . "\n";
         * echo Carbon::tomorrow()->diffForHumans(Carbon::yesterday(), ['short' => true]) . "\n";
         * ```
         *
         * @param Carbon|\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
         *                                                             if null passed, now will be used as comparison reference;
         *                                                             if any other type, it will be converted to date and used as reference.
         * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
         *                                                             - 'syntax' entry (see below)
         *                                                             - 'short' entry (see below)
         *                                                             - 'parts' entry (see below)
         *                                                             - 'options' entry (see below)
         *                                                             - 'join' entry determines how to join multiple parts of the string
         *                                                             `  - if $join is a string, it's used as a joiner glue
         *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
         *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
         *                                                             `    will be used instead of the glue for the last item
         *                                                             `  - if $join is true, it will be guessed from the locale ('list' translation file entry)
         *                                                             `  - if $join is missing, a space will be used as glue
         *                                                             - 'other' entry (see above)
         *                                                             if int passed, it add modifiers:
         *                                                             Possible values:
         *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
         *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
         *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
         *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
         * @param bool                                        $short   displays short format of time units
         * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
         * @param int                                         $options human diff options
         *
         * @return string
         */
        public function diffForHumans($other = null, $syntax = null, $short = false, $parts = 1, $options = null);

        /**
         * Get the difference in days rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInDays($date = null, $absolute = true);

        /**
         * Get the difference in days using a filter closure rounded down.
         *
         * @param Closure                                                $callback
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInDaysFiltered(Closure $callback, $date = null, $absolute = true);

        /**
         * Get the difference in hours rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInHours($date = null, $absolute = true);

        /**
         * Get the difference in hours using a filter closure rounded down.
         *
         * @param Closure                                                $callback
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInHoursFiltered(Closure $callback, $date = null, $absolute = true);

        /**
         * Get the difference in microseconds.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInMicroseconds($date = null, $absolute = true);

        /**
         * Get the difference in milliseconds rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInMilliseconds($date = null, $absolute = true);

        /**
         * Get the difference in minutes rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInMinutes($date = null, $absolute = true);

        /**
         * Get the difference in months rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInMonths($date = null, $absolute = true);

        /**
         * Get the difference in quarters rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInQuarters($date = null, $absolute = true);

        /**
         * Get the difference in hours rounded down using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInRealHours($date = null, $absolute = true);

        /**
         * Get the difference in microseconds using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInRealMicroseconds($date = null, $absolute = true);

        /**
         * Get the difference in milliseconds rounded down using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInRealMilliseconds($date = null, $absolute = true);

        /**
         * Get the difference in minutes rounded down using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInRealMinutes($date = null, $absolute = true);

        /**
         * Get the difference in seconds using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInRealSeconds($date = null, $absolute = true);

        /**
         * Get the difference in seconds rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInSeconds($date = null, $absolute = true);

        /**
         * Get the difference in weekdays rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInWeekdays($date = null, $absolute = true);

        /**
         * Get the difference in weekend days using a filter rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInWeekendDays($date = null, $absolute = true);

        /**
         * Get the difference in weeks rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInWeeks($date = null, $absolute = true);

        /**
         * Get the difference in years
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInYears($date = null, $absolute = true);

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather use the ->settings() method.
         * @see settings
         *
         * @param int $humanDiffOption
         */
        public static function disableHumanDiffOption($humanDiffOption);

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather use the ->settings() method.
         * @see settings
         *
         * @param int $humanDiffOption
         */
        public static function enableHumanDiffOption($humanDiffOption);

        /**
         * Modify to end of current given unit.
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16.334455')
         *   ->startOf('month')
         *   ->endOf('week', Carbon::FRIDAY);
         * ```
         *
         * @param string            $unit
         * @param array<int, mixed> $params
         *
         * @return static
         */
        public function endOf($unit, ...$params);

        /**
         * Resets the date to end of the century and time to 23:59:59.999999
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfCentury();
         * ```
         *
         * @return static
         */
        public function endOfCentury();

        /**
         * Resets the time to 23:59:59.999999 end of day
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfDay();
         * ```
         *
         * @return static
         */
        public function endOfDay();

        /**
         * Resets the date to end of the decade and time to 23:59:59.999999
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfDecade();
         * ```
         *
         * @return static
         */
        public function endOfDecade();

        /**
         * Modify to end of current hour, minutes and seconds become 59
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfHour();
         * ```
         *
         * @return static
         */
        public function endOfHour();

        /**
         * Resets the date to end of the millennium and time to 23:59:59.999999
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfMillennium();
         * ```
         *
         * @return static
         */
        public function endOfMillennium();

        /**
         * Modify to end of current minute, seconds become 59
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfMinute();
         * ```
         *
         * @return static
         */
        public function endOfMinute();

        /**
         * Resets the date to end of the month and time to 23:59:59.999999
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfMonth();
         * ```
         *
         * @return static
         */
        public function endOfMonth();

        /**
         * Resets the date to end of the quarter and time to 23:59:59.999999
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfQuarter();
         * ```
         *
         * @return static
         */
        public function endOfQuarter();

        /**
         * Modify to end of current second, microseconds become 999999
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16.334455')
         *   ->endOfSecond()
         *   ->format('H:i:s.u');
         * ```
         *
         * @return static
         */
        public function endOfSecond();

        /**
         * Resets the date to end of week (defined in $weekEndsAt) and time to 23:59:59.999999
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfWeek() . "\n";
         * echo Carbon::parse('2018-07-25 12:45:16')->locale('ar')->endOfWeek() . "\n";
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfWeek(Carbon::SATURDAY) . "\n";
         * ```
         *
         * @param int $weekEndsAt optional start allow you to specify the day of week to use to end the week
         *
         * @return static
         */
        public function endOfWeek($weekEndsAt = null);

        /**
         * Resets the date to end of the year and time to 23:59:59.999999
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfYear();
         * ```
         *
         * @return static
         */
        public function endOfYear();

        /**
         * Determines if the instance is equal to another
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25 12:45:16')->eq('2018-07-25 12:45:16'); // true
         * Carbon::parse('2018-07-25 12:45:16')->eq(Carbon::parse('2018-07-25 12:45:16')); // true
         * Carbon::parse('2018-07-25 12:45:16')->eq('2018-07-25 12:45:17'); // false
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @see equalTo()
         *
         * @return bool
         */
        public function eq($date): bool;

        /**
         * Determines if the instance is equal to another
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25 12:45:16')->equalTo('2018-07-25 12:45:16'); // true
         * Carbon::parse('2018-07-25 12:45:16')->equalTo(Carbon::parse('2018-07-25 12:45:16')); // true
         * Carbon::parse('2018-07-25 12:45:16')->equalTo('2018-07-25 12:45:17'); // false
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @return bool
         */
        public function equalTo($date): bool;

        /**
         * Set the current locale to the given, execute the passed function, reset the locale to previous one,
         * then return the result of the closure (or null if the closure was void).
         *
         * @param string   $locale locale ex. en
         * @param callable $func
         *
         * @return mixed
         */
        public static function executeWithLocale($locale, $func);

        /**
         * Get the farthest date from the instance (second-precision).
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date1
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date2
         *
         * @return static
         */
        public function farthest($date1, $date2);

        /**
         * Modify to the first occurrence of a given day of the week
         * in the current month. If no dayOfWeek is provided, modify to the
         * first day of the current month.  Use the supplied constants
         * to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int|null $dayOfWeek
         *
         * @return static
         */
        public function firstOfMonth($dayOfWeek = null);

        /**
         * Modify to the first occurrence of a given day of the week
         * in the current quarter. If no dayOfWeek is provided, modify to the
         * first day of the current quarter.  Use the supplied constants
         * to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int|null $dayOfWeek day of the week default null
         *
         * @return static
         */
        public function firstOfQuarter($dayOfWeek = null);

        /**
         * Modify to the first occurrence of a given day of the week
         * in the current year. If no dayOfWeek is provided, modify to the
         * first day of the current year.  Use the supplied constants
         * to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int|null $dayOfWeek day of the week default null
         *
         * @return static
         */
        public function firstOfYear($dayOfWeek = null);

        /**
         * Get the difference in days as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInDays($date = null, $absolute = true);

        /**
         * Get the difference in hours as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInHours($date = null, $absolute = true);

        /**
         * Get the difference in minutes as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInMinutes($date = null, $absolute = true);

        /**
         * Get the difference in months as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInMonths($date = null, $absolute = true);

        /**
         * Get the difference in days as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInRealDays($date = null, $absolute = true);

        /**
         * Get the difference in hours as float (microsecond-precision) using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInRealHours($date = null, $absolute = true);

        /**
         * Get the difference in minutes as float (microsecond-precision) using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInRealMinutes($date = null, $absolute = true);

        /**
         * Get the difference in months as float (microsecond-precision) using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInRealMonths($date = null, $absolute = true);

        /**
         * Get the difference in seconds as float (microsecond-precision) using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInRealSeconds($date = null, $absolute = true);

        /**
         * Get the difference in weeks as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInRealWeeks($date = null, $absolute = true);

        /**
         * Get the difference in year as float (microsecond-precision) using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInRealYears($date = null, $absolute = true);

        /**
         * Get the difference in seconds as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInSeconds($date = null, $absolute = true);

        /**
         * Get the difference in weeks as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInWeeks($date = null, $absolute = true);

        /**
         * Get the difference in year as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInYears($date = null, $absolute = true);

        /**
         * Round the current instance second with given precision if specified.
         *
         * @param float|int|string|\DateInterval|null $precision
         *
         * @return CarbonInterface
         */
        public function floor($precision = 1);

        /**
         * Truncate the current instance at the given unit with given precision if specified.
         *
         * @param string    $unit
         * @param float|int $precision
         *
         * @return CarbonInterface
         */
        public function floorUnit($unit, $precision = 1);

        /**
         * Truncate the current instance week.
         *
         * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
         *
         * @return CarbonInterface
         */
        public function floorWeek($weekStartsAt = null);

        /**
         * Format the instance with the current locale.  You can set the current
         * locale using setlocale() https://php.net/setlocale.
         *
         * @param string $format
         *
         * @return string
         */
        public function formatLocalized($format);

        /**
         * @alias diffForHumans
         *
         * Get the difference in a human readable format in the current locale from current instance to an other
         * instance given (or now if null given).
         *
         * @param Carbon|\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
         *                                                             if null passed, now will be used as comparison reference;
         *                                                             if any other type, it will be converted to date and used as reference.
         * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
         *                                                             - 'syntax' entry (see below)
         *                                                             - 'short' entry (see below)
         *                                                             - 'parts' entry (see below)
         *                                                             - 'options' entry (see below)
         *                                                             - 'join' entry determines how to join multiple parts of the string
         *                                                             `  - if $join is a string, it's used as a joiner glue
         *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
         *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
         *                                                             `    will be used instead of the glue for the last item
         *                                                             `  - if $join is true, it will be guessed from the locale ('list' translation file entry)
         *                                                             `  - if $join is missing, a space will be used as glue
         *                                                             - 'other' entry (see above)
         *                                                             if int passed, it add modifiers:
         *                                                             Possible values:
         *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
         *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
         *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
         *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
         * @param bool                                        $short   displays short format of time units
         * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
         * @param int                                         $options human diff options
         *
         * @return string
         */
        public function from($other = null, $syntax = null, $short = false, $parts = 1, $options = null);

        /**
         * Get the difference in a human readable format in the current locale from current
         * instance to now.
         *
         * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
         *                           - 'syntax' entry (see below)
         *                           - 'short' entry (see below)
         *                           - 'parts' entry (see below)
         *                           - 'options' entry (see below)
         *                           - 'join' entry determines how to join multiple parts of the string
         *                           `  - if $join is a string, it's used as a joiner glue
         *                           `  - if $join is a callable/closure, it get the list of string and should return a string
         *                           `  - if $join is an array, the first item will be the default glue, and the second item
         *                           `    will be used instead of the glue for the last item
         *                           `  - if $join is true, it will be guessed from the locale ('list' translation file entry)
         *                           `  - if $join is missing, a space will be used as glue
         *                           if int passed, it add modifiers:
         *                           Possible values:
         *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
         *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
         *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
         *                           Default value: CarbonInterface::DIFF_ABSOLUTE
         * @param bool      $short   displays short format of time units
         * @param int       $parts   maximum number of parts to display (default value: 1: single unit)
         * @param int       $options human diff options
         *
         * @return string
         */
        public function fromNow($syntax = null, $short = false, $parts = 1, $options = null);

        /**
         * Create an instance from a serialized string.
         *
         * @param string $value
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function fromSerialized($value);

        /**
         * Register a custom macro.
         *
         * @param object|callable $macro
         * @param int             $priority marco with higher priority is tried first
         *
         * @return void
         */
        public static function genericMacro($macro, $priority = 0);

        /**
         * Get a part of the Carbon object
         *
         * @param string $name
         *
         * @throws UnknownGetterException
         *
         * @return string|int|bool|DateTimeZone|null
         */
        public function get($name);

        /**
         * Returns the alternative number for a given date property if available in the current locale.
         *
         * @param string $key date property
         *
         * @return string
         */
        public function getAltNumber(string $key): string;

        /**
         * Returns the list of internally available locales and already loaded custom locales.
         * (It will ignore custom translator dynamic loading.)
         *
         * @return array
         */
        public static function getAvailableLocales();

        /**
         * Returns list of Language object for each available locale. This object allow you to get the ISO name, native
         * name, region and variant of the locale.
         *
         * @return Language[]
         */
        public static function getAvailableLocalesInfo();

        /**
         * Returns list of calendar formats for ISO formatting.
         *
         * @param string|null $locale current locale used if null
         *
         * @return array
         */
        public function getCalendarFormats($locale = null);

        /**
         * Get the days of the week
         *
         * @return array
         */
        public static function getDays();

        /**
         * Get the fallback locale.
         *
         * @see https://symfony.com/doc/current/components/translation.html#fallback-locales
         *
         * @return string|null
         */
        public static function getFallbackLocale();

        /**
         * List of replacements from date() format to isoFormat().
         *
         * @return array
         */
        public static function getFormatsToIsoReplacements();

        /**
         * Return default humanDiff() options (merged flags as integer).
         *
         * @return int
         */
        public static function getHumanDiffOptions();

        /**
         * Returns list of locale formats for ISO formatting.
         *
         * @param string|null $locale current locale used if null
         *
         * @return array
         */
        public function getIsoFormats($locale = null);

        /**
         * Returns list of locale units for ISO formatting.
         *
         * @return array
         */
        public static function getIsoUnits();

        /**
         * {@inheritdoc}
         *
         * @return array
         */
        #[ReturnTypeWillChange]
        public static function getLastErrors();

        /**
         * Get the raw callable macro registered globally or locally for a given name.
         *
         * @param string $name
         *
         * @return callable|null
         */
        public function getLocalMacro($name);

        /**
         * Get the translator of the current instance or the default if none set.
         *
         * @return \Symfony\Component\Translation\TranslatorInterface
         */
        public function getLocalTranslator();

        /**
         * Get the current translator locale.
         *
         * @return string
         */
        public static function getLocale();

        /**
         * Get the raw callable macro registered globally for a given name.
         *
         * @param string $name
         *
         * @return callable|null
         */
        public static function getMacro($name);

        /**
         * get midday/noon hour
         *
         * @return int
         */
        public static function getMidDayAt();

        /**
         * Returns the offset hour and minute formatted with +/- and a given separator (":" by default).
         * For example, if the time zone is 9 hours 30 minutes, you'll get "+09:30", with "@@" as first
         * argument, "+09@@30", with "" as first argument, "+0930". Negative offset will return something
         * like "-12:00".
         *
         * @param string $separator string to place between hours and minutes (":" by default)
         *
         * @return string
         */
        public function getOffsetString($separator = ':');

        /**
         * Returns a unit of the instance padded with 0 by default or any other string if specified.
         *
         * @param string $unit      Carbon unit name
         * @param int    $length    Length of the output (2 by default)
         * @param string $padString String to use for padding ("0" by default)
         * @param int    $padType   Side(s) to pad (STR_PAD_LEFT by default)
         *
         * @return string
         */
        public function getPaddedUnit($unit, $length = 2, $padString = '0', $padType = 0);

        /**
         * Returns a timestamp rounded with the given precision (6 by default).
         *
         * @example getPreciseTimestamp()   1532087464437474 (microsecond maximum precision)
         * @example getPreciseTimestamp(6)  1532087464437474
         * @example getPreciseTimestamp(5)  153208746443747  (1/100000 second precision)
         * @example getPreciseTimestamp(4)  15320874644375   (1/10000 second precision)
         * @example getPreciseTimestamp(3)  1532087464437    (millisecond precision)
         * @example getPreciseTimestamp(2)  153208746444     (1/100 second precision)
         * @example getPreciseTimestamp(1)  15320874644      (1/10 second precision)
         * @example getPreciseTimestamp(0)  1532087464       (second precision)
         * @example getPreciseTimestamp(-1) 153208746        (10 second precision)
         * @example getPreciseTimestamp(-2) 15320875         (100 second precision)
         *
         * @param int $precision
         *
         * @return float
         */
        public function getPreciseTimestamp($precision = 6);

        /**
         * Returns current local settings.
         *
         * @return array
         */
        public function getSettings();

        /**
         * Get the Carbon instance (real or mock) to be returned when a "now"
         * instance is created.
         *
         * @return Closure|static the current instance used for testing
         */
        public static function getTestNow();

        /**
         * Return a format from H:i to H:i:s.u according to given unit precision.
         *
         * @param string $unitPrecision "minute", "second", "millisecond" or "microsecond"
         *
         * @return string
         */
        public static function getTimeFormatByPrecision($unitPrecision);

        /**
         * Returns the timestamp with millisecond precision.
         *
         * @return int
         */
        public function getTimestampMs();

        /**
         * Get the translation of the current week day name (with context for languages with multiple forms).
         *
         * @param string|null $context      whole format string
         * @param string      $keySuffix    "", "_short" or "_min"
         * @param string|null $defaultValue default value if translation missing
         *
         * @return string
         */
        public function getTranslatedDayName($context = null, $keySuffix = '', $defaultValue = null);

        /**
         * Get the translation of the current abbreviated week day name (with context for languages with multiple forms).
         *
         * @param string|null $context whole format string
         *
         * @return string
         */
        public function getTranslatedMinDayName($context = null);

        /**
         * Get the translation of the current month day name (with context for languages with multiple forms).
         *
         * @param string|null $context      whole format string
         * @param string      $keySuffix    "" or "_short"
         * @param string|null $defaultValue default value if translation missing
         *
         * @return string
         */
        public function getTranslatedMonthName($context = null, $keySuffix = '', $defaultValue = null);

        /**
         * Get the translation of the current short week day name (with context for languages with multiple forms).
         *
         * @param string|null $context whole format string
         *
         * @return string
         */
        public function getTranslatedShortDayName($context = null);

        /**
         * Get the translation of the current short month day name (with context for languages with multiple forms).
         *
         * @param string|null $context whole format string
         *
         * @return string
         */
        public function getTranslatedShortMonthName($context = null);

        /**
         * Returns raw translation message for a given key.
         *
         * @param string                                             $key        key to find
         * @param string|null                                        $locale     current locale used if null
         * @param string|null                                        $default    default value if translation returns the key
         * @param \Symfony\Component\Translation\TranslatorInterface $translator an optional translator to use
         *
         * @return string
         */
        public function getTranslationMessage(string $key, ?string $locale = null, ?string $default = null, $translator = null);

        /**
         * Returns raw translation message for a given key.
         *
         * @param \Symfony\Component\Translation\TranslatorInterface $translator the translator to use
         * @param string                                             $key        key to find
         * @param string|null                                        $locale     current locale used if null
         * @param string|null                                        $default    default value if translation returns the key
         *
         * @return string
         */
        public static function getTranslationMessageWith($translator, string $key, ?string $locale = null, ?string $default = null);

        /**
         * Get the default translator instance in use.
         *
         * @return \Symfony\Component\Translation\TranslatorInterface
         */
        public static function getTranslator();

        /**
         * Get the last day of week
         *
         * @return int
         */
        public static function getWeekEndsAt();

        /**
         * Get the first day of week
         *
         * @return int
         */
        public static function getWeekStartsAt();

        /**
         * Get weekend days
         *
         * @return array
         */
        public static function getWeekendDays();

        /**
         * Determines if the instance is greater (after) than another
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25 12:45:16')->greaterThan('2018-07-25 12:45:15'); // true
         * Carbon::parse('2018-07-25 12:45:16')->greaterThan('2018-07-25 12:45:16'); // false
         * Carbon::parse('2018-07-25 12:45:16')->greaterThan('2018-07-25 12:45:17'); // false
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @return bool
         */
        public function greaterThan($date): bool;

        /**
         * Determines if the instance is greater (after) than or equal to another
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25 12:45:16')->greaterThanOrEqualTo('2018-07-25 12:45:15'); // true
         * Carbon::parse('2018-07-25 12:45:16')->greaterThanOrEqualTo('2018-07-25 12:45:16'); // true
         * Carbon::parse('2018-07-25 12:45:16')->greaterThanOrEqualTo('2018-07-25 12:45:17'); // false
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @return bool
         */
        public function greaterThanOrEqualTo($date): bool;

        /**
         * Determines if the instance is greater (after) than another
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25 12:45:16')->gt('2018-07-25 12:45:15'); // true
         * Carbon::parse('2018-07-25 12:45:16')->gt('2018-07-25 12:45:16'); // false
         * Carbon::parse('2018-07-25 12:45:16')->gt('2018-07-25 12:45:17'); // false
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @see greaterThan()
         *
         * @return bool
         */
        public function gt($date): bool;

        /**
         * Determines if the instance is greater (after) than or equal to another
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25 12:45:16')->gte('2018-07-25 12:45:15'); // true
         * Carbon::parse('2018-07-25 12:45:16')->gte('2018-07-25 12:45:16'); // true
         * Carbon::parse('2018-07-25 12:45:16')->gte('2018-07-25 12:45:17'); // false
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @see greaterThanOrEqualTo()
         *
         * @return bool
         */
        public function gte($date): bool;

        /**
         * Checks if the (date)time string is in a given format.
         *
         * @example
         * ```
         * Carbon::hasFormat('11:12:45', 'h:i:s'); // true
         * Carbon::hasFormat('13:12:45', 'h:i:s'); // false
         * ```
         *
         * @param string $date
         * @param string $format
         *
         * @return bool
         */
        public static function hasFormat($date, $format);

        /**
         * Checks if the (date)time string is in a given format.
         *
         * @example
         * ```
         * Carbon::hasFormatWithModifiers('31/08/2015', 'd#m#Y'); // true
         * Carbon::hasFormatWithModifiers('31/08/2015', 'm#d#Y'); // false
         * ```
         *
         * @param string $date
         * @param string $format
         *
         * @return bool
         */
        public static function hasFormatWithModifiers($date, $format): bool;

        /**
         * Checks if macro is registered globally or locally.
         *
         * @param string $name
         *
         * @return bool
         */
        public function hasLocalMacro($name);

        /**
         * Return true if the current instance has its own translator.
         *
         * @return bool
         */
        public function hasLocalTranslator();

        /**
         * Checks if macro is registered globally.
         *
         * @param string $name
         *
         * @return bool
         */
        public static function hasMacro($name);

        /**
         * Determine if a time string will produce a relative date.
         *
         * @param string $time
         *
         * @return bool true if time match a relative date, false if absolute or invalid time string
         */
        public static function hasRelativeKeywords($time);

        /**
         * Determine if there is a valid test instance set. A valid test instance
         * is anything that is not null.
         *
         * @return bool true if there is a test instance, otherwise false
         */
        public static function hasTestNow();

        /**
         * Create a Carbon instance from a DateTime one.
         *
         * @param DateTimeInterface $date
         *
         * @return static
         */
        public static function instance($date);

        /**
         * Returns true if the current date matches the given string.
         *
         * @example
         * ```
         * var_dump(Carbon::parse('2019-06-02 12:23:45')->is('2019')); // true
         * var_dump(Carbon::parse('2019-06-02 12:23:45')->is('2018')); // false
         * var_dump(Carbon::parse('2019-06-02 12:23:45')->is('2019-06')); // true
         * var_dump(Carbon::parse('2019-06-02 12:23:45')->is('06-02')); // true
         * var_dump(Carbon::parse('2019-06-02 12:23:45')->is('2019-06-02')); // true
         * var_dump(Carbon::parse('2019-06-02 12:23:45')->is('Sunday')); // true
         * var_dump(Carbon::parse('2019-06-02 12:23:45')->is('June')); // true
         * var_dump(Carbon::parse('2019-06-02 12:23:45')->is('12:23')); // true
         * var_dump(Carbon::parse('2019-06-02 12:23:45')->is('12:23:45')); // true
         * var_dump(Carbon::parse('2019-06-02 12:23:45')->is('12:23:00')); // false
         * var_dump(Carbon::parse('2019-06-02 12:23:45')->is('12h')); // true
         * var_dump(Carbon::parse('2019-06-02 15:23:45')->is('3pm')); // true
         * var_dump(Carbon::parse('2019-06-02 15:23:45')->is('3am')); // false
         * ```
         *
         * @param string $tester day name, month name, hour, date, etc. as string
         *
         * @return bool
         */
        public function is(string $tester);

        /**
         * Determines if the instance is greater (after) than another
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25 12:45:16')->isAfter('2018-07-25 12:45:15'); // true
         * Carbon::parse('2018-07-25 12:45:16')->isAfter('2018-07-25 12:45:16'); // false
         * Carbon::parse('2018-07-25 12:45:16')->isAfter('2018-07-25 12:45:17'); // false
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @see greaterThan()
         *
         * @return bool
         */
        public function isAfter($date): bool;

        /**
         * Determines if the instance is less (before) than another
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25 12:45:16')->isBefore('2018-07-25 12:45:15'); // false
         * Carbon::parse('2018-07-25 12:45:16')->isBefore('2018-07-25 12:45:16'); // false
         * Carbon::parse('2018-07-25 12:45:16')->isBefore('2018-07-25 12:45:17'); // true
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @see lessThan()
         *
         * @return bool
         */
        public function isBefore($date): bool;

        /**
         * Determines if the instance is between two others
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25')->isBetween('2018-07-14', '2018-08-01'); // true
         * Carbon::parse('2018-07-25')->isBetween('2018-08-01', '2018-08-20'); // false
         * Carbon::parse('2018-07-25')->isBetween('2018-07-25', '2018-08-01'); // true
         * Carbon::parse('2018-07-25')->isBetween('2018-07-25', '2018-08-01', false); // false
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date1
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date2
         * @param bool                                    $equal Indicates if an equal to comparison should be done
         *
         * @return bool
         */
        public function isBetween($date1, $date2, $equal = true): bool;

        /**
         * Check if its the birthday. Compares the date/month values of the two dates.
         *
         * @example
         * ```
         * Carbon::now()->subYears(5)->isBirthday(); // true
         * Carbon::now()->subYears(5)->subDay()->isBirthday(); // false
         * Carbon::parse('2019-06-05')->isBirthday(Carbon::parse('2001-06-05')); // true
         * Carbon::parse('2019-06-05')->isBirthday(Carbon::parse('2001-06-06')); // false
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|null $date The instance to compare with or null to use current day.
         *
         * @return bool
         */
        public function isBirthday($date = null);

        /**
         * Determines if the instance is in the current unit given.
         *
         * @example
         * ```
         * Carbon::now()->isCurrentUnit('hour'); // true
         * Carbon::now()->subHours(2)->isCurrentUnit('hour'); // false
         * ```
         *
         * @param string $unit The unit to test.
         *
         * @throws BadMethodCallException
         *
         * @return bool
         */
        public function isCurrentUnit($unit);

        /**
         * Checks if this day is a specific day of the week.
         *
         * @example
         * ```
         * Carbon::parse('2019-07-17')->isDayOfWeek(Carbon::WEDNESDAY); // true
         * Carbon::parse('2019-07-17')->isDayOfWeek(Carbon::FRIDAY); // false
         * Carbon::parse('2019-07-17')->isDayOfWeek('Wednesday'); // true
         * Carbon::parse('2019-07-17')->isDayOfWeek('Friday'); // false
         * ```
         *
         * @param int $dayOfWeek
         *
         * @return bool
         */
        public function isDayOfWeek($dayOfWeek);

        /**
         * Check if the instance is end of day.
         *
         * @example
         * ```
         * Carbon::parse('2019-02-28 23:59:59.999999')->isEndOfDay(); // true
         * Carbon::parse('2019-02-28 23:59:59.123456')->isEndOfDay(); // true
         * Carbon::parse('2019-02-28 23:59:59')->isEndOfDay(); // true
         * Carbon::parse('2019-02-28 23:59:58.999999')->isEndOfDay(); // false
         * Carbon::parse('2019-02-28 23:59:59.999999')->isEndOfDay(true); // true
         * Carbon::parse('2019-02-28 23:59:59.123456')->isEndOfDay(true); // false
         * Carbon::parse('2019-02-28 23:59:59')->isEndOfDay(true); // false
         * ```
         *
         * @param bool $checkMicroseconds check time at microseconds precision
         *
         * @return bool
         */
        public function isEndOfDay($checkMicroseconds = false);

        /**
         * Returns true if the date was created using CarbonImmutable::endOfTime()
         *
         * @return bool
         */
        public function isEndOfTime(): bool;

        /**
         * Determines if the instance is in the future, ie. greater (after) than now.
         *
         * @example
         * ```
         * Carbon::now()->addHours(5)->isFuture(); // true
         * Carbon::now()->subHours(5)->isFuture(); // false
         * ```
         *
         * @return bool
         */
        public function isFuture();

        /**
         * Returns true if the current class/instance is immutable.
         *
         * @return bool
         */
        public static function isImmutable();

        /**
         * Check if today is the last day of the Month
         *
         * @example
         * ```
         * Carbon::parse('2019-02-28')->isLastOfMonth(); // true
         * Carbon::parse('2019-03-28')->isLastOfMonth(); // false
         * Carbon::parse('2019-03-30')->isLastOfMonth(); // false
         * Carbon::parse('2019-03-31')->isLastOfMonth(); // true
         * Carbon::parse('2019-04-30')->isLastOfMonth(); // true
         * ```
         *
         * @return bool
         */
        public function isLastOfMonth();

        /**
         * Determines if the instance is a leap year.
         *
         * @example
         * ```
         * Carbon::parse('2020-01-01')->isLeapYear(); // true
         * Carbon::parse('2019-01-01')->isLeapYear(); // false
         * ```
         *
         * @return bool
         */
        public function isLeapYear();

        /**
         * Determines if the instance is a long year
         *
         * @example
         * ```
         * Carbon::parse('2015-01-01')->isLongYear(); // true
         * Carbon::parse('2016-01-01')->isLongYear(); // false
         * ```
         *
         * @see https://en.wikipedia.org/wiki/ISO_8601#Week_dates
         *
         * @return bool
         */
        public function isLongYear();

        /**
         * Check if the instance is midday.
         *
         * @example
         * ```
         * Carbon::parse('2019-02-28 11:59:59.999999')->isMidday(); // false
         * Carbon::parse('2019-02-28 12:00:00')->isMidday(); // true
         * Carbon::parse('2019-02-28 12:00:00.999999')->isMidday(); // true
         * Carbon::parse('2019-02-28 12:00:01')->isMidday(); // false
         * ```
         *
         * @return bool
         */
        public function isMidday();

        /**
         * Check if the instance is start of day / midnight.
         *
         * @example
         * ```
         * Carbon::parse('2019-02-28 00:00:00')->isMidnight(); // true
         * Carbon::parse('2019-02-28 00:00:00.999999')->isMidnight(); // true
         * Carbon::parse('2019-02-28 00:00:01')->isMidnight(); // false
         * ```
         *
         * @return bool
         */
        public function isMidnight();

        /**
         * Returns true if a property can be changed via setter.
         *
         * @param string $unit
         *
         * @return bool
         */
        public static function isModifiableUnit($unit);

        /**
         * Returns true if the current class/instance is mutable.
         *
         * @return bool
         */
        public static function isMutable();

        /**
         * Determines if the instance is in the past, ie. less (before) than now.
         *
         * @example
         * ```
         * Carbon::now()->subHours(5)->isPast(); // true
         * Carbon::now()->addHours(5)->isPast(); // false
         * ```
         *
         * @return bool
         */
        public function isPast();

        /**
         * Compares the formatted values of the two dates.
         *
         * @example
         * ```
         * Carbon::parse('2019-06-13')->isSameAs('Y-d', Carbon::parse('2019-12-13')); // true
         * Carbon::parse('2019-06-13')->isSameAs('Y-d', Carbon::parse('2019-06-14')); // false
         * ```
         *
         * @param string                                        $format date formats to compare.
         * @param \Carbon\Carbon|\DateTimeInterface|string|null $date   instance to compare with or null to use current day.
         *
         * @return bool
         */
        public function isSameAs($format, $date = null);

        /**
         * Checks if the passed in date is in the same month as the instance´s month.
         *
         * @example
         * ```
         * Carbon::parse('2019-01-12')->isSameMonth(Carbon::parse('2019-01-01')); // true
         * Carbon::parse('2019-01-12')->isSameMonth(Carbon::parse('2019-02-01')); // false
         * Carbon::parse('2019-01-12')->isSameMonth(Carbon::parse('2018-01-01')); // false
         * Carbon::parse('2019-01-12')->isSameMonth(Carbon::parse('2018-01-01'), false); // true
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|null $date       The instance to compare with or null to use the current date.
         * @param bool                                   $ofSameYear Check if it is the same month in the same year.
         *
         * @return bool
         */
        public function isSameMonth($date = null, $ofSameYear = true);

        /**
         * Checks if the passed in date is in the same quarter as the instance quarter (and year if needed).
         *
         * @example
         * ```
         * Carbon::parse('2019-01-12')->isSameQuarter(Carbon::parse('2019-03-01')); // true
         * Carbon::parse('2019-01-12')->isSameQuarter(Carbon::parse('2019-04-01')); // false
         * Carbon::parse('2019-01-12')->isSameQuarter(Carbon::parse('2018-03-01')); // false
         * Carbon::parse('2019-01-12')->isSameQuarter(Carbon::parse('2018-03-01'), false); // true
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|string|null $date       The instance to compare with or null to use current day.
         * @param bool                                          $ofSameYear Check if it is the same month in the same year.
         *
         * @return bool
         */
        public function isSameQuarter($date = null, $ofSameYear = true);

        /**
         * Determines if the instance is in the current unit given.
         *
         * @example
         * ```
         * Carbon::parse('2019-01-13')->isSameUnit('year', Carbon::parse('2019-12-25')); // true
         * Carbon::parse('2018-12-13')->isSameUnit('year', Carbon::parse('2019-12-25')); // false
         * ```
         *
         * @param string                                 $unit singular unit string
         * @param \Carbon\Carbon|\DateTimeInterface|null $date instance to compare with or null to use current day.
         *
         * @throws BadComparisonUnitException
         *
         * @return bool
         */
        public function isSameUnit($unit, $date = null);

        /**
         * Check if the instance is start of day / midnight.
         *
         * @example
         * ```
         * Carbon::parse('2019-02-28 00:00:00')->isStartOfDay(); // true
         * Carbon::parse('2019-02-28 00:00:00.999999')->isStartOfDay(); // true
         * Carbon::parse('2019-02-28 00:00:01')->isStartOfDay(); // false
         * Carbon::parse('2019-02-28 00:00:00.000000')->isStartOfDay(true); // true
         * Carbon::parse('2019-02-28 00:00:00.000012')->isStartOfDay(true); // false
         * ```
         *
         * @param bool $checkMicroseconds check time at microseconds precision
         *
         * @return bool
         */
        public function isStartOfDay($checkMicroseconds = false);

        /**
         * Returns true if the date was created using CarbonImmutable::startOfTime()
         *
         * @return bool
         */
        public function isStartOfTime(): bool;

        /**
         * Returns true if the strict mode is globally in use, false else.
         * (It can be overridden in specific instances.)
         *
         * @return bool
         */
        public static function isStrictModeEnabled();

        /**
         * Determines if the instance is today.
         *
         * @example
         * ```
         * Carbon::today()->isToday(); // true
         * Carbon::tomorrow()->isToday(); // false
         * ```
         *
         * @return bool
         */
        public function isToday();

        /**
         * Determines if the instance is tomorrow.
         *
         * @example
         * ```
         * Carbon::tomorrow()->isTomorrow(); // true
         * Carbon::yesterday()->isTomorrow(); // false
         * ```
         *
         * @return bool
         */
        public function isTomorrow();

        /**
         * Determines if the instance is a weekday.
         *
         * @example
         * ```
         * Carbon::parse('2019-07-14')->isWeekday(); // false
         * Carbon::parse('2019-07-15')->isWeekday(); // true
         * ```
         *
         * @return bool
         */
        public function isWeekday();

        /**
         * Determines if the instance is a weekend day.
         *
         * @example
         * ```
         * Carbon::parse('2019-07-14')->isWeekend(); // true
         * Carbon::parse('2019-07-15')->isWeekend(); // false
         * ```
         *
         * @return bool
         */
        public function isWeekend();

        /**
         * Determines if the instance is yesterday.
         *
         * @example
         * ```
         * Carbon::yesterday()->isYesterday(); // true
         * Carbon::tomorrow()->isYesterday(); // false
         * ```
         *
         * @return bool
         */
        public function isYesterday();

        /**
         * Format in the current language using ISO replacement patterns.
         *
         * @param string      $format
         * @param string|null $originalFormat provide context if a chunk has been passed alone
         *
         * @return string
         */
        public function isoFormat(string $format, ?string $originalFormat = null): string;

        /**
         * Get/set the week number using given first day of week and first
         * day of year included in the first week. Or use ISO format if no settings
         * given.
         *
         * @param int|null $week
         * @param int|null $dayOfWeek
         * @param int|null $dayOfYear
         *
         * @return int|static
         */
        public function isoWeek($week = null, $dayOfWeek = null, $dayOfYear = null);

        /**
         * Set/get the week number of year using given first day of week and first
         * day of year included in the first week. Or use ISO format if no settings
         * given.
         *
         * @param int|null $year      if null, act as a getter, if not null, set the year and return current instance.
         * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
         * @param int|null $dayOfYear first day of year included in the week #1
         *
         * @return int|static
         */
        public function isoWeekYear($year = null, $dayOfWeek = null, $dayOfYear = null);

        /**
         * Get/set the ISO weekday from 1 (Monday) to 7 (Sunday).
         *
         * @param int|null $value new value for weekday if using as setter.
         *
         * @return static|int
         */
        public function isoWeekday($value = null);

        /**
         * Get the number of weeks of the current week-year using given first day of week and first
         * day of year included in the first week. Or use ISO format if no settings
         * given.
         *
         * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
         * @param int|null $dayOfYear first day of year included in the week #1
         *
         * @return int
         */
        public function isoWeeksInYear($dayOfWeek = null, $dayOfYear = null);

        /**
         * Prepare the object for JSON serialization.
         *
         * @return array|string
         */
        #[ReturnTypeWillChange]
        public function jsonSerialize();

        /**
         * Modify to the last occurrence of a given day of the week
         * in the current month. If no dayOfWeek is provided, modify to the
         * last day of the current month.  Use the supplied constants
         * to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int|null $dayOfWeek
         *
         * @return static
         */
        public function lastOfMonth($dayOfWeek = null);

        /**
         * Modify to the last occurrence of a given day of the week
         * in the current quarter. If no dayOfWeek is provided, modify to the
         * last day of the current quarter.  Use the supplied constants
         * to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int|null $dayOfWeek day of the week default null
         *
         * @return static
         */
        public function lastOfQuarter($dayOfWeek = null);

        /**
         * Modify to the last occurrence of a given day of the week
         * in the current year. If no dayOfWeek is provided, modify to the
         * last day of the current year.  Use the supplied constants
         * to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int|null $dayOfWeek day of the week default null
         *
         * @return static
         */
        public function lastOfYear($dayOfWeek = null);

        /**
         * Determines if the instance is less (before) than another
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25 12:45:16')->lessThan('2018-07-25 12:45:15'); // false
         * Carbon::parse('2018-07-25 12:45:16')->lessThan('2018-07-25 12:45:16'); // false
         * Carbon::parse('2018-07-25 12:45:16')->lessThan('2018-07-25 12:45:17'); // true
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @return bool
         */
        public function lessThan($date): bool;

        /**
         * Determines if the instance is less (before) or equal to another
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25 12:45:16')->lessThanOrEqualTo('2018-07-25 12:45:15'); // false
         * Carbon::parse('2018-07-25 12:45:16')->lessThanOrEqualTo('2018-07-25 12:45:16'); // true
         * Carbon::parse('2018-07-25 12:45:16')->lessThanOrEqualTo('2018-07-25 12:45:17'); // true
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @return bool
         */
        public function lessThanOrEqualTo($date): bool;

        /**
         * Get/set the locale for the current instance.
         *
         * @param string|null $locale
         * @param string      ...$fallbackLocales
         *
         * @return $this|string
         */
        public function locale(?string $locale = null, ...$fallbackLocales);

        /**
         * Returns true if the given locale is internally supported and has words for 1-day diff (just now, yesterday, tomorrow).
         * Support is considered enabled if the 3 words are translated in the given locale.
         *
         * @param string $locale locale ex. en
         *
         * @return bool
         */
        public static function localeHasDiffOneDayWords($locale);

        /**
         * Returns true if the given locale is internally supported and has diff syntax support (ago, from now, before, after).
         * Support is considered enabled if the 4 sentences are translated in the given locale.
         *
         * @param string $locale locale ex. en
         *
         * @return bool
         */
        public static function localeHasDiffSyntax($locale);

        /**
         * Returns true if the given locale is internally supported and has words for 2-days diff (before yesterday, after tomorrow).
         * Support is considered enabled if the 2 words are translated in the given locale.
         *
         * @param string $locale locale ex. en
         *
         * @return bool
         */
        public static function localeHasDiffTwoDayWords($locale);

        /**
         * Returns true if the given locale is internally supported and has period syntax support (X times, every X, from X, to X).
         * Support is considered enabled if the 4 sentences are translated in the given locale.
         *
         * @param string $locale locale ex. en
         *
         * @return bool
         */
        public static function localeHasPeriodSyntax($locale);

        /**
         * Returns true if the given locale is internally supported and has short-units support.
         * Support is considered enabled if either year, day or hour has a short variant translated.
         *
         * @param string $locale locale ex. en
         *
         * @return bool
         */
        public static function localeHasShortUnits($locale);

        /**
         * Determines if the instance is less (before) than another
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25 12:45:16')->lt('2018-07-25 12:45:15'); // false
         * Carbon::parse('2018-07-25 12:45:16')->lt('2018-07-25 12:45:16'); // false
         * Carbon::parse('2018-07-25 12:45:16')->lt('2018-07-25 12:45:17'); // true
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @see lessThan()
         *
         * @return bool
         */
        public function lt($date): bool;

        /**
         * Determines if the instance is less (before) or equal to another
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25 12:45:16')->lte('2018-07-25 12:45:15'); // false
         * Carbon::parse('2018-07-25 12:45:16')->lte('2018-07-25 12:45:16'); // true
         * Carbon::parse('2018-07-25 12:45:16')->lte('2018-07-25 12:45:17'); // true
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @see lessThanOrEqualTo()
         *
         * @return bool
         */
        public function lte($date): bool;

        /**
         * Register a custom macro.
         *
         * @example
         * ```
         * $userSettings = [
         *   'locale' => 'pt',
         *   'timezone' => 'America/Sao_Paulo',
         * ];
         * Carbon::macro('userFormat', function () use ($userSettings) {
         *   return $this->copy()->locale($userSettings['locale'])->tz($userSettings['timezone'])->calendar();
         * });
         * echo Carbon::yesterday()->hours(11)->userFormat();
         * ```
         *
         * @param string          $name
         * @param object|callable $macro
         *
         * @return void
         */
        public static function macro($name, $macro);

        /**
         * Make a Carbon instance from given variable if possible.
         *
         * Always return a new instance. Parse only strings and only these likely to be dates (skip intervals
         * and recurrences). Throw an exception for invalid format, but otherwise return null.
         *
         * @param mixed $var
         *
         * @throws InvalidFormatException
         *
         * @return static|null
         */
        public static function make($var);

        /**
         * Get the maximum instance between a given instance (default now) and the current instance.
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @return static
         */
        public function max($date = null);

        /**
         * Create a Carbon instance for the greatest supported date.
         *
         * @return static
         */
        public static function maxValue();

        /**
         * Get the maximum instance between a given instance (default now) and the current instance.
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @see max()
         *
         * @return static
         */
        public function maximum($date = null);

        /**
         * Return the meridiem of the current time in the current locale.
         *
         * @param bool $isLower if true, returns lowercase variant if available in the current locale.
         *
         * @return string
         */
        public function meridiem(bool $isLower = false): string;

        /**
         * Modify to midday, default to self::$midDayAt
         *
         * @return static
         */
        public function midDay();

        /**
         * Get the minimum instance between a given instance (default now) and the current instance.
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @return static
         */
        public function min($date = null);

        /**
         * Create a Carbon instance for the lowest supported date.
         *
         * @return static
         */
        public static function minValue();

        /**
         * Get the minimum instance between a given instance (default now) and the current instance.
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @see min()
         *
         * @return static
         */
        public function minimum($date = null);

        /**
         * Mix another object into the class.
         *
         * @example
         * ```
         * Carbon::mixin(new class {
         *   public function addMoon() {
         *     return function () {
         *       return $this->addDays(30);
         *     };
         *   }
         *   public function subMoon() {
         *     return function () {
         *       return $this->subDays(30);
         *     };
         *   }
         * });
         * $fullMoon = Carbon::create('2018-12-22');
         * $nextFullMoon = $fullMoon->addMoon();
         * $blackMoon = Carbon::create('2019-01-06');
         * $previousBlackMoon = $blackMoon->subMoon();
         * echo "$nextFullMoon\n";
         * echo "$previousBlackMoon\n";
         * ```
         *
         * @param object|string $mixin
         *
         * @throws ReflectionException
         *
         * @return void
         */
        public static function mixin($mixin);

        /**
         * Calls \DateTime::modify if mutable or \DateTimeImmutable::modify else.
         *
         * @see https://php.net/manual/en/datetime.modify.php
         *
         * @return static|false
         */
        #[ReturnTypeWillChange]
        public function modify($modify);

        /**
         * Determines if the instance is not equal to another
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25 12:45:16')->ne('2018-07-25 12:45:16'); // false
         * Carbon::parse('2018-07-25 12:45:16')->ne(Carbon::parse('2018-07-25 12:45:16')); // false
         * Carbon::parse('2018-07-25 12:45:16')->ne('2018-07-25 12:45:17'); // true
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @see notEqualTo()
         *
         * @return bool
         */
        public function ne($date): bool;

        /**
         * Modify to the next occurrence of a given modifier such as a day of
         * the week. If no modifier is provided, modify to the next occurrence
         * of the current day of the week. Use the supplied constants
         * to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param string|int|null $modifier
         *
         * @return static
         */
        public function next($modifier = null);

        /**
         * Go forward to the next weekday.
         *
         * @return static
         */
        public function nextWeekday();

        /**
         * Go forward to the next weekend day.
         *
         * @return static
         */
        public function nextWeekendDay();

        /**
         * Determines if the instance is not equal to another
         *
         * @example
         * ```
         * Carbon::parse('2018-07-25 12:45:16')->notEqualTo('2018-07-25 12:45:16'); // false
         * Carbon::parse('2018-07-25 12:45:16')->notEqualTo(Carbon::parse('2018-07-25 12:45:16')); // false
         * Carbon::parse('2018-07-25 12:45:16')->notEqualTo('2018-07-25 12:45:17'); // true
         * ```
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @return bool
         */
        public function notEqualTo($date): bool;

        /**
         * Get a Carbon instance for the current date and time.
         *
         * @param DateTimeZone|string|null $tz
         *
         * @return static
         */
        public static function now($tz = null);

        /**
         * Returns a present instance in the same timezone.
         *
         * @return static
         */
        public function nowWithSameTz();

        /**
         * Modify to the given occurrence of a given day of the week
         * in the current month. If the calculated occurrence is outside the scope
         * of the current month, then return false and no modifications are made.
         * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int $nth
         * @param int $dayOfWeek
         *
         * @return mixed
         */
        public function nthOfMonth($nth, $dayOfWeek);

        /**
         * Modify to the given occurrence of a given day of the week
         * in the current quarter. If the calculated occurrence is outside the scope
         * of the current quarter, then return false and no modifications are made.
         * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int $nth
         * @param int $dayOfWeek
         *
         * @return mixed
         */
        public function nthOfQuarter($nth, $dayOfWeek);

        /**
         * Modify to the given occurrence of a given day of the week
         * in the current year. If the calculated occurrence is outside the scope
         * of the current year, then return false and no modifications are made.
         * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int $nth
         * @param int $dayOfWeek
         *
         * @return mixed
         */
        public function nthOfYear($nth, $dayOfWeek);

        /**
         * Return a property with its ordinal.
         *
         * @param string      $key
         * @param string|null $period
         *
         * @return string
         */
        public function ordinal(string $key, ?string $period = null): string;

        /**
         * Create a carbon instance from a string.
         *
         * This is an alias for the constructor that allows better fluent syntax
         * as it allows you to do Carbon::parse('Monday next week')->fn() rather
         * than (new Carbon('Monday next week'))->fn().
         *
         * @param string|DateTimeInterface|null $time
         * @param DateTimeZone|string|null      $tz
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function parse($time = null, $tz = null);

        /**
         * Create a carbon instance from a localized string (in French, Japanese, Arabic, etc.).
         *
         * @param string                   $time   date/time string in the given language (may also contain English).
         * @param string|null              $locale if locale is null or not specified, current global locale will be
         *                                         used instead.
         * @param DateTimeZone|string|null $tz     optional timezone for the new instance.
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function parseFromLocale($time, $locale = null, $tz = null);

        /**
         * Returns standardized plural of a given singular/plural unit name (in English).
         *
         * @param string $unit
         *
         * @return string
         */
        public static function pluralUnit(string $unit): string;

        /**
         * Modify to the previous occurrence of a given modifier such as a day of
         * the week. If no dayOfWeek is provided, modify to the previous occurrence
         * of the current day of the week. Use the supplied constants
         * to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param string|int|null $modifier
         *
         * @return static
         */
        public function previous($modifier = null);

        /**
         * Go backward to the previous weekday.
         *
         * @return static
         */
        public function previousWeekday();

        /**
         * Go backward to the previous weekend day.
         *
         * @return static
         */
        public function previousWeekendDay();

        /**
         * Create a iterable CarbonPeriod object from current date to a given end date (and optional interval).
         *
         * @param \DateTimeInterface|Carbon|CarbonImmutable|null $end      period end date
         * @param int|\DateInterval|string|null                  $interval period default interval or number of the given $unit
         * @param string|null                                    $unit     if specified, $interval must be an integer
         *
         * @return CarbonPeriod
         */
        public function range($end = null, $interval = null, $unit = null);

        /**
         * Call native PHP DateTime/DateTimeImmutable add() method.
         *
         * @param DateInterval $interval
         *
         * @return static
         */
        public function rawAdd(DateInterval $interval);

        /**
         * Create a Carbon instance from a specific format.
         *
         * @param string                         $format Datetime format
         * @param string                         $time
         * @param DateTimeZone|string|false|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static|false
         */
        public static function rawCreateFromFormat($format, $time, $tz = null);

        /**
         * @see https://php.net/manual/en/datetime.format.php
         *
         * @param string $format
         *
         * @return string
         */
        public function rawFormat($format);

        /**
         * Create a carbon instance from a string.
         *
         * This is an alias for the constructor that allows better fluent syntax
         * as it allows you to do Carbon::parse('Monday next week')->fn() rather
         * than (new Carbon('Monday next week'))->fn().
         *
         * @param string|DateTimeInterface|null $time
         * @param DateTimeZone|string|null      $tz
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function rawParse($time = null, $tz = null);

        /**
         * Call native PHP DateTime/DateTimeImmutable sub() method.
         *
         * @param DateInterval $interval
         *
         * @return static
         */
        public function rawSub(DateInterval $interval);

        /**
         * Remove all macros and generic macros.
         */
        public static function resetMacros();

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather use the ->settings() method.
         *             Or you can use method variants: addMonthsWithOverflow/addMonthsNoOverflow, same variants
         *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
         * @see settings
         *
         * Reset the month overflow behavior.
         *
         * @return void
         */
        public static function resetMonthsOverflow();

        /**
         * Reset the format used to the default when type juggling a Carbon instance to a string
         *
         * @return void
         */
        public static function resetToStringFormat();

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather use the ->settings() method.
         *             Or you can use method variants: addYearsWithOverflow/addYearsNoOverflow, same variants
         *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
         * @see settings
         *
         * Reset the month overflow behavior.
         *
         * @return void
         */
        public static function resetYearsOverflow();

        /**
         * Round the current instance second with given precision if specified.
         *
         * @param float|int|string|\DateInterval|null $precision
         * @param string                              $function
         *
         * @return CarbonInterface
         */
        public function round($precision = 1, $function = 'round');

        /**
         * Round the current instance at the given unit with given precision if specified and the given function.
         *
         * @param string    $unit
         * @param float|int $precision
         * @param string    $function
         *
         * @return CarbonInterface
         */
        public function roundUnit($unit, $precision = 1, $function = 'round');

        /**
         * Round the current instance week.
         *
         * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
         *
         * @return CarbonInterface
         */
        public function roundWeek($weekStartsAt = null);

        /**
         * The number of seconds since midnight.
         *
         * @return int
         */
        public function secondsSinceMidnight();

        /**
         * The number of seconds until 23:59:59.
         *
         * @return int
         */
        public function secondsUntilEndOfDay();

        /**
         * Return a serialized string of the instance.
         *
         * @return string
         */
        public function serialize();

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather transform Carbon object before the serialization.
         *
         * JSON serialize all Carbon instances using the given callback.
         *
         * @param callable $callback
         *
         * @return void
         */
        public static function serializeUsing($callback);

        /**
         * Set a part of the Carbon object
         *
         * @param string|array            $name
         * @param string|int|DateTimeZone $value
         *
         * @throws ImmutableException|UnknownSetterException
         *
         * @return $this
         */
        public function set($name, $value = null);

        /**
         * Set the date with gregorian year, month and day numbers.
         *
         * @see https://php.net/manual/en/datetime.setdate.php
         *
         * @param int $year
         * @param int $month
         * @param int $day
         *
         * @return static
         */
        #[ReturnTypeWillChange]
        public function setDate($year, $month, $day);

        /**
         * Set the year, month, and date for this instance to that of the passed instance.
         *
         * @param Carbon|DateTimeInterface $date now if null
         *
         * @return static
         */
        public function setDateFrom($date = null);

        /**
         * Set the date and time all together.
         *
         * @param int $year
         * @param int $month
         * @param int $day
         * @param int $hour
         * @param int $minute
         * @param int $second
         * @param int $microseconds
         *
         * @return static
         */
        public function setDateTime($year, $month, $day, $hour, $minute, $second = 0, $microseconds = 0);

        /**
         * Set the date and time for this instance to that of the passed instance.
         *
         * @param Carbon|DateTimeInterface $date
         *
         * @return static
         */
        public function setDateTimeFrom($date = null);

        /**
         * Set the fallback locale.
         *
         * @see https://symfony.com/doc/current/components/translation.html#fallback-locales
         *
         * @param string $locale
         */
        public static function setFallbackLocale($locale);

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather use the ->settings() method.
         * @see settings
         *
         * @param int $humanDiffOptions
         */
        public static function setHumanDiffOptions($humanDiffOptions);

        /**
         * Set a date according to the ISO 8601 standard - using weeks and day offsets rather than specific dates.
         *
         * @see https://php.net/manual/en/datetime.setisodate.php
         *
         * @param int $year
         * @param int $week
         * @param int $day
         *
         * @return static
         */
        #[ReturnTypeWillChange]
        public function setISODate($year, $week, $day = 1);

        /**
         * Set the translator for the current instance.
         *
         * @param \Symfony\Component\Translation\TranslatorInterface $translator
         *
         * @return $this
         */
        public function setLocalTranslator(TranslatorInterface $translator);

        /**
         * Set the current translator locale and indicate if the source locale file exists.
         * Pass 'auto' as locale to use closest language from the current LC_TIME locale.
         *
         * @param string $locale locale ex. en
         *
         * @return bool
         */
        public static function setLocale($locale);

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather consider mid-day is always 12pm, then if you need to test if it's an other
         *             hour, test it explicitly:
         *                 $date->format('G') == 13
         *             or to set explicitly to a given hour:
         *                 $date->setTime(13, 0, 0, 0)
         *
         * Set midday/noon hour
         *
         * @param int $hour midday hour
         *
         * @return void
         */
        public static function setMidDayAt($hour);

        /**
         * Set a Carbon instance (real or mock) to be returned when a "now"
         * instance is created.  The provided instance will be returned
         * specifically under the following conditions:
         *   - A call to the static now() method, ex. Carbon::now()
         *   - When a null (or blank string) is passed to the constructor or parse(), ex. new Carbon(null)
         *   - When the string "now" is passed to the constructor or parse(), ex. new Carbon('now')
         *   - When a string containing the desired time is passed to Carbon::parse().
         *
         * Note the timezone parameter was left out of the examples above and
         * has no affect as the mock value will be returned regardless of its value.
         *
         * To clear the test instance call this method using the default
         * parameter of null.
         *
         * /!\ Use this method for unit tests only.
         *
         * @param Closure|static|string|false|null $testNow real or mock Carbon instance
         */
        public static function setTestNow($testNow = null);

        /**
         * Resets the current time of the DateTime object to a different time.
         *
         * @see https://php.net/manual/en/datetime.settime.php
         *
         * @param int $hour
         * @param int $minute
         * @param int $second
         * @param int $microseconds
         *
         * @return static
         */
        #[ReturnTypeWillChange]
        public function setTime($hour, $minute, $second = 0, $microseconds = 0);

        /**
         * Set the hour, minute, second and microseconds for this instance to that of the passed instance.
         *
         * @param Carbon|DateTimeInterface $date now if null
         *
         * @return static
         */
        public function setTimeFrom($date = null);

        /**
         * Set the time by time string.
         *
         * @param string $time
         *
         * @return static
         */
        public function setTimeFromTimeString($time);

        /**
         * Set the instance's timestamp.
         *
         * Timestamp input can be given as int, float or a string containing one or more numbers.
         *
         * @param float|int|string $unixTimestamp
         *
         * @return static
         */
        #[ReturnTypeWillChange]
        public function setTimestamp($unixTimestamp);

        /**
         * Set the instance's timezone from a string or object.
         *
         * @param DateTimeZone|string $value
         *
         * @return static
         */
        #[ReturnTypeWillChange]
        public function setTimezone($value);

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather let Carbon object being casted to string with DEFAULT_TO_STRING_FORMAT, and
         *             use other method or custom format passed to format() method if you need to dump an other string
         *             format.
         *
         * Set the default format used when type juggling a Carbon instance to a string
         *
         * @param string|Closure|null $format
         *
         * @return void
         */
        public static function setToStringFormat($format);

        /**
         * Set the default translator instance to use.
         *
         * @param \Symfony\Component\Translation\TranslatorInterface $translator
         *
         * @return void
         */
        public static function setTranslator(TranslatorInterface $translator);

        /**
         * Set specified unit to new given value.
         *
         * @param string $unit  year, month, day, hour, minute, second or microsecond
         * @param int    $value new value for given unit
         *
         * @return static
         */
        public function setUnit($unit, $value = null);

        /**
         * Set any unit to a new value without overflowing current other unit given.
         *
         * @param string $valueUnit    unit name to modify
         * @param int    $value        new value for the input unit
         * @param string $overflowUnit unit name to not overflow
         *
         * @return static
         */
        public function setUnitNoOverflow($valueUnit, $value, $overflowUnit);

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather use UTF-8 language packages on every machine.
         *
         * Set if UTF8 will be used for localized date/time.
         *
         * @param bool $utf8
         */
        public static function setUtf8($utf8);

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             Use $weekStartsAt optional parameter instead when using startOfWeek, floorWeek, ceilWeek
         *             or roundWeek method. You can also use the 'first_day_of_week' locale setting to change the
         *             start of week according to current locale selected and implicitly the end of week.
         *
         * Set the last day of week
         *
         * @param int|string $day week end day (or 'auto' to get the day before the first day of week
         *                        from Carbon::getLocale() culture).
         *
         * @return void
         */
        public static function setWeekEndsAt($day);

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             Use $weekEndsAt optional parameter instead when using endOfWeek method. You can also use the
         *             'first_day_of_week' locale setting to change the start of week according to current locale
         *             selected and implicitly the end of week.
         *
         * Set the first day of week
         *
         * @param int|string $day week start day (or 'auto' to get the first day of week from Carbon::getLocale() culture).
         *
         * @return void
         */
        public static function setWeekStartsAt($day);

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather consider week-end is always saturday and sunday, and if you have some custom
         *             week-end days to handle, give to those days an other name and create a macro for them:
         *
         *             ```
         *             Carbon::macro('isDayOff', function ($date) {
         *                 return $date->isSunday() || $date->isMonday();
         *             });
         *             Carbon::macro('isNotDayOff', function ($date) {
         *                 return !$date->isDayOff();
         *             });
         *             if ($someDate->isDayOff()) ...
         *             if ($someDate->isNotDayOff()) ...
         *             // Add 5 not-off days
         *             $count = 5;
         *             while ($someDate->isDayOff() || ($count-- > 0)) {
         *                 $someDate->addDay();
         *             }
         *             ```
         *
         * Set weekend days
         *
         * @param array $days
         *
         * @return void
         */
        public static function setWeekendDays($days);

        /**
         * Set specific options.
         *  - strictMode: true|false|null
         *  - monthOverflow: true|false|null
         *  - yearOverflow: true|false|null
         *  - humanDiffOptions: int|null
         *  - toStringFormat: string|Closure|null
         *  - toJsonFormat: string|Closure|null
         *  - locale: string|null
         *  - timezone: \DateTimeZone|string|int|null
         *  - macros: array|null
         *  - genericMacros: array|null
         *
         * @param array $settings
         *
         * @return $this|static
         */
        public function settings(array $settings);

        /**
         * Set the instance's timezone from a string or object and add/subtract the offset difference.
         *
         * @param DateTimeZone|string $value
         *
         * @return static
         */
        public function shiftTimezone($value);

        /**
         * Get the month overflow global behavior (can be overridden in specific instances).
         *
         * @return bool
         */
        public static function shouldOverflowMonths();

        /**
         * Get the month overflow global behavior (can be overridden in specific instances).
         *
         * @return bool
         */
        public static function shouldOverflowYears();

        /**
         * @alias diffForHumans
         *
         * Get the difference in a human readable format in the current locale from current instance to an other
         * instance given (or now if null given).
         */
        public function since($other = null, $syntax = null, $short = false, $parts = 1, $options = null);

        /**
         * Returns standardized singular of a given singular/plural unit name (in English).
         *
         * @param string $unit
         *
         * @return string
         */
        public static function singularUnit(string $unit): string;

        /**
         * Modify to start of current given unit.
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16.334455')
         *   ->startOf('month')
         *   ->endOf('week', Carbon::FRIDAY);
         * ```
         *
         * @param string            $unit
         * @param array<int, mixed> $params
         *
         * @return static
         */
        public function startOf($unit, ...$params);

        /**
         * Resets the date to the first day of the century and the time to 00:00:00
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfCentury();
         * ```
         *
         * @return static
         */
        public function startOfCentury();

        /**
         * Resets the time to 00:00:00 start of day
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfDay();
         * ```
         *
         * @return static
         */
        public function startOfDay();

        /**
         * Resets the date to the first day of the decade and the time to 00:00:00
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfDecade();
         * ```
         *
         * @return static
         */
        public function startOfDecade();

        /**
         * Modify to start of current hour, minutes and seconds become 0
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfHour();
         * ```
         *
         * @return static
         */
        public function startOfHour();

        /**
         * Resets the date to the first day of the millennium and the time to 00:00:00
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfMillennium();
         * ```
         *
         * @return static
         */
        public function startOfMillennium();

        /**
         * Modify to start of current minute, seconds become 0
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfMinute();
         * ```
         *
         * @return static
         */
        public function startOfMinute();

        /**
         * Resets the date to the first day of the month and the time to 00:00:00
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfMonth();
         * ```
         *
         * @return static
         */
        public function startOfMonth();

        /**
         * Resets the date to the first day of the quarter and the time to 00:00:00
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfQuarter();
         * ```
         *
         * @return static
         */
        public function startOfQuarter();

        /**
         * Modify to start of current second, microseconds become 0
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16.334455')
         *   ->startOfSecond()
         *   ->format('H:i:s.u');
         * ```
         *
         * @return static
         */
        public function startOfSecond();

        /**
         * Resets the date to the first day of week (defined in $weekStartsAt) and the time to 00:00:00
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfWeek() . "\n";
         * echo Carbon::parse('2018-07-25 12:45:16')->locale('ar')->startOfWeek() . "\n";
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfWeek(Carbon::SUNDAY) . "\n";
         * ```
         *
         * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
         *
         * @return static
         */
        public function startOfWeek($weekStartsAt = null);

        /**
         * Resets the date to the first day of the year and the time to 00:00:00
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfYear();
         * ```
         *
         * @return static
         */
        public function startOfYear();

        /**
         * Subtract given units or interval to the current instance.
         *
         * @example $date->sub('hour', 3)
         * @example $date->sub(15, 'days')
         * @example $date->sub(CarbonInterval::days(4))
         *
         * @param string|DateInterval|Closure|CarbonConverterInterface $unit
         * @param int                                                  $value
         * @param bool|null                                            $overflow
         *
         * @return static
         */
        #[ReturnTypeWillChange]
        public function sub($unit, $value = 1, $overflow = null);

        public function subRealUnit($unit, $value = 1);

        /**
         * Subtract given units to the current instance.
         *
         * @param string    $unit
         * @param int       $value
         * @param bool|null $overflow
         *
         * @return static
         */
        public function subUnit($unit, $value = 1, $overflow = null);

        /**
         * Subtract any unit to a new value without overflowing current other unit given.
         *
         * @param string $valueUnit    unit name to modify
         * @param int    $value        amount to subtract to the input unit
         * @param string $overflowUnit unit name to not overflow
         *
         * @return static
         */
        public function subUnitNoOverflow($valueUnit, $value, $overflowUnit);

        /**
         * Subtract given units or interval to the current instance.
         *
         * @see sub()
         *
         * @param string|DateInterval $unit
         * @param int                 $value
         * @param bool|null           $overflow
         *
         * @return static
         */
        public function subtract($unit, $value = 1, $overflow = null);

        /**
         * Get the difference in a human readable format in the current locale from current instance to an other
         * instance given (or now if null given).
         *
         * @return string
         */
        public function timespan($other = null, $timezone = null);

        /**
         * Set the instance's timestamp.
         *
         * Timestamp input can be given as int, float or a string containing one or more numbers.
         *
         * @param float|int|string $unixTimestamp
         *
         * @return static
         */
        public function timestamp($unixTimestamp);

        /**
         * @alias setTimezone
         *
         * @param DateTimeZone|string $value
         *
         * @return static
         */
        public function timezone($value);

        /**
         * Get the difference in a human readable format in the current locale from an other
         * instance given (or now if null given) to current instance.
         *
         * When comparing a value in the past to default now:
         * 1 hour from now
         * 5 months from now
         *
         * When comparing a value in the future to default now:
         * 1 hour ago
         * 5 months ago
         *
         * When comparing a value in the past to another value:
         * 1 hour after
         * 5 months after
         *
         * When comparing a value in the future to another value:
         * 1 hour before
         * 5 months before
         *
         * @param Carbon|\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
         *                                                             if null passed, now will be used as comparison reference;
         *                                                             if any other type, it will be converted to date and used as reference.
         * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
         *                                                             - 'syntax' entry (see below)
         *                                                             - 'short' entry (see below)
         *                                                             - 'parts' entry (see below)
         *                                                             - 'options' entry (see below)
         *                                                             - 'join' entry determines how to join multiple parts of the string
         *                                                             `  - if $join is a string, it's used as a joiner glue
         *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
         *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
         *                                                             `    will be used instead of the glue for the last item
         *                                                             `  - if $join is true, it will be guessed from the locale ('list' translation file entry)
         *                                                             `  - if $join is missing, a space will be used as glue
         *                                                             - 'other' entry (see above)
         *                                                             if int passed, it add modifiers:
         *                                                             Possible values:
         *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
         *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
         *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
         *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
         * @param bool                                        $short   displays short format of time units
         * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
         * @param int                                         $options human diff options
         *
         * @return string
         */
        public function to($other = null, $syntax = null, $short = false, $parts = 1, $options = null);

        /**
         * Get default array representation.
         *
         * @example
         * ```
         * var_dump(Carbon::now()->toArray());
         * ```
         *
         * @return array
         */
        public function toArray();

        /**
         * Format the instance as ATOM
         *
         * @example
         * ```
         * echo Carbon::now()->toAtomString();
         * ```
         *
         * @return string
         */
        public function toAtomString();

        /**
         * Format the instance as COOKIE
         *
         * @example
         * ```
         * echo Carbon::now()->toCookieString();
         * ```
         *
         * @return string
         */
        public function toCookieString();

        /**
         * @alias toDateTime
         *
         * Return native DateTime PHP object matching the current instance.
         *
         * @example
         * ```
         * var_dump(Carbon::now()->toDate());
         * ```
         *
         * @return DateTime
         */
        public function toDate();

        /**
         * Format the instance as date
         *
         * @example
         * ```
         * echo Carbon::now()->toDateString();
         * ```
         *
         * @return string
         */
        public function toDateString();

        /**
         * Return native DateTime PHP object matching the current instance.
         *
         * @example
         * ```
         * var_dump(Carbon::now()->toDateTime());
         * ```
         *
         * @return DateTime
         */
        public function toDateTime();

        /**
         * Return native toDateTimeImmutable PHP object matching the current instance.
         *
         * @example
         * ```
         * var_dump(Carbon::now()->toDateTimeImmutable());
         * ```
         *
         * @return DateTimeImmutable
         */
        public function toDateTimeImmutable();

        /**
         * Format the instance as date and time T-separated with no timezone
         *
         * @example
         * ```
         * echo Carbon::now()->toDateTimeLocalString();
         * echo "\n";
         * echo Carbon::now()->toDateTimeLocalString('minute'); // You can specify precision among: minute, second, millisecond and microsecond
         * ```
         *
         * @param string $unitPrecision
         *
         * @return string
         */
        public function toDateTimeLocalString($unitPrecision = 'second');

        /**
         * Format the instance as date and time
         *
         * @example
         * ```
         * echo Carbon::now()->toDateTimeString();
         * ```
         *
         * @param string $unitPrecision
         *
         * @return string
         */
        public function toDateTimeString($unitPrecision = 'second');

        /**
         * Format the instance with day, date and time
         *
         * @example
         * ```
         * echo Carbon::now()->toDayDateTimeString();
         * ```
         *
         * @return string
         */
        public function toDayDateTimeString();

        /**
         * Format the instance as a readable date
         *
         * @example
         * ```
         * echo Carbon::now()->toFormattedDateString();
         * ```
         *
         * @return string
         */
        public function toFormattedDateString();

        /**
         * Return the ISO-8601 string (ex: 1977-04-22T06:00:00Z, if $keepOffset truthy, offset will be kept:
         * 1977-04-22T01:00:00-05:00).
         *
         * @example
         * ```
         * echo Carbon::now('America/Toronto')->toISOString() . "\n";
         * echo Carbon::now('America/Toronto')->toISOString(true) . "\n";
         * ```
         *
         * @param bool $keepOffset Pass true to keep the date offset. Else forced to UTC.
         *
         * @return null|string
         */
        public function toISOString($keepOffset = false);

        /**
         * Return a immutable copy of the instance.
         *
         * @return CarbonImmutable
         */
        public function toImmutable();

        /**
         * Format the instance as ISO8601
         *
         * @example
         * ```
         * echo Carbon::now()->toIso8601String();
         * ```
         *
         * @return string
         */
        public function toIso8601String();

        /**
         * Convert the instance to UTC and return as Zulu ISO8601
         *
         * @example
         * ```
         * echo Carbon::now()->toIso8601ZuluString();
         * ```
         *
         * @param string $unitPrecision
         *
         * @return string
         */
        public function toIso8601ZuluString($unitPrecision = 'second');

        /**
         * Return the ISO-8601 string (ex: 1977-04-22T06:00:00Z) with UTC timezone.
         *
         * @example
         * ```
         * echo Carbon::now('America/Toronto')->toJSON();
         * ```
         *
         * @return null|string
         */
        public function toJSON();

        /**
         * Return a mutable copy of the instance.
         *
         * @return Carbon
         */
        public function toMutable();

        /**
         * Get the difference in a human readable format in the current locale from an other
         * instance given to now
         *
         * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
         *                           - 'syntax' entry (see below)
         *                           - 'short' entry (see below)
         *                           - 'parts' entry (see below)
         *                           - 'options' entry (see below)
         *                           - 'join' entry determines how to join multiple parts of the string
         *                           `  - if $join is a string, it's used as a joiner glue
         *                           `  - if $join is a callable/closure, it get the list of string and should return a string
         *                           `  - if $join is an array, the first item will be the default glue, and the second item
         *                           `    will be used instead of the glue for the last item
         *                           `  - if $join is true, it will be guessed from the locale ('list' translation file entry)
         *                           `  - if $join is missing, a space will be used as glue
         *                           if int passed, it add modifiers:
         *                           Possible values:
         *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
         *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
         *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
         *                           Default value: CarbonInterface::DIFF_ABSOLUTE
         * @param bool      $short   displays short format of time units
         * @param int       $parts   maximum number of parts to display (default value: 1: single part)
         * @param int       $options human diff options
         *
         * @return string
         */
        public function toNow($syntax = null, $short = false, $parts = 1, $options = null);

        /**
         * Get default object representation.
         *
         * @example
         * ```
         * var_dump(Carbon::now()->toObject());
         * ```
         *
         * @return object
         */
        public function toObject();

        /**
         * Create a iterable CarbonPeriod object from current date to a given end date (and optional interval).
         *
         * @param \DateTimeInterface|Carbon|CarbonImmutable|int|null $end      period end date or recurrences count if int
         * @param int|\DateInterval|string|null                      $interval period default interval or number of the given $unit
         * @param string|null                                        $unit     if specified, $interval must be an integer
         *
         * @return CarbonPeriod
         */
        public function toPeriod($end = null, $interval = null, $unit = null);

        /**
         * Format the instance as RFC1036
         *
         * @example
         * ```
         * echo Carbon::now()->toRfc1036String();
         * ```
         *
         * @return string
         */
        public function toRfc1036String();

        /**
         * Format the instance as RFC1123
         *
         * @example
         * ```
         * echo Carbon::now()->toRfc1123String();
         * ```
         *
         * @return string
         */
        public function toRfc1123String();

        /**
         * Format the instance as RFC2822
         *
         * @example
         * ```
         * echo Carbon::now()->toRfc2822String();
         * ```
         *
         * @return string
         */
        public function toRfc2822String();

        /**
         * Format the instance as RFC3339
         *
         * @param bool $extended
         *
         * @example
         * ```
         * echo Carbon::now()->toRfc3339String() . "\n";
         * echo Carbon::now()->toRfc3339String(true) . "\n";
         * ```
         *
         * @return string
         */
        public function toRfc3339String($extended = false);

        /**
         * Format the instance as RFC7231
         *
         * @example
         * ```
         * echo Carbon::now()->toRfc7231String();
         * ```
         *
         * @return string
         */
        public function toRfc7231String();

        /**
         * Format the instance as RFC822
         *
         * @example
         * ```
         * echo Carbon::now()->toRfc822String();
         * ```
         *
         * @return string
         */
        public function toRfc822String();

        /**
         * Format the instance as RFC850
         *
         * @example
         * ```
         * echo Carbon::now()->toRfc850String();
         * ```
         *
         * @return string
         */
        public function toRfc850String();

        /**
         * Format the instance as RSS
         *
         * @example
         * ```
         * echo Carbon::now()->toRssString();
         * ```
         *
         * @return string
         */
        public function toRssString();

        /**
         * Returns english human readable complete date string.
         *
         * @example
         * ```
         * echo Carbon::now()->toString();
         * ```
         *
         * @return string
         */
        public function toString();

        /**
         * Format the instance as time
         *
         * @example
         * ```
         * echo Carbon::now()->toTimeString();
         * ```
         *
         * @param string $unitPrecision
         *
         * @return string
         */
        public function toTimeString($unitPrecision = 'second');

        /**
         * Format the instance as W3C
         *
         * @example
         * ```
         * echo Carbon::now()->toW3cString();
         * ```
         *
         * @return string
         */
        public function toW3cString();

        /**
         * Create a Carbon instance for today.
         *
         * @param DateTimeZone|string|null $tz
         *
         * @return static
         */
        public static function today($tz = null);

        /**
         * Create a Carbon instance for tomorrow.
         *
         * @param DateTimeZone|string|null $tz
         *
         * @return static
         */
        public static function tomorrow($tz = null);

        /**
         * Translate using translation string or callback available.
         *
         * @param string                                                  $key
         * @param array                                                   $parameters
         * @param string|int|float|null                                   $number
         * @param \Symfony\Component\Translation\TranslatorInterface|null $translator
         * @param bool                                                    $altNumbers
         *
         * @return string
         */
        public function translate(string $key, array $parameters = [], $number = null, ?TranslatorInterface $translator = null, bool $altNumbers = false): string;

        /**
         * Returns the alternative number for a given integer if available in the current locale.
         *
         * @param int $number
         *
         * @return string
         */
        public function translateNumber(int $number): string;

        /**
         * Translate a time string from a locale to an other.
         *
         * @param string      $timeString date/time/duration string to translate (may also contain English)
         * @param string|null $from       input locale of the $timeString parameter (`Carbon::getLocale()` by default)
         * @param string|null $to         output locale of the result returned (`"en"` by default)
         * @param int         $mode       specify what to translate with options:
         *                                - self::TRANSLATE_ALL (default)
         *                                - CarbonInterface::TRANSLATE_MONTHS
         *                                - CarbonInterface::TRANSLATE_DAYS
         *                                - CarbonInterface::TRANSLATE_UNITS
         *                                - CarbonInterface::TRANSLATE_MERIDIEM
         *                                You can use pipe to group: CarbonInterface::TRANSLATE_MONTHS | CarbonInterface::TRANSLATE_DAYS
         *
         * @return string
         */
        public static function translateTimeString($timeString, $from = null, $to = null, $mode = self::TRANSLATE_ALL);

        /**
         * Translate a time string from the current locale (`$date->locale()`) to an other.
         *
         * @param string      $timeString time string to translate
         * @param string|null $to         output locale of the result returned ("en" by default)
         *
         * @return string
         */
        public function translateTimeStringTo($timeString, $to = null);

        /**
         * Translate using translation string or callback available.
         *
         * @param \Symfony\Component\Translation\TranslatorInterface $translator
         * @param string                                             $key
         * @param array                                              $parameters
         * @param null                                               $number
         *
         * @return string
         */
        public static function translateWith(TranslatorInterface $translator, string $key, array $parameters = [], $number = null): string;

        /**
         * Format as ->format() do (using date replacements patterns from https://php.net/manual/en/function.date.php)
         * but translate words whenever possible (months, day names, etc.) using the current locale.
         *
         * @param string $format
         *
         * @return string
         */
        public function translatedFormat(string $format): string;

        /**
         * Set the timezone or returns the timezone name if no arguments passed.
         *
         * @param DateTimeZone|string $value
         *
         * @return static|string
         */
        public function tz($value = null);

        /**
         * @alias getTimestamp
         *
         * Returns the UNIX timestamp for the current date.
         *
         * @return int
         */
        public function unix();

        /**
         * @alias to
         *
         * Get the difference in a human readable format in the current locale from an other
         * instance given (or now if null given) to current instance.
         *
         * @param Carbon|\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
         *                                                             if null passed, now will be used as comparison reference;
         *                                                             if any other type, it will be converted to date and used as reference.
         * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
         *                                                             - 'syntax' entry (see below)
         *                                                             - 'short' entry (see below)
         *                                                             - 'parts' entry (see below)
         *                                                             - 'options' entry (see below)
         *                                                             - 'join' entry determines how to join multiple parts of the string
         *                                                             `  - if $join is a string, it's used as a joiner glue
         *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
         *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
         *                                                             `    will be used instead of the glue for the last item
         *                                                             `  - if $join is true, it will be guessed from the locale ('list' translation file entry)
         *                                                             `  - if $join is missing, a space will be used as glue
         *                                                             - 'other' entry (see above)
         *                                                             if int passed, it add modifiers:
         *                                                             Possible values:
         *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
         *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
         *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
         *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
         * @param bool                                        $short   displays short format of time units
         * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
         * @param int                                         $options human diff options
         *
         * @return string
         */
        public function until($other = null, $syntax = null, $short = false, $parts = 1, $options = null);

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather use the ->settings() method.
         *             Or you can use method variants: addMonthsWithOverflow/addMonthsNoOverflow, same variants
         *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
         * @see settings
         *
         * Indicates if months should be calculated with overflow.
         *
         * @param bool $monthsOverflow
         *
         * @return void
         */
        public static function useMonthsOverflow($monthsOverflow = true);

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather use the ->settings() method.
         * @see settings
         *
         * Enable the strict mode (or disable with passing false).
         *
         * @param bool $strictModeEnabled
         */
        public static function useStrictMode($strictModeEnabled = true);

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather use the ->settings() method.
         *             Or you can use method variants: addYearsWithOverflow/addYearsNoOverflow, same variants
         *             are available for quarters, years, decade, centuries, millennia (singular and plural forms).
         * @see settings
         *
         * Indicates if years should be calculated with overflow.
         *
         * @param bool $yearsOverflow
         *
         * @return void
         */
        public static function useYearsOverflow($yearsOverflow = true);

        /**
         * Set the instance's timezone to UTC.
         *
         * @return static
         */
        public function utc();

        /**
         * Returns the minutes offset to UTC if no arguments passed, else set the timezone with given minutes shift passed.
         *
         * @param int|null $minuteOffset
         *
         * @return int|static
         */
        public function utcOffset(?int $minuteOffset = null);

        /**
         * Returns the milliseconds timestamps used amongst other by Date javascript objects.
         *
         * @return float
         */
        public function valueOf();

        /**
         * Get/set the week number using given first day of week and first
         * day of year included in the first week. Or use US format if no settings
         * given (Sunday / Jan 6).
         *
         * @param int|null $week
         * @param int|null $dayOfWeek
         * @param int|null $dayOfYear
         *
         * @return int|static
         */
        public function week($week = null, $dayOfWeek = null, $dayOfYear = null);

        /**
         * Set/get the week number of year using given first day of week and first
         * day of year included in the first week. Or use US format if no settings
         * given (Sunday / Jan 6).
         *
         * @param int|null $year      if null, act as a getter, if not null, set the year and return current instance.
         * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
         * @param int|null $dayOfYear first day of year included in the week #1
         *
         * @return int|static
         */
        public function weekYear($year = null, $dayOfWeek = null, $dayOfYear = null);

        /**
         * Get/set the weekday from 0 (Sunday) to 6 (Saturday).
         *
         * @param int|null $value new value for weekday if using as setter.
         *
         * @return static|int
         */
        public function weekday($value = null);

        /**
         * Get the number of weeks of the current week-year using given first day of week and first
         * day of year included in the first week. Or use US format if no settings
         * given (Sunday / Jan 6).
         *
         * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
         * @param int|null $dayOfYear first day of year included in the week #1
         *
         * @return int
         */
        public function weeksInYear($dayOfWeek = null, $dayOfYear = null);

        /**
         * Temporarily sets a static date to be used within the callback.
         * Using setTestNow to set the date, executing the callback, then
         * clearing the test instance.
         *
         * /!\ Use this method for unit tests only.
         *
         * @param Closure|static|string|false|null $testNow  real or mock Carbon instance
         * @param Closure|null                     $callback
         *
         * @return mixed
         */
        public static function withTestNow($testNow = null, $callback = null);

        /**
         * Create a Carbon instance for yesterday.
         *
         * @param DateTimeZone|string|null $tz
         *
         * @return static
         */
        public static function yesterday($tz = null);

        // </methods>
    }
  uploads-Carbon-src-Carbon-CarbonInterval.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon;

    use Carbon\Exceptions\BadFluentConstructorException;
    use Carbon\Exceptions\BadFluentSetterException;
    use Carbon\Exceptions\InvalidCastException;
    use Carbon\Exceptions\InvalidIntervalException;
    use Carbon\Exceptions\ParseErrorException;
    use Carbon\Exceptions\UnitNotConfiguredException;
    use Carbon\Exceptions\UnknownGetterException;
    use Carbon\Exceptions\UnknownSetterException;
    use Carbon\Exceptions\UnknownUnitException;
    use Carbon\Traits\IntervalRounding;
    use Carbon\Traits\IntervalStep;
    use Carbon\Traits\Mixin;
    use Carbon\Traits\Options;
    use Closure;
    use DateInterval;
    use DateTimeInterface;
    use DateTimeZone;
    use Exception;
    use ReflectionException;
    use ReturnTypeWillChange;
    use Throwable;

    /**
     * A simple API extension for DateInterval.
     * The implementation provides helpers to handle weeks but only days are saved.
     * Weeks are calculated based on the total days of the current instance.
     *
     * @property int $years Total years of the current interval.
     * @property int $months Total months of the current interval.
     * @property int $weeks Total weeks of the current interval calculated from the days.
     * @property int $dayz Total days of the current interval (weeks * 7 + days).
     * @property int $hours Total hours of the current interval.
     * @property int $minutes Total minutes of the current interval.
     * @property int $seconds Total seconds of the current interval.
     * @property int $microseconds Total microseconds of the current interval.
     * @property int $milliseconds Total microseconds of the current interval.
     * @property int $microExcludeMilli Remaining microseconds without the milliseconds.
     * @property int $dayzExcludeWeeks Total days remaining in the final week of the current instance (days % 7).
     * @property int $daysExcludeWeeks alias of dayzExcludeWeeks
     * @property-read float $totalYears Number of years equivalent to the interval.
     * @property-read float $totalMonths Number of months equivalent to the interval.
     * @property-read float $totalWeeks Number of weeks equivalent to the interval.
     * @property-read float $totalDays Number of days equivalent to the interval.
     * @property-read float $totalDayz Alias for totalDays.
     * @property-read float $totalHours Number of hours equivalent to the interval.
     * @property-read float $totalMinutes Number of minutes equivalent to the interval.
     * @property-read float $totalSeconds Number of seconds equivalent to the interval.
     * @property-read float $totalMilliseconds Number of milliseconds equivalent to the interval.
     * @property-read float $totalMicroseconds Number of microseconds equivalent to the interval.
     * @property-read string $locale locale of the current instance
     *
     * @method static CarbonInterval years($years = 1) Create instance specifying a number of years or modify the number of years if called on an instance.
     * @method static CarbonInterval year($years = 1) Alias for years()
     * @method static CarbonInterval months($months = 1) Create instance specifying a number of months or modify the number of months if called on an instance.
     * @method static CarbonInterval month($months = 1) Alias for months()
     * @method static CarbonInterval weeks($weeks = 1) Create instance specifying a number of weeks or modify the number of weeks if called on an instance.
     * @method static CarbonInterval week($weeks = 1) Alias for weeks()
     * @method static CarbonInterval days($days = 1) Create instance specifying a number of days or modify the number of days if called on an instance.
     * @method static CarbonInterval dayz($days = 1) Alias for days()
     * @method static CarbonInterval daysExcludeWeeks($days = 1) Create instance specifying a number of days or modify the number of days (keeping the current number of weeks) if called on an instance.
     * @method static CarbonInterval dayzExcludeWeeks($days = 1) Alias for daysExcludeWeeks()
     * @method static CarbonInterval day($days = 1) Alias for days()
     * @method static CarbonInterval hours($hours = 1) Create instance specifying a number of hours or modify the number of hours if called on an instance.
     * @method static CarbonInterval hour($hours = 1) Alias for hours()
     * @method static CarbonInterval minutes($minutes = 1) Create instance specifying a number of minutes or modify the number of minutes if called on an instance.
     * @method static CarbonInterval minute($minutes = 1) Alias for minutes()
     * @method static CarbonInterval seconds($seconds = 1) Create instance specifying a number of seconds or modify the number of seconds if called on an instance.
     * @method static CarbonInterval second($seconds = 1) Alias for seconds()
     * @method static CarbonInterval milliseconds($milliseconds = 1) Create instance specifying a number of milliseconds or modify the number of milliseconds if called on an instance.
     * @method static CarbonInterval millisecond($milliseconds = 1) Alias for milliseconds()
     * @method static CarbonInterval microseconds($microseconds = 1) Create instance specifying a number of microseconds or modify the number of microseconds if called on an instance.
     * @method static CarbonInterval microsecond($microseconds = 1) Alias for microseconds()
     * @method $this addYears(int $years) Add given number of years to the current interval
     * @method $this subYears(int $years) Subtract given number of years to the current interval
     * @method $this addMonths(int $months) Add given number of months to the current interval
     * @method $this subMonths(int $months) Subtract given number of months to the current interval
     * @method $this addWeeks(int|float $weeks) Add given number of weeks to the current interval
     * @method $this subWeeks(int|float $weeks) Subtract given number of weeks to the current interval
     * @method $this addDays(int|float $days) Add given number of days to the current interval
     * @method $this subDays(int|float $days) Subtract given number of days to the current interval
     * @method $this addHours(int|float $hours) Add given number of hours to the current interval
     * @method $this subHours(int|float $hours) Subtract given number of hours to the current interval
     * @method $this addMinutes(int|float $minutes) Add given number of minutes to the current interval
     * @method $this subMinutes(int|float $minutes) Subtract given number of minutes to the current interval
     * @method $this addSeconds(int|float $seconds) Add given number of seconds to the current interval
     * @method $this subSeconds(int|float $seconds) Subtract given number of seconds to the current interval
     * @method $this addMilliseconds(int|float $milliseconds) Add given number of milliseconds to the current interval
     * @method $this subMilliseconds(int|float $milliseconds) Subtract given number of milliseconds to the current interval
     * @method $this addMicroseconds(int|float $microseconds) Add given number of microseconds to the current interval
     * @method $this subMicroseconds(int|float $microseconds) Subtract given number of microseconds to the current interval
     * @method $this roundYear(int|float $precision = 1, string $function = "round") Round the current instance year with given precision using the given function.
     * @method $this roundYears(int|float $precision = 1, string $function = "round") Round the current instance year with given precision using the given function.
     * @method $this floorYear(int|float $precision = 1) Truncate the current instance year with given precision.
     * @method $this floorYears(int|float $precision = 1) Truncate the current instance year with given precision.
     * @method $this ceilYear(int|float $precision = 1) Ceil the current instance year with given precision.
     * @method $this ceilYears(int|float $precision = 1) Ceil the current instance year with given precision.
     * @method $this roundMonth(int|float $precision = 1, string $function = "round") Round the current instance month with given precision using the given function.
     * @method $this roundMonths(int|float $precision = 1, string $function = "round") Round the current instance month with given precision using the given function.
     * @method $this floorMonth(int|float $precision = 1) Truncate the current instance month with given precision.
     * @method $this floorMonths(int|float $precision = 1) Truncate the current instance month with given precision.
     * @method $this ceilMonth(int|float $precision = 1) Ceil the current instance month with given precision.
     * @method $this ceilMonths(int|float $precision = 1) Ceil the current instance month with given precision.
     * @method $this roundWeek(int|float $precision = 1, string $function = "round") Round the current instance day with given precision using the given function.
     * @method $this roundWeeks(int|float $precision = 1, string $function = "round") Round the current instance day with given precision using the given function.
     * @method $this floorWeek(int|float $precision = 1) Truncate the current instance day with given precision.
     * @method $this floorWeeks(int|float $precision = 1) Truncate the current instance day with given precision.
     * @method $this ceilWeek(int|float $precision = 1) Ceil the current instance day with given precision.
     * @method $this ceilWeeks(int|float $precision = 1) Ceil the current instance day with given precision.
     * @method $this roundDay(int|float $precision = 1, string $function = "round") Round the current instance day with given precision using the given function.
     * @method $this roundDays(int|float $precision = 1, string $function = "round") Round the current instance day with given precision using the given function.
     * @method $this floorDay(int|float $precision = 1) Truncate the current instance day with given precision.
     * @method $this floorDays(int|float $precision = 1) Truncate the current instance day with given precision.
     * @method $this ceilDay(int|float $precision = 1) Ceil the current instance day with given precision.
     * @method $this ceilDays(int|float $precision = 1) Ceil the current instance day with given precision.
     * @method $this roundHour(int|float $precision = 1, string $function = "round") Round the current instance hour with given precision using the given function.
     * @method $this roundHours(int|float $precision = 1, string $function = "round") Round the current instance hour with given precision using the given function.
     * @method $this floorHour(int|float $precision = 1) Truncate the current instance hour with given precision.
     * @method $this floorHours(int|float $precision = 1) Truncate the current instance hour with given precision.
     * @method $this ceilHour(int|float $precision = 1) Ceil the current instance hour with given precision.
     * @method $this ceilHours(int|float $precision = 1) Ceil the current instance hour with given precision.
     * @method $this roundMinute(int|float $precision = 1, string $function = "round") Round the current instance minute with given precision using the given function.
     * @method $this roundMinutes(int|float $precision = 1, string $function = "round") Round the current instance minute with given precision using the given function.
     * @method $this floorMinute(int|float $precision = 1) Truncate the current instance minute with given precision.
     * @method $this floorMinutes(int|float $precision = 1) Truncate the current instance minute with given precision.
     * @method $this ceilMinute(int|float $precision = 1) Ceil the current instance minute with given precision.
     * @method $this ceilMinutes(int|float $precision = 1) Ceil the current instance minute with given precision.
     * @method $this roundSecond(int|float $precision = 1, string $function = "round") Round the current instance second with given precision using the given function.
     * @method $this roundSeconds(int|float $precision = 1, string $function = "round") Round the current instance second with given precision using the given function.
     * @method $this floorSecond(int|float $precision = 1) Truncate the current instance second with given precision.
     * @method $this floorSeconds(int|float $precision = 1) Truncate the current instance second with given precision.
     * @method $this ceilSecond(int|float $precision = 1) Ceil the current instance second with given precision.
     * @method $this ceilSeconds(int|float $precision = 1) Ceil the current instance second with given precision.
     * @method $this roundMillennium(int|float $precision = 1, string $function = "round") Round the current instance millennium with given precision using the given function.
     * @method $this roundMillennia(int|float $precision = 1, string $function = "round") Round the current instance millennium with given precision using the given function.
     * @method $this floorMillennium(int|float $precision = 1) Truncate the current instance millennium with given precision.
     * @method $this floorMillennia(int|float $precision = 1) Truncate the current instance millennium with given precision.
     * @method $this ceilMillennium(int|float $precision = 1) Ceil the current instance millennium with given precision.
     * @method $this ceilMillennia(int|float $precision = 1) Ceil the current instance millennium with given precision.
     * @method $this roundCentury(int|float $precision = 1, string $function = "round") Round the current instance century with given precision using the given function.
     * @method $this roundCenturies(int|float $precision = 1, string $function = "round") Round the current instance century with given precision using the given function.
     * @method $this floorCentury(int|float $precision = 1) Truncate the current instance century with given precision.
     * @method $this floorCenturies(int|float $precision = 1) Truncate the current instance century with given precision.
     * @method $this ceilCentury(int|float $precision = 1) Ceil the current instance century with given precision.
     * @method $this ceilCenturies(int|float $precision = 1) Ceil the current instance century with given precision.
     * @method $this roundDecade(int|float $precision = 1, string $function = "round") Round the current instance decade with given precision using the given function.
     * @method $this roundDecades(int|float $precision = 1, string $function = "round") Round the current instance decade with given precision using the given function.
     * @method $this floorDecade(int|float $precision = 1) Truncate the current instance decade with given precision.
     * @method $this floorDecades(int|float $precision = 1) Truncate the current instance decade with given precision.
     * @method $this ceilDecade(int|float $precision = 1) Ceil the current instance decade with given precision.
     * @method $this ceilDecades(int|float $precision = 1) Ceil the current instance decade with given precision.
     * @method $this roundQuarter(int|float $precision = 1, string $function = "round") Round the current instance quarter with given precision using the given function.
     * @method $this roundQuarters(int|float $precision = 1, string $function = "round") Round the current instance quarter with given precision using the given function.
     * @method $this floorQuarter(int|float $precision = 1) Truncate the current instance quarter with given precision.
     * @method $this floorQuarters(int|float $precision = 1) Truncate the current instance quarter with given precision.
     * @method $this ceilQuarter(int|float $precision = 1) Ceil the current instance quarter with given precision.
     * @method $this ceilQuarters(int|float $precision = 1) Ceil the current instance quarter with given precision.
     * @method $this roundMillisecond(int|float $precision = 1, string $function = "round") Round the current instance millisecond with given precision using the given function.
     * @method $this roundMilliseconds(int|float $precision = 1, string $function = "round") Round the current instance millisecond with given precision using the given function.
     * @method $this floorMillisecond(int|float $precision = 1) Truncate the current instance millisecond with given precision.
     * @method $this floorMilliseconds(int|float $precision = 1) Truncate the current instance millisecond with given precision.
     * @method $this ceilMillisecond(int|float $precision = 1) Ceil the current instance millisecond with given precision.
     * @method $this ceilMilliseconds(int|float $precision = 1) Ceil the current instance millisecond with given precision.
     * @method $this roundMicrosecond(int|float $precision = 1, string $function = "round") Round the current instance microsecond with given precision using the given function.
     * @method $this roundMicroseconds(int|float $precision = 1, string $function = "round") Round the current instance microsecond with given precision using the given function.
     * @method $this floorMicrosecond(int|float $precision = 1) Truncate the current instance microsecond with given precision.
     * @method $this floorMicroseconds(int|float $precision = 1) Truncate the current instance microsecond with given precision.
     * @method $this ceilMicrosecond(int|float $precision = 1) Ceil the current instance microsecond with given precision.
     * @method $this ceilMicroseconds(int|float $precision = 1) Ceil the current instance microsecond with given precision.
     */
    class CarbonInterval extends DateInterval implements CarbonConverterInterface
    {
        use IntervalRounding;
        use IntervalStep;
        use Mixin {
            Mixin::mixin as baseMixin;
        }
        use Options;

        /**
         * Interval spec period designators
         */
        public const PERIOD_PREFIX = 'P';
        public const PERIOD_YEARS = 'Y';
        public const PERIOD_MONTHS = 'M';
        public const PERIOD_DAYS = 'D';
        public const PERIOD_TIME_PREFIX = 'T';
        public const PERIOD_HOURS = 'H';
        public const PERIOD_MINUTES = 'M';
        public const PERIOD_SECONDS = 'S';

        /**
         * A translator to ... er ... translate stuff
         *
         * @var \Symfony\Component\Translation\TranslatorInterface
         */
        protected static $translator;

        /**
         * @var array|null
         */
        protected static $cascadeFactors;

        /**
         * @var array
         */
        protected static $formats = [
            'y' => 'y',
            'Y' => 'y',
            'o' => 'y',
            'm' => 'm',
            'n' => 'm',
            'W' => 'weeks',
            'd' => 'd',
            'j' => 'd',
            'z' => 'd',
            'h' => 'h',
            'g' => 'h',
            'H' => 'h',
            'G' => 'h',
            'i' => 'i',
            's' => 's',
            'u' => 'micro',
            'v' => 'milli',
        ];

        /**
         * @var array|null
         */
        private static $flipCascadeFactors;

        /**
         * The registered macros.
         *
         * @var array
         */
        protected static $macros = [];

        /**
         * Timezone handler for settings() method.
         *
         * @var mixed
         */
        protected $tzName;

        /**
         * Set the instance's timezone from a string or object.
         *
         * @param \DateTimeZone|string $tzName
         *
         * @return static
         */
        public function setTimezone($tzName)
        {
            $this->tzName = $tzName;

            return $this;
        }

        /**
         * @internal
         *
         * Set the instance's timezone from a string or object and add/subtract the offset difference.
         *
         * @param \DateTimeZone|string $tzName
         *
         * @return static
         */
        public function shiftTimezone($tzName)
        {
            $this->tzName = $tzName;

            return $this;
        }

        /**
         * Mapping of units and factors for cascading.
         *
         * Should only be modified by changing the factors or referenced constants.
         *
         * @return array
         */
        public static function getCascadeFactors()
        {
            return static::$cascadeFactors ?: [
                'milliseconds' => [Carbon::MICROSECONDS_PER_MILLISECOND, 'microseconds'],
                'seconds' => [Carbon::MILLISECONDS_PER_SECOND, 'milliseconds'],
                'minutes' => [Carbon::SECONDS_PER_MINUTE, 'seconds'],
                'hours' => [Carbon::MINUTES_PER_HOUR, 'minutes'],
                'dayz' => [Carbon::HOURS_PER_DAY, 'hours'],
                'weeks' => [Carbon::DAYS_PER_WEEK, 'dayz'],
                'months' => [Carbon::WEEKS_PER_MONTH, 'weeks'],
                'years' => [Carbon::MONTHS_PER_YEAR, 'months'],
            ];
        }

        private static function standardizeUnit($unit)
        {
            $unit = rtrim($unit, 'sz').'s';

            return $unit === 'days' ? 'dayz' : $unit;
        }

        private static function getFlipCascadeFactors()
        {
            if (!self::$flipCascadeFactors) {
                self::$flipCascadeFactors = [];

                foreach (static::getCascadeFactors() as $to => [$factor, $from]) {
                    self::$flipCascadeFactors[self::standardizeUnit($from)] = [self::standardizeUnit($to), $factor];
                }
            }

            return self::$flipCascadeFactors;
        }

        /**
         * Set default cascading factors for ->cascade() method.
         *
         * @param array $cascadeFactors
         */
        public static function setCascadeFactors(array $cascadeFactors)
        {
            self::$flipCascadeFactors = null;
            static::$cascadeFactors = $cascadeFactors;
        }

        ///////////////////////////////////////////////////////////////////
        //////////////////////////// CONSTRUCTORS /////////////////////////
        ///////////////////////////////////////////////////////////////////

        /**
         * Create a new CarbonInterval instance.
         *
         * @param int|null $years
         * @param int|null $months
         * @param int|null $weeks
         * @param int|null $days
         * @param int|null $hours
         * @param int|null $minutes
         * @param int|null $seconds
         * @param int|null $microseconds
         *
         * @throws Exception when the interval_spec (passed as $years) cannot be parsed as an interval.
         */
        public function __construct($years = 1, $months = null, $weeks = null, $days = null, $hours = null, $minutes = null, $seconds = null, $microseconds = null)
        {
            if ($years instanceof Closure) {
                $this->step = $years;
                $years = null;
            }

            if ($years instanceof DateInterval) {
                parent::__construct(static::getDateIntervalSpec($years));
                $this->f = $years->f;
                static::copyNegativeUnits($years, $this);

                return;
            }

            $spec = $years;

            if (!\is_string($spec) || (float) $years || preg_match('/^[0-9.]/', $years)) {
                $spec = static::PERIOD_PREFIX;

                $spec .= $years > 0 ? $years.static::PERIOD_YEARS : '';
                $spec .= $months > 0 ? $months.static::PERIOD_MONTHS : '';

                $specDays = 0;
                $specDays += $weeks > 0 ? $weeks * static::getDaysPerWeek() : 0;
                $specDays += $days > 0 ? $days : 0;

                $spec .= $specDays > 0 ? $specDays.static::PERIOD_DAYS : '';

                if ($hours > 0 || $minutes > 0 || $seconds > 0) {
                    $spec .= static::PERIOD_TIME_PREFIX;
                    $spec .= $hours > 0 ? $hours.static::PERIOD_HOURS : '';
                    $spec .= $minutes > 0 ? $minutes.static::PERIOD_MINUTES : '';
                    $spec .= $seconds > 0 ? $seconds.static::PERIOD_SECONDS : '';
                }

                if ($spec === static::PERIOD_PREFIX) {
                    // Allow the zero interval.
                    $spec .= '0'.static::PERIOD_YEARS;
                }
            }

            parent::__construct($spec);

            if ($microseconds !== null) {
                $this->f = $microseconds / Carbon::MICROSECONDS_PER_SECOND;
            }
        }

        /**
         * Returns the factor for a given source-to-target couple.
         *
         * @param string $source
         * @param string $target
         *
         * @return int|null
         */
        public static function getFactor($source, $target)
        {
            $source = self::standardizeUnit($source);
            $target = self::standardizeUnit($target);
            $factors = static::getFlipCascadeFactors();

            if (isset($factors[$source])) {
                [$to, $factor] = $factors[$source];

                if ($to === $target) {
                    return $factor;
                }

                return $factor * static::getFactor($to, $target);
            }

            return null;
        }

        /**
         * Returns current config for days per week.
         *
         * @return int
         */
        public static function getDaysPerWeek()
        {
            return static::getFactor('dayz', 'weeks') ?: Carbon::DAYS_PER_WEEK;
        }

        /**
         * Returns current config for hours per day.
         *
         * @return int
         */
        public static function getHoursPerDay()
        {
            return static::getFactor('hours', 'dayz') ?: Carbon::HOURS_PER_DAY;
        }

        /**
         * Returns current config for minutes per hour.
         *
         * @return int
         */
        public static function getMinutesPerHour()
        {
            return static::getFactor('minutes', 'hours') ?: Carbon::MINUTES_PER_HOUR;
        }

        /**
         * Returns current config for seconds per minute.
         *
         * @return int
         */
        public static function getSecondsPerMinute()
        {
            return static::getFactor('seconds', 'minutes') ?: Carbon::SECONDS_PER_MINUTE;
        }

        /**
         * Returns current config for microseconds per second.
         *
         * @return int
         */
        public static function getMillisecondsPerSecond()
        {
            return static::getFactor('milliseconds', 'seconds') ?: Carbon::MILLISECONDS_PER_SECOND;
        }

        /**
         * Returns current config for microseconds per second.
         *
         * @return int
         */
        public static function getMicrosecondsPerMillisecond()
        {
            return static::getFactor('microseconds', 'milliseconds') ?: Carbon::MICROSECONDS_PER_MILLISECOND;
        }

        /**
         * Create a new CarbonInterval instance from specific values.
         * This is an alias for the constructor that allows better fluent
         * syntax as it allows you to do CarbonInterval::create(1)->fn() rather than
         * (new CarbonInterval(1))->fn().
         *
         * @param int $years
         * @param int $months
         * @param int $weeks
         * @param int $days
         * @param int $hours
         * @param int $minutes
         * @param int $seconds
         * @param int $microseconds
         *
         * @throws Exception when the interval_spec (passed as $years) cannot be parsed as an interval.
         *
         * @return static
         */
        public static function create($years = 1, $months = null, $weeks = null, $days = null, $hours = null, $minutes = null, $seconds = null, $microseconds = null)
        {
            return new static($years, $months, $weeks, $days, $hours, $minutes, $seconds, $microseconds);
        }

        /**
         * Parse a string into a new CarbonInterval object according to the specified format.
         *
         * @example
         * ```
         * echo Carboninterval::createFromFormat('H:i', '1:30');
         * ```
         *
         * @param string      $format   Format of the $interval input string
         * @param string|null $interval Input string to convert into an interval
         *
         * @throws \Carbon\Exceptions\ParseErrorException when the $interval cannot be parsed as an interval.
         *
         * @return static
         */
        public static function createFromFormat(string $format, ?string $interval)
        {
            $instance = new static(0);
            $length = mb_strlen($format);

            if (preg_match('/s([,.])([uv])$/', $format, $match)) {
                $interval = explode($match[1], $interval);
                $index = \count($interval) - 1;
                $interval[$index] = str_pad($interval[$index], $match[2] === 'v' ? 3 : 6, '0');
                $interval = implode($match[1], $interval);
            }

            $interval = $interval ?? '';

            for ($index = 0; $index < $length; $index++) {
                $expected = mb_substr($format, $index, 1);
                $nextCharacter = mb_substr($interval, 0, 1);
                $unit = static::$formats[$expected] ?? null;

                if ($unit) {
                    if (!preg_match('/^-?\d+/', $interval, $match)) {
                        throw new ParseErrorException('number', $nextCharacter);
                    }

                    $interval = mb_substr($interval, mb_strlen($match[0]));
                    $instance->$unit += (int) ($match[0]);

                    continue;
                }

                if ($nextCharacter !== $expected) {
                    throw new ParseErrorException(
                        "'$expected'",
                        $nextCharacter,
                        'Allowed substitutes for interval formats are '.implode(', ', array_keys(static::$formats))."\n".
                        'See https://php.net/manual/en/function.date.php for their meaning'
                    );
                }

                $interval = mb_substr($interval, 1);
            }

            if ($interval !== '') {
                throw new ParseErrorException(
                    'end of string',
                    $interval
                );
            }

            return $instance;
        }

        /**
         * Get a copy of the instance.
         *
         * @return static
         */
        public function copy()
        {
            $date = new static(0);
            $date->copyProperties($this);
            $date->step = $this->step;

            return $date;
        }

        /**
         * Get a copy of the instance.
         *
         * @return static
         */
        public function clone()
        {
            return $this->copy();
        }

        /**
         * Provide static helpers to create instances.  Allows CarbonInterval::years(3).
         *
         * Note: This is done using the magic method to allow static and instance methods to
         *       have the same names.
         *
         * @param string $method     magic method name called
         * @param array  $parameters parameters list
         *
         * @return static|null
         */
        public static function __callStatic($method, $parameters)
        {
            try {
                $interval = new static(0);
                $localStrictModeEnabled = $interval->localStrictModeEnabled;
                $interval->localStrictModeEnabled = true;

                $result = static::hasMacro($method)
                    ? static::bindMacroContext(null, function () use (&$method, &$parameters, &$interval) {
                        return $interval->callMacro($method, $parameters);
                    })
                    : $interval->$method(...$parameters);

                $interval->localStrictModeEnabled = $localStrictModeEnabled;

                return $result;
            } catch (BadFluentSetterException $exception) {
                if (Carbon::isStrictModeEnabled()) {
                    throw new BadFluentConstructorException($method, 0, $exception);
                }

                return null;
            }
        }

        /**
         * Return the current context from inside a macro callee or a new one if static.
         *
         * @return static
         */
        protected static function this()
        {
            return end(static::$macroContextStack) ?: new static(0);
        }

        /**
         * Creates a CarbonInterval from string.
         *
         * Format:
         *
         * Suffix | Unit    | Example | DateInterval expression
         * -------|---------|---------|------------------------
         * y      | years   |   1y    | P1Y
         * mo     | months  |   3mo   | P3M
         * w      | weeks   |   2w    | P2W
         * d      | days    |  28d    | P28D
         * h      | hours   |   4h    | PT4H
         * m      | minutes |  12m    | PT12M
         * s      | seconds |  59s    | PT59S
         *
         * e. g. `1w 3d 4h 32m 23s` is converted to 10 days 4 hours 32 minutes and 23 seconds.
         *
         * Special cases:
         *  - An empty string will return a zero interval
         *  - Fractions are allowed for weeks, days, hours and minutes and will be converted
         *    and rounded to the next smaller value (caution: 0.5w = 4d)
         *
         * @param string $intervalDefinition
         *
         * @return static
         */
        public static function fromString($intervalDefinition)
        {
            if (empty($intervalDefinition)) {
                return new static(0);
            }

            $years = 0;
            $months = 0;
            $weeks = 0;
            $days = 0;
            $hours = 0;
            $minutes = 0;
            $seconds = 0;
            $milliseconds = 0;
            $microseconds = 0;

            $pattern = '/(\d+(?:\.\d+)?)\h*([^\d\h]*)/i';
            preg_match_all($pattern, $intervalDefinition, $parts, PREG_SET_ORDER);

            while ([$part, $value, $unit] = array_shift($parts)) {
                $intValue = (int) $value;
                $fraction = (float) $value - $intValue;

                // Fix calculation precision
                switch (round($fraction, 6)) {
                    case 1:
                        $fraction = 0;
                        $intValue++;

                        break;
                    case 0:
                        $fraction = 0;

                        break;
                }

                switch ($unit === 'µs' ? 'µs' : strtolower($unit)) {
                    case 'millennia':
                    case 'millennium':
                        $years += $intValue * CarbonInterface::YEARS_PER_MILLENNIUM;

                        break;

                    case 'century':
                    case 'centuries':
                        $years += $intValue * CarbonInterface::YEARS_PER_CENTURY;

                        break;

                    case 'decade':
                    case 'decades':
                        $years += $intValue * CarbonInterface::YEARS_PER_DECADE;

                        break;

                    case 'year':
                    case 'years':
                    case 'y':
                        $years += $intValue;

                        break;

                    case 'quarter':
                    case 'quarters':
                        $months += $intValue * CarbonInterface::MONTHS_PER_QUARTER;

                        break;

                    case 'month':
                    case 'months':
                    case 'mo':
                        $months += $intValue;

                        break;

                    case 'week':
                    case 'weeks':
                    case 'w':
                        $weeks += $intValue;

                        if ($fraction) {
                            $parts[] = [null, $fraction * static::getDaysPerWeek(), 'd'];
                        }

                        break;

                    case 'day':
                    case 'days':
                    case 'd':
                        $days += $intValue;

                        if ($fraction) {
                            $parts[] = [null, $fraction * static::getHoursPerDay(), 'h'];
                        }

                        break;

                    case 'hour':
                    case 'hours':
                    case 'h':
                        $hours += $intValue;

                        if ($fraction) {
                            $parts[] = [null, $fraction * static::getMinutesPerHour(), 'm'];
                        }

                        break;

                    case 'minute':
                    case 'minutes':
                    case 'm':
                        $minutes += $intValue;

                        if ($fraction) {
                            $parts[] = [null, $fraction * static::getSecondsPerMinute(), 's'];
                        }

                        break;

                    case 'second':
                    case 'seconds':
                    case 's':
                        $seconds += $intValue;

                        if ($fraction) {
                            $parts[] = [null, $fraction * static::getMillisecondsPerSecond(), 'ms'];
                        }

                        break;

                    case 'millisecond':
                    case 'milliseconds':
                    case 'milli':
                    case 'ms':
                        $milliseconds += $intValue;

                        if ($fraction) {
                            $microseconds += round($fraction * static::getMicrosecondsPerMillisecond());
                        }

                        break;

                    case 'microsecond':
                    case 'microseconds':
                    case 'micro':
                    case 'µs':
                        $microseconds += $intValue;

                        break;

                    default:
                        throw new InvalidIntervalException(
                            sprintf('Invalid part %s in definition %s', $part, $intervalDefinition)
                        );
                }
            }

            return new static($years, $months, $weeks, $days, $hours, $minutes, $seconds, $milliseconds * Carbon::MICROSECONDS_PER_MILLISECOND + $microseconds);
        }

        /**
         * Creates a CarbonInterval from string using a different locale.
         *
         * @param string      $interval interval string in the given language (may also contain English).
         * @param string|null $locale   if locale is null or not specified, current global locale will be used instead.
         *
         * @return static
         */
        public static function parseFromLocale($interval, $locale = null)
        {
            return static::fromString(Carbon::translateTimeString($interval, $locale ?: static::getLocale(), 'en'));
        }

        private static function castIntervalToClass(DateInterval $interval, string $className)
        {
            $mainClass = DateInterval::class;

            if (!is_a($className, $mainClass, true)) {
                throw new InvalidCastException("$className is not a sub-class of $mainClass.");
            }

            $microseconds = $interval->f;
            $instance = new $className(static::getDateIntervalSpec($interval));

            if ($microseconds) {
                $instance->f = $microseconds;
            }

            if ($interval instanceof self && is_a($className, self::class, true)) {
                static::copyStep($interval, $instance);
            }

            static::copyNegativeUnits($interval, $instance);

            return $instance;
        }

        private static function copyNegativeUnits(DateInterval $from, DateInterval $to): void
        {
            $to->invert = $from->invert;

            foreach (['y', 'm', 'd', 'h', 'i', 's'] as $unit) {
                if ($from->$unit < 0) {
                    $to->$unit *= -1;
                }
            }
        }

        private static function copyStep(self $from, self $to): void
        {
            $to->setStep($from->getStep());
        }

        /**
         * Cast the current instance into the given class.
         *
         * @param string $className The $className::instance() method will be called to cast the current object.
         *
         * @return DateInterval
         */
        public function cast(string $className)
        {
            return self::castIntervalToClass($this, $className);
        }

        /**
         * Create a CarbonInterval instance from a DateInterval one.  Can not instance
         * DateInterval objects created from DateTime::diff() as you can't externally
         * set the $days field.
         *
         * @param DateInterval $interval
         *
         * @return static
         */
        public static function instance(DateInterval $interval)
        {
            return self::castIntervalToClass($interval, static::class);
        }

        /**
         * Make a CarbonInterval instance from given variable if possible.
         *
         * Always return a new instance. Parse only strings and only these likely to be intervals (skip dates
         * and recurrences). Throw an exception for invalid format, but otherwise return null.
         *
         * @param mixed|int|DateInterval|string|Closure|null $interval interval or number of the given $unit
         * @param string|null                                $unit     if specified, $interval must be an integer
         *
         * @return static|null
         */
        public static function make($interval, $unit = null)
        {
            if ($unit) {
                $interval = "$interval ".Carbon::pluralUnit($unit);
            }

            if ($interval instanceof DateInterval) {
                return static::instance($interval);
            }

            if ($interval instanceof Closure) {
                return new static($interval);
            }

            if (!\is_string($interval)) {
                return null;
            }

            return static::makeFromString($interval);
        }

        protected static function makeFromString(string $interval)
        {
            $interval = preg_replace('/\s+/', ' ', trim($interval));

            if (preg_match('/^P[T0-9]/', $interval)) {
                return new static($interval);
            }

            if (preg_match('/^(?:\h*\d+(?:\.\d+)?\h*[a-z]+)+$/i', $interval)) {
                return static::fromString($interval);
            }

            /** @var static $interval */
            $interval = static::createFromDateString($interval);

            return !$interval || $interval->isEmpty() ? null : $interval;
        }

        protected function resolveInterval($interval)
        {
            if (!($interval instanceof self)) {
                return self::make($interval);
            }

            return $interval;
        }

        /**
         * Sets up a DateInterval from the relative parts of the string.
         *
         * @param string $time
         *
         * @return static
         *
         * @link https://php.net/manual/en/dateinterval.createfromdatestring.php
         */
        #[ReturnTypeWillChange]
        public static function createFromDateString($time)
        {
            $interval = @parent::createFromDateString(strtr($time, [
                ',' => ' ',
                ' and ' => ' ',
            ]));

            if ($interval instanceof DateInterval) {
                $interval = static::instance($interval);
            }

            return $interval;
        }

        ///////////////////////////////////////////////////////////////////
        ///////////////////////// GETTERS AND SETTERS /////////////////////
        ///////////////////////////////////////////////////////////////////

        /**
         * Get a part of the CarbonInterval object.
         *
         * @param string $name
         *
         * @throws UnknownGetterException
         *
         * @return int|float|string
         */
        public function get($name)
        {
            if (str_starts_with($name, 'total')) {
                return $this->total(substr($name, 5));
            }

            switch ($name) {
                case 'years':
                    return $this->y;

                case 'months':
                    return $this->m;

                case 'dayz':
                    return $this->d;

                case 'hours':
                    return $this->h;

                case 'minutes':
                    return $this->i;

                case 'seconds':
                    return $this->s;

                case 'milli':
                case 'milliseconds':
                    return (int) (round($this->f * Carbon::MICROSECONDS_PER_SECOND) / Carbon::MICROSECONDS_PER_MILLISECOND);

                case 'micro':
                case 'microseconds':
                    return (int) round($this->f * Carbon::MICROSECONDS_PER_SECOND);

                case 'microExcludeMilli':
                    return (int) round($this->f * Carbon::MICROSECONDS_PER_SECOND) % Carbon::MICROSECONDS_PER_MILLISECOND;

                case 'weeks':
                    return (int) ($this->d / static::getDaysPerWeek());

                case 'daysExcludeWeeks':
                case 'dayzExcludeWeeks':
                    return $this->d % static::getDaysPerWeek();

                case 'locale':
                    return $this->getTranslatorLocale();

                default:
                    throw new UnknownGetterException($name);
            }
        }

        /**
         * Get a part of the CarbonInterval object.
         *
         * @param string $name
         *
         * @throws UnknownGetterException
         *
         * @return int|float|string
         */
        public function __get($name)
        {
            return $this->get($name);
        }

        /**
         * Set a part of the CarbonInterval object.
         *
         * @param string|array $name
         * @param int          $value
         *
         * @throws UnknownSetterException
         *
         * @return $this
         */
        public function set($name, $value = null)
        {
            $properties = \is_array($name) ? $name : [$name => $value];

            foreach ($properties as $key => $value) {
                switch (Carbon::singularUnit(rtrim($key, 'z'))) {
                    case 'year':
                        $this->y = $value;

                        break;

                    case 'month':
                        $this->m = $value;

                        break;

                    case 'week':
                        $this->d = $value * static::getDaysPerWeek();

                        break;

                    case 'day':
                        $this->d = $value;

                        break;

                    case 'daysexcludeweek':
                    case 'dayzexcludeweek':
                        $this->d = $this->weeks * static::getDaysPerWeek() + $value;

                        break;

                    case 'hour':
                        $this->h = $value;

                        break;

                    case 'minute':
                        $this->i = $value;

                        break;

                    case 'second':
                        $this->s = $value;

                        break;

                    case 'milli':
                    case 'millisecond':
                        $this->microseconds = $value * Carbon::MICROSECONDS_PER_MILLISECOND + $this->microseconds % Carbon::MICROSECONDS_PER_MILLISECOND;

                        break;

                    case 'micro':
                    case 'microsecond':
                        $this->f = $value / Carbon::MICROSECONDS_PER_SECOND;

                        break;

                    default:
                        if ($this->localStrictModeEnabled ?? Carbon::isStrictModeEnabled()) {
                            throw new UnknownSetterException($key);
                        }

                        $this->$key = $value;
                }
            }

            return $this;
        }

        /**
         * Set a part of the CarbonInterval object.
         *
         * @param string $name
         * @param int    $value
         *
         * @throws UnknownSetterException
         */
        public function __set($name, $value)
        {
            $this->set($name, $value);
        }

        /**
         * Allow setting of weeks and days to be cumulative.
         *
         * @param int $weeks Number of weeks to set
         * @param int $days  Number of days to set
         *
         * @return static
         */
        public function weeksAndDays($weeks, $days)
        {
            $this->dayz = ($weeks * static::getDaysPerWeek()) + $days;

            return $this;
        }

        /**
         * Returns true if the interval is empty for each unit.
         *
         * @return bool
         */
        public function isEmpty()
        {
            return $this->years === 0 &&
                $this->months === 0 &&
                $this->dayz === 0 &&
                !$this->days &&
                $this->hours === 0 &&
                $this->minutes === 0 &&
                $this->seconds === 0 &&
                $this->microseconds === 0;
        }

        /**
         * Register a custom macro.
         *
         * @example
         * ```
         * CarbonInterval::macro('twice', function () {
         *   return $this->times(2);
         * });
         * echo CarbonInterval::hours(2)->twice();
         * ```
         *
         * @param string          $name
         * @param object|callable $macro
         *
         * @return void
         */
        public static function macro($name, $macro)
        {
            static::$macros[$name] = $macro;
        }

        /**
         * Register macros from a mixin object.
         *
         * @example
         * ```
         * CarbonInterval::mixin(new class {
         *   public function daysToHours() {
         *     return function () {
         *       $this->hours += $this->days;
         *       $this->days = 0;
         *
         *       return $this;
         *     };
         *   }
         *   public function hoursToDays() {
         *     return function () {
         *       $this->days += $this->hours;
         *       $this->hours = 0;
         *
         *       return $this;
         *     };
         *   }
         * });
         * echo CarbonInterval::hours(5)->hoursToDays() . "\n";
         * echo CarbonInterval::days(5)->daysToHours() . "\n";
         * ```
         *
         * @param object|string $mixin
         *
         * @throws ReflectionException
         *
         * @return void
         */
        public static function mixin($mixin)
        {
            static::baseMixin($mixin);
        }

        /**
         * Check if macro is registered.
         *
         * @param string $name
         *
         * @return bool
         */
        public static function hasMacro($name)
        {
            return isset(static::$macros[$name]);
        }

        /**
         * Call given macro.
         *
         * @param string $name
         * @param array  $parameters
         *
         * @return mixed
         */
        protected function callMacro($name, $parameters)
        {
            $macro = static::$macros[$name];

            if ($macro instanceof Closure) {
                $boundMacro = @$macro->bindTo($this, static::class) ?: @$macro->bindTo(null, static::class);

                return ($boundMacro ?: $macro)(...$parameters);
            }

            return $macro(...$parameters);
        }

        /**
         * Allow fluent calls on the setters... CarbonInterval::years(3)->months(5)->day().
         *
         * Note: This is done using the magic method to allow static and instance methods to
         *       have the same names.
         *
         * @param string $method     magic method name called
         * @param array  $parameters parameters list
         *
         * @throws BadFluentSetterException|Throwable
         *
         * @return static
         */
        public function __call($method, $parameters)
        {
            if (static::hasMacro($method)) {
                return static::bindMacroContext($this, function () use (&$method, &$parameters) {
                    return $this->callMacro($method, $parameters);
                });
            }

            $roundedValue = $this->callRoundMethod($method, $parameters);

            if ($roundedValue !== null) {
                return $roundedValue;
            }

            if (preg_match('/^(?<method>add|sub)(?<unit>[A-Z].*)$/', $method, $match)) {
                return $this->{$match['method']}($parameters[0], $match['unit']);
            }

            try {
                $this->set($method, \count($parameters) === 0 ? 1 : $parameters[0]);
            } catch (UnknownSetterException $exception) {
                if ($this->localStrictModeEnabled ?? Carbon::isStrictModeEnabled()) {
                    throw new BadFluentSetterException($method, 0, $exception);
                }
            }

            return $this;
        }

        protected function getForHumansInitialVariables($syntax, $short)
        {
            if (\is_array($syntax)) {
                return $syntax;
            }

            if (\is_int($short)) {
                return [
                    'parts' => $short,
                    'short' => false,
                ];
            }

            if (\is_bool($syntax)) {
                return [
                    'short' => $syntax,
                    'syntax' => CarbonInterface::DIFF_ABSOLUTE,
                ];
            }

            return [];
        }

        /**
         * @param mixed $syntax
         * @param mixed $short
         * @param mixed $parts
         * @param mixed $options
         *
         * @return array
         */
        protected function getForHumansParameters($syntax = null, $short = false, $parts = -1, $options = null)
        {
            $optionalSpace = ' ';
            $default = $this->getTranslationMessage('list.0') ?? $this->getTranslationMessage('list') ?? ' ';
            $join = $default === '' ? '' : ' ';
            $altNumbers = false;
            $aUnit = false;
            $minimumUnit = 's';
            extract($this->getForHumansInitialVariables($syntax, $short));

            if ($syntax === null) {
                $syntax = CarbonInterface::DIFF_ABSOLUTE;
            }

            if ($parts === -1) {
                $parts = INF;
            }

            if ($options === null) {
                $options = static::getHumanDiffOptions();
            }

            if ($join === false) {
                $join = ' ';
            } elseif ($join === true) {
                $join = [
                    $default,
                    $this->getTranslationMessage('list.1') ?? $default,
                ];
            }

            if ($altNumbers) {
                if ($altNumbers !== true) {
                    $language = new Language($this->locale);
                    $altNumbers = \in_array($language->getCode(), (array) $altNumbers);
                }
            }

            if (\is_array($join)) {
                [$default, $last] = $join;

                if ($default !== ' ') {
                    $optionalSpace = '';
                }

                $join = function ($list) use ($default, $last) {
                    if (\count($list) < 2) {
                        return implode('', $list);
                    }

                    $end = array_pop($list);

                    return implode($default, $list).$last.$end;
                };
            }

            if (\is_string($join)) {
                if ($join !== ' ') {
                    $optionalSpace = '';
                }

                $glue = $join;
                $join = function ($list) use ($glue) {
                    return implode($glue, $list);
                };
            }

            $interpolations = [
                ':optional-space' => $optionalSpace,
            ];

            return [$syntax, $short, $parts, $options, $join, $aUnit, $altNumbers, $interpolations, $minimumUnit];
        }

        protected static function getRoundingMethodFromOptions(int $options): ?string
        {
            if ($options & CarbonInterface::ROUND) {
                return 'round';
            }

            if ($options & CarbonInterface::CEIL) {
                return 'ceil';
            }

            if ($options & CarbonInterface::FLOOR) {
                return 'floor';
            }

            return null;
        }

        /**
         * Returns interval values as an array where key are the unit names and values the counts.
         *
         * @return int[]
         */
        public function toArray()
        {
            return [
                'years' => $this->years,
                'months' => $this->months,
                'weeks' => $this->weeks,
                'days' => $this->daysExcludeWeeks,
                'hours' => $this->hours,
                'minutes' => $this->minutes,
                'seconds' => $this->seconds,
                'microseconds' => $this->microseconds,
            ];
        }

        /**
         * Returns interval non-zero values as an array where key are the unit names and values the counts.
         *
         * @return int[]
         */
        public function getNonZeroValues()
        {
            return array_filter($this->toArray(), 'intval');
        }

        /**
         * Returns interval values as an array where key are the unit names and values the counts
         * from the biggest non-zero one the the smallest non-zero one.
         *
         * @return int[]
         */
        public function getValuesSequence()
        {
            $nonZeroValues = $this->getNonZeroValues();

            if ($nonZeroValues === []) {
                return [];
            }

            $keys = array_keys($nonZeroValues);
            $firstKey = $keys[0];
            $lastKey = $keys[\count($keys) - 1];
            $values = [];
            $record = false;

            foreach ($this->toArray() as $unit => $count) {
                if ($unit === $firstKey) {
                    $record = true;
                }

                if ($record) {
                    $values[$unit] = $count;
                }

                if ($unit === $lastKey) {
                    $record = false;
                }
            }

            return $values;
        }

        /**
         * Get the current interval in a human readable format in the current locale.
         *
         * @example
         * ```
         * echo CarbonInterval::fromString('4d 3h 40m')->forHumans() . "\n";
         * echo CarbonInterval::fromString('4d 3h 40m')->forHumans(['parts' => 2]) . "\n";
         * echo CarbonInterval::fromString('4d 3h 40m')->forHumans(['parts' => 3, 'join' => true]) . "\n";
         * echo CarbonInterval::fromString('4d 3h 40m')->forHumans(['short' => true]) . "\n";
         * echo CarbonInterval::fromString('1d 24h')->forHumans(['join' => ' or ']) . "\n";
         * echo CarbonInterval::fromString('1d 24h')->forHumans(['minimumUnit' => 'hour']) . "\n";
         * ```
         *
         * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
         *                           - 'syntax' entry (see below)
         *                           - 'short' entry (see below)
         *                           - 'parts' entry (see below)
         *                           - 'options' entry (see below)
         *                           - 'aUnit' entry, prefer "an hour" over "1 hour" if true
         *                           - 'join' entry determines how to join multiple parts of the string
         *                           `  - if $join is a string, it's used as a joiner glue
         *                           `  - if $join is a callable/closure, it get the list of string and should return a string
         *                           `  - if $join is an array, the first item will be the default glue, and the second item
         *                           `    will be used instead of the glue for the last item
         *                           `  - if $join is true, it will be guessed from the locale ('list' translation file entry)
         *                           `  - if $join is missing, a space will be used as glue
         *                           - 'minimumUnit' entry determines the smallest unit of time to display can be long or
         *                           `  short form of the units, e.g. 'hour' or 'h' (default value: s)
         *                           if int passed, it add modifiers:
         *                           Possible values:
         *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
         *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
         *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
         *                           Default value: CarbonInterface::DIFF_ABSOLUTE
         * @param bool      $short   displays short format of time units
         * @param int       $parts   maximum number of parts to display (default value: -1: no limits)
         * @param int       $options human diff options
         *
         * @throws Exception
         *
         * @return string
         */
        public function forHumans($syntax = null, $short = false, $parts = -1, $options = null)
        {
            [$syntax, $short, $parts, $options, $join, $aUnit, $altNumbers, $interpolations, $minimumUnit] = $this->getForHumansParameters($syntax, $short, $parts, $options);

            $interval = [];

            $syntax = (int) ($syntax ?? CarbonInterface::DIFF_ABSOLUTE);
            $absolute = $syntax === CarbonInterface::DIFF_ABSOLUTE;
            $relativeToNow = $syntax === CarbonInterface::DIFF_RELATIVE_TO_NOW;
            $count = 1;
            $unit = $short ? 's' : 'second';
            $isFuture = $this->invert === 1;
            $transId = $relativeToNow ? ($isFuture ? 'from_now' : 'ago') : ($isFuture ? 'after' : 'before');

            /** @var \Symfony\Component\Translation\Translator $translator */
            $translator = $this->getLocalTranslator();

            $handleDeclensions = function ($unit, $count) use ($interpolations, $transId, $translator, $altNumbers, $absolute) {
                if (!$absolute) {
                    // Some languages have special pluralization for past and future tense.
                    $key = $unit.'_'.$transId;
                    $result = $this->translate($key, $interpolations, $count, $translator, $altNumbers);

                    if ($result !== $key) {
                        return $result;
                    }
                }

                $result = $this->translate($unit, $interpolations, $count, $translator, $altNumbers);

                if ($result !== $unit) {
                    return $result;
                }

                return null;
            };

            $intervalValues = $this;
            $method = static::getRoundingMethodFromOptions($options);

            if ($method) {
                $previousCount = INF;

                while (
                    \count($intervalValues->getNonZeroValues()) > $parts &&
                    ($count = \count($keys = array_keys($intervalValues->getValuesSequence()))) > 1
                ) {
                    $intervalValues = $this->copy()->roundUnit(
                        $keys[min($count, $previousCount - 1) - 2],
                        1,
                        $method
                    );
                    $previousCount = $count;
                }
            }

            $diffIntervalArray = [
                ['value' => $intervalValues->years,             'unit' => 'year',        'unitShort' => 'y'],
                ['value' => $intervalValues->months,            'unit' => 'month',       'unitShort' => 'm'],
                ['value' => $intervalValues->weeks,             'unit' => 'week',        'unitShort' => 'w'],
                ['value' => $intervalValues->daysExcludeWeeks,  'unit' => 'day',         'unitShort' => 'd'],
                ['value' => $intervalValues->hours,             'unit' => 'hour',        'unitShort' => 'h'],
                ['value' => $intervalValues->minutes,           'unit' => 'minute',      'unitShort' => 'min'],
                ['value' => $intervalValues->seconds,           'unit' => 'second',      'unitShort' => 's'],
                ['value' => $intervalValues->milliseconds,      'unit' => 'millisecond', 'unitShort' => 'ms'],
                ['value' => $intervalValues->microExcludeMilli, 'unit' => 'microsecond', 'unitShort' => 'µs'],
            ];

            $transChoice = function ($short, $unitData) use ($absolute, $handleDeclensions, $translator, $aUnit, $altNumbers, $interpolations) {
                $count = $unitData['value'];

                if ($short) {
                    $result = $handleDeclensions($unitData['unitShort'], $count);

                    if ($result !== null) {
                        return $result;
                    }
                } elseif ($aUnit) {
                    $result = $handleDeclensions('a_'.$unitData['unit'], $count);

                    if ($result !== null) {
                        return $result;
                    }
                }

                if (!$absolute) {
                    return $handleDeclensions($unitData['unit'], $count);
                }

                return $this->translate($unitData['unit'], $interpolations, $count, $translator, $altNumbers);
            };

            $fallbackUnit = ['second', 's'];
            foreach ($diffIntervalArray as $diffIntervalData) {
                if ($diffIntervalData['value'] > 0) {
                    $unit = $short ? $diffIntervalData['unitShort'] : $diffIntervalData['unit'];
                    $count = $diffIntervalData['value'];
                    $interval[] = $transChoice($short, $diffIntervalData);
                } elseif ($options & CarbonInterface::SEQUENTIAL_PARTS_ONLY && \count($interval) > 0) {
                    break;
                }

                // break the loop after we get the required number of parts in array
                if (\count($interval) >= $parts) {
                    break;
                }

                // break the loop after we have reached the minimum unit
                if (\in_array($minimumUnit, [$diffIntervalData['unit'], $diffIntervalData['unitShort']])) {
                    $fallbackUnit = [$diffIntervalData['unit'], $diffIntervalData['unitShort']];

                    break;
                }
            }

            if (\count($interval) === 0) {
                if ($relativeToNow && $options & CarbonInterface::JUST_NOW) {
                    $key = 'diff_now';
                    $translation = $this->translate($key, $interpolations, null, $translator);

                    if ($translation !== $key) {
                        return $translation;
                    }
                }

                $count = $options & CarbonInterface::NO_ZERO_DIFF ? 1 : 0;
                $unit = $fallbackUnit[$short ? 1 : 0];
                $interval[] = $this->translate($unit, $interpolations, $count, $translator, $altNumbers);
            }

            // join the interval parts by a space
            $time = $join($interval);

            unset($diffIntervalArray, $interval);

            if ($absolute) {
                return $time;
            }

            $isFuture = $this->invert === 1;

            $transId = $relativeToNow ? ($isFuture ? 'from_now' : 'ago') : ($isFuture ? 'after' : 'before');

            if ($parts === 1) {
                if ($relativeToNow && $unit === 'day') {
                    if ($count === 1 && $options & CarbonInterface::ONE_DAY_WORDS) {
                        $key = $isFuture ? 'diff_tomorrow' : 'diff_yesterday';
                        $translation = $this->translate($key, $interpolations, null, $translator);

                        if ($translation !== $key) {
                            return $translation;
                        }
                    }

                    if ($count === 2 && $options & CarbonInterface::TWO_DAY_WORDS) {
                        $key = $isFuture ? 'diff_after_tomorrow' : 'diff_before_yesterday';
                        $translation = $this->translate($key, $interpolations, null, $translator);

                        if ($translation !== $key) {
                            return $translation;
                        }
                    }
                }

                $aTime = $aUnit ? $handleDeclensions('a_'.$unit, $count) : null;

                $time = $aTime ?: $handleDeclensions($unit, $count) ?: $time;
            }

            $time = [':time' => $time];

            return $this->translate($transId, array_merge($time, $interpolations, $time), null, $translator);
        }

        /**
         * Format the instance as a string using the forHumans() function.
         *
         * @throws Exception
         *
         * @return string
         */
        public function __toString()
        {
            $format = $this->localToStringFormat;

            if ($format) {
                if ($format instanceof Closure) {
                    return $format($this);
                }

                return $this->format($format);
            }

            return $this->forHumans();
        }

        /**
         * Return native DateInterval PHP object matching the current instance.
         *
         * @example
         * ```
         * var_dump(CarbonInterval::hours(2)->toDateInterval());
         * ```
         *
         * @return DateInterval
         */
        public function toDateInterval()
        {
            return self::castIntervalToClass($this, DateInterval::class);
        }

        /**
         * Convert the interval to a CarbonPeriod.
         *
         * @param DateTimeInterface|string|int ...$params Start date, [end date or recurrences] and optional settings.
         *
         * @return CarbonPeriod
         */
        public function toPeriod(...$params)
        {
            if ($this->tzName) {
                $tz = \is_string($this->tzName) ? new DateTimeZone($this->tzName) : $this->tzName;

                if ($tz instanceof DateTimeZone) {
                    array_unshift($params, $tz);
                }
            }

            return CarbonPeriod::create($this, ...$params);
        }

        /**
         * Invert the interval.
         *
         * @param bool|int $inverted if a parameter is passed, the passed value casted as 1 or 0 is used
         *                           as the new value of the ->invert property.
         *
         * @return $this
         */
        public function invert($inverted = null)
        {
            $this->invert = (\func_num_args() === 0 ? !$this->invert : $inverted) ? 1 : 0;

            return $this;
        }

        protected function solveNegativeInterval()
        {
            if (!$this->isEmpty() && $this->years <= 0 && $this->months <= 0 && $this->dayz <= 0 && $this->hours <= 0 && $this->minutes <= 0 && $this->seconds <= 0 && $this->microseconds <= 0) {
                $this->years *= -1;
                $this->months *= -1;
                $this->dayz *= -1;
                $this->hours *= -1;
                $this->minutes *= -1;
                $this->seconds *= -1;
                $this->microseconds *= -1;
                $this->invert();
            }

            return $this;
        }

        /**
         * Add the passed interval to the current instance.
         *
         * @param string|DateInterval $unit
         * @param int|float           $value
         *
         * @return $this
         */
        public function add($unit, $value = 1)
        {
            if (is_numeric($unit)) {
                [$value, $unit] = [$unit, $value];
            }

            if (\is_string($unit) && !preg_match('/^\s*\d/', $unit)) {
                $unit = "$value $unit";
                $value = 1;
            }

            $interval = static::make($unit);

            if (!$interval) {
                throw new InvalidIntervalException('This type of data cannot be added/subtracted.');
            }

            if ($value !== 1) {
                $interval->times($value);
            }

            $sign = ($this->invert === 1) !== ($interval->invert === 1) ? -1 : 1;
            $this->years += $interval->y * $sign;
            $this->months += $interval->m * $sign;
            $this->dayz += ($interval->days === false ? $interval->d : $interval->days) * $sign;
            $this->hours += $interval->h * $sign;
            $this->minutes += $interval->i * $sign;
            $this->seconds += $interval->s * $sign;
            $this->microseconds += $interval->microseconds * $sign;

            $this->solveNegativeInterval();

            return $this;
        }

        /**
         * Subtract the passed interval to the current instance.
         *
         * @param string|DateInterval $unit
         * @param int|float           $value
         *
         * @return $this
         */
        public function sub($unit, $value = 1)
        {
            if (is_numeric($unit)) {
                [$value, $unit] = [$unit, $value];
            }

            return $this->add($unit, -(float) $value);
        }

        /**
         * Subtract the passed interval to the current instance.
         *
         * @param string|DateInterval $unit
         * @param int|float           $value
         *
         * @return $this
         */
        public function subtract($unit, $value = 1)
        {
            return $this->sub($unit, $value);
        }

        /**
         * Add given parameters to the current interval.
         *
         * @param int       $years
         * @param int       $months
         * @param int|float $weeks
         * @param int|float $days
         * @param int|float $hours
         * @param int|float $minutes
         * @param int|float $seconds
         * @param int|float $microseconds
         *
         * @return $this
         */
        public function plus(
            $years = 0,
            $months = 0,
            $weeks = 0,
            $days = 0,
            $hours = 0,
            $minutes = 0,
            $seconds = 0,
            $microseconds = 0
        ): self {
            return $this->add("
                $years years $months months $weeks weeks $days days
                $hours hours $minutes minutes $seconds seconds $microseconds microseconds
            ");
        }

        /**
         * Add given parameters to the current interval.
         *
         * @param int       $years
         * @param int       $months
         * @param int|float $weeks
         * @param int|float $days
         * @param int|float $hours
         * @param int|float $minutes
         * @param int|float $seconds
         * @param int|float $microseconds
         *
         * @return $this
         */
        public function minus(
            $years = 0,
            $months = 0,
            $weeks = 0,
            $days = 0,
            $hours = 0,
            $minutes = 0,
            $seconds = 0,
            $microseconds = 0
        ): self {
            return $this->sub("
                $years years $months months $weeks weeks $days days
                $hours hours $minutes minutes $seconds seconds $microseconds microseconds
            ");
        }

        /**
         * Multiply current instance given number of times. times() is naive, it multiplies each unit
         * (so day can be greater than 31, hour can be greater than 23, etc.) and the result is rounded
         * separately for each unit.
         *
         * Use times() when you want a fast and approximated calculation that does not cascade units.
         *
         * For a precise and cascaded calculation,
         *
         * @see multiply()
         *
         * @param float|int $factor
         *
         * @return $this
         */
        public function times($factor)
        {
            if ($factor < 0) {
                $this->invert = $this->invert ? 0 : 1;
                $factor = -$factor;
            }

            $this->years = (int) round($this->years * $factor);
            $this->months = (int) round($this->months * $factor);
            $this->dayz = (int) round($this->dayz * $factor);
            $this->hours = (int) round($this->hours * $factor);
            $this->minutes = (int) round($this->minutes * $factor);
            $this->seconds = (int) round($this->seconds * $factor);
            $this->microseconds = (int) round($this->microseconds * $factor);

            return $this;
        }

        /**
         * Divide current instance by a given divider. shares() is naive, it divides each unit separately
         * and the result is rounded for each unit. So 5 hours and 20 minutes shared by 3 becomes 2 hours
         * and 7 minutes.
         *
         * Use shares() when you want a fast and approximated calculation that does not cascade units.
         *
         * For a precise and cascaded calculation,
         *
         * @see divide()
         *
         * @param float|int $divider
         *
         * @return $this
         */
        public function shares($divider)
        {
            return $this->times(1 / $divider);
        }

        protected function copyProperties(self $interval, $ignoreSign = false)
        {
            $this->years = $interval->years;
            $this->months = $interval->months;
            $this->dayz = $interval->dayz;
            $this->hours = $interval->hours;
            $this->minutes = $interval->minutes;
            $this->seconds = $interval->seconds;
            $this->microseconds = $interval->microseconds;

            if (!$ignoreSign) {
                $this->invert = $interval->invert;
            }

            return $this;
        }

        /**
         * Multiply and cascade current instance by a given factor.
         *
         * @param float|int $factor
         *
         * @return $this
         */
        public function multiply($factor)
        {
            if ($factor < 0) {
                $this->invert = $this->invert ? 0 : 1;
                $factor = -$factor;
            }

            $yearPart = (int) floor($this->years * $factor); // Split calculation to prevent imprecision

            if ($yearPart) {
                $this->years -= $yearPart / $factor;
            }

            return $this->copyProperties(
                static::create($yearPart)
                    ->microseconds(abs($this->totalMicroseconds) * $factor)
                    ->cascade(),
                true
            );
        }

        /**
         * Divide and cascade current instance by a given divider.
         *
         * @param float|int $divider
         *
         * @return $this
         */
        public function divide($divider)
        {
            return $this->multiply(1 / $divider);
        }

        /**
         * Get the interval_spec string of a date interval.
         *
         * @param DateInterval $interval
         *
         * @return string
         */
        public static function getDateIntervalSpec(DateInterval $interval)
        {
            $date = array_filter([
                static::PERIOD_YEARS => abs($interval->y),
                static::PERIOD_MONTHS => abs($interval->m),
                static::PERIOD_DAYS => abs($interval->d),
            ]);

            $time = array_filter([
                static::PERIOD_HOURS => abs($interval->h),
                static::PERIOD_MINUTES => abs($interval->i),
                static::PERIOD_SECONDS => abs($interval->s),
            ]);

            $specString = static::PERIOD_PREFIX;

            foreach ($date as $key => $value) {
                $specString .= $value.$key;
            }

            if (\count($time) > 0) {
                $specString .= static::PERIOD_TIME_PREFIX;
                foreach ($time as $key => $value) {
                    $specString .= $value.$key;
                }
            }

            return $specString === static::PERIOD_PREFIX ? 'PT0S' : $specString;
        }

        /**
         * Get the interval_spec string.
         *
         * @return string
         */
        public function spec()
        {
            return static::getDateIntervalSpec($this);
        }

        /**
         * Comparing 2 date intervals.
         *
         * @param DateInterval $first
         * @param DateInterval $second
         *
         * @return int
         */
        public static function compareDateIntervals(DateInterval $first, DateInterval $second)
        {
            $current = Carbon::now();
            $passed = $current->avoidMutation()->add($second);
            $current->add($first);

            if ($current < $passed) {
                return -1;
            }
            if ($current > $passed) {
                return 1;
            }

            return 0;
        }

        /**
         * Comparing with passed interval.
         *
         * @param DateInterval $interval
         *
         * @return int
         */
        public function compare(DateInterval $interval)
        {
            return static::compareDateIntervals($this, $interval);
        }

        private function invertCascade(array $values)
        {
            return $this->set(array_map(function ($value) {
                return -$value;
            }, $values))->doCascade(true)->invert();
        }

        private function doCascade(bool $deep)
        {
            $originalData = $this->toArray();
            $originalData['milliseconds'] = (int) ($originalData['microseconds'] / static::getMicrosecondsPerMillisecond());
            $originalData['microseconds'] = $originalData['microseconds'] % static::getMicrosecondsPerMillisecond();
            $originalData['daysExcludeWeeks'] = $originalData['days'];
            unset($originalData['days']);
            $newData = $originalData;

            foreach (static::getFlipCascadeFactors() as $source => [$target, $factor]) {
                foreach (['source', 'target'] as $key) {
                    if ($$key === 'dayz') {
                        $$key = 'daysExcludeWeeks';
                    }
                }

                $value = $newData[$source];
                $modulo = ($factor + ($value % $factor)) % $factor;
                $newData[$source] = $modulo;
                $newData[$target] += ($value - $modulo) / $factor;
            }

            $positive = null;

            if (!$deep) {
                foreach ($newData as $value) {
                    if ($value) {
                        if ($positive === null) {
                            $positive = ($value > 0);

                            continue;
                        }

                        if (($value > 0) !== $positive) {
                            return $this->invertCascade($originalData)
                                ->solveNegativeInterval();
                        }
                    }
                }
            }

            return $this->set($newData)
                ->solveNegativeInterval();
        }

        /**
         * Convert overflowed values into bigger units.
         *
         * @return $this
         */
        public function cascade()
        {
            return $this->doCascade(false);
        }

        public function hasNegativeValues(): bool
        {
            foreach ($this->toArray() as $value) {
                if ($value < 0) {
                    return true;
                }
            }

            return false;
        }

        public function hasPositiveValues(): bool
        {
            foreach ($this->toArray() as $value) {
                if ($value > 0) {
                    return true;
                }
            }

            return false;
        }

        /**
         * Get amount of given unit equivalent to the interval.
         *
         * @param string $unit
         *
         * @throws UnknownUnitException|UnitNotConfiguredException
         *
         * @return float
         */
        public function total($unit)
        {
            $realUnit = $unit = strtolower($unit);

            if (\in_array($unit, ['days', 'weeks'])) {
                $realUnit = 'dayz';
            } elseif (!\in_array($unit, ['microseconds', 'milliseconds', 'seconds', 'minutes', 'hours', 'dayz', 'months', 'years'])) {
                throw new UnknownUnitException($unit);
            }

            $result = 0;
            $cumulativeFactor = 0;
            $unitFound = false;
            $factors = static::getFlipCascadeFactors();
            $daysPerWeek = static::getDaysPerWeek();

            $values = [
                'years' => $this->years,
                'months' => $this->months,
                'weeks' => (int) ($this->d / $daysPerWeek),
                'dayz' => $this->d % $daysPerWeek,
                'hours' => $this->hours,
                'minutes' => $this->minutes,
                'seconds' => $this->seconds,
                'milliseconds' => (int) ($this->microseconds / Carbon::MICROSECONDS_PER_MILLISECOND),
                'microseconds' => $this->microseconds % Carbon::MICROSECONDS_PER_MILLISECOND,
            ];

            if (isset($factors['dayz']) && $factors['dayz'][0] !== 'weeks') {
                $values['dayz'] += $values['weeks'] * $daysPerWeek;
                $values['weeks'] = 0;
            }

            foreach ($factors as $source => [$target, $factor]) {
                if ($source === $realUnit) {
                    $unitFound = true;
                    $value = $values[$source];
                    $result += $value;
                    $cumulativeFactor = 1;
                }

                if ($factor === false) {
                    if ($unitFound) {
                        break;
                    }

                    $result = 0;
                    $cumulativeFactor = 0;

                    continue;
                }

                if ($target === $realUnit) {
                    $unitFound = true;
                }

                if ($cumulativeFactor) {
                    $cumulativeFactor *= $factor;
                    $result += $values[$target] * $cumulativeFactor;

                    continue;
                }

                $value = $values[$source];

                $result = ($result + $value) / $factor;
            }

            if (isset($target) && !$cumulativeFactor) {
                $result += $values[$target];
            }

            if (!$unitFound) {
                throw new UnitNotConfiguredException($unit);
            }

            if ($this->invert) {
                $result *= -1;
            }

            if ($unit === 'weeks') {
                return $result / $daysPerWeek;
            }

            return $result;
        }

        /**
         * Determines if the instance is equal to another
         *
         * @param CarbonInterval|DateInterval|mixed $interval
         *
         * @see equalTo()
         *
         * @return bool
         */
        public function eq($interval): bool
        {
            return $this->equalTo($interval);
        }

        /**
         * Determines if the instance is equal to another
         *
         * @param CarbonInterval|DateInterval|mixed $interval
         *
         * @return bool
         */
        public function equalTo($interval): bool
        {
            $interval = $this->resolveInterval($interval);

            return $interval !== null && $this->totalMicroseconds === $interval->totalMicroseconds;
        }

        /**
         * Determines if the instance is not equal to another
         *
         * @param CarbonInterval|DateInterval|mixed $interval
         *
         * @see notEqualTo()
         *
         * @return bool
         */
        public function ne($interval): bool
        {
            return $this->notEqualTo($interval);
        }

        /**
         * Determines if the instance is not equal to another
         *
         * @param CarbonInterval|DateInterval|mixed $interval
         *
         * @return bool
         */
        public function notEqualTo($interval): bool
        {
            return !$this->eq($interval);
        }

        /**
         * Determines if the instance is greater (longer) than another
         *
         * @param CarbonInterval|DateInterval|mixed $interval
         *
         * @see greaterThan()
         *
         * @return bool
         */
        public function gt($interval): bool
        {
            return $this->greaterThan($interval);
        }

        /**
         * Determines if the instance is greater (longer) than another
         *
         * @param CarbonInterval|DateInterval|mixed $interval
         *
         * @return bool
         */
        public function greaterThan($interval): bool
        {
            $interval = $this->resolveInterval($interval);

            return $interval === null || $this->totalMicroseconds > $interval->totalMicroseconds;
        }

        /**
         * Determines if the instance is greater (longer) than or equal to another
         *
         * @param CarbonInterval|DateInterval|mixed $interval
         *
         * @see greaterThanOrEqualTo()
         *
         * @return bool
         */
        public function gte($interval): bool
        {
            return $this->greaterThanOrEqualTo($interval);
        }

        /**
         * Determines if the instance is greater (longer) than or equal to another
         *
         * @param CarbonInterval|DateInterval|mixed $interval
         *
         * @return bool
         */
        public function greaterThanOrEqualTo($interval): bool
        {
            return $this->greaterThan($interval) || $this->equalTo($interval);
        }

        /**
         * Determines if the instance is less (shorter) than another
         *
         * @param CarbonInterval|DateInterval|mixed $interval
         *
         * @see lessThan()
         *
         * @return bool
         */
        public function lt($interval): bool
        {
            return $this->lessThan($interval);
        }

        /**
         * Determines if the instance is less (shorter) than another
         *
         * @param CarbonInterval|DateInterval|mixed $interval
         *
         * @return bool
         */
        public function lessThan($interval): bool
        {
            $interval = $this->resolveInterval($interval);

            return $interval !== null && $this->totalMicroseconds < $interval->totalMicroseconds;
        }

        /**
         * Determines if the instance is less (shorter) than or equal to another
         *
         * @param CarbonInterval|DateInterval|mixed $interval
         *
         * @see lessThanOrEqualTo()
         *
         * @return bool
         */
        public function lte($interval): bool
        {
            return $this->lessThanOrEqualTo($interval);
        }

        /**
         * Determines if the instance is less (shorter) than or equal to another
         *
         * @param CarbonInterval|DateInterval|mixed $interval
         *
         * @return bool
         */
        public function lessThanOrEqualTo($interval): bool
        {
            return $this->lessThan($interval) || $this->equalTo($interval);
        }

        /**
         * Determines if the instance is between two others.
         *
         * The third argument allow you to specify if bounds are included or not (true by default)
         * but for when you including/excluding bounds may produce different results in your application,
         * we recommend to use the explicit methods ->betweenIncluded() or ->betweenExcluded() instead.
         *
         * @example
         * ```
         * CarbonInterval::hours(48)->between(CarbonInterval::day(), CarbonInterval::days(3)); // true
         * CarbonInterval::hours(48)->between(CarbonInterval::day(), CarbonInterval::hours(36)); // false
         * CarbonInterval::hours(48)->between(CarbonInterval::day(), CarbonInterval::days(2)); // true
         * CarbonInterval::hours(48)->between(CarbonInterval::day(), CarbonInterval::days(2), false); // false
         * ```
         *
         * @param CarbonInterval|DateInterval|mixed $interval1
         * @param CarbonInterval|DateInterval|mixed $interval2
         * @param bool                              $equal     Indicates if an equal to comparison should be done
         *
         * @return bool
         */
        public function between($interval1, $interval2, $equal = true): bool
        {
            return $equal
                ? $this->greaterThanOrEqualTo($interval1) && $this->lessThanOrEqualTo($interval2)
                : $this->greaterThan($interval1) && $this->lessThan($interval2);
        }

        /**
         * Determines if the instance is between two others, bounds excluded.
         *
         * @example
         * ```
         * CarbonInterval::hours(48)->betweenExcluded(CarbonInterval::day(), CarbonInterval::days(3)); // true
         * CarbonInterval::hours(48)->betweenExcluded(CarbonInterval::day(), CarbonInterval::hours(36)); // false
         * CarbonInterval::hours(48)->betweenExcluded(CarbonInterval::day(), CarbonInterval::days(2)); // true
         * ```
         *
         * @param CarbonInterval|DateInterval|mixed $interval1
         * @param CarbonInterval|DateInterval|mixed $interval2
         *
         * @return bool
         */
        public function betweenIncluded($interval1, $interval2): bool
        {
            return $this->between($interval1, $interval2, true);
        }

        /**
         * Determines if the instance is between two others, bounds excluded.
         *
         * @example
         * ```
         * CarbonInterval::hours(48)->betweenExcluded(CarbonInterval::day(), CarbonInterval::days(3)); // true
         * CarbonInterval::hours(48)->betweenExcluded(CarbonInterval::day(), CarbonInterval::hours(36)); // false
         * CarbonInterval::hours(48)->betweenExcluded(CarbonInterval::day(), CarbonInterval::days(2)); // false
         * ```
         *
         * @param CarbonInterval|DateInterval|mixed $interval1
         * @param CarbonInterval|DateInterval|mixed $interval2
         *
         * @return bool
         */
        public function betweenExcluded($interval1, $interval2): bool
        {
            return $this->between($interval1, $interval2, false);
        }

        /**
         * Determines if the instance is between two others
         *
         * @example
         * ```
         * CarbonInterval::hours(48)->isBetween(CarbonInterval::day(), CarbonInterval::days(3)); // true
         * CarbonInterval::hours(48)->isBetween(CarbonInterval::day(), CarbonInterval::hours(36)); // false
         * CarbonInterval::hours(48)->isBetween(CarbonInterval::day(), CarbonInterval::days(2)); // true
         * CarbonInterval::hours(48)->isBetween(CarbonInterval::day(), CarbonInterval::days(2), false); // false
         * ```
         *
         * @param CarbonInterval|DateInterval|mixed $interval1
         * @param CarbonInterval|DateInterval|mixed $interval2
         * @param bool                              $equal     Indicates if an equal to comparison should be done
         *
         * @return bool
         */
        public function isBetween($interval1, $interval2, $equal = true): bool
        {
            return $this->between($interval1, $interval2, $equal);
        }

        /**
         * Round the current instance at the given unit with given precision if specified and the given function.
         *
         * @param string                             $unit
         * @param float|int|string|DateInterval|null $precision
         * @param string                             $function
         *
         * @throws Exception
         *
         * @return $this
         */
        public function roundUnit($unit, $precision = 1, $function = 'round')
        {
            $base = CarbonImmutable::parse('2000-01-01 00:00:00', 'UTC')
                ->roundUnit($unit, $precision, $function);
            $next = $base->add($this);
            $inverted = $next < $base;

            if ($inverted) {
                $next = $base->sub($this);
            }

            $this->copyProperties(
                $next
                    ->roundUnit($unit, $precision, $function)
                    ->diffAsCarbonInterval($base)
            );

            return $this->invert($inverted);
        }

        /**
         * Truncate the current instance at the given unit with given precision if specified.
         *
         * @param string                             $unit
         * @param float|int|string|DateInterval|null $precision
         *
         * @throws Exception
         *
         * @return $this
         */
        public function floorUnit($unit, $precision = 1)
        {
            return $this->roundUnit($unit, $precision, 'floor');
        }

        /**
         * Ceil the current instance at the given unit with given precision if specified.
         *
         * @param string                             $unit
         * @param float|int|string|DateInterval|null $precision
         *
         * @throws Exception
         *
         * @return $this
         */
        public function ceilUnit($unit, $precision = 1)
        {
            return $this->roundUnit($unit, $precision, 'ceil');
        }

        /**
         * Round the current instance second with given precision if specified.
         *
         * @param float|int|string|DateInterval|null $precision
         * @param string                             $function
         *
         * @throws Exception
         *
         * @return $this
         */
        public function round($precision = 1, $function = 'round')
        {
            return $this->roundWith($precision, $function);
        }

        /**
         * Round the current instance second with given precision if specified.
         *
         * @param float|int|string|DateInterval|null $precision
         *
         * @throws Exception
         *
         * @return $this
         */
        public function floor($precision = 1)
        {
            return $this->round($precision, 'floor');
        }

        /**
         * Ceil the current instance second with given precision if specified.
         *
         * @param float|int|string|DateInterval|null $precision
         *
         * @throws Exception
         *
         * @return $this
         */
        public function ceil($precision = 1)
        {
            return $this->round($precision, 'ceil');
        }
    }
  uploads-Carbon-src-Carbon-CarbonPeriod.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon;

    use Carbon\Exceptions\InvalidCastException;
    use Carbon\Exceptions\InvalidIntervalException;
    use Carbon\Exceptions\InvalidPeriodDateException;
    use Carbon\Exceptions\InvalidPeriodParameterException;
    use Carbon\Exceptions\NotACarbonClassException;
    use Carbon\Exceptions\NotAPeriodException;
    use Carbon\Exceptions\UnknownGetterException;
    use Carbon\Exceptions\UnknownMethodException;
    use Carbon\Exceptions\UnreachableException;
    use Carbon\Traits\IntervalRounding;
    use Carbon\Traits\Mixin;
    use Carbon\Traits\Options;
    use Closure;
    use Countable;
    use DateInterval;
    use DatePeriod;
    use DateTime;
    use DateTimeInterface;
    use DateTimeZone;
    use InvalidArgumentException;
    use Iterator;
    use JsonSerializable;
    use ReflectionException;
    use ReturnTypeWillChange;
    use RuntimeException;

    /**
     * Substitution of DatePeriod with some modifications and many more features.
     *
     * @property-read int|float $recurrences number of recurrences (if end not set).
     * @property-read bool $include_start_date rather the start date is included in the iteration.
     * @property-read bool $include_end_date rather the end date is included in the iteration (if recurrences not set).
     * @property-read CarbonInterface $start Period start date.
     * @property-read CarbonInterface $current Current date from the iteration.
     * @property-read CarbonInterface $end Period end date.
     * @property-read CarbonInterval $interval Underlying date interval instance. Always present, one day by default.
     *
     * @method static CarbonPeriod start($date, $inclusive = null) Create instance specifying start date or modify the start date if called on an instance.
     * @method static CarbonPeriod since($date, $inclusive = null) Alias for start().
     * @method static CarbonPeriod sinceNow($inclusive = null) Create instance with start date set to now or set the start date to now if called on an instance.
     * @method static CarbonPeriod end($date = null, $inclusive = null) Create instance specifying end date or modify the end date if called on an instance.
     * @method static CarbonPeriod until($date = null, $inclusive = null) Alias for end().
     * @method static CarbonPeriod untilNow($inclusive = null) Create instance with end date set to now or set the end date to now if called on an instance.
     * @method static CarbonPeriod dates($start, $end = null) Create instance with start and end dates or modify the start and end dates if called on an instance.
     * @method static CarbonPeriod between($start, $end = null) Create instance with start and end dates or modify the start and end dates if called on an instance.
     * @method static CarbonPeriod recurrences($recurrences = null) Create instance with maximum number of recurrences or modify the number of recurrences if called on an instance.
     * @method static CarbonPeriod times($recurrences = null) Alias for recurrences().
     * @method static CarbonPeriod options($options = null) Create instance with options or modify the options if called on an instance.
     * @method static CarbonPeriod toggle($options, $state = null) Create instance with options toggled on or off, or toggle options if called on an instance.
     * @method static CarbonPeriod filter($callback, $name = null) Create instance with filter added to the stack or append a filter if called on an instance.
     * @method static CarbonPeriod push($callback, $name = null) Alias for filter().
     * @method static CarbonPeriod prepend($callback, $name = null) Create instance with filter prepended to the stack or prepend a filter if called on an instance.
     * @method static CarbonPeriod filters(array $filters = []) Create instance with filters stack or replace the whole filters stack if called on an instance.
     * @method static CarbonPeriod interval($interval) Create instance with given date interval or modify the interval if called on an instance.
     * @method static CarbonPeriod each($interval) Create instance with given date interval or modify the interval if called on an instance.
     * @method static CarbonPeriod every($interval) Create instance with given date interval or modify the interval if called on an instance.
     * @method static CarbonPeriod step($interval) Create instance with given date interval or modify the interval if called on an instance.
     * @method static CarbonPeriod stepBy($interval) Create instance with given date interval or modify the interval if called on an instance.
     * @method static CarbonPeriod invert() Create instance with inverted date interval or invert the interval if called on an instance.
     * @method static CarbonPeriod years($years = 1) Create instance specifying a number of years for date interval or replace the interval by the given a number of years if called on an instance.
     * @method static CarbonPeriod year($years = 1) Alias for years().
     * @method static CarbonPeriod months($months = 1) Create instance specifying a number of months for date interval or replace the interval by the given a number of months if called on an instance.
     * @method static CarbonPeriod month($months = 1) Alias for months().
     * @method static CarbonPeriod weeks($weeks = 1) Create instance specifying a number of weeks for date interval or replace the interval by the given a number of weeks if called on an instance.
     * @method static CarbonPeriod week($weeks = 1) Alias for weeks().
     * @method static CarbonPeriod days($days = 1) Create instance specifying a number of days for date interval or replace the interval by the given a number of days if called on an instance.
     * @method static CarbonPeriod dayz($days = 1) Alias for days().
     * @method static CarbonPeriod day($days = 1) Alias for days().
     * @method static CarbonPeriod hours($hours = 1) Create instance specifying a number of hours for date interval or replace the interval by the given a number of hours if called on an instance.
     * @method static CarbonPeriod hour($hours = 1) Alias for hours().
     * @method static CarbonPeriod minutes($minutes = 1) Create instance specifying a number of minutes for date interval or replace the interval by the given a number of minutes if called on an instance.
     * @method static CarbonPeriod minute($minutes = 1) Alias for minutes().
     * @method static CarbonPeriod seconds($seconds = 1) Create instance specifying a number of seconds for date interval or replace the interval by the given a number of seconds if called on an instance.
     * @method static CarbonPeriod second($seconds = 1) Alias for seconds().
     * @method $this roundYear(float $precision = 1, string $function = "round") Round the current instance year with given precision using the given function.
     * @method $this roundYears(float $precision = 1, string $function = "round") Round the current instance year with given precision using the given function.
     * @method $this floorYear(float $precision = 1) Truncate the current instance year with given precision.
     * @method $this floorYears(float $precision = 1) Truncate the current instance year with given precision.
     * @method $this ceilYear(float $precision = 1) Ceil the current instance year with given precision.
     * @method $this ceilYears(float $precision = 1) Ceil the current instance year with given precision.
     * @method $this roundMonth(float $precision = 1, string $function = "round") Round the current instance month with given precision using the given function.
     * @method $this roundMonths(float $precision = 1, string $function = "round") Round the current instance month with given precision using the given function.
     * @method $this floorMonth(float $precision = 1) Truncate the current instance month with given precision.
     * @method $this floorMonths(float $precision = 1) Truncate the current instance month with given precision.
     * @method $this ceilMonth(float $precision = 1) Ceil the current instance month with given precision.
     * @method $this ceilMonths(float $precision = 1) Ceil the current instance month with given precision.
     * @method $this roundWeek(float $precision = 1, string $function = "round") Round the current instance day with given precision using the given function.
     * @method $this roundWeeks(float $precision = 1, string $function = "round") Round the current instance day with given precision using the given function.
     * @method $this floorWeek(float $precision = 1) Truncate the current instance day with given precision.
     * @method $this floorWeeks(float $precision = 1) Truncate the current instance day with given precision.
     * @method $this ceilWeek(float $precision = 1) Ceil the current instance day with given precision.
     * @method $this ceilWeeks(float $precision = 1) Ceil the current instance day with given precision.
     * @method $this roundDay(float $precision = 1, string $function = "round") Round the current instance day with given precision using the given function.
     * @method $this roundDays(float $precision = 1, string $function = "round") Round the current instance day with given precision using the given function.
     * @method $this floorDay(float $precision = 1) Truncate the current instance day with given precision.
     * @method $this floorDays(float $precision = 1) Truncate the current instance day with given precision.
     * @method $this ceilDay(float $precision = 1) Ceil the current instance day with given precision.
     * @method $this ceilDays(float $precision = 1) Ceil the current instance day with given precision.
     * @method $this roundHour(float $precision = 1, string $function = "round") Round the current instance hour with given precision using the given function.
     * @method $this roundHours(float $precision = 1, string $function = "round") Round the current instance hour with given precision using the given function.
     * @method $this floorHour(float $precision = 1) Truncate the current instance hour with given precision.
     * @method $this floorHours(float $precision = 1) Truncate the current instance hour with given precision.
     * @method $this ceilHour(float $precision = 1) Ceil the current instance hour with given precision.
     * @method $this ceilHours(float $precision = 1) Ceil the current instance hour with given precision.
     * @method $this roundMinute(float $precision = 1, string $function = "round") Round the current instance minute with given precision using the given function.
     * @method $this roundMinutes(float $precision = 1, string $function = "round") Round the current instance minute with given precision using the given function.
     * @method $this floorMinute(float $precision = 1) Truncate the current instance minute with given precision.
     * @method $this floorMinutes(float $precision = 1) Truncate the current instance minute with given precision.
     * @method $this ceilMinute(float $precision = 1) Ceil the current instance minute with given precision.
     * @method $this ceilMinutes(float $precision = 1) Ceil the current instance minute with given precision.
     * @method $this roundSecond(float $precision = 1, string $function = "round") Round the current instance second with given precision using the given function.
     * @method $this roundSeconds(float $precision = 1, string $function = "round") Round the current instance second with given precision using the given function.
     * @method $this floorSecond(float $precision = 1) Truncate the current instance second with given precision.
     * @method $this floorSeconds(float $precision = 1) Truncate the current instance second with given precision.
     * @method $this ceilSecond(float $precision = 1) Ceil the current instance second with given precision.
     * @method $this ceilSeconds(float $precision = 1) Ceil the current instance second with given precision.
     * @method $this roundMillennium(float $precision = 1, string $function = "round") Round the current instance millennium with given precision using the given function.
     * @method $this roundMillennia(float $precision = 1, string $function = "round") Round the current instance millennium with given precision using the given function.
     * @method $this floorMillennium(float $precision = 1) Truncate the current instance millennium with given precision.
     * @method $this floorMillennia(float $precision = 1) Truncate the current instance millennium with given precision.
     * @method $this ceilMillennium(float $precision = 1) Ceil the current instance millennium with given precision.
     * @method $this ceilMillennia(float $precision = 1) Ceil the current instance millennium with given precision.
     * @method $this roundCentury(float $precision = 1, string $function = "round") Round the current instance century with given precision using the given function.
     * @method $this roundCenturies(float $precision = 1, string $function = "round") Round the current instance century with given precision using the given function.
     * @method $this floorCentury(float $precision = 1) Truncate the current instance century with given precision.
     * @method $this floorCenturies(float $precision = 1) Truncate the current instance century with given precision.
     * @method $this ceilCentury(float $precision = 1) Ceil the current instance century with given precision.
     * @method $this ceilCenturies(float $precision = 1) Ceil the current instance century with given precision.
     * @method $this roundDecade(float $precision = 1, string $function = "round") Round the current instance decade with given precision using the given function.
     * @method $this roundDecades(float $precision = 1, string $function = "round") Round the current instance decade with given precision using the given function.
     * @method $this floorDecade(float $precision = 1) Truncate the current instance decade with given precision.
     * @method $this floorDecades(float $precision = 1) Truncate the current instance decade with given precision.
     * @method $this ceilDecade(float $precision = 1) Ceil the current instance decade with given precision.
     * @method $this ceilDecades(float $precision = 1) Ceil the current instance decade with given precision.
     * @method $this roundQuarter(float $precision = 1, string $function = "round") Round the current instance quarter with given precision using the given function.
     * @method $this roundQuarters(float $precision = 1, string $function = "round") Round the current instance quarter with given precision using the given function.
     * @method $this floorQuarter(float $precision = 1) Truncate the current instance quarter with given precision.
     * @method $this floorQuarters(float $precision = 1) Truncate the current instance quarter with given precision.
     * @method $this ceilQuarter(float $precision = 1) Ceil the current instance quarter with given precision.
     * @method $this ceilQuarters(float $precision = 1) Ceil the current instance quarter with given precision.
     * @method $this roundMillisecond(float $precision = 1, string $function = "round") Round the current instance millisecond with given precision using the given function.
     * @method $this roundMilliseconds(float $precision = 1, string $function = "round") Round the current instance millisecond with given precision using the given function.
     * @method $this floorMillisecond(float $precision = 1) Truncate the current instance millisecond with given precision.
     * @method $this floorMilliseconds(float $precision = 1) Truncate the current instance millisecond with given precision.
     * @method $this ceilMillisecond(float $precision = 1) Ceil the current instance millisecond with given precision.
     * @method $this ceilMilliseconds(float $precision = 1) Ceil the current instance millisecond with given precision.
     * @method $this roundMicrosecond(float $precision = 1, string $function = "round") Round the current instance microsecond with given precision using the given function.
     * @method $this roundMicroseconds(float $precision = 1, string $function = "round") Round the current instance microsecond with given precision using the given function.
     * @method $this floorMicrosecond(float $precision = 1) Truncate the current instance microsecond with given precision.
     * @method $this floorMicroseconds(float $precision = 1) Truncate the current instance microsecond with given precision.
     * @method $this ceilMicrosecond(float $precision = 1) Ceil the current instance microsecond with given precision.
     * @method $this ceilMicroseconds(float $precision = 1) Ceil the current instance microsecond with given precision.
     */
    class CarbonPeriod implements Iterator, Countable, JsonSerializable
    {
        use IntervalRounding;
        use Mixin {
            Mixin::mixin as baseMixin;
        }
        use Options;

        /**
         * Built-in filters.
         *
         * @var string
         */
        public const RECURRENCES_FILTER = [self::class, 'filterRecurrences'];
        public const END_DATE_FILTER = [self::class, 'filterEndDate'];

        /**
         * Special value which can be returned by filters to end iteration. Also a filter.
         *
         * @var string
         */
        public const END_ITERATION = [self::class, 'endIteration'];

        /**
         * Exclude start date from iteration.
         *
         * @var int
         */
        public const EXCLUDE_START_DATE = 1;

        /**
         * Exclude end date from iteration.
         *
         * @var int
         */
        public const EXCLUDE_END_DATE = 2;

        /**
         * Yield CarbonImmutable instances.
         *
         * @var int
         */
        public const IMMUTABLE = 4;

        /**
         * Number of maximum attempts before giving up on finding next valid date.
         *
         * @var int
         */
        public const NEXT_MAX_ATTEMPTS = 1000;

        /**
         * Number of maximum attempts before giving up on finding end date.
         *
         * @var int
         */
        public const END_MAX_ATTEMPTS = 10000;

        /**
         * The registered macros.
         *
         * @var array
         */
        protected static $macros = [];

        /**
         * Date class of iteration items.
         *
         * @var string
         */
        protected $dateClass = Carbon::class;

        /**
         * Underlying date interval instance. Always present, one day by default.
         *
         * @var CarbonInterval
         */
        protected $dateInterval;

        /**
         * Whether current date interval was set by default.
         *
         * @var bool
         */
        protected $isDefaultInterval;

        /**
         * The filters stack.
         *
         * @var array
         */
        protected $filters = [];

        /**
         * Period start date. Applied on rewind. Always present, now by default.
         *
         * @var CarbonInterface
         */
        protected $startDate;

        /**
         * Period end date. For inverted interval should be before the start date. Applied via a filter.
         *
         * @var CarbonInterface|null
         */
        protected $endDate;

        /**
         * Limit for number of recurrences. Applied via a filter.
         *
         * @var int|null
         */
        protected $recurrences;

        /**
         * Iteration options.
         *
         * @var int
         */
        protected $options;

        /**
         * Index of current date. Always sequential, even if some dates are skipped by filters.
         * Equal to null only before the first iteration.
         *
         * @var int
         */
        protected $key;

        /**
         * Current date. May temporarily hold unaccepted value when looking for a next valid date.
         * Equal to null only before the first iteration.
         *
         * @var CarbonInterface
         */
        protected $current;

        /**
         * Timezone of current date. Taken from the start date.
         *
         * @var \DateTimeZone|null
         */
        protected $timezone;

        /**
         * The cached validation result for current date.
         *
         * @var bool|string|null
         */
        protected $validationResult;

        /**
         * Timezone handler for settings() method.
         *
         * @var mixed
         */
        protected $tzName;

        /**
         * Make a CarbonPeriod instance from given variable if possible.
         *
         * @param mixed $var
         *
         * @return static|null
         */
        public static function make($var)
        {
            try {
                return static::instance($var);
            } catch (NotAPeriodException $e) {
                return static::create($var);
            }
        }

        /**
         * Create a new instance from a DatePeriod or CarbonPeriod object.
         *
         * @param CarbonPeriod|DatePeriod $period
         *
         * @return static
         */
        public static function instance($period)
        {
            if ($period instanceof static) {
                return $period->copy();
            }

            if ($period instanceof self) {
                return new static(
                    $period->getStartDate(),
                    $period->getEndDate() ?: $period->getRecurrences(),
                    $period->getDateInterval(),
                    $period->getOptions()
                );
            }

            if ($period instanceof DatePeriod) {
                return new static(
                    $period->start,
                    $period->end ?: ($period->recurrences - 1),
                    $period->interval,
                    $period->include_start_date ? 0 : static::EXCLUDE_START_DATE
                );
            }

            $class = \get_called_class();
            $type = \gettype($period);

            throw new NotAPeriodException(
                'Argument 1 passed to '.$class.'::'.__METHOD__.'() '.
                'must be an instance of DatePeriod or '.$class.', '.
                ($type === 'object' ? 'instance of '.\get_class($period) : $type).' given.'
            );
        }

        /**
         * Create a new instance.
         *
         * @return static
         */
        public static function create(...$params)
        {
            return static::createFromArray($params);
        }

        /**
         * Create a new instance from an array of parameters.
         *
         * @param array $params
         *
         * @return static
         */
        public static function createFromArray(array $params)
        {
            return new static(...$params);
        }

        /**
         * Create CarbonPeriod from ISO 8601 string.
         *
         * @param string   $iso
         * @param int|null $options
         *
         * @return static
         */
        public static function createFromIso($iso, $options = null)
        {
            $params = static::parseIso8601($iso);

            $instance = static::createFromArray($params);

            if ($options !== null) {
                $instance->setOptions($options);
            }

            return $instance;
        }

        /**
         * Return whether given interval contains non zero value of any time unit.
         *
         * @param \DateInterval $interval
         *
         * @return bool
         */
        protected static function intervalHasTime(DateInterval $interval)
        {
            return $interval->h || $interval->i || $interval->s || $interval->f;
        }

        /**
         * Return whether given variable is an ISO 8601 specification.
         *
         * Note: Check is very basic, as actual validation will be done later when parsing.
         * We just want to ensure that variable is not any other type of a valid parameter.
         *
         * @param mixed $var
         *
         * @return bool
         */
        protected static function isIso8601($var)
        {
            if (!\is_string($var)) {
                return false;
            }

            // Match slash but not within a timezone name.
            $part = '[a-z]+(?:[_-][a-z]+)*';

            preg_match("#\b$part/$part\b|(/)#i", $var, $match);

            return isset($match[1]);
        }

        /**
         * Parse given ISO 8601 string into an array of arguments.
         *
         * @SuppressWarnings(PHPMD.ElseExpression)
         *
         * @param string $iso
         *
         * @return array
         */
        protected static function parseIso8601($iso)
        {
            $result = [];

            $interval = null;
            $start = null;
            $end = null;

            foreach (explode('/', $iso) as $key => $part) {
                if ($key === 0 && preg_match('/^R([0-9]*)$/', $part, $match)) {
                    $parsed = \strlen($match[1]) ? (int) $match[1] : null;
                } elseif ($interval === null && $parsed = CarbonInterval::make($part)) {
                    $interval = $part;
                } elseif ($start === null && $parsed = Carbon::make($part)) {
                    $start = $part;
                } elseif ($end === null && $parsed = Carbon::make(static::addMissingParts($start ?? '', $part))) {
                    $end = $part;
                } else {
                    throw new InvalidPeriodParameterException("Invalid ISO 8601 specification: $iso.");
                }

                $result[] = $parsed;
            }

            return $result;
        }

        /**
         * Add missing parts of the target date from the soure date.
         *
         * @param string $source
         * @param string $target
         *
         * @return string
         */
        protected static function addMissingParts($source, $target)
        {
            $pattern = '/'.preg_replace('/[0-9]+/', '[0-9]+', preg_quote($target, '/')).'$/';

            $result = preg_replace($pattern, $target, $source, 1, $count);

            return $count ? $result : $target;
        }

        /**
         * Register a custom macro.
         *
         * @example
         * ```
         * CarbonPeriod::macro('middle', function () {
         *   return $this->getStartDate()->average($this->getEndDate());
         * });
         * echo CarbonPeriod::since('2011-05-12')->until('2011-06-03')->middle();
         * ```
         *
         * @param string          $name
         * @param object|callable $macro
         *
         * @return void
         */
        public static function macro($name, $macro)
        {
            static::$macros[$name] = $macro;
        }

        /**
         * Register macros from a mixin object.
         *
         * @example
         * ```
         * CarbonPeriod::mixin(new class {
         *   public function addDays() {
         *     return function ($count = 1) {
         *       return $this->setStartDate(
         *         $this->getStartDate()->addDays($count)
         *       )->setEndDate(
         *         $this->getEndDate()->addDays($count)
         *       );
         *     };
         *   }
         *   public function subDays() {
         *     return function ($count = 1) {
         *       return $this->setStartDate(
         *         $this->getStartDate()->subDays($count)
         *       )->setEndDate(
         *         $this->getEndDate()->subDays($count)
         *       );
         *     };
         *   }
         * });
         * echo CarbonPeriod::create('2000-01-01', '2000-02-01')->addDays(5)->subDays(3);
         * ```
         *
         * @param object|string $mixin
         *
         * @throws ReflectionException
         *
         * @return void
         */
        public static function mixin($mixin)
        {
            static::baseMixin($mixin);
        }

        /**
         * Check if macro is registered.
         *
         * @param string $name
         *
         * @return bool
         */
        public static function hasMacro($name)
        {
            return isset(static::$macros[$name]);
        }

        /**
         * Provide static proxy for instance aliases.
         *
         * @param string $method
         * @param array  $parameters
         *
         * @return mixed
         */
        public static function __callStatic($method, $parameters)
        {
            $date = new static();

            if (static::hasMacro($method)) {
                return static::bindMacroContext(null, function () use (&$method, &$parameters, &$date) {
                    return $date->callMacro($method, $parameters);
                });
            }

            return $date->$method(...$parameters);
        }

        /**
         * CarbonPeriod constructor.
         *
         * @SuppressWarnings(PHPMD.ElseExpression)
         *
         * @throws InvalidArgumentException
         */
        public function __construct(...$arguments)
        {
            // Parse and assign arguments one by one. First argument may be an ISO 8601 spec,
            // which will be first parsed into parts and then processed the same way.

            $argumentsCount = \count($arguments);

            if ($argumentsCount && static::isIso8601($iso = $arguments[0])) {
                array_splice($arguments, 0, 1, static::parseIso8601($iso));
            }

            if ($argumentsCount === 1) {
                if ($arguments[0] instanceof DatePeriod) {
                    $arguments = [
                        $arguments[0]->start,
                        $arguments[0]->end ?: ($arguments[0]->recurrences - 1),
                        $arguments[0]->interval,
                        $arguments[0]->include_start_date ? 0 : static::EXCLUDE_START_DATE,
                    ];
                } elseif ($arguments[0] instanceof self) {
                    $arguments = [
                        $arguments[0]->getStartDate(),
                        $arguments[0]->getEndDate() ?: $arguments[0]->getRecurrences(),
                        $arguments[0]->getDateInterval(),
                        $arguments[0]->getOptions(),
                    ];
                }
            }

            foreach ($arguments as $argument) {
                $parsedDate = null;

                if ($argument instanceof DateTimeZone) {
                    $this->setTimezone($argument);
                } elseif ($this->dateInterval === null &&
                    (
                        \is_string($argument) && preg_match(
                            '/^(-?\d(\d(?![\/-])|[^\d\/-]([\/-])?)*|P[T0-9].*|(?:\h*\d+(?:\.\d+)?\h*[a-z]+)+)$/i',
                            $argument
                        ) ||
                        $argument instanceof DateInterval ||
                        $argument instanceof Closure
                    ) &&
                    $parsedInterval = @CarbonInterval::make($argument)
                ) {
                    $this->setDateInterval($parsedInterval);
                } elseif ($this->startDate === null && $parsedDate = $this->makeDateTime($argument)) {
                    $this->setStartDate($parsedDate);
                } elseif ($this->endDate === null && ($parsedDate = $parsedDate ?? $this->makeDateTime($argument))) {
                    $this->setEndDate($parsedDate);
                } elseif ($this->recurrences === null && $this->endDate === null && is_numeric($argument)) {
                    $this->setRecurrences($argument);
                } elseif ($this->options === null && (\is_int($argument) || $argument === null)) {
                    $this->setOptions($argument);
                } else {
                    throw new InvalidPeriodParameterException('Invalid constructor parameters.');
                }
            }

            if ($this->startDate === null) {
                $this->setStartDate(Carbon::now());
            }

            if ($this->dateInterval === null) {
                $this->setDateInterval(CarbonInterval::day());

                $this->isDefaultInterval = true;
            }

            if ($this->options === null) {
                $this->setOptions(0);
            }
        }

        /**
         * Get a copy of the instance.
         *
         * @return static
         */
        public function copy()
        {
            return clone $this;
        }

        /**
         * Get the getter for a property allowing both `DatePeriod` snakeCase and camelCase names.
         *
         * @param string $name
         *
         * @return callable|null
         */
        protected function getGetter(string $name)
        {
            switch (strtolower(preg_replace('/[A-Z]/', '_$0', $name))) {
                case 'start':
                case 'start_date':
                    return [$this, 'getStartDate'];
                case 'end':
                case 'end_date':
                    return [$this, 'getEndDate'];
                case 'interval':
                case 'date_interval':
                    return [$this, 'getDateInterval'];
                case 'recurrences':
                    return [$this, 'getRecurrences'];
                case 'include_start_date':
                    return [$this, 'isStartIncluded'];
                case 'include_end_date':
                    return [$this, 'isEndIncluded'];
                case 'current':
                    return [$this, 'current'];
                default:
                    return null;
            }
        }

        /**
         * Get a property allowing both `DatePeriod` snakeCase and camelCase names.
         *
         * @param string $name
         *
         * @return bool|CarbonInterface|CarbonInterval|int|null
         */
        public function get(string $name)
        {
            $getter = $this->getGetter($name);

            if ($getter) {
                return $getter();
            }

            throw new UnknownGetterException($name);
        }

        /**
         * Get a property allowing both `DatePeriod` snakeCase and camelCase names.
         *
         * @param string $name
         *
         * @return bool|CarbonInterface|CarbonInterval|int|null
         */
        public function __get(string $name)
        {
            return $this->get($name);
        }

        /**
         * Check if an attribute exists on the object
         *
         * @param string $name
         *
         * @return bool
         */
        public function __isset(string $name): bool
        {
            return $this->getGetter($name) !== null;
        }

        /**
         * @alias copy
         *
         * Get a copy of the instance.
         *
         * @return static
         */
        public function clone()
        {
            return clone $this;
        }

        /**
         * Set the iteration item class.
         *
         * @param string $dateClass
         *
         * @return $this
         */
        public function setDateClass(string $dateClass)
        {
            if (!is_a($dateClass, CarbonInterface::class, true)) {
                throw new NotACarbonClassException($dateClass);
            }

            $this->dateClass = $dateClass;

            if (is_a($dateClass, Carbon::class, true)) {
                $this->toggleOptions(static::IMMUTABLE, false);
            } elseif (is_a($dateClass, CarbonImmutable::class, true)) {
                $this->toggleOptions(static::IMMUTABLE, true);
            }

            return $this;
        }

        /**
         * Returns iteration item date class.
         *
         * @return string
         */
        public function getDateClass(): string
        {
            return $this->dateClass;
        }

        /**
         * Change the period date interval.
         *
         * @param DateInterval|string $interval
         *
         * @throws InvalidIntervalException
         *
         * @return $this
         */
        public function setDateInterval($interval)
        {
            if (!$interval = CarbonInterval::make($interval)) {
                throw new InvalidIntervalException('Invalid interval.');
            }

            if ($interval->spec() === 'PT0S' && !$interval->f && !$interval->getStep()) {
                throw new InvalidIntervalException('Empty interval is not accepted.');
            }

            $this->dateInterval = $interval;

            $this->isDefaultInterval = false;

            $this->handleChangedParameters();

            return $this;
        }

        /**
         * Invert the period date interval.
         *
         * @return $this
         */
        public function invertDateInterval()
        {
            $interval = $this->dateInterval->invert();

            return $this->setDateInterval($interval);
        }

        /**
         * Set start and end date.
         *
         * @param DateTime|DateTimeInterface|string      $start
         * @param DateTime|DateTimeInterface|string|null $end
         *
         * @return $this
         */
        public function setDates($start, $end)
        {
            $this->setStartDate($start);
            $this->setEndDate($end);

            return $this;
        }

        /**
         * Change the period options.
         *
         * @param int|null $options
         *
         * @throws InvalidArgumentException
         *
         * @return $this
         */
        public function setOptions($options)
        {
            if (!\is_int($options) && $options !== null) {
                throw new InvalidPeriodParameterException('Invalid options.');
            }

            $this->options = $options ?: 0;

            $this->handleChangedParameters();

            return $this;
        }

        /**
         * Get the period options.
         *
         * @return int
         */
        public function getOptions()
        {
            return $this->options;
        }

        /**
         * Toggle given options on or off.
         *
         * @param int       $options
         * @param bool|null $state
         *
         * @throws \InvalidArgumentException
         *
         * @return $this
         */
        public function toggleOptions($options, $state = null)
        {
            if ($state === null) {
                $state = ($this->options & $options) !== $options;
            }

            return $this->setOptions(
                $state ?
                $this->options | $options :
                $this->options & ~$options
            );
        }

        /**
         * Toggle EXCLUDE_START_DATE option.
         *
         * @param bool $state
         *
         * @return $this
         */
        public function excludeStartDate($state = true)
        {
            return $this->toggleOptions(static::EXCLUDE_START_DATE, $state);
        }

        /**
         * Toggle EXCLUDE_END_DATE option.
         *
         * @param bool $state
         *
         * @return $this
         */
        public function excludeEndDate($state = true)
        {
            return $this->toggleOptions(static::EXCLUDE_END_DATE, $state);
        }

        /**
         * Get the underlying date interval.
         *
         * @return CarbonInterval
         */
        public function getDateInterval()
        {
            return $this->dateInterval->copy();
        }

        /**
         * Get start date of the period.
         *
         * @param string|null $rounding Optional rounding 'floor', 'ceil', 'round' using the period interval.
         *
         * @return CarbonInterface
         */
        public function getStartDate(string $rounding = null)
        {
            $date = $this->startDate->avoidMutation();

            return $rounding ? $date->round($this->getDateInterval(), $rounding) : $date;
        }

        /**
         * Get end date of the period.
         *
         * @param string|null $rounding Optional rounding 'floor', 'ceil', 'round' using the period interval.
         *
         * @return CarbonInterface|null
         */
        public function getEndDate(string $rounding = null)
        {
            if (!$this->endDate) {
                return null;
            }

            $date = $this->endDate->avoidMutation();

            return $rounding ? $date->round($this->getDateInterval(), $rounding) : $date;
        }

        /**
         * Get number of recurrences.
         *
         * @return int|float|null
         */
        public function getRecurrences()
        {
            return $this->recurrences;
        }

        /**
         * Returns true if the start date should be excluded.
         *
         * @return bool
         */
        public function isStartExcluded()
        {
            return ($this->options & static::EXCLUDE_START_DATE) !== 0;
        }

        /**
         * Returns true if the end date should be excluded.
         *
         * @return bool
         */
        public function isEndExcluded()
        {
            return ($this->options & static::EXCLUDE_END_DATE) !== 0;
        }

        /**
         * Returns true if the start date should be included.
         *
         * @return bool
         */
        public function isStartIncluded()
        {
            return !$this->isStartExcluded();
        }

        /**
         * Returns true if the end date should be included.
         *
         * @return bool
         */
        public function isEndIncluded()
        {
            return !$this->isEndExcluded();
        }

        /**
         * Return the start if it's included by option, else return the start + 1 period interval.
         *
         * @return CarbonInterface
         */
        public function getIncludedStartDate()
        {
            $start = $this->getStartDate();

            if ($this->isStartExcluded()) {
                return $start->add($this->getDateInterval());
            }

            return $start;
        }

        /**
         * Return the end if it's included by option, else return the end - 1 period interval.
         * Warning: if the period has no fixed end, this method will iterate the period to calculate it.
         *
         * @return CarbonInterface
         */
        public function getIncludedEndDate()
        {
            $end = $this->getEndDate();

            if (!$end) {
                return $this->calculateEnd();
            }

            if ($this->isEndExcluded()) {
                return $end->sub($this->getDateInterval());
            }

            return $end;
        }

        /**
         * Add a filter to the stack.
         *
         * @SuppressWarnings(PHPMD.UnusedFormalParameter)
         *
         * @param callable $callback
         * @param string   $name
         *
         * @return $this
         */
        public function addFilter($callback, $name = null)
        {
            $tuple = $this->createFilterTuple(\func_get_args());

            $this->filters[] = $tuple;

            $this->handleChangedParameters();

            return $this;
        }

        /**
         * Prepend a filter to the stack.
         *
         * @SuppressWarnings(PHPMD.UnusedFormalParameter)
         *
         * @param callable $callback
         * @param string   $name
         *
         * @return $this
         */
        public function prependFilter($callback, $name = null)
        {
            $tuple = $this->createFilterTuple(\func_get_args());

            array_unshift($this->filters, $tuple);

            $this->handleChangedParameters();

            return $this;
        }

        /**
         * Remove a filter by instance or name.
         *
         * @param callable|string $filter
         *
         * @return $this
         */
        public function removeFilter($filter)
        {
            $key = \is_callable($filter) ? 0 : 1;

            $this->filters = array_values(array_filter(
                $this->filters,
                function ($tuple) use ($key, $filter) {
                    return $tuple[$key] !== $filter;
                }
            ));

            $this->updateInternalState();

            $this->handleChangedParameters();

            return $this;
        }

        /**
         * Return whether given instance or name is in the filter stack.
         *
         * @param callable|string $filter
         *
         * @return bool
         */
        public function hasFilter($filter)
        {
            $key = \is_callable($filter) ? 0 : 1;

            foreach ($this->filters as $tuple) {
                if ($tuple[$key] === $filter) {
                    return true;
                }
            }

            return false;
        }

        /**
         * Get filters stack.
         *
         * @return array
         */
        public function getFilters()
        {
            return $this->filters;
        }

        /**
         * Set filters stack.
         *
         * @param array $filters
         *
         * @return $this
         */
        public function setFilters(array $filters)
        {
            $this->filters = $filters;

            $this->updateInternalState();

            $this->handleChangedParameters();

            return $this;
        }

        /**
         * Reset filters stack.
         *
         * @return $this
         */
        public function resetFilters()
        {
            $this->filters = [];

            if ($this->endDate !== null) {
                $this->filters[] = [static::END_DATE_FILTER, null];
            }

            if ($this->recurrences !== null) {
                $this->filters[] = [static::RECURRENCES_FILTER, null];
            }

            $this->handleChangedParameters();

            return $this;
        }

        /**
         * Add a recurrences filter (set maximum number of recurrences).
         *
         * @param int|float|null $recurrences
         *
         * @throws InvalidArgumentException
         *
         * @return $this
         */
        public function setRecurrences($recurrences)
        {
            if (!is_numeric($recurrences) && $recurrences !== null || $recurrences < 0) {
                throw new InvalidPeriodParameterException('Invalid number of recurrences.');
            }

            if ($recurrences === null) {
                return $this->removeFilter(static::RECURRENCES_FILTER);
            }

            $this->recurrences = $recurrences === INF ? INF : (int) $recurrences;

            if (!$this->hasFilter(static::RECURRENCES_FILTER)) {
                return $this->addFilter(static::RECURRENCES_FILTER);
            }

            $this->handleChangedParameters();

            return $this;
        }

        /**
         * Change the period start date.
         *
         * @param DateTime|DateTimeInterface|string $date
         * @param bool|null                         $inclusive
         *
         * @throws InvalidPeriodDateException
         *
         * @return $this
         */
        public function setStartDate($date, $inclusive = null)
        {
            if (!$date = ([$this->dateClass, 'make'])($date)) {
                throw new InvalidPeriodDateException('Invalid start date.');
            }

            $this->startDate = $date;

            if ($inclusive !== null) {
                $this->toggleOptions(static::EXCLUDE_START_DATE, !$inclusive);
            }

            return $this;
        }

        /**
         * Change the period end date.
         *
         * @param DateTime|DateTimeInterface|string|null $date
         * @param bool|null                              $inclusive
         *
         * @throws \InvalidArgumentException
         *
         * @return $this
         */
        public function setEndDate($date, $inclusive = null)
        {
            if ($date !== null && !$date = ([$this->dateClass, 'make'])($date)) {
                throw new InvalidPeriodDateException('Invalid end date.');
            }

            if (!$date) {
                return $this->removeFilter(static::END_DATE_FILTER);
            }

            $this->endDate = $date;

            if ($inclusive !== null) {
                $this->toggleOptions(static::EXCLUDE_END_DATE, !$inclusive);
            }

            if (!$this->hasFilter(static::END_DATE_FILTER)) {
                return $this->addFilter(static::END_DATE_FILTER);
            }

            $this->handleChangedParameters();

            return $this;
        }

        /**
         * Check if the current position is valid.
         *
         * @return bool
         */
        #[ReturnTypeWillChange]
        public function valid()
        {
            return $this->validateCurrentDate() === true;
        }

        /**
         * Return the current key.
         *
         * @return int|null
         */
        #[ReturnTypeWillChange]
        public function key()
        {
            return $this->valid()
                ? $this->key
                : null;
        }

        /**
         * Return the current date.
         *
         * @return CarbonInterface|null
         */
        #[ReturnTypeWillChange]
        public function current()
        {
            return $this->valid()
                ? $this->prepareForReturn($this->current)
                : null;
        }

        /**
         * Move forward to the next date.
         *
         * @throws RuntimeException
         *
         * @return void
         */
        #[ReturnTypeWillChange]
        public function next()
        {
            if ($this->current === null) {
                $this->rewind();
            }

            if ($this->validationResult !== static::END_ITERATION) {
                $this->key++;

                $this->incrementCurrentDateUntilValid();
            }
        }

        /**
         * Rewind to the start date.
         *
         * Iterating over a date in the UTC timezone avoids bug during backward DST change.
         *
         * @see https://bugs.php.net/bug.php?id=72255
         * @see https://bugs.php.net/bug.php?id=74274
         * @see https://wiki.php.net/rfc/datetime_and_daylight_saving_time
         *
         * @throws RuntimeException
         *
         * @return void
         */
        #[ReturnTypeWillChange]
        public function rewind()
        {
            $this->key = 0;
            $this->current = ([$this->dateClass, 'make'])($this->startDate);
            $settings = $this->getSettings();

            if ($this->hasLocalTranslator()) {
                $settings['locale'] = $this->getTranslatorLocale();
            }

            $this->current->settings($settings);
            $this->timezone = static::intervalHasTime($this->dateInterval) ? $this->current->getTimezone() : null;

            if ($this->timezone) {
                $this->current = $this->current->utc();
            }

            $this->validationResult = null;

            if ($this->isStartExcluded() || $this->validateCurrentDate() === false) {
                $this->incrementCurrentDateUntilValid();
            }
        }

        /**
         * Skip iterations and returns iteration state (false if ended, true if still valid).
         *
         * @param int $count steps number to skip (1 by default)
         *
         * @return bool
         */
        public function skip($count = 1)
        {
            for ($i = $count; $this->valid() && $i > 0; $i--) {
                $this->next();
            }

            return $this->valid();
        }

        /**
         * Format the date period as ISO 8601.
         *
         * @return string
         */
        public function toIso8601String()
        {
            $parts = [];

            if ($this->recurrences !== null) {
                $parts[] = 'R'.$this->recurrences;
            }

            $parts[] = $this->startDate->toIso8601String();

            $parts[] = $this->dateInterval->spec();

            if ($this->endDate !== null) {
                $parts[] = $this->endDate->toIso8601String();
            }

            return implode('/', $parts);
        }

        /**
         * Convert the date period into a string.
         *
         * @return string
         */
        public function toString()
        {
            $translator = ([$this->dateClass, 'getTranslator'])();

            $parts = [];

            $format = !$this->startDate->isStartOfDay() || $this->endDate && !$this->endDate->isStartOfDay()
                ? 'Y-m-d H:i:s'
                : 'Y-m-d';

            if ($this->recurrences !== null) {
                $parts[] = $this->translate('period_recurrences', [], $this->recurrences, $translator);
            }

            $parts[] = $this->translate('period_interval', [':interval' => $this->dateInterval->forHumans([
                'join' => true,
            ])], null, $translator);

            $parts[] = $this->translate('period_start_date', [':date' => $this->startDate->rawFormat($format)], null, $translator);

            if ($this->endDate !== null) {
                $parts[] = $this->translate('period_end_date', [':date' => $this->endDate->rawFormat($format)], null, $translator);
            }

            $result = implode(' ', $parts);

            return mb_strtoupper(mb_substr($result, 0, 1)).mb_substr($result, 1);
        }

        /**
         * Format the date period as ISO 8601.
         *
         * @return string
         */
        public function spec()
        {
            return $this->toIso8601String();
        }

        /**
         * Cast the current instance into the given class.
         *
         * @param string $className The $className::instance() method will be called to cast the current object.
         *
         * @return DatePeriod
         */
        public function cast(string $className)
        {
            if (!method_exists($className, 'instance')) {
                if (is_a($className, DatePeriod::class, true)) {
                    return new $className(
                        $this->getStartDate(),
                        $this->getDateInterval(),
                        $this->getEndDate() ? $this->getIncludedEndDate() : $this->getRecurrences(),
                        $this->isStartExcluded() ? DatePeriod::EXCLUDE_START_DATE : 0
                    );
                }

                throw new InvalidCastException("$className has not the instance() method needed to cast the date.");
            }

            return $className::instance($this);
        }

        /**
         * Return native DatePeriod PHP object matching the current instance.
         *
         * @example
         * ```
         * var_dump(CarbonPeriod::create('2021-01-05', '2021-02-15')->toDatePeriod());
         * ```
         *
         * @return DatePeriod
         */
        public function toDatePeriod()
        {
            return $this->cast(DatePeriod::class);
        }

        /**
         * Convert the date period into an array without changing current iteration state.
         *
         * @return CarbonInterface[]
         */
        public function toArray()
        {
            $state = [
                $this->key,
                $this->current ? $this->current->avoidMutation() : null,
                $this->validationResult,
            ];

            $result = iterator_to_array($this);

            [$this->key, $this->current, $this->validationResult] = $state;

            return $result;
        }

        /**
         * Count dates in the date period.
         *
         * @return int
         */
        #[ReturnTypeWillChange]
        public function count()
        {
            return \count($this->toArray());
        }

        /**
         * Return the first date in the date period.
         *
         * @return CarbonInterface|null
         */
        public function first()
        {
            return ($this->toArray() ?: [])[0] ?? null;
        }

        /**
         * Return the last date in the date period.
         *
         * @return CarbonInterface|null
         */
        public function last()
        {
            $array = $this->toArray();

            return $array ? $array[\count($array) - 1] : null;
        }

        /**
         * Convert the date period into a string.
         *
         * @return string
         */
        public function __toString()
        {
            return $this->toString();
        }

        /**
         * Add aliases for setters.
         *
         * CarbonPeriod::days(3)->hours(5)->invert()
         *     ->sinceNow()->until('2010-01-10')
         *     ->filter(...)
         *     ->count()
         *
         * Note: We use magic method to let static and instance aliases with the same names.
         *
         * @param string $method
         * @param array  $parameters
         *
         * @return mixed
         */
        public function __call($method, $parameters)
        {
            if (static::hasMacro($method)) {
                return static::bindMacroContext($this, function () use (&$method, &$parameters) {
                    return $this->callMacro($method, $parameters);
                });
            }

            $roundedValue = $this->callRoundMethod($method, $parameters);

            if ($roundedValue !== null) {
                return $roundedValue;
            }

            $first = \count($parameters) >= 1 ? $parameters[0] : null;
            $second = \count($parameters) >= 2 ? $parameters[1] : null;

            switch ($method) {
                case 'start':
                case 'since':
                    return $this->setStartDate($first, $second);

                case 'sinceNow':
                    return $this->setStartDate(new Carbon(), $first);

                case 'end':
                case 'until':
                    return $this->setEndDate($first, $second);

                case 'untilNow':
                    return $this->setEndDate(new Carbon(), $first);

                case 'dates':
                case 'between':
                    return $this->setDates($first, $second);

                case 'recurrences':
                case 'times':
                    return $this->setRecurrences($first);

                case 'options':
                    return $this->setOptions($first);

                case 'toggle':
                    return $this->toggleOptions($first, $second);

                case 'filter':
                case 'push':
                    return $this->addFilter($first, $second);

                case 'prepend':
                    return $this->prependFilter($first, $second);

                case 'filters':
                    return $this->setFilters($first ?: []);

                case 'interval':
                case 'each':
                case 'every':
                case 'step':
                case 'stepBy':
                    return $this->setDateInterval($first);

                case 'invert':
                    return $this->invertDateInterval();

                case 'years':
                case 'year':
                case 'months':
                case 'month':
                case 'weeks':
                case 'week':
                case 'days':
                case 'dayz':
                case 'day':
                case 'hours':
                case 'hour':
                case 'minutes':
                case 'minute':
                case 'seconds':
                case 'second':
                    return $this->setDateInterval((
                        // Override default P1D when instantiating via fluent setters.
                        [$this->isDefaultInterval ? new CarbonInterval('PT0S') : $this->dateInterval, $method]
                    )(
                        \count($parameters) === 0 ? 1 : $first
                    ));
            }

            if ($this->localStrictModeEnabled ?? Carbon::isStrictModeEnabled()) {
                throw new UnknownMethodException($method);
            }

            return $this;
        }

        /**
         * Set the instance's timezone from a string or object and apply it to start/end.
         *
         * @param \DateTimeZone|string $timezone
         *
         * @return static
         */
        public function setTimezone($timezone)
        {
            $this->tzName = $timezone;
            $this->timezone = $timezone;

            if ($this->startDate) {
                $this->setStartDate($this->startDate->setTimezone($timezone));
            }

            if ($this->endDate) {
                $this->setEndDate($this->endDate->setTimezone($timezone));
            }

            return $this;
        }

        /**
         * Set the instance's timezone from a string or object and add/subtract the offset difference to start/end.
         *
         * @param \DateTimeZone|string $timezone
         *
         * @return static
         */
        public function shiftTimezone($timezone)
        {
            $this->tzName = $timezone;
            $this->timezone = $timezone;

            if ($this->startDate) {
                $this->setStartDate($this->startDate->shiftTimezone($timezone));
            }

            if ($this->endDate) {
                $this->setEndDate($this->endDate->shiftTimezone($timezone));
            }

            return $this;
        }

        /**
         * Returns the end is set, else calculated from start an recurrences.
         *
         * @param string|null $rounding Optional rounding 'floor', 'ceil', 'round' using the period interval.
         *
         * @return CarbonInterface
         */
        public function calculateEnd(string $rounding = null)
        {
            if ($end = $this->getEndDate($rounding)) {
                return $end;
            }

            if ($this->dateInterval->isEmpty()) {
                return $this->getStartDate($rounding);
            }

            $date = $this->getEndFromRecurrences() ?? $this->iterateUntilEnd();

            if ($date && $rounding) {
                $date = $date->avoidMutation()->round($this->getDateInterval(), $rounding);
            }

            return $date;
        }

        /**
         * @return CarbonInterface|null
         */
        private function getEndFromRecurrences()
        {
            if ($this->recurrences === null) {
                throw new UnreachableException(
                    "Could not calculate period end without either explicit end or recurrences.\n".
                    "If you're looking for a forever-period, use ->setRecurrences(INF)."
                );
            }

            if ($this->recurrences === INF) {
                $start = $this->getStartDate();

                return $start < $start->avoidMutation()->add($this->getDateInterval())
                    ? CarbonImmutable::endOfTime()
                    : CarbonImmutable::startOfTime();
            }

            if ($this->filters === [[static::RECURRENCES_FILTER, null]]) {
                return $this->getStartDate()->avoidMutation()->add(
                    $this->getDateInterval()->times(
                        $this->recurrences - ($this->isStartExcluded() ? 0 : 1)
                    )
                );
            }

            return null;
        }

        /**
         * @return CarbonInterface|null
         */
        private function iterateUntilEnd()
        {
            $attempts = 0;
            $date = null;

            foreach ($this as $date) {
                if (++$attempts > static::END_MAX_ATTEMPTS) {
                    throw new UnreachableException(
                        'Could not calculate period end after iterating '.static::END_MAX_ATTEMPTS.' times.'
                    );
                }
            }

            return $date;
        }

        /**
         * Returns true if the current period overlaps the given one (if 1 parameter passed)
         * or the period between 2 dates (if 2 parameters passed).
         *
         * @param CarbonPeriod|\DateTimeInterface|Carbon|CarbonImmutable|string $rangeOrRangeStart
         * @param \DateTimeInterface|Carbon|CarbonImmutable|string|null         $rangeEnd
         *
         * @return bool
         */
        public function overlaps($rangeOrRangeStart, $rangeEnd = null)
        {
            $range = $rangeEnd ? static::create($rangeOrRangeStart, $rangeEnd) : $rangeOrRangeStart;

            if (!($range instanceof self)) {
                $range = static::create($range);
            }

            [$start, $end] = $this->orderCouple($this->getStartDate(), $this->calculateEnd());
            [$rangeStart, $rangeEnd] = $this->orderCouple($range->getStartDate(), $range->calculateEnd());

            return $end > $rangeStart && $rangeEnd > $start;
        }

        /**
         * Execute a given function on each date of the period.
         *
         * @example
         * ```
         * Carbon::create('2020-11-29')->daysUntil('2020-12-24')->forEach(function (Carbon $date) {
         *   echo $date->diffInDays('2020-12-25')." days before Christmas!\n";
         * });
         * ```
         *
         * @param callable $callback
         */
        public function forEach(callable $callback)
        {
            foreach ($this as $date) {
                $callback($date);
            }
        }

        /**
         * Execute a given function on each date of the period and yield the result of this function.
         *
         * @example
         * ```
         * $period = Carbon::create('2020-11-29')->daysUntil('2020-12-24');
         * echo implode("\n", iterator_to_array($period->map(function (Carbon $date) {
         *   return $date->diffInDays('2020-12-25').' days before Christmas!';
         * })));
         * ```
         *
         * @param callable $callback
         *
         * @return \Generator
         */
        public function map(callable $callback)
        {
            foreach ($this as $date) {
                yield $callback($date);
            }
        }

        /**
         * Determines if the instance is equal to another.
         * Warning: if options differ, instances wil never be equal.
         *
         * @param mixed $period
         *
         * @see equalTo()
         *
         * @return bool
         */
        public function eq($period): bool
        {
            return $this->equalTo($period);
        }

        /**
         * Determines if the instance is equal to another.
         * Warning: if options differ, instances wil never be equal.
         *
         * @param mixed $period
         *
         * @return bool
         */
        public function equalTo($period): bool
        {
            if (!($period instanceof self)) {
                $period = self::make($period);
            }

            $end = $this->getEndDate();

            return $period !== null
                && $this->getDateInterval()->eq($period->getDateInterval())
                && $this->getStartDate()->eq($period->getStartDate())
                && ($end ? $end->eq($period->getEndDate()) : $this->getRecurrences() === $period->getRecurrences())
                && ($this->getOptions() & (~static::IMMUTABLE)) === ($period->getOptions() & (~static::IMMUTABLE));
        }

        /**
         * Determines if the instance is not equal to another.
         * Warning: if options differ, instances wil never be equal.
         *
         * @param mixed $period
         *
         * @see notEqualTo()
         *
         * @return bool
         */
        public function ne($period): bool
        {
            return $this->notEqualTo($period);
        }

        /**
         * Determines if the instance is not equal to another.
         * Warning: if options differ, instances wil never be equal.
         *
         * @param mixed $period
         *
         * @return bool
         */
        public function notEqualTo($period): bool
        {
            return !$this->eq($period);
        }

        /**
         * Determines if the start date is before an other given date.
         * (Rather start/end are included by options is ignored.)
         *
         * @param mixed $date
         *
         * @return bool
         */
        public function startsBefore($date = null): bool
        {
            return $this->getStartDate()->lessThan($this->resolveCarbon($date));
        }

        /**
         * Determines if the start date is before or the same as a given date.
         * (Rather start/end are included by options is ignored.)
         *
         * @param mixed $date
         *
         * @return bool
         */
        public function startsBeforeOrAt($date = null): bool
        {
            return $this->getStartDate()->lessThanOrEqualTo($this->resolveCarbon($date));
        }

        /**
         * Determines if the start date is after an other given date.
         * (Rather start/end are included by options is ignored.)
         *
         * @param mixed $date
         *
         * @return bool
         */
        public function startsAfter($date = null): bool
        {
            return $this->getStartDate()->greaterThan($this->resolveCarbon($date));
        }

        /**
         * Determines if the start date is after or the same as a given date.
         * (Rather start/end are included by options is ignored.)
         *
         * @param mixed $date
         *
         * @return bool
         */
        public function startsAfterOrAt($date = null): bool
        {
            return $this->getStartDate()->greaterThanOrEqualTo($this->resolveCarbon($date));
        }

        /**
         * Determines if the start date is the same as a given date.
         * (Rather start/end are included by options is ignored.)
         *
         * @param mixed $date
         *
         * @return bool
         */
        public function startsAt($date = null): bool
        {
            return $this->getStartDate()->equalTo($this->resolveCarbon($date));
        }

        /**
         * Determines if the end date is before an other given date.
         * (Rather start/end are included by options is ignored.)
         *
         * @param mixed $date
         *
         * @return bool
         */
        public function endsBefore($date = null): bool
        {
            return $this->calculateEnd()->lessThan($this->resolveCarbon($date));
        }

        /**
         * Determines if the end date is before or the same as a given date.
         * (Rather start/end are included by options is ignored.)
         *
         * @param mixed $date
         *
         * @return bool
         */
        public function endsBeforeOrAt($date = null): bool
        {
            return $this->calculateEnd()->lessThanOrEqualTo($this->resolveCarbon($date));
        }

        /**
         * Determines if the end date is after an other given date.
         * (Rather start/end are included by options is ignored.)
         *
         * @param mixed $date
         *
         * @return bool
         */
        public function endsAfter($date = null): bool
        {
            return $this->calculateEnd()->greaterThan($this->resolveCarbon($date));
        }

        /**
         * Determines if the end date is after or the same as a given date.
         * (Rather start/end are included by options is ignored.)
         *
         * @param mixed $date
         *
         * @return bool
         */
        public function endsAfterOrAt($date = null): bool
        {
            return $this->calculateEnd()->greaterThanOrEqualTo($this->resolveCarbon($date));
        }

        /**
         * Determines if the end date is the same as a given date.
         * (Rather start/end are included by options is ignored.)
         *
         * @param mixed $date
         *
         * @return bool
         */
        public function endsAt($date = null): bool
        {
            return $this->calculateEnd()->equalTo($this->resolveCarbon($date));
        }

        /**
         * Return true if start date is now or later.
         * (Rather start/end are included by options is ignored.)
         *
         * @return bool
         */
        public function isStarted(): bool
        {
            return $this->startsBeforeOrAt();
        }

        /**
         * Return true if end date is now or later.
         * (Rather start/end are included by options is ignored.)
         *
         * @return bool
         */
        public function isEnded(): bool
        {
            return $this->endsBeforeOrAt();
        }

        /**
         * Return true if now is between start date (included) and end date (excluded).
         * (Rather start/end are included by options is ignored.)
         *
         * @return bool
         */
        public function isInProgress(): bool
        {
            return $this->isStarted() && !$this->isEnded();
        }

        /**
         * Round the current instance at the given unit with given precision if specified and the given function.
         *
         * @param string                              $unit
         * @param float|int|string|\DateInterval|null $precision
         * @param string                              $function
         *
         * @return $this
         */
        public function roundUnit($unit, $precision = 1, $function = 'round')
        {
            $this->setStartDate($this->getStartDate()->roundUnit($unit, $precision, $function));

            if ($this->endDate) {
                $this->setEndDate($this->getEndDate()->roundUnit($unit, $precision, $function));
            }

            $this->setDateInterval($this->getDateInterval()->roundUnit($unit, $precision, $function));

            return $this;
        }

        /**
         * Truncate the current instance at the given unit with given precision if specified.
         *
         * @param string                              $unit
         * @param float|int|string|\DateInterval|null $precision
         *
         * @return $this
         */
        public function floorUnit($unit, $precision = 1)
        {
            return $this->roundUnit($unit, $precision, 'floor');
        }

        /**
         * Ceil the current instance at the given unit with given precision if specified.
         *
         * @param string                              $unit
         * @param float|int|string|\DateInterval|null $precision
         *
         * @return $this
         */
        public function ceilUnit($unit, $precision = 1)
        {
            return $this->roundUnit($unit, $precision, 'ceil');
        }

        /**
         * Round the current instance second with given precision if specified (else period interval is used).
         *
         * @param float|int|string|\DateInterval|null $precision
         * @param string                              $function
         *
         * @return $this
         */
        public function round($precision = null, $function = 'round')
        {
            return $this->roundWith($precision ?? (string) $this->getDateInterval(), $function);
        }

        /**
         * Round the current instance second with given precision if specified (else period interval is used).
         *
         * @param float|int|string|\DateInterval|null $precision
         *
         * @return $this
         */
        public function floor($precision = null)
        {
            return $this->round($precision, 'floor');
        }

        /**
         * Ceil the current instance second with given precision if specified (else period interval is used).
         *
         * @param float|int|string|\DateInterval|null $precision
         *
         * @return $this
         */
        public function ceil($precision = null)
        {
            return $this->round($precision, 'ceil');
        }

        /**
         * Specify data which should be serialized to JSON.
         *
         * @link https://php.net/manual/en/jsonserializable.jsonserialize.php
         *
         * @return CarbonInterface[]
         */
        #[ReturnTypeWillChange]
        public function jsonSerialize()
        {
            return $this->toArray();
        }

        /**
         * Return true if the given date is between start and end.
         *
         * @param \Carbon\Carbon|\Carbon\CarbonPeriod|\Carbon\CarbonInterval|\DateInterval|\DatePeriod|\DateTimeInterface|string|null $date
         *
         * @return bool
         */
        public function contains($date = null): bool
        {
            $startMethod = 'startsBefore'.($this->isStartIncluded() ? 'OrAt' : '');
            $endMethod = 'endsAfter'.($this->isEndIncluded() ? 'OrAt' : '');

            return $this->$startMethod($date) && $this->$endMethod($date);
        }

        /**
         * Return true if the current period follows a given other period (with no overlap).
         * For instance, [2019-08-01 -> 2019-08-12] follows [2019-07-29 -> 2019-07-31]
         * Note than in this example, follows() would be false if 2019-08-01 or 2019-07-31 was excluded by options.
         *
         * @param \Carbon\CarbonPeriod|\DatePeriod|string $period
         *
         * @return bool
         */
        public function follows($period, ...$arguments): bool
        {
            $period = $this->resolveCarbonPeriod($period, ...$arguments);

            return $this->getIncludedStartDate()->equalTo($period->getIncludedEndDate()->add($period->getDateInterval()));
        }

        /**
         * Return true if the given other period follows the current one (with no overlap).
         * For instance, [2019-07-29 -> 2019-07-31] is followed by [2019-08-01 -> 2019-08-12]
         * Note than in this example, isFollowedBy() would be false if 2019-08-01 or 2019-07-31 was excluded by options.
         *
         * @param \Carbon\CarbonPeriod|\DatePeriod|string $period
         *
         * @return bool
         */
        public function isFollowedBy($period, ...$arguments): bool
        {
            $period = $this->resolveCarbonPeriod($period, ...$arguments);

            return $period->follows($this);
        }

        /**
         * Return true if the given period either follows or is followed by the current one.
         *
         * @see follows()
         * @see isFollowedBy()
         *
         * @param \Carbon\CarbonPeriod|\DatePeriod|string $period
         *
         * @return bool
         */
        public function isConsecutiveWith($period, ...$arguments): bool
        {
            return $this->follows($period, ...$arguments) || $this->isFollowedBy($period, ...$arguments);
        }

        /**
         * Update properties after removing built-in filters.
         *
         * @return void
         */
        protected function updateInternalState()
        {
            if (!$this->hasFilter(static::END_DATE_FILTER)) {
                $this->endDate = null;
            }

            if (!$this->hasFilter(static::RECURRENCES_FILTER)) {
                $this->recurrences = null;
            }
        }

        /**
         * Create a filter tuple from raw parameters.
         *
         * Will create an automatic filter callback for one of Carbon's is* methods.
         *
         * @param array $parameters
         *
         * @return array
         */
        protected function createFilterTuple(array $parameters)
        {
            $method = array_shift($parameters);

            if (!$this->isCarbonPredicateMethod($method)) {
                return [$method, array_shift($parameters)];
            }

            return [function ($date) use ($method, $parameters) {
                return ([$date, $method])(...$parameters);
            }, $method];
        }

        /**
         * Return whether given callable is a string pointing to one of Carbon's is* methods
         * and should be automatically converted to a filter callback.
         *
         * @param callable $callable
         *
         * @return bool
         */
        protected function isCarbonPredicateMethod($callable)
        {
            return \is_string($callable) && str_starts_with($callable, 'is') &&
                (method_exists($this->dateClass, $callable) || ([$this->dateClass, 'hasMacro'])($callable));
        }

        /**
         * Recurrences filter callback (limits number of recurrences).
         *
         * @SuppressWarnings(PHPMD.UnusedFormalParameter)
         *
         * @param \Carbon\Carbon $current
         * @param int            $key
         *
         * @return bool|string
         */
        protected function filterRecurrences($current, $key)
        {
            if ($key < $this->recurrences) {
                return true;
            }

            return static::END_ITERATION;
        }

        /**
         * End date filter callback.
         *
         * @param \Carbon\Carbon $current
         *
         * @return bool|string
         */
        protected function filterEndDate($current)
        {
            if (!$this->isEndExcluded() && $current == $this->endDate) {
                return true;
            }

            if ($this->dateInterval->invert ? $current > $this->endDate : $current < $this->endDate) {
                return true;
            }

            return static::END_ITERATION;
        }

        /**
         * End iteration filter callback.
         *
         * @return string
         */
        protected function endIteration()
        {
            return static::END_ITERATION;
        }

        /**
         * Handle change of the parameters.
         */
        protected function handleChangedParameters()
        {
            if (($this->getOptions() & static::IMMUTABLE) && $this->dateClass === Carbon::class) {
                $this->setDateClass(CarbonImmutable::class);
            } elseif (!($this->getOptions() & static::IMMUTABLE) && $this->dateClass === CarbonImmutable::class) {
                $this->setDateClass(Carbon::class);
            }

            $this->validationResult = null;
        }

        /**
         * Validate current date and stop iteration when necessary.
         *
         * Returns true when current date is valid, false if it is not, or static::END_ITERATION
         * when iteration should be stopped.
         *
         * @return bool|string
         */
        protected function validateCurrentDate()
        {
            if ($this->current === null) {
                $this->rewind();
            }

            // Check after the first rewind to avoid repeating the initial validation.
            return $this->validationResult ?? ($this->validationResult = $this->checkFilters());
        }

        /**
         * Check whether current value and key pass all the filters.
         *
         * @return bool|string
         */
        protected function checkFilters()
        {
            $current = $this->prepareForReturn($this->current);

            foreach ($this->filters as $tuple) {
                $result = \call_user_func(
                    $tuple[0],
                    $current->avoidMutation(),
                    $this->key,
                    $this
                );

                if ($result === static::END_ITERATION) {
                    return static::END_ITERATION;
                }

                if (!$result) {
                    return false;
                }
            }

            return true;
        }

        /**
         * Prepare given date to be returned to the external logic.
         *
         * @param CarbonInterface $date
         *
         * @return CarbonInterface
         */
        protected function prepareForReturn(CarbonInterface $date)
        {
            $date = ([$this->dateClass, 'make'])($date);

            if ($this->timezone) {
                $date = $date->setTimezone($this->timezone);
            }

            return $date;
        }

        /**
         * Keep incrementing the current date until a valid date is found or the iteration is ended.
         *
         * @throws RuntimeException
         *
         * @return void
         */
        protected function incrementCurrentDateUntilValid()
        {
            $attempts = 0;

            do {
                $this->current = $this->current->add($this->dateInterval);

                $this->validationResult = null;

                if (++$attempts > static::NEXT_MAX_ATTEMPTS) {
                    throw new UnreachableException('Could not find next valid date.');
                }
            } while ($this->validateCurrentDate() === false);
        }

        /**
         * Call given macro.
         *
         * @param string $name
         * @param array  $parameters
         *
         * @return mixed
         */
        protected function callMacro($name, $parameters)
        {
            $macro = static::$macros[$name];

            if ($macro instanceof Closure) {
                $boundMacro = @$macro->bindTo($this, static::class) ?: @$macro->bindTo(null, static::class);

                return ($boundMacro ?: $macro)(...$parameters);
            }

            return $macro(...$parameters);
        }

        /**
         * Return the Carbon instance passed through, a now instance in the same timezone
         * if null given or parse the input if string given.
         *
         * @param \Carbon\Carbon|\Carbon\CarbonPeriod|\Carbon\CarbonInterval|\DateInterval|\DatePeriod|\DateTimeInterface|string|null $date
         *
         * @return \Carbon\CarbonInterface
         */
        protected function resolveCarbon($date = null)
        {
            return $this->getStartDate()->nowWithSameTz()->carbonize($date);
        }

        /**
         * Resolve passed arguments or DatePeriod to a CarbonPeriod object.
         *
         * @param mixed $period
         * @param mixed ...$arguments
         *
         * @return static
         */
        protected function resolveCarbonPeriod($period, ...$arguments)
        {
            if ($period instanceof self) {
                return $period;
            }

            return $period instanceof DatePeriod
                ? static::instance($period)
                : static::create($period, ...$arguments);
        }

        private function orderCouple($first, $second): array
        {
            return $first > $second ? [$second, $first] : [$first, $second];
        }

        private function makeDateTime($value): ?DateTimeInterface
        {
            if ($value instanceof DateTimeInterface) {
                return $value;
            }

            if (\is_string($value)) {
                $value = trim($value);

                if (!preg_match('/^P[0-9T]/', $value) &&
                    !preg_match('/^R[0-9]/', $value) &&
                    preg_match('/[a-z0-9]/i', $value)
                ) {
                    return Carbon::parse($value, $this->tzName);
                }
            }

            return null;
        }
    }
  uploads-Carbon-src-Carbon-CarbonTimeZone.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon;

    use Carbon\Exceptions\InvalidCastException;
    use Carbon\Exceptions\InvalidTimeZoneException;
    use DateTimeInterface;
    use DateTimeZone;
    use Throwable;

    class CarbonTimeZone extends DateTimeZone
    {
        public function __construct($timezone = null)
        {
            parent::__construct(static::getDateTimeZoneNameFromMixed($timezone));
        }

        protected static function parseNumericTimezone($timezone)
        {
            if ($timezone <= -100 || $timezone >= 100) {
                throw new InvalidTimeZoneException('Absolute timezone offset cannot be greater than 100.');
            }

            return ($timezone >= 0 ? '+' : '').$timezone.':00';
        }

        protected static function getDateTimeZoneNameFromMixed($timezone)
        {
            if ($timezone === null) {
                return date_default_timezone_get();
            }

            if (\is_string($timezone)) {
                $timezone = preg_replace('/^\s*([+-]\d+)(\d{2})\s*$/', '$1:$2', $timezone);
            }

            if (is_numeric($timezone)) {
                return static::parseNumericTimezone($timezone);
            }

            return $timezone;
        }

        protected static function getDateTimeZoneFromName(&$name)
        {
            return @timezone_open($name = (string) static::getDateTimeZoneNameFromMixed($name));
        }

        /**
         * Cast the current instance into the given class.
         *
         * @param string $className The $className::instance() method will be called to cast the current object.
         *
         * @return DateTimeZone
         */
        public function cast(string $className)
        {
            if (!method_exists($className, 'instance')) {
                if (is_a($className, DateTimeZone::class, true)) {
                    return new $className($this->getName());
                }

                throw new InvalidCastException("$className has not the instance() method needed to cast the date.");
            }

            return $className::instance($this);
        }

        /**
         * Create a CarbonTimeZone from mixed input.
         *
         * @param DateTimeZone|string|int|null $object     original value to get CarbonTimeZone from it.
         * @param DateTimeZone|string|int|null $objectDump dump of the object for error messages.
         *
         * @throws InvalidTimeZoneException
         *
         * @return false|static
         */
        public static function instance($object = null, $objectDump = null)
        {
            $tz = $object;

            if ($tz instanceof static) {
                return $tz;
            }

            if ($tz === null) {
                return new static();
            }

            if (!$tz instanceof DateTimeZone) {
                $tz = static::getDateTimeZoneFromName($object);
            }

            if ($tz === false) {
                if (Carbon::isStrictModeEnabled()) {
                    throw new InvalidTimeZoneException('Unknown or bad timezone ('.($objectDump ?: $object).')');
                }

                return false;
            }

            return new static($tz->getName());
        }

        /**
         * Returns abbreviated name of the current timezone according to DST setting.
         *
         * @param bool $dst
         *
         * @return string
         */
        public function getAbbreviatedName($dst = false)
        {
            $name = $this->getName();

            foreach ($this->listAbbreviations() as $abbreviation => $zones) {
                foreach ($zones as $zone) {
                    if ($zone['timezone_id'] === $name && $zone['dst'] == $dst) {
                        return $abbreviation;
                    }
                }
            }

            return 'unknown';
        }

        /**
         * @alias getAbbreviatedName
         *
         * Returns abbreviated name of the current timezone according to DST setting.
         *
         * @param bool $dst
         *
         * @return string
         */
        public function getAbbr($dst = false)
        {
            return $this->getAbbreviatedName($dst);
        }

        /**
         * Get the offset as string "sHH:MM" (such as "+00:00" or "-12:30").
         *
         * @param DateTimeInterface|null $date
         *
         * @return string
         */
        public function toOffsetName(DateTimeInterface $date = null)
        {
            return static::getOffsetNameFromMinuteOffset(
                $this->getOffset($date ?: Carbon::now($this)) / 60
            );
        }

        /**
         * Returns a new CarbonTimeZone object using the offset string instead of region string.
         *
         * @param DateTimeInterface|null $date
         *
         * @return CarbonTimeZone
         */
        public function toOffsetTimeZone(DateTimeInterface $date = null)
        {
            return new static($this->toOffsetName($date));
        }

        /**
         * Returns the first region string (such as "America/Toronto") that matches the current timezone or
         * false if no match is found.
         *
         * @see timezone_name_from_abbr native PHP function.
         *
         * @param DateTimeInterface|null $date
         * @param int                    $isDst
         *
         * @return string|false
         */
        public function toRegionName(DateTimeInterface $date = null, $isDst = 1)
        {
            $name = $this->getName();
            $firstChar = substr($name, 0, 1);

            if ($firstChar !== '+' && $firstChar !== '-') {
                return $name;
            }

            $date = $date ?: Carbon::now($this);

            // Integer construction no longer supported since PHP 8
            // @codeCoverageIgnoreStart
            try {
                $offset = @$this->getOffset($date) ?: 0;
            } catch (Throwable $e) {
                $offset = 0;
            }
            // @codeCoverageIgnoreEnd

            $name = @timezone_name_from_abbr('', $offset, $isDst);

            if ($name) {
                return $name;
            }

            foreach (timezone_identifiers_list() as $timezone) {
                if (Carbon::instance($date)->tz($timezone)->getOffset() === $offset) {
                    return $timezone;
                }
            }

            return false;
        }

        /**
         * Returns a new CarbonTimeZone object using the region string instead of offset string.
         *
         * @param DateTimeInterface|null $date
         *
         * @return CarbonTimeZone|false
         */
        public function toRegionTimeZone(DateTimeInterface $date = null)
        {
            $tz = $this->toRegionName($date);

            if ($tz === false) {
                if (Carbon::isStrictModeEnabled()) {
                    throw new InvalidTimeZoneException('Unknown timezone for offset '.$this->getOffset($date ?: Carbon::now($this)).' seconds.');
                }

                return false;
            }

            return new static($tz);
        }

        /**
         * Cast to string (get timezone name).
         *
         * @return string
         */
        public function __toString()
        {
            return $this->getName();
        }

        /**
         * Create a CarbonTimeZone from mixed input.
         *
         * @param DateTimeZone|string|int|null $object
         *
         * @return false|static
         */
        public static function create($object = null)
        {
            return static::instance($object);
        }

        /**
         * Create a CarbonTimeZone from int/float hour offset.
         *
         * @param float $hourOffset number of hour of the timezone shift (can be decimal).
         *
         * @return false|static
         */
        public static function createFromHourOffset(float $hourOffset)
        {
            return static::createFromMinuteOffset($hourOffset * Carbon::MINUTES_PER_HOUR);
        }

        /**
         * Create a CarbonTimeZone from int/float minute offset.
         *
         * @param float $minuteOffset number of total minutes of the timezone shift.
         *
         * @return false|static
         */
        public static function createFromMinuteOffset(float $minuteOffset)
        {
            return static::instance(static::getOffsetNameFromMinuteOffset($minuteOffset));
        }

        /**
         * Convert a total minutes offset into a standardized timezone offset string.
         *
         * @param float $minutes number of total minutes of the timezone shift.
         *
         * @return string
         */
        public static function getOffsetNameFromMinuteOffset(float $minutes): string
        {
            $minutes = round($minutes);
            $unsignedMinutes = abs($minutes);

            return ($minutes < 0 ? '-' : '+').
                str_pad((string) floor($unsignedMinutes / 60), 2, '0', STR_PAD_LEFT).
                ':'.
                str_pad((string) ($unsignedMinutes % 60), 2, '0', STR_PAD_LEFT);
        }
    }
  uploads-Carbon-src-Carbon-Cli-Invoker.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Cli;

    class Invoker
    {
        public const CLI_CLASS_NAME = 'Carbon\\Cli';

        protected function runWithCli(string $className, array $parameters): bool
        {
            $cli = new $className();

            return $cli(...$parameters);
        }

        public function __invoke(...$parameters): bool
        {
            if (class_exists(self::CLI_CLASS_NAME)) {
                return $this->runWithCli(self::CLI_CLASS_NAME, $parameters);
            }

            $function = (($parameters[1] ?? '') === 'install' ? ($parameters[2] ?? null) : null) ?: 'shell_exec';
            $function('composer require carbon-cli/carbon-cli --no-interaction');

            echo 'Installation succeeded.';

            return true;
        }
    }
  uploads-Carbon-src-Carbon-Doctrine-CarbonDoctrineType.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Doctrine;

    use Doctrine\DBAL\Platforms\AbstractPlatform;

    interface CarbonDoctrineType
    {
        public function getSQLDeclaration(array $fieldDeclaration, AbstractPlatform $platform);

        public function convertToPHPValue($value, AbstractPlatform $platform);

        public function convertToDatabaseValue($value, AbstractPlatform $platform);
    }
  uploads-Carbon-src-Carbon-Doctrine-CarbonImmutableType.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Doctrine;

    use Doctrine\DBAL\Platforms\AbstractPlatform;

    class CarbonImmutableType extends DateTimeImmutableType implements CarbonDoctrineType
    {
        /**
         * {@inheritdoc}
         *
         * @return string
         */
        public function getName()
        {
            return 'carbon_immutable';
        }

        /**
         * {@inheritdoc}
         *
         * @return bool
         */
        public function requiresSQLCommentHint(AbstractPlatform $platform)
        {
            return true;
        }
    }
  uploads-Carbon-src-Carbon-Doctrine-CarbonType.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Doctrine;

    use Doctrine\DBAL\Platforms\AbstractPlatform;

    class CarbonType extends DateTimeType implements CarbonDoctrineType
    {
        /**
         * {@inheritdoc}
         *
         * @return string
         */
        public function getName()
        {
            return 'carbon';
        }

        /**
         * {@inheritdoc}
         *
         * @return bool
         */
        public function requiresSQLCommentHint(AbstractPlatform $platform)
        {
            return true;
        }
    }
  uploads-Carbon-src-Carbon-Doctrine-CarbonTypeConverter.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Doctrine;

    use Carbon\Carbon;
    use Carbon\CarbonInterface;
    use DateTimeInterface;
    use Doctrine\DBAL\Platforms\AbstractPlatform;
    use Doctrine\DBAL\Types\ConversionException;
    use Exception;

    /**
     * @template T of CarbonInterface
     */
    trait CarbonTypeConverter
    {
        /**
         * @return class-string<T>
         */
        protected function getCarbonClassName(): string
        {
            return Carbon::class;
        }

        /**
         * @return string
         */
        public function getSQLDeclaration(array $fieldDeclaration, AbstractPlatform $platform)
        {
            $precision = ($fieldDeclaration['precision'] ?: 10) === 10
                ? DateTimeDefaultPrecision::get()
                : $fieldDeclaration['precision'];
            $type = parent::getSQLDeclaration($fieldDeclaration, $platform);

            if (!$precision) {
                return $type;
            }

            if (str_contains($type, '(')) {
                return preg_replace('/\(\d+\)/', "($precision)", $type);
            }

            [$before, $after] = explode(' ', "$type ");

            return trim("$before($precision) $after");
        }

        /**
         * @SuppressWarnings(PHPMD.UnusedFormalParameter)
         *
         * @return T|null
         */
        public function convertToPHPValue($value, AbstractPlatform $platform)
        {
            $class = $this->getCarbonClassName();

            if ($value === null || is_a($value, $class)) {
                return $value;
            }

            if ($value instanceof DateTimeInterface) {
                return $class::instance($value);
            }

            $date = null;
            $error = null;

            try {
                $date = $class::parse($value);
            } catch (Exception $exception) {
                $error = $exception;
            }

            if (!$date) {
                throw ConversionException::conversionFailedFormat(
                    $value,
                    $this->getName(),
                    'Y-m-d H:i:s.u or any format supported by '.$class.'::parse()',
                    $error
                );
            }

            return $date;
        }

        /**
         * @SuppressWarnings(PHPMD.UnusedFormalParameter)
         *
         * @return string|null
         */
        public function convertToDatabaseValue($value, AbstractPlatform $platform)
        {
            if ($value === null) {
                return $value;
            }

            if ($value instanceof DateTimeInterface) {
                return $value->format('Y-m-d H:i:s.u');
            }

            throw ConversionException::conversionFailedInvalidType(
                $value,
                $this->getName(),
                ['null', 'DateTime', 'Carbon']
            );
        }
    }
  uploads-Carbon-src-Carbon-Doctrine-DateTimeDefaultPrecision.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Doctrine;

    class DateTimeDefaultPrecision
    {
        private static $precision = 6;

        /**
         * Change the default Doctrine datetime and datetime_immutable precision.
         *
         * @param int $precision
         */
        public static function set(int $precision): void
        {
            self::$precision = $precision;
        }

        /**
         * Get the default Doctrine datetime and datetime_immutable precision.
         *
         * @return int
         */
        public static function get(): int
        {
            return self::$precision;
        }
    }
  uploads-Carbon-src-Carbon-Doctrine-DateTimeImmutableType.php: |
    <?php

    /**
     * Thanks to https://github.com/flaushi for his suggestion:
     * https://github.com/doctrine/dbal/issues/2873#issuecomment-534956358
     */
    namespace Carbon\Doctrine;

    use Carbon\CarbonImmutable;
    use Doctrine\DBAL\Types\VarDateTimeImmutableType;

    class DateTimeImmutableType extends VarDateTimeImmutableType implements CarbonDoctrineType
    {
        /** @use CarbonTypeConverter<CarbonImmutable> */
        use CarbonTypeConverter;

        /**
         * @return class-string<CarbonImmutable>
         */
        protected function getCarbonClassName(): string
        {
            return CarbonImmutable::class;
        }
    }
  uploads-Carbon-src-Carbon-Doctrine-DateTimeType.php: |
    <?php

    /**
     * Thanks to https://github.com/flaushi for his suggestion:
     * https://github.com/doctrine/dbal/issues/2873#issuecomment-534956358
     */
    namespace Carbon\Doctrine;

    use Carbon\Carbon;
    use Doctrine\DBAL\Types\VarDateTimeType;

    class DateTimeType extends VarDateTimeType implements CarbonDoctrineType
    {
        /** @use CarbonTypeConverter<Carbon> */
        use CarbonTypeConverter;
    }
  uploads-Carbon-src-Carbon-Exceptions-BadFluentSetterException.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Exceptions;

    use BadMethodCallException as BaseBadMethodCallException;
    use Exception;

    class BadFluentSetterException extends BaseBadMethodCallException implements BadMethodCallException
    {
        /**
         * Constructor.
         *
         * @param string         $method
         * @param int            $code
         * @param Exception|null $previous
         */
        public function __construct($method, $code = 0, Exception $previous = null)
        {
            parent::__construct(sprintf("Unknown fluent setter '%s'", $method), $code, $previous);
        }
    }
  uploads-Carbon-src-Carbon-Exceptions-BadMethodCallException.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Exceptions;

    interface BadMethodCallException extends Exception
    {
    }
  uploads-Carbon-src-Carbon-Exceptions-Exception.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Exceptions;

    interface Exception
    {
    }
  uploads-Carbon-src-Carbon-Exceptions-ImmutableException.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Exceptions;

    use Exception;
    use RuntimeException as BaseRuntimeException;

    class ImmutableException extends BaseRuntimeException implements RuntimeException
    {
        /**
         * Constructor.
         *
         * @param string         $value    the immutable type/value
         * @param int            $code
         * @param Exception|null $previous
         */
        public function __construct($value, $code = 0, Exception $previous = null)
        {
            parent::__construct("$value is immutable.", $code, $previous);
        }
    }
  uploads-Carbon-src-Carbon-Exceptions-InvalidCastException.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Exceptions;

    use Exception;
    use InvalidArgumentException as BaseInvalidArgumentException;

    class InvalidCastException extends BaseInvalidArgumentException implements InvalidArgumentException
    {
        /**
         * Constructor.
         *
         * @param string         $message
         * @param int            $code
         * @param Exception|null $previous
         */
        public function __construct($message, $code = 0, Exception $previous = null)
        {
            parent::__construct($message, $code, $previous);
        }
    }
  uploads-Carbon-src-Carbon-Exceptions-InvalidPeriodDateException.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Exceptions;

    use Exception;
    use InvalidArgumentException as BaseInvalidArgumentException;

    class InvalidPeriodDateException extends BaseInvalidArgumentException implements InvalidArgumentException
    {
        /**
         * Constructor.
         *
         * @param string         $message
         * @param int            $code
         * @param Exception|null $previous
         */
        public function __construct($message, $code = 0, Exception $previous = null)
        {
            parent::__construct($message, $code, $previous);
        }
    }
  uploads-Carbon-src-Carbon-Exceptions-NotACarbonClassException.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Exceptions;

    use Carbon\CarbonInterface;
    use Exception;
    use InvalidArgumentException as BaseInvalidArgumentException;

    class NotACarbonClassException extends BaseInvalidArgumentException implements InvalidArgumentException
    {
        /**
         * Constructor.
         *
         * @param string         $className
         * @param int            $code
         * @param Exception|null $previous
         */
        public function __construct($className, $code = 0, Exception $previous = null)
        {
            parent::__construct(sprintf(
                'Given class does not implement %s: %s',
                CarbonInterface::class,
                $className
            ), $code, $previous);
        }
    }
  uploads-Carbon-src-Carbon-Exceptions-NotLocaleAwareException.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Exceptions;

    use Exception;
    use InvalidArgumentException as BaseInvalidArgumentException;

    class NotLocaleAwareException extends BaseInvalidArgumentException implements InvalidArgumentException
    {
        /**
         * Constructor.
         *
         * @param mixed          $object
         * @param int            $code
         * @param Exception|null $previous
         */
        public function __construct($object, $code = 0, Exception $previous = null)
        {
            $dump = \is_object($object) ? \get_class($object) : \gettype($object);

            parent::__construct("$dump does neither implements Symfony\Contracts\Translation\LocaleAwareInterface nor getLocale() method.", $code, $previous);
        }
    }
  uploads-Carbon-src-Carbon-Exceptions-ParseErrorException.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Exceptions;

    use Exception;
    use InvalidArgumentException as BaseInvalidArgumentException;

    class ParseErrorException extends BaseInvalidArgumentException implements InvalidArgumentException
    {
        /**
         * Constructor.
         *
         * @param string         $expected
         * @param string         $actual
         * @param int            $code
         * @param Exception|null $previous
         */
        public function __construct($expected, $actual, $help = '', $code = 0, Exception $previous = null)
        {
            $actual = $actual === '' ? 'data is missing' : "get '$actual'";

            parent::__construct(trim("Format expected $expected but $actual\n$help"), $code, $previous);
        }
    }
  uploads-Carbon-src-Carbon-Exceptions-UnitNotConfiguredException.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Exceptions;

    use Exception;

    class UnitNotConfiguredException extends UnitException
    {
        /**
         * Constructor.
         *
         * @param string         $unit
         * @param int            $code
         * @param Exception|null $previous
         */
        public function __construct($unit, $code = 0, Exception $previous = null)
        {
            parent::__construct("Unit $unit have no configuration to get total from other units.", $code, $previous);
        }
    }
  uploads-Carbon-src-Carbon-Exceptions-UnreachableException.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Exceptions;

    use Exception;
    use RuntimeException as BaseRuntimeException;

    class UnreachableException extends BaseRuntimeException implements RuntimeException
    {
        /**
         * Constructor.
         *
         * @param string         $message
         * @param int            $code
         * @param Exception|null $previous
         */
        public function __construct($message, $code = 0, Exception $previous = null)
        {
            parent::__construct($message, $code, $previous);
        }
    }
  uploads-Carbon-src-Carbon-Language.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon;

    use JsonSerializable;
    use ReturnTypeWillChange;

    class Language implements JsonSerializable
    {
        /**
         * @var array
         */
        protected static $languagesNames;

        /**
         * @var array
         */
        protected static $regionsNames;

        /**
         * @var string
         */
        protected $id;

        /**
         * @var string
         */
        protected $code;

        /**
         * @var string|null
         */
        protected $variant;

        /**
         * @var string|null
         */
        protected $region;

        /**
         * @var array
         */
        protected $names;

        /**
         * @var string
         */
        protected $isoName;

        /**
         * @var string
         */
        protected $nativeName;

        public function __construct(string $id)
        {
            $this->id = str_replace('-', '_', $id);
            $parts = explode('_', $this->id);
            $this->code = $parts[0];

            if (isset($parts[1])) {
                if (!preg_match('/^[A-Z]+$/', $parts[1])) {
                    $this->variant = $parts[1];
                    $parts[1] = $parts[2] ?? null;
                }
                if ($parts[1]) {
                    $this->region = $parts[1];
                }
            }
        }

        /**
         * Get the list of the known languages.
         *
         * @return array
         */
        public static function all()
        {
            if (!static::$languagesNames) {
                static::$languagesNames = require __DIR__.'/List/languages.php';
            }

            return static::$languagesNames;
        }

        /**
         * Get the list of the known regions.
         *
         * @return array
         */
        public static function regions()
        {
            if (!static::$regionsNames) {
                static::$regionsNames = require __DIR__.'/List/regions.php';
            }

            return static::$regionsNames;
        }

        /**
         * Get both isoName and nativeName as an array.
         *
         * @return array
         */
        public function getNames(): array
        {
            if (!$this->names) {
                $this->names = static::all()[$this->code] ?? [
                    'isoName' => $this->code,
                    'nativeName' => $this->code,
                ];
            }

            return $this->names;
        }

        /**
         * Returns the original locale ID.
         *
         * @return string
         */
        public function getId(): string
        {
            return $this->id;
        }

        /**
         * Returns the code of the locale "en"/"fr".
         *
         * @return string
         */
        public function getCode(): string
        {
            return $this->code;
        }

        /**
         * Returns the variant code such as cyrl/latn.
         *
         * @return string|null
         */
        public function getVariant(): ?string
        {
            return $this->variant;
        }

        /**
         * Returns the variant such as Cyrillic/Latin.
         *
         * @return string|null
         */
        public function getVariantName(): ?string
        {
            if ($this->variant === 'Latn') {
                return 'Latin';
            }

            if ($this->variant === 'Cyrl') {
                return 'Cyrillic';
            }

            return $this->variant;
        }

        /**
         * Returns the region part of the locale.
         *
         * @return string|null
         */
        public function getRegion(): ?string
        {
            return $this->region;
        }

        /**
         * Returns the region name for the current language.
         *
         * @return string|null
         */
        public function getRegionName(): ?string
        {
            return $this->region ? (static::regions()[$this->region] ?? $this->region) : null;
        }

        /**
         * Returns the long ISO language name.
         *
         * @return string
         */
        public function getFullIsoName(): string
        {
            if (!$this->isoName) {
                $this->isoName = $this->getNames()['isoName'];
            }

            return $this->isoName;
        }

        /**
         * Set the ISO language name.
         *
         * @param string $isoName
         */
        public function setIsoName(string $isoName): self
        {
            $this->isoName = $isoName;

            return $this;
        }

        /**
         * Return the full name of the language in this language.
         *
         * @return string
         */
        public function getFullNativeName(): string
        {
            if (!$this->nativeName) {
                $this->nativeName = $this->getNames()['nativeName'];
            }

            return $this->nativeName;
        }

        /**
         * Set the name of the language in this language.
         *
         * @param string $nativeName
         */
        public function setNativeName(string $nativeName): self
        {
            $this->nativeName = $nativeName;

            return $this;
        }

        /**
         * Returns the short ISO language name.
         *
         * @return string
         */
        public function getIsoName(): string
        {
            $name = $this->getFullIsoName();

            return trim(strstr($name, ',', true) ?: $name);
        }

        /**
         * Get the short name of the language in this language.
         *
         * @return string
         */
        public function getNativeName(): string
        {
            $name = $this->getFullNativeName();

            return trim(strstr($name, ',', true) ?: $name);
        }

        /**
         * Get a string with short ISO name, region in parentheses if applicable, variant in parentheses if applicable.
         *
         * @return string
         */
        public function getIsoDescription()
        {
            $region = $this->getRegionName();
            $variant = $this->getVariantName();

            return $this->getIsoName().($region ? ' ('.$region.')' : '').($variant ? ' ('.$variant.')' : '');
        }

        /**
         * Get a string with short native name, region in parentheses if applicable, variant in parentheses if applicable.
         *
         * @return string
         */
        public function getNativeDescription()
        {
            $region = $this->getRegionName();
            $variant = $this->getVariantName();

            return $this->getNativeName().($region ? ' ('.$region.')' : '').($variant ? ' ('.$variant.')' : '');
        }

        /**
         * Get a string with long ISO name, region in parentheses if applicable, variant in parentheses if applicable.
         *
         * @return string
         */
        public function getFullIsoDescription()
        {
            $region = $this->getRegionName();
            $variant = $this->getVariantName();

            return $this->getFullIsoName().($region ? ' ('.$region.')' : '').($variant ? ' ('.$variant.')' : '');
        }

        /**
         * Get a string with long native name, region in parentheses if applicable, variant in parentheses if applicable.
         *
         * @return string
         */
        public function getFullNativeDescription()
        {
            $region = $this->getRegionName();
            $variant = $this->getVariantName();

            return $this->getFullNativeName().($region ? ' ('.$region.')' : '').($variant ? ' ('.$variant.')' : '');
        }

        /**
         * Returns the original locale ID.
         *
         * @return string
         */
        public function __toString()
        {
            return $this->getId();
        }

        /**
         * Get a string with short ISO name, region in parentheses if applicable, variant in parentheses if applicable.
         *
         * @return string
         */
        #[ReturnTypeWillChange]
        public function jsonSerialize()
        {
            return $this->getIsoDescription();
        }
    }
  uploads-Carbon-src-Carbon-Laravel-ServiceProvider.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Laravel;

    use Carbon\Carbon;
    use Carbon\CarbonImmutable;
    use Carbon\CarbonInterval;
    use Carbon\CarbonPeriod;
    use Illuminate\Contracts\Events\Dispatcher as DispatcherContract;
    use Illuminate\Events\Dispatcher;
    use Illuminate\Events\EventDispatcher;
    use Illuminate\Support\Carbon as IlluminateCarbon;
    use Illuminate\Support\Facades\Date;
    use Throwable;

    class ServiceProvider extends \Illuminate\Support\ServiceProvider
    {
        public function boot()
        {
            $this->updateLocale();

            if (!$this->app->bound('events')) {
                return;
            }

            $service = $this;
            $events = $this->app['events'];

            if ($this->isEventDispatcher($events)) {
                $events->listen(class_exists('Illuminate\Foundation\Events\LocaleUpdated') ? 'Illuminate\Foundation\Events\LocaleUpdated' : 'locale.changed', function () use ($service) {
                    $service->updateLocale();
                });
            }
        }

        public function updateLocale()
        {
            $app = $this->app && method_exists($this->app, 'getLocale') ? $this->app : app('translator');
            $locale = $app->getLocale();
            Carbon::setLocale($locale);
            CarbonImmutable::setLocale($locale);
            CarbonPeriod::setLocale($locale);
            CarbonInterval::setLocale($locale);

            if (class_exists(IlluminateCarbon::class)) {
                IlluminateCarbon::setLocale($locale);
            }

            if (class_exists(Date::class)) {
                try {
                    $root = Date::getFacadeRoot();
                    $root->setLocale($locale);
                } catch (Throwable $e) {
                    // Non Carbon class in use in Date facade
                }
            }
        }

        public function register()
        {
            // Needed for Laravel < 5.3 compatibility
        }

        protected function isEventDispatcher($instance)
        {
            return $instance instanceof EventDispatcher
                || $instance instanceof Dispatcher
                || $instance instanceof DispatcherContract;
        }
    }
  uploads-Carbon-src-Carbon-List-languages.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return [
        /*
         * ISO 639-2
         */
        'ab' => [
            'isoName' => 'Abkhazian',
            'nativeName' => 'аҧсуа бызшәа, аҧсшәа',
        ],
        'aa' => [
            'isoName' => 'Afar',
            'nativeName' => 'Afaraf',
        ],
        'af' => [
            'isoName' => 'Afrikaans',
            'nativeName' => 'Afrikaans',
        ],
        'ak' => [
            'isoName' => 'Akan',
            'nativeName' => 'Akan',
        ],
        'sq' => [
            'isoName' => 'Albanian',
            'nativeName' => 'Shqip',
        ],
        'am' => [
            'isoName' => 'Amharic',
            'nativeName' => 'አማርኛ',
        ],
        'ar' => [
            'isoName' => 'Arabic',
            'nativeName' => 'العربية',
        ],
        'an' => [
            'isoName' => 'Aragonese',
            'nativeName' => 'aragonés',
        ],
        'hy' => [
            'isoName' => 'Armenian',
            'nativeName' => 'Հայերեն',
        ],
        'as' => [
            'isoName' => 'Assamese',
            'nativeName' => 'অসমীয়া',
        ],
        'av' => [
            'isoName' => 'Avaric',
            'nativeName' => 'авар мацӀ, магӀарул мацӀ',
        ],
        'ae' => [
            'isoName' => 'Avestan',
            'nativeName' => 'avesta',
        ],
        'ay' => [
            'isoName' => 'Aymara',
            'nativeName' => 'aymar aru',
        ],
        'az' => [
            'isoName' => 'Azerbaijani',
            'nativeName' => 'azərbaycan dili',
        ],
        'bm' => [
            'isoName' => 'Bambara',
            'nativeName' => 'bamanankan',
        ],
        'ba' => [
            'isoName' => 'Bashkir',
            'nativeName' => 'башҡорт теле',
        ],
        'eu' => [
            'isoName' => 'Basque',
            'nativeName' => 'euskara, euskera',
        ],
        'be' => [
            'isoName' => 'Belarusian',
            'nativeName' => 'беларуская мова',
        ],
        'bn' => [
            'isoName' => 'Bengali',
            'nativeName' => 'বাংলা',
        ],
        'bh' => [
            'isoName' => 'Bihari languages',
            'nativeName' => 'भोजपुरी',
        ],
        'bi' => [
            'isoName' => 'Bislama',
            'nativeName' => 'Bislama',
        ],
        'bs' => [
            'isoName' => 'Bosnian',
            'nativeName' => 'bosanski jezik',
        ],
        'br' => [
            'isoName' => 'Breton',
            'nativeName' => 'brezhoneg',
        ],
        'bg' => [
            'isoName' => 'Bulgarian',
            'nativeName' => 'български език',
        ],
        'my' => [
            'isoName' => 'Burmese',
            'nativeName' => 'ဗမာစာ',
        ],
        'ca' => [
            'isoName' => 'Catalan, Valencian',
            'nativeName' => 'català, valencià',
        ],
        'ch' => [
            'isoName' => 'Chamorro',
            'nativeName' => 'Chamoru',
        ],
        'ce' => [
            'isoName' => 'Chechen',
            'nativeName' => 'нохчийн мотт',
        ],
        'ny' => [
            'isoName' => 'Chichewa, Chewa, Nyanja',
            'nativeName' => 'chiCheŵa, chinyanja',
        ],
        'zh' => [
            'isoName' => 'Chinese',
            'nativeName' => '中文 (Zhōngwén), 汉语, 漢語',
        ],
        'cv' => [
            'isoName' => 'Chuvash',
            'nativeName' => 'чӑваш чӗлхи',
        ],
        'kw' => [
            'isoName' => 'Cornish',
            'nativeName' => 'Kernewek',
        ],
        'co' => [
            'isoName' => 'Corsican',
            'nativeName' => 'corsu, lingua corsa',
        ],
        'cr' => [
            'isoName' => 'Cree',
            'nativeName' => 'ᓀᐦᐃᔭᐍᐏᐣ',
        ],
        'hr' => [
            'isoName' => 'Croatian',
            'nativeName' => 'hrvatski jezik',
        ],
        'cs' => [
            'isoName' => 'Czech',
            'nativeName' => 'čeština, český jazyk',
        ],
        'da' => [
            'isoName' => 'Danish',
            'nativeName' => 'dansk',
        ],
        'dv' => [
            'isoName' => 'Divehi, Dhivehi, Maldivian',
            'nativeName' => 'ދިވެހި',
        ],
        'nl' => [
            'isoName' => 'Dutch, Flemish',
            'nativeName' => 'Nederlands, Vlaams',
        ],
        'dz' => [
            'isoName' => 'Dzongkha',
            'nativeName' => 'རྫོང་ཁ',
        ],
        'en' => [
            'isoName' => 'English',
            'nativeName' => 'English',
        ],
        'eo' => [
            'isoName' => 'Esperanto',
            'nativeName' => 'Esperanto',
        ],
        'et' => [
            'isoName' => 'Estonian',
            'nativeName' => 'eesti, eesti keel',
        ],
        'ee' => [
            'isoName' => 'Ewe',
            'nativeName' => 'Eʋegbe',
        ],
        'fo' => [
            'isoName' => 'Faroese',
            'nativeName' => 'føroyskt',
        ],
        'fj' => [
            'isoName' => 'Fijian',
            'nativeName' => 'vosa Vakaviti',
        ],
        'fi' => [
            'isoName' => 'Finnish',
            'nativeName' => 'suomi, suomen kieli',
        ],
        'fr' => [
            'isoName' => 'French',
            'nativeName' => 'français',
        ],
        'ff' => [
            'isoName' => 'Fulah',
            'nativeName' => 'Fulfulde, Pulaar, Pular',
        ],
        'gl' => [
            'isoName' => 'Galician',
            'nativeName' => 'Galego',
        ],
        'ka' => [
            'isoName' => 'Georgian',
            'nativeName' => 'ქართული',
        ],
        'de' => [
            'isoName' => 'German',
            'nativeName' => 'Deutsch',
        ],
        'el' => [
            'isoName' => 'Greek (modern)',
            'nativeName' => 'ελληνικά',
        ],
        'gn' => [
            'isoName' => 'Guaraní',
            'nativeName' => 'Avañe\'ẽ',
        ],
        'gu' => [
            'isoName' => 'Gujarati',
            'nativeName' => 'ગુજરાતી',
        ],
        'ht' => [
            'isoName' => 'Haitian, Haitian Creole',
            'nativeName' => 'Kreyòl ayisyen',
        ],
        'ha' => [
            'isoName' => 'Hausa',
            'nativeName' => '(Hausa) هَوُسَ',
        ],
        'he' => [
            'isoName' => 'Hebrew (modern)',
            'nativeName' => 'עברית',
        ],
        'hz' => [
            'isoName' => 'Herero',
            'nativeName' => 'Otjiherero',
        ],
        'hi' => [
            'isoName' => 'Hindi',
            'nativeName' => 'हिन्दी, हिंदी',
        ],
        'ho' => [
            'isoName' => 'Hiri Motu',
            'nativeName' => 'Hiri Motu',
        ],
        'hu' => [
            'isoName' => 'Hungarian',
            'nativeName' => 'magyar',
        ],
        'ia' => [
            'isoName' => 'Interlingua',
            'nativeName' => 'Interlingua',
        ],
        'id' => [
            'isoName' => 'Indonesian',
            'nativeName' => 'Bahasa Indonesia',
        ],
        'ie' => [
            'isoName' => 'Interlingue',
            'nativeName' => 'Originally called Occidental; then Interlingue after WWII',
        ],
        'ga' => [
            'isoName' => 'Irish',
            'nativeName' => 'Gaeilge',
        ],
        'ig' => [
            'isoName' => 'Igbo',
            'nativeName' => 'Asụsụ Igbo',
        ],
        'ik' => [
            'isoName' => 'Inupiaq',
            'nativeName' => 'Iñupiaq, Iñupiatun',
        ],
        'io' => [
            'isoName' => 'Ido',
            'nativeName' => 'Ido',
        ],
        'is' => [
            'isoName' => 'Icelandic',
            'nativeName' => 'Íslenska',
        ],
        'it' => [
            'isoName' => 'Italian',
            'nativeName' => 'Italiano',
        ],
        'iu' => [
            'isoName' => 'Inuktitut',
            'nativeName' => 'ᐃᓄᒃᑎᑐᑦ',
        ],
        'ja' => [
            'isoName' => 'Japanese',
            'nativeName' => '日本語 (にほんご)',
        ],
        'jv' => [
            'isoName' => 'Javanese',
            'nativeName' => 'ꦧꦱꦗꦮ, Basa Jawa',
        ],
        'kl' => [
            'isoName' => 'Kalaallisut, Greenlandic',
            'nativeName' => 'kalaallisut, kalaallit oqaasii',
        ],
        'kn' => [
            'isoName' => 'Kannada',
            'nativeName' => 'ಕನ್ನಡ',
        ],
        'kr' => [
            'isoName' => 'Kanuri',
            'nativeName' => 'Kanuri',
        ],
        'ks' => [
            'isoName' => 'Kashmiri',
            'nativeName' => 'कश्मीरी, كشميري‎',
        ],
        'kk' => [
            'isoName' => 'Kazakh',
            'nativeName' => 'қазақ тілі',
        ],
        'km' => [
            'isoName' => 'Central Khmer',
            'nativeName' => 'ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ',
        ],
        'ki' => [
            'isoName' => 'Kikuyu, Gikuyu',
            'nativeName' => 'Gĩkũyũ',
        ],
        'rw' => [
            'isoName' => 'Kinyarwanda',
            'nativeName' => 'Ikinyarwanda',
        ],
        'ky' => [
            'isoName' => 'Kirghiz, Kyrgyz',
            'nativeName' => 'Кыргызча, Кыргыз тили',
        ],
        'kv' => [
            'isoName' => 'Komi',
            'nativeName' => 'коми кыв',
        ],
        'kg' => [
            'isoName' => 'Kongo',
            'nativeName' => 'Kikongo',
        ],
        'ko' => [
            'isoName' => 'Korean',
            'nativeName' => '한국어',
        ],
        'ku' => [
            'isoName' => 'Kurdish',
            'nativeName' => 'Kurdî, کوردی‎',
        ],
        'kj' => [
            'isoName' => 'Kuanyama, Kwanyama',
            'nativeName' => 'Kuanyama',
        ],
        'la' => [
            'isoName' => 'Latin',
            'nativeName' => 'latine, lingua latina',
        ],
        'lb' => [
            'isoName' => 'Luxembourgish, Letzeburgesch',
            'nativeName' => 'Lëtzebuergesch',
        ],
        'lg' => [
            'isoName' => 'Ganda',
            'nativeName' => 'Luganda',
        ],
        'li' => [
            'isoName' => 'Limburgan, Limburger, Limburgish',
            'nativeName' => 'Limburgs',
        ],
        'ln' => [
            'isoName' => 'Lingala',
            'nativeName' => 'Lingála',
        ],
        'lo' => [
            'isoName' => 'Lao',
            'nativeName' => 'ພາສາລາວ',
        ],
        'lt' => [
            'isoName' => 'Lithuanian',
            'nativeName' => 'lietuvių kalba',
        ],
        'lu' => [
            'isoName' => 'Luba-Katanga',
            'nativeName' => 'Kiluba',
        ],
        'lv' => [
            'isoName' => 'Latvian',
            'nativeName' => 'latviešu valoda',
        ],
        'gv' => [
            'isoName' => 'Manx',
            'nativeName' => 'Gaelg, Gailck',
        ],
        'mk' => [
            'isoName' => 'Macedonian',
            'nativeName' => 'македонски јазик',
        ],
        'mg' => [
            'isoName' => 'Malagasy',
            'nativeName' => 'fiteny malagasy',
        ],
        'ms' => [
            'isoName' => 'Malay',
            'nativeName' => 'Bahasa Melayu, بهاس ملايو‎',
        ],
        'ml' => [
            'isoName' => 'Malayalam',
            'nativeName' => 'മലയാളം',
        ],
        'mt' => [
            'isoName' => 'Maltese',
            'nativeName' => 'Malti',
        ],
        'mi' => [
            'isoName' => 'Maori',
            'nativeName' => 'te reo Māori',
        ],
        'mr' => [
            'isoName' => 'Marathi',
            'nativeName' => 'मराठी',
        ],
        'mh' => [
            'isoName' => 'Marshallese',
            'nativeName' => 'Kajin M̧ajeļ',
        ],
        'mn' => [
            'isoName' => 'Mongolian',
            'nativeName' => 'Монгол хэл',
        ],
        'na' => [
            'isoName' => 'Nauru',
            'nativeName' => 'Dorerin Naoero',
        ],
        'nv' => [
            'isoName' => 'Navajo, Navaho',
            'nativeName' => 'Diné bizaad',
        ],
        'nd' => [
            'isoName' => 'North Ndebele',
            'nativeName' => 'isiNdebele',
        ],
        'ne' => [
            'isoName' => 'Nepali',
            'nativeName' => 'नेपाली',
        ],
        'ng' => [
            'isoName' => 'Ndonga',
            'nativeName' => 'Owambo',
        ],
        'nb' => [
            'isoName' => 'Norwegian Bokmål',
            'nativeName' => 'Norsk Bokmål',
        ],
        'nn' => [
            'isoName' => 'Norwegian Nynorsk',
            'nativeName' => 'Norsk Nynorsk',
        ],
        'no' => [
            'isoName' => 'Norwegian',
            'nativeName' => 'Norsk',
        ],
        'ii' => [
            'isoName' => 'Sichuan Yi, Nuosu',
            'nativeName' => 'ꆈꌠ꒿ Nuosuhxop',
        ],
        'nr' => [
            'isoName' => 'South Ndebele',
            'nativeName' => 'isiNdebele',
        ],
        'oc' => [
            'isoName' => 'Occitan',
            'nativeName' => 'occitan, lenga d\'òc',
        ],
        'oj' => [
            'isoName' => 'Ojibwa',
            'nativeName' => 'ᐊᓂᔑᓈᐯᒧᐎᓐ',
        ],
        'cu' => [
            'isoName' => 'Church Slavic, Church Slavonic, Old Church Slavonic, Old Slavonic, Old Bulgarian',
            'nativeName' => 'ѩзыкъ словѣньскъ',
        ],
        'om' => [
            'isoName' => 'Oromo',
            'nativeName' => 'Afaan Oromoo',
        ],
        'or' => [
            'isoName' => 'Oriya',
            'nativeName' => 'ଓଡ଼ିଆ',
        ],
        'os' => [
            'isoName' => 'Ossetian, Ossetic',
            'nativeName' => 'ирон æвзаг',
        ],
        'pa' => [
            'isoName' => 'Panjabi, Punjabi',
            'nativeName' => 'ਪੰਜਾਬੀ',
        ],
        'pi' => [
            'isoName' => 'Pali',
            'nativeName' => 'पाऴि',
        ],
        'fa' => [
            'isoName' => 'Persian',
            'nativeName' => 'فارسی',
        ],
        'pl' => [
            'isoName' => 'Polish',
            'nativeName' => 'język polski, polszczyzna',
        ],
        'ps' => [
            'isoName' => 'Pashto, Pushto',
            'nativeName' => 'پښتو',
        ],
        'pt' => [
            'isoName' => 'Portuguese',
            'nativeName' => 'Português',
        ],
        'qu' => [
            'isoName' => 'Quechua',
            'nativeName' => 'Runa Simi, Kichwa',
        ],
        'rm' => [
            'isoName' => 'Romansh',
            'nativeName' => 'Rumantsch Grischun',
        ],
        'rn' => [
            'isoName' => 'Rundi',
            'nativeName' => 'Ikirundi',
        ],
        'ro' => [
            'isoName' => 'Romanian, Moldavian, Moldovan',
            'nativeName' => 'Română',
        ],
        'ru' => [
            'isoName' => 'Russian',
            'nativeName' => 'русский',
        ],
        'sa' => [
            'isoName' => 'Sanskrit',
            'nativeName' => 'संस्कृतम्',
        ],
        'sc' => [
            'isoName' => 'Sardinian',
            'nativeName' => 'sardu',
        ],
        'sd' => [
            'isoName' => 'Sindhi',
            'nativeName' => 'सिन्धी, سنڌي، سندھی‎',
        ],
        'se' => [
            'isoName' => 'Northern Sami',
            'nativeName' => 'Davvisámegiella',
        ],
        'sm' => [
            'isoName' => 'Samoan',
            'nativeName' => 'gagana fa\'a Samoa',
        ],
        'sg' => [
            'isoName' => 'Sango',
            'nativeName' => 'yângâ tî sängö',
        ],
        'sr' => [
            'isoName' => 'Serbian',
            'nativeName' => 'српски језик',
        ],
        'gd' => [
            'isoName' => 'Gaelic, Scottish Gaelic',
            'nativeName' => 'Gàidhlig',
        ],
        'sn' => [
            'isoName' => 'Shona',
            'nativeName' => 'chiShona',
        ],
        'si' => [
            'isoName' => 'Sinhala, Sinhalese',
            'nativeName' => 'සිංහල',
        ],
        'sk' => [
            'isoName' => 'Slovak',
            'nativeName' => 'Slovenčina, Slovenský Jazyk',
        ],
        'sl' => [
            'isoName' => 'Slovene',
            'nativeName' => 'Slovenski Jezik, Slovenščina',
        ],
        'so' => [
            'isoName' => 'Somali',
            'nativeName' => 'Soomaaliga, af Soomaali',
        ],
        'st' => [
            'isoName' => 'Southern Sotho',
            'nativeName' => 'Sesotho',
        ],
        'es' => [
            'isoName' => 'Spanish, Castilian',
            'nativeName' => 'Español',
        ],
        'su' => [
            'isoName' => 'Sundanese',
            'nativeName' => 'Basa Sunda',
        ],
        'sw' => [
            'isoName' => 'Swahili',
            'nativeName' => 'Kiswahili',
        ],
        'ss' => [
            'isoName' => 'Swati',
            'nativeName' => 'SiSwati',
        ],
        'sv' => [
            'isoName' => 'Swedish',
            'nativeName' => 'Svenska',
        ],
        'ta' => [
            'isoName' => 'Tamil',
            'nativeName' => 'தமிழ்',
        ],
        'te' => [
            'isoName' => 'Telugu',
            'nativeName' => 'తెలుగు',
        ],
        'tg' => [
            'isoName' => 'Tajik',
            'nativeName' => 'тоҷикӣ, toçikī, تاجیکی‎',
        ],
        'th' => [
            'isoName' => 'Thai',
            'nativeName' => 'ไทย',
        ],
        'ti' => [
            'isoName' => 'Tigrinya',
            'nativeName' => 'ትግርኛ',
        ],
        'bo' => [
            'isoName' => 'Tibetan',
            'nativeName' => 'བོད་ཡིག',
        ],
        'tk' => [
            'isoName' => 'Turkmen',
            'nativeName' => 'Türkmen, Түркмен',
        ],
        'tl' => [
            'isoName' => 'Tagalog',
            'nativeName' => 'Wikang Tagalog',
        ],
        'tn' => [
            'isoName' => 'Tswana',
            'nativeName' => 'Setswana',
        ],
        'to' => [
            'isoName' => 'Tongan (Tonga Islands)',
            'nativeName' => 'Faka Tonga',
        ],
        'tr' => [
            'isoName' => 'Turkish',
            'nativeName' => 'Türkçe',
        ],
        'ts' => [
            'isoName' => 'Tsonga',
            'nativeName' => 'Xitsonga',
        ],
        'tt' => [
            'isoName' => 'Tatar',
            'nativeName' => 'татар теле, tatar tele',
        ],
        'tw' => [
            'isoName' => 'Twi',
            'nativeName' => 'Twi',
        ],
        'ty' => [
            'isoName' => 'Tahitian',
            'nativeName' => 'Reo Tahiti',
        ],
        'ug' => [
            'isoName' => 'Uighur, Uyghur',
            'nativeName' => 'Uyƣurqə, ‫ئۇيغۇرچ',
        ],
        'uk' => [
            'isoName' => 'Ukrainian',
            'nativeName' => 'Українська',
        ],
        'ur' => [
            'isoName' => 'Urdu',
            'nativeName' => 'اردو',
        ],
        'uz' => [
            'isoName' => 'Uzbek',
            'nativeName' => 'Oʻzbek, Ўзбек, أۇزبېك‎',
        ],
        've' => [
            'isoName' => 'Venda',
            'nativeName' => 'Tshivenḓa',
        ],
        'vi' => [
            'isoName' => 'Vietnamese',
            'nativeName' => 'Tiếng Việt',
        ],
        'vo' => [
            'isoName' => 'Volapük',
            'nativeName' => 'Volapük',
        ],
        'wa' => [
            'isoName' => 'Walloon',
            'nativeName' => 'Walon',
        ],
        'cy' => [
            'isoName' => 'Welsh',
            'nativeName' => 'Cymraeg',
        ],
        'wo' => [
            'isoName' => 'Wolof',
            'nativeName' => 'Wollof',
        ],
        'fy' => [
            'isoName' => 'Western Frisian',
            'nativeName' => 'Frysk',
        ],
        'xh' => [
            'isoName' => 'Xhosa',
            'nativeName' => 'isiXhosa',
        ],
        'yi' => [
            'isoName' => 'Yiddish',
            'nativeName' => 'ייִדיש',
        ],
        'yo' => [
            'isoName' => 'Yoruba',
            'nativeName' => 'Yorùbá',
        ],
        'za' => [
            'isoName' => 'Zhuang, Chuang',
            'nativeName' => 'Saɯ cueŋƅ, Saw cuengh',
        ],
        'zu' => [
            'isoName' => 'Zulu',
            'nativeName' => 'isiZulu',
        ],
        /*
         * Add ISO 639-3 languages available in Carbon
         */
        'agq' => [
            'isoName' => 'Aghem',
            'nativeName' => 'Aghem',
        ],
        'agr' => [
            'isoName' => 'Aguaruna',
            'nativeName' => 'Aguaruna',
        ],
        'anp' => [
            'isoName' => 'Angika',
            'nativeName' => 'Angika',
        ],
        'asa' => [
            'isoName' => 'Asu',
            'nativeName' => 'Asu',
        ],
        'ast' => [
            'isoName' => 'Asturian',
            'nativeName' => 'Asturian',
        ],
        'ayc' => [
            'isoName' => 'Southern Aymara',
            'nativeName' => 'Southern Aymara',
        ],
        'bas' => [
            'isoName' => 'Basaa',
            'nativeName' => 'Basaa',
        ],
        'bem' => [
            'isoName' => 'Bemba',
            'nativeName' => 'Bemba',
        ],
        'bez' => [
            'isoName' => 'Bena',
            'nativeName' => 'Bena',
        ],
        'bhb' => [
            'isoName' => 'Bhili',
            'nativeName' => 'Bhili',
        ],
        'bho' => [
            'isoName' => 'Bhojpuri',
            'nativeName' => 'Bhojpuri',
        ],
        'brx' => [
            'isoName' => 'Bodo',
            'nativeName' => 'Bodo',
        ],
        'byn' => [
            'isoName' => 'Bilin',
            'nativeName' => 'Bilin',
        ],
        'ccp' => [
            'isoName' => 'Chakma',
            'nativeName' => 'Chakma',
        ],
        'cgg' => [
            'isoName' => 'Chiga',
            'nativeName' => 'Chiga',
        ],
        'chr' => [
            'isoName' => 'Cherokee',
            'nativeName' => 'Cherokee',
        ],
        'cmn' => [
            'isoName' => 'Chinese',
            'nativeName' => 'Chinese',
        ],
        'crh' => [
            'isoName' => 'Crimean Turkish',
            'nativeName' => 'Crimean Turkish',
        ],
        'csb' => [
            'isoName' => 'Kashubian',
            'nativeName' => 'Kashubian',
        ],
        'dav' => [
            'isoName' => 'Taita',
            'nativeName' => 'Taita',
        ],
        'dje' => [
            'isoName' => 'Zarma',
            'nativeName' => 'Zarma',
        ],
        'doi' => [
            'isoName' => 'Dogri (macrolanguage)',
            'nativeName' => 'Dogri (macrolanguage)',
        ],
        'dsb' => [
            'isoName' => 'Lower Sorbian',
            'nativeName' => 'Lower Sorbian',
        ],
        'dua' => [
            'isoName' => 'Duala',
            'nativeName' => 'Duala',
        ],
        'dyo' => [
            'isoName' => 'Jola-Fonyi',
            'nativeName' => 'Jola-Fonyi',
        ],
        'ebu' => [
            'isoName' => 'Embu',
            'nativeName' => 'Embu',
        ],
        'ewo' => [
            'isoName' => 'Ewondo',
            'nativeName' => 'Ewondo',
        ],
        'fil' => [
            'isoName' => 'Filipino',
            'nativeName' => 'Filipino',
        ],
        'fur' => [
            'isoName' => 'Friulian',
            'nativeName' => 'Friulian',
        ],
        'gez' => [
            'isoName' => 'Geez',
            'nativeName' => 'Geez',
        ],
        'gom' => [
            'isoName' => 'Konkani, Goan',
            'nativeName' => 'ಕೊಂಕಣಿ',
        ],
        'gsw' => [
            'isoName' => 'Swiss German',
            'nativeName' => 'Swiss German',
        ],
        'guz' => [
            'isoName' => 'Gusii',
            'nativeName' => 'Gusii',
        ],
        'hak' => [
            'isoName' => 'Hakka Chinese',
            'nativeName' => 'Hakka Chinese',
        ],
        'haw' => [
            'isoName' => 'Hawaiian',
            'nativeName' => 'Hawaiian',
        ],
        'hif' => [
            'isoName' => 'Fiji Hindi',
            'nativeName' => 'Fiji Hindi',
        ],
        'hne' => [
            'isoName' => 'Chhattisgarhi',
            'nativeName' => 'Chhattisgarhi',
        ],
        'hsb' => [
            'isoName' => 'Upper Sorbian',
            'nativeName' => 'Upper Sorbian',
        ],
        'jgo' => [
            'isoName' => 'Ngomba',
            'nativeName' => 'Ngomba',
        ],
        'jmc' => [
            'isoName' => 'Machame',
            'nativeName' => 'Machame',
        ],
        'kab' => [
            'isoName' => 'Kabyle',
            'nativeName' => 'Kabyle',
        ],
        'kam' => [
            'isoName' => 'Kamba',
            'nativeName' => 'Kamba',
        ],
        'kde' => [
            'isoName' => 'Makonde',
            'nativeName' => 'Makonde',
        ],
        'kea' => [
            'isoName' => 'Kabuverdianu',
            'nativeName' => 'Kabuverdianu',
        ],
        'khq' => [
            'isoName' => 'Koyra Chiini',
            'nativeName' => 'Koyra Chiini',
        ],
        'kkj' => [
            'isoName' => 'Kako',
            'nativeName' => 'Kako',
        ],
        'kln' => [
            'isoName' => 'Kalenjin',
            'nativeName' => 'Kalenjin',
        ],
        'kok' => [
            'isoName' => 'Konkani',
            'nativeName' => 'Konkani',
        ],
        'ksb' => [
            'isoName' => 'Shambala',
            'nativeName' => 'Shambala',
        ],
        'ksf' => [
            'isoName' => 'Bafia',
            'nativeName' => 'Bafia',
        ],
        'ksh' => [
            'isoName' => 'Colognian',
            'nativeName' => 'Colognian',
        ],
        'lag' => [
            'isoName' => 'Langi',
            'nativeName' => 'Langi',
        ],
        'lij' => [
            'isoName' => 'Ligurian',
            'nativeName' => 'Ligurian',
        ],
        'lkt' => [
            'isoName' => 'Lakota',
            'nativeName' => 'Lakota',
        ],
        'lrc' => [
            'isoName' => 'Northern Luri',
            'nativeName' => 'Northern Luri',
        ],
        'luo' => [
            'isoName' => 'Luo',
            'nativeName' => 'Luo',
        ],
        'luy' => [
            'isoName' => 'Luyia',
            'nativeName' => 'Luyia',
        ],
        'lzh' => [
            'isoName' => 'Literary Chinese',
            'nativeName' => 'Literary Chinese',
        ],
        'mag' => [
            'isoName' => 'Magahi',
            'nativeName' => 'Magahi',
        ],
        'mai' => [
            'isoName' => 'Maithili',
            'nativeName' => 'Maithili',
        ],
        'mas' => [
            'isoName' => 'Masai',
            'nativeName' => 'Masai',
        ],
        'mer' => [
            'isoName' => 'Meru',
            'nativeName' => 'Meru',
        ],
        'mfe' => [
            'isoName' => 'Morisyen',
            'nativeName' => 'Morisyen',
        ],
        'mgh' => [
            'isoName' => 'Makhuwa-Meetto',
            'nativeName' => 'Makhuwa-Meetto',
        ],
        'mgo' => [
            'isoName' => 'Metaʼ',
            'nativeName' => 'Metaʼ',
        ],
        'mhr' => [
            'isoName' => 'Eastern Mari',
            'nativeName' => 'Eastern Mari',
        ],
        'miq' => [
            'isoName' => 'Mískito',
            'nativeName' => 'Mískito',
        ],
        'mjw' => [
            'isoName' => 'Karbi',
            'nativeName' => 'Karbi',
        ],
        'mni' => [
            'isoName' => 'Manipuri',
            'nativeName' => 'Manipuri',
        ],
        'mua' => [
            'isoName' => 'Mundang',
            'nativeName' => 'Mundang',
        ],
        'mzn' => [
            'isoName' => 'Mazanderani',
            'nativeName' => 'Mazanderani',
        ],
        'nan' => [
            'isoName' => 'Min Nan Chinese',
            'nativeName' => 'Min Nan Chinese',
        ],
        'naq' => [
            'isoName' => 'Nama',
            'nativeName' => 'Nama',
        ],
        'nds' => [
            'isoName' => 'Low German',
            'nativeName' => 'Low German',
        ],
        'nhn' => [
            'isoName' => 'Central Nahuatl',
            'nativeName' => 'Central Nahuatl',
        ],
        'niu' => [
            'isoName' => 'Niuean',
            'nativeName' => 'Niuean',
        ],
        'nmg' => [
            'isoName' => 'Kwasio',
            'nativeName' => 'Kwasio',
        ],
        'nnh' => [
            'isoName' => 'Ngiemboon',
            'nativeName' => 'Ngiemboon',
        ],
        'nso' => [
            'isoName' => 'Northern Sotho',
            'nativeName' => 'Northern Sotho',
        ],
        'nus' => [
            'isoName' => 'Nuer',
            'nativeName' => 'Nuer',
        ],
        'nyn' => [
            'isoName' => 'Nyankole',
            'nativeName' => 'Nyankole',
        ],
        'pap' => [
            'isoName' => 'Papiamento',
            'nativeName' => 'Papiamento',
        ],
        'prg' => [
            'isoName' => 'Prussian',
            'nativeName' => 'Prussian',
        ],
        'quz' => [
            'isoName' => 'Cusco Quechua',
            'nativeName' => 'Cusco Quechua',
        ],
        'raj' => [
            'isoName' => 'Rajasthani',
            'nativeName' => 'Rajasthani',
        ],
        'rof' => [
            'isoName' => 'Rombo',
            'nativeName' => 'Rombo',
        ],
        'rwk' => [
            'isoName' => 'Rwa',
            'nativeName' => 'Rwa',
        ],
        'sah' => [
            'isoName' => 'Sakha',
            'nativeName' => 'Sakha',
        ],
        'saq' => [
            'isoName' => 'Samburu',
            'nativeName' => 'Samburu',
        ],
        'sat' => [
            'isoName' => 'Santali',
            'nativeName' => 'Santali',
        ],
        'sbp' => [
            'isoName' => 'Sangu',
            'nativeName' => 'Sangu',
        ],
        'scr' => [
            'isoName' => 'Serbo Croatian',
            'nativeName' => 'Serbo Croatian',
        ],
        'seh' => [
            'isoName' => 'Sena',
            'nativeName' => 'Sena',
        ],
        'ses' => [
            'isoName' => 'Koyraboro Senni',
            'nativeName' => 'Koyraboro Senni',
        ],
        'sgs' => [
            'isoName' => 'Samogitian',
            'nativeName' => 'Samogitian',
        ],
        'shi' => [
            'isoName' => 'Tachelhit',
            'nativeName' => 'Tachelhit',
        ],
        'shn' => [
            'isoName' => 'Shan',
            'nativeName' => 'Shan',
        ],
        'shs' => [
            'isoName' => 'Shuswap',
            'nativeName' => 'Shuswap',
        ],
        'sid' => [
            'isoName' => 'Sidamo',
            'nativeName' => 'Sidamo',
        ],
        'smn' => [
            'isoName' => 'Inari Sami',
            'nativeName' => 'Inari Sami',
        ],
        'szl' => [
            'isoName' => 'Silesian',
            'nativeName' => 'Silesian',
        ],
        'tcy' => [
            'isoName' => 'Tulu',
            'nativeName' => 'Tulu',
        ],
        'teo' => [
            'isoName' => 'Teso',
            'nativeName' => 'Teso',
        ],
        'tet' => [
            'isoName' => 'Tetum',
            'nativeName' => 'Tetum',
        ],
        'the' => [
            'isoName' => 'Chitwania Tharu',
            'nativeName' => 'Chitwania Tharu',
        ],
        'tig' => [
            'isoName' => 'Tigre',
            'nativeName' => 'Tigre',
        ],
        'tlh' => [
            'isoName' => 'Klingon',
            'nativeName' => 'tlhIngan Hol',
        ],
        'tpi' => [
            'isoName' => 'Tok Pisin',
            'nativeName' => 'Tok Pisin',
        ],
        'twq' => [
            'isoName' => 'Tasawaq',
            'nativeName' => 'Tasawaq',
        ],
        'tzl' => [
            'isoName' => 'Talossan',
            'nativeName' => 'Talossan',
        ],
        'tzm' => [
            'isoName' => 'Tamazight, Central Atlas',
            'nativeName' => 'ⵜⵎⴰⵣⵉⵖⵜ',
        ],
        'unm' => [
            'isoName' => 'Unami',
            'nativeName' => 'Unami',
        ],
        'vai' => [
            'isoName' => 'Vai',
            'nativeName' => 'Vai',
        ],
        'vun' => [
            'isoName' => 'Vunjo',
            'nativeName' => 'Vunjo',
        ],
        'wae' => [
            'isoName' => 'Walser',
            'nativeName' => 'Walser',
        ],
        'wal' => [
            'isoName' => 'Wolaytta',
            'nativeName' => 'Wolaytta',
        ],
        'xog' => [
            'isoName' => 'Soga',
            'nativeName' => 'Soga',
        ],
        'yav' => [
            'isoName' => 'Yangben',
            'nativeName' => 'Yangben',
        ],
        'yue' => [
            'isoName' => 'Cantonese',
            'nativeName' => 'Cantonese',
        ],
        'yuw' => [
            'isoName' => 'Yau (Morobe Province)',
            'nativeName' => 'Yau (Morobe Province)',
        ],
        'zgh' => [
            'isoName' => 'Standard Moroccan Tamazight',
            'nativeName' => 'Standard Moroccan Tamazight',
        ],
    ];
  uploads-Carbon-src-Carbon-List-regions.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    /*
     * ISO 3166-2
     */
    return [
        'AD' => 'Andorra',
        'AE' => 'United Arab Emirates',
        'AF' => 'Afghanistan',
        'AG' => 'Antigua and Barbuda',
        'AI' => 'Anguilla',
        'AL' => 'Albania',
        'AM' => 'Armenia',
        'AO' => 'Angola',
        'AQ' => 'Antarctica',
        'AR' => 'Argentina',
        'AS' => 'American Samoa',
        'AT' => 'Austria',
        'AU' => 'Australia',
        'AW' => 'Aruba',
        'AX' => 'Åland Islands',
        'AZ' => 'Azerbaijan',
        'BA' => 'Bosnia and Herzegovina',
        'BB' => 'Barbados',
        'BD' => 'Bangladesh',
        'BE' => 'Belgium',
        'BF' => 'Burkina Faso',
        'BG' => 'Bulgaria',
        'BH' => 'Bahrain',
        'BI' => 'Burundi',
        'BJ' => 'Benin',
        'BL' => 'Saint Barthélemy',
        'BM' => 'Bermuda',
        'BN' => 'Brunei Darussalam',
        'BO' => 'Bolivia (Plurinational State of)',
        'BQ' => 'Bonaire, Sint Eustatius and Saba',
        'BR' => 'Brazil',
        'BS' => 'Bahamas',
        'BT' => 'Bhutan',
        'BV' => 'Bouvet Island',
        'BW' => 'Botswana',
        'BY' => 'Belarus',
        'BZ' => 'Belize',
        'CA' => 'Canada',
        'CC' => 'Cocos (Keeling) Islands',
        'CD' => 'Congo, Democratic Republic of the',
        'CF' => 'Central African Republic',
        'CG' => 'Congo',
        'CH' => 'Switzerland',
        'CI' => 'Côte d\'Ivoire',
        'CK' => 'Cook Islands',
        'CL' => 'Chile',
        'CM' => 'Cameroon',
        'CN' => 'China',
        'CO' => 'Colombia',
        'CR' => 'Costa Rica',
        'CU' => 'Cuba',
        'CV' => 'Cabo Verde',
        'CW' => 'Curaçao',
        'CX' => 'Christmas Island',
        'CY' => 'Cyprus',
        'CZ' => 'Czechia',
        'DE' => 'Germany',
        'DJ' => 'Djibouti',
        'DK' => 'Denmark',
        'DM' => 'Dominica',
        'DO' => 'Dominican Republic',
        'DZ' => 'Algeria',
        'EC' => 'Ecuador',
        'EE' => 'Estonia',
        'EG' => 'Egypt',
        'EH' => 'Western Sahara',
        'ER' => 'Eritrea',
        'ES' => 'Spain',
        'ET' => 'Ethiopia',
        'FI' => 'Finland',
        'FJ' => 'Fiji',
        'FK' => 'Falkland Islands (Malvinas)',
        'FM' => 'Micronesia (Federated States of)',
        'FO' => 'Faroe Islands',
        'FR' => 'France',
        'GA' => 'Gabon',
        'GB' => 'United Kingdom of Great Britain and Northern Ireland',
        'GD' => 'Grenada',
        'GE' => 'Georgia',
        'GF' => 'French Guiana',
        'GG' => 'Guernsey',
        'GH' => 'Ghana',
        'GI' => 'Gibraltar',
        'GL' => 'Greenland',
        'GM' => 'Gambia',
        'GN' => 'Guinea',
        'GP' => 'Guadeloupe',
        'GQ' => 'Equatorial Guinea',
        'GR' => 'Greece',
        'GS' => 'South Georgia and the South Sandwich Islands',
        'GT' => 'Guatemala',
        'GU' => 'Guam',
        'GW' => 'Guinea-Bissau',
        'GY' => 'Guyana',
        'HK' => 'Hong Kong',
        'HM' => 'Heard Island and McDonald Islands',
        'HN' => 'Honduras',
        'HR' => 'Croatia',
        'HT' => 'Haiti',
        'HU' => 'Hungary',
        'ID' => 'Indonesia',
        'IE' => 'Ireland',
        'IL' => 'Israel',
        'IM' => 'Isle of Man',
        'IN' => 'India',
        'IO' => 'British Indian Ocean Territory',
        'IQ' => 'Iraq',
        'IR' => 'Iran (Islamic Republic of)',
        'IS' => 'Iceland',
        'IT' => 'Italy',
        'JE' => 'Jersey',
        'JM' => 'Jamaica',
        'JO' => 'Jordan',
        'JP' => 'Japan',
        'KE' => 'Kenya',
        'KG' => 'Kyrgyzstan',
        'KH' => 'Cambodia',
        'KI' => 'Kiribati',
        'KM' => 'Comoros',
        'KN' => 'Saint Kitts and Nevis',
        'KP' => 'Korea (Democratic People\'s Republic of)',
        'KR' => 'Korea, Republic of',
        'KW' => 'Kuwait',
        'KY' => 'Cayman Islands',
        'KZ' => 'Kazakhstan',
        'LA' => 'Lao People\'s Democratic Republic',
        'LB' => 'Lebanon',
        'LC' => 'Saint Lucia',
        'LI' => 'Liechtenstein',
        'LK' => 'Sri Lanka',
        'LR' => 'Liberia',
        'LS' => 'Lesotho',
        'LT' => 'Lithuania',
        'LU' => 'Luxembourg',
        'LV' => 'Latvia',
        'LY' => 'Libya',
        'MA' => 'Morocco',
        'MC' => 'Monaco',
        'MD' => 'Moldova, Republic of',
        'ME' => 'Montenegro',
        'MF' => 'Saint Martin (French part)',
        'MG' => 'Madagascar',
        'MH' => 'Marshall Islands',
        'MK' => 'Macedonia, the former Yugoslav Republic of',
        'ML' => 'Mali',
        'MM' => 'Myanmar',
        'MN' => 'Mongolia',
        'MO' => 'Macao',
        'MP' => 'Northern Mariana Islands',
        'MQ' => 'Martinique',
        'MR' => 'Mauritania',
        'MS' => 'Montserrat',
        'MT' => 'Malta',
        'MU' => 'Mauritius',
        'MV' => 'Maldives',
        'MW' => 'Malawi',
        'MX' => 'Mexico',
        'MY' => 'Malaysia',
        'MZ' => 'Mozambique',
        'NA' => 'Namibia',
        'NC' => 'New Caledonia',
        'NE' => 'Niger',
        'NF' => 'Norfolk Island',
        'NG' => 'Nigeria',
        'NI' => 'Nicaragua',
        'NL' => 'Netherlands',
        'NO' => 'Norway',
        'NP' => 'Nepal',
        'NR' => 'Nauru',
        'NU' => 'Niue',
        'NZ' => 'New Zealand',
        'OM' => 'Oman',
        'PA' => 'Panama',
        'PE' => 'Peru',
        'PF' => 'French Polynesia',
        'PG' => 'Papua New Guinea',
        'PH' => 'Philippines',
        'PK' => 'Pakistan',
        'PL' => 'Poland',
        'PM' => 'Saint Pierre and Miquelon',
        'PN' => 'Pitcairn',
        'PR' => 'Puerto Rico',
        'PS' => 'Palestine, State of',
        'PT' => 'Portugal',
        'PW' => 'Palau',
        'PY' => 'Paraguay',
        'QA' => 'Qatar',
        'RE' => 'Réunion',
        'RO' => 'Romania',
        'RS' => 'Serbia',
        'RU' => 'Russian Federation',
        'RW' => 'Rwanda',
        'SA' => 'Saudi Arabia',
        'SB' => 'Solomon Islands',
        'SC' => 'Seychelles',
        'SD' => 'Sudan',
        'SE' => 'Sweden',
        'SG' => 'Singapore',
        'SH' => 'Saint Helena, Ascension and Tristan da Cunha',
        'SI' => 'Slovenia',
        'SJ' => 'Svalbard and Jan Mayen',
        'SK' => 'Slovakia',
        'SL' => 'Sierra Leone',
        'SM' => 'San Marino',
        'SN' => 'Senegal',
        'SO' => 'Somalia',
        'SR' => 'Suriname',
        'SS' => 'South Sudan',
        'ST' => 'Sao Tome and Principe',
        'SV' => 'El Salvador',
        'SX' => 'Sint Maarten (Dutch part)',
        'SY' => 'Syrian Arab Republic',
        'SZ' => 'Eswatini',
        'TC' => 'Turks and Caicos Islands',
        'TD' => 'Chad',
        'TF' => 'French Southern Territories',
        'TG' => 'Togo',
        'TH' => 'Thailand',
        'TJ' => 'Tajikistan',
        'TK' => 'Tokelau',
        'TL' => 'Timor-Leste',
        'TM' => 'Turkmenistan',
        'TN' => 'Tunisia',
        'TO' => 'Tonga',
        'TR' => 'Turkey',
        'TT' => 'Trinidad and Tobago',
        'TV' => 'Tuvalu',
        'TW' => 'Taiwan, Province of China',
        'TZ' => 'Tanzania, United Republic of',
        'UA' => 'Ukraine',
        'UG' => 'Uganda',
        'UM' => 'United States Minor Outlying Islands',
        'US' => 'United States of America',
        'UY' => 'Uruguay',
        'UZ' => 'Uzbekistan',
        'VA' => 'Holy See',
        'VC' => 'Saint Vincent and the Grenadines',
        'VE' => 'Venezuela (Bolivarian Republic of)',
        'VG' => 'Virgin Islands (British)',
        'VI' => 'Virgin Islands (U.S.)',
        'VN' => 'Viet Nam',
        'VU' => 'Vanuatu',
        'WF' => 'Wallis and Futuna',
        'WS' => 'Samoa',
        'YE' => 'Yemen',
        'YT' => 'Mayotte',
        'ZA' => 'South Africa',
        'ZM' => 'Zambia',
        'ZW' => 'Zimbabwe',
    ];
  uploads-Carbon-src-Carbon-PHPStan-Macro.php: |
    <?php

    declare(strict_types=1);

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\PHPStan;

    use Closure;
    use PHPStan\Reflection\Php\BuiltinMethodReflection;
    use PHPStan\TrinaryLogic;
    use ReflectionClass;
    use ReflectionFunction;
    use ReflectionMethod;
    use ReflectionParameter;
    use ReflectionType;
    use stdClass;
    use Throwable;

    final class Macro implements BuiltinMethodReflection
    {
        /**
         * The class name.
         *
         * @var class-string
         */
        private $className;

        /**
         * The method name.
         *
         * @var string
         */
        private $methodName;

        /**
         * The reflection function/method.
         *
         * @var ReflectionFunction|ReflectionMethod
         */
        private $reflectionFunction;

        /**
         * The parameters.
         *
         * @var ReflectionParameter[]
         */
        private $parameters;

        /**
         * The is static.
         *
         * @var bool
         */
        private $static = false;

        /**
         * Macro constructor.
         *
         * @param string $className
         * @phpstan-param class-string $className
         *
         * @param string   $methodName
         * @param callable $macro
         */
        public function __construct(string $className, string $methodName, $macro)
        {
            $this->className = $className;
            $this->methodName = $methodName;
            $this->reflectionFunction = \is_array($macro)
                ? new ReflectionMethod($macro[0], $macro[1])
                : new ReflectionFunction($macro);
            $this->parameters = $this->reflectionFunction->getParameters();

            if ($this->reflectionFunction->isClosure()) {
                try {
                    $closure = $this->reflectionFunction->getClosure();
                    $boundClosure = Closure::bind($closure, new stdClass());
                    $this->static = (!$boundClosure || (new ReflectionFunction($boundClosure))->getClosureThis() === null);
                } catch (Throwable $e) {
                    $this->static = true;
                }
            }
        }

        /**
         * {@inheritdoc}
         */
        public function getDeclaringClass(): ReflectionClass
        {
            return new ReflectionClass($this->className);
        }

        /**
         * {@inheritdoc}
         */
        public function isPrivate(): bool
        {
            return false;
        }

        /**
         * {@inheritdoc}
         */
        public function isPublic(): bool
        {
            return true;
        }

        /**
         * {@inheritdoc}
         */
        public function isFinal(): bool
        {
            return false;
        }

        /**
         * {@inheritdoc}
         */
        public function isInternal(): bool
        {
            return false;
        }

        /**
         * {@inheritdoc}
         */
        public function isAbstract(): bool
        {
            return false;
        }

        /**
         * {@inheritdoc}
         */
        public function isStatic(): bool
        {
            return $this->static;
        }

        /**
         * {@inheritdoc}
         */
        public function getDocComment(): ?string
        {
            return $this->reflectionFunction->getDocComment() ?: null;
        }

        /**
         * {@inheritdoc}
         *
         * @return string|false
         */
        public function getFileName()
        {
            return $this->reflectionFunction->getFileName();
        }

        /**
         * {@inheritdoc}
         */
        public function getName(): string
        {
            return $this->methodName;
        }

        /**
         * {@inheritdoc}
         */
        public function getParameters(): array
        {
            return $this->parameters;
        }

        /**
         * {@inheritdoc}
         */
        public function getReturnType(): ?ReflectionType
        {
            return $this->reflectionFunction->getReturnType();
        }

        /**
         * {@inheritdoc}
         *
         * @return int|false
         */
        public function getStartLine()
        {
            return $this->reflectionFunction->getStartLine();
        }

        /**
         * {@inheritdoc}
         *
         * @return int|false
         */
        public function getEndLine()
        {
            return $this->reflectionFunction->getEndLine();
        }

        /**
         * {@inheritdoc}
         */
        public function isDeprecated(): TrinaryLogic
        {
            return TrinaryLogic::createFromBoolean(
                $this->reflectionFunction->isDeprecated() ||
                preg_match('/@deprecated/i', $this->getDocComment() ?: '')
            );
        }

        /**
         * {@inheritdoc}
         */
        public function isVariadic(): bool
        {
            return $this->reflectionFunction->isVariadic();
        }

        /**
         * {@inheritdoc}
         */
        public function getPrototype(): BuiltinMethodReflection
        {
            return $this;
        }

        /**
         * {@inheritdoc}
         */
        public function getReflection(): ?ReflectionMethod
        {
            return $this->reflectionFunction instanceof ReflectionMethod
                ? $this->reflectionFunction
                : null;
        }
    }
  uploads-Carbon-src-Carbon-PHPStan-MacroExtension.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\PHPStan;

    use PHPStan\Reflection\ClassReflection;
    use PHPStan\Reflection\MethodReflection;
    use PHPStan\Reflection\MethodsClassReflectionExtension;
    use PHPStan\Reflection\Php\PhpMethodReflectionFactory;
    use PHPStan\Type\TypehintHelper;

    /**
     * Class MacroExtension.
     *
     * @codeCoverageIgnore Pure PHPStan wrapper.
     */
    final class MacroExtension implements MethodsClassReflectionExtension
    {
        /**
         * @var PhpMethodReflectionFactory
         */
        protected $methodReflectionFactory;

        /**
         * @var MacroScanner
         */
        protected $scanner;

        /**
         * Extension constructor.
         *
         * @param PhpMethodReflectionFactory $methodReflectionFactory
         */
        public function __construct(PhpMethodReflectionFactory $methodReflectionFactory)
        {
            $this->scanner = new MacroScanner();
            $this->methodReflectionFactory = $methodReflectionFactory;
        }

        /**
         * {@inheritdoc}
         */
        public function hasMethod(ClassReflection $classReflection, string $methodName): bool
        {
            return $this->scanner->hasMethod($classReflection->getName(), $methodName);
        }

        /**
         * {@inheritdoc}
         */
        public function getMethod(ClassReflection $classReflection, string $methodName): MethodReflection
        {
            $builtinMacro = $this->scanner->getMethod($classReflection->getName(), $methodName);

            return $this->methodReflectionFactory->create(
                $classReflection,
                null,
                $builtinMacro,
                $classReflection->getActiveTemplateTypeMap(),
                [],
                TypehintHelper::decideTypeFromReflection($builtinMacro->getReturnType()),
                null,
                null,
                $builtinMacro->isDeprecated()->yes(),
                $builtinMacro->isInternal(),
                $builtinMacro->isFinal(),
                $builtinMacro->getDocComment()
            );
        }
    }
  uploads-Carbon-src-Carbon-PHPStan-MacroScanner.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\PHPStan;

    use Carbon\CarbonInterface;
    use ReflectionClass;
    use ReflectionException;

    final class MacroScanner
    {
        /**
         * Return true if the given pair class-method is a Carbon macro.
         *
         * @param string $className
         * @phpstan-param class-string $className
         *
         * @param string $methodName
         *
         * @return bool
         */
        public function hasMethod(string $className, string $methodName): bool
        {
            return is_a($className, CarbonInterface::class, true) &&
                \is_callable([$className, 'hasMacro']) &&
                $className::hasMacro($methodName);
        }

        /**
         * Return the Macro for a given pair class-method.
         *
         * @param string $className
         * @phpstan-param class-string $className
         *
         * @param string $methodName
         *
         * @throws ReflectionException
         *
         * @return Macro
         */
        public function getMethod(string $className, string $methodName): Macro
        {
            $reflectionClass = new ReflectionClass($className);
            $property = $reflectionClass->getProperty('globalMacros');

            $property->setAccessible(true);
            $macro = $property->getValue()[$methodName];

            return new Macro(
                $className,
                $methodName,
                $macro
            );
        }
    }
  uploads-Carbon-src-Carbon-Traits-Boundaries.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Traits;

    use Carbon\Exceptions\UnknownUnitException;

    /**
     * Trait Boundaries.
     *
     * startOf, endOf and derived method for each unit.
     *
     * Depends on the following properties:
     *
     * @property int $year
     * @property int $month
     * @property int $daysInMonth
     * @property int $quarter
     *
     * Depends on the following methods:
     *
     * @method $this setTime(int $hour, int $minute, int $second = 0, int $microseconds = 0)
     * @method $this setDate(int $year, int $month, int $day)
     * @method $this addMonths(int $value = 1)
     */
    trait Boundaries
    {
        /**
         * Resets the time to 00:00:00 start of day
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfDay();
         * ```
         *
         * @return static
         */
        public function startOfDay()
        {
            return $this->setTime(0, 0, 0, 0);
        }

        /**
         * Resets the time to 23:59:59.999999 end of day
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfDay();
         * ```
         *
         * @return static
         */
        public function endOfDay()
        {
            return $this->setTime(static::HOURS_PER_DAY - 1, static::MINUTES_PER_HOUR - 1, static::SECONDS_PER_MINUTE - 1, static::MICROSECONDS_PER_SECOND - 1);
        }

        /**
         * Resets the date to the first day of the month and the time to 00:00:00
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfMonth();
         * ```
         *
         * @return static
         */
        public function startOfMonth()
        {
            return $this->setDate($this->year, $this->month, 1)->startOfDay();
        }

        /**
         * Resets the date to end of the month and time to 23:59:59.999999
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfMonth();
         * ```
         *
         * @return static
         */
        public function endOfMonth()
        {
            return $this->setDate($this->year, $this->month, $this->daysInMonth)->endOfDay();
        }

        /**
         * Resets the date to the first day of the quarter and the time to 00:00:00
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfQuarter();
         * ```
         *
         * @return static
         */
        public function startOfQuarter()
        {
            $month = ($this->quarter - 1) * static::MONTHS_PER_QUARTER + 1;

            return $this->setDate($this->year, $month, 1)->startOfDay();
        }

        /**
         * Resets the date to end of the quarter and time to 23:59:59.999999
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfQuarter();
         * ```
         *
         * @return static
         */
        public function endOfQuarter()
        {
            return $this->startOfQuarter()->addMonths(static::MONTHS_PER_QUARTER - 1)->endOfMonth();
        }

        /**
         * Resets the date to the first day of the year and the time to 00:00:00
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfYear();
         * ```
         *
         * @return static
         */
        public function startOfYear()
        {
            return $this->setDate($this->year, 1, 1)->startOfDay();
        }

        /**
         * Resets the date to end of the year and time to 23:59:59.999999
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfYear();
         * ```
         *
         * @return static
         */
        public function endOfYear()
        {
            return $this->setDate($this->year, 12, 31)->endOfDay();
        }

        /**
         * Resets the date to the first day of the decade and the time to 00:00:00
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfDecade();
         * ```
         *
         * @return static
         */
        public function startOfDecade()
        {
            $year = $this->year - $this->year % static::YEARS_PER_DECADE;

            return $this->setDate($year, 1, 1)->startOfDay();
        }

        /**
         * Resets the date to end of the decade and time to 23:59:59.999999
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfDecade();
         * ```
         *
         * @return static
         */
        public function endOfDecade()
        {
            $year = $this->year - $this->year % static::YEARS_PER_DECADE + static::YEARS_PER_DECADE - 1;

            return $this->setDate($year, 12, 31)->endOfDay();
        }

        /**
         * Resets the date to the first day of the century and the time to 00:00:00
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfCentury();
         * ```
         *
         * @return static
         */
        public function startOfCentury()
        {
            $year = $this->year - ($this->year - 1) % static::YEARS_PER_CENTURY;

            return $this->setDate($year, 1, 1)->startOfDay();
        }

        /**
         * Resets the date to end of the century and time to 23:59:59.999999
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfCentury();
         * ```
         *
         * @return static
         */
        public function endOfCentury()
        {
            $year = $this->year - 1 - ($this->year - 1) % static::YEARS_PER_CENTURY + static::YEARS_PER_CENTURY;

            return $this->setDate($year, 12, 31)->endOfDay();
        }

        /**
         * Resets the date to the first day of the millennium and the time to 00:00:00
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfMillennium();
         * ```
         *
         * @return static
         */
        public function startOfMillennium()
        {
            $year = $this->year - ($this->year - 1) % static::YEARS_PER_MILLENNIUM;

            return $this->setDate($year, 1, 1)->startOfDay();
        }

        /**
         * Resets the date to end of the millennium and time to 23:59:59.999999
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfMillennium();
         * ```
         *
         * @return static
         */
        public function endOfMillennium()
        {
            $year = $this->year - 1 - ($this->year - 1) % static::YEARS_PER_MILLENNIUM + static::YEARS_PER_MILLENNIUM;

            return $this->setDate($year, 12, 31)->endOfDay();
        }

        /**
         * Resets the date to the first day of week (defined in $weekStartsAt) and the time to 00:00:00
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfWeek() . "\n";
         * echo Carbon::parse('2018-07-25 12:45:16')->locale('ar')->startOfWeek() . "\n";
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfWeek(Carbon::SUNDAY) . "\n";
         * ```
         *
         * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
         *
         * @return static
         */
        public function startOfWeek($weekStartsAt = null)
        {
            return $this->subDays((7 + $this->dayOfWeek - ($weekStartsAt ?? $this->firstWeekDay)) % 7)->startOfDay();
        }

        /**
         * Resets the date to end of week (defined in $weekEndsAt) and time to 23:59:59.999999
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfWeek() . "\n";
         * echo Carbon::parse('2018-07-25 12:45:16')->locale('ar')->endOfWeek() . "\n";
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfWeek(Carbon::SATURDAY) . "\n";
         * ```
         *
         * @param int $weekEndsAt optional start allow you to specify the day of week to use to end the week
         *
         * @return static
         */
        public function endOfWeek($weekEndsAt = null)
        {
            return $this->addDays((7 - $this->dayOfWeek + ($weekEndsAt ?? $this->lastWeekDay)) % 7)->endOfDay();
        }

        /**
         * Modify to start of current hour, minutes and seconds become 0
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfHour();
         * ```
         *
         * @return static
         */
        public function startOfHour()
        {
            return $this->setTime($this->hour, 0, 0, 0);
        }

        /**
         * Modify to end of current hour, minutes and seconds become 59
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfHour();
         * ```
         *
         * @return static
         */
        public function endOfHour()
        {
            return $this->setTime($this->hour, static::MINUTES_PER_HOUR - 1, static::SECONDS_PER_MINUTE - 1, static::MICROSECONDS_PER_SECOND - 1);
        }

        /**
         * Modify to start of current minute, seconds become 0
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->startOfMinute();
         * ```
         *
         * @return static
         */
        public function startOfMinute()
        {
            return $this->setTime($this->hour, $this->minute, 0, 0);
        }

        /**
         * Modify to end of current minute, seconds become 59
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16')->endOfMinute();
         * ```
         *
         * @return static
         */
        public function endOfMinute()
        {
            return $this->setTime($this->hour, $this->minute, static::SECONDS_PER_MINUTE - 1, static::MICROSECONDS_PER_SECOND - 1);
        }

        /**
         * Modify to start of current second, microseconds become 0
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16.334455')
         *   ->startOfSecond()
         *   ->format('H:i:s.u');
         * ```
         *
         * @return static
         */
        public function startOfSecond()
        {
            return $this->setTime($this->hour, $this->minute, $this->second, 0);
        }

        /**
         * Modify to end of current second, microseconds become 999999
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16.334455')
         *   ->endOfSecond()
         *   ->format('H:i:s.u');
         * ```
         *
         * @return static
         */
        public function endOfSecond()
        {
            return $this->setTime($this->hour, $this->minute, $this->second, static::MICROSECONDS_PER_SECOND - 1);
        }

        /**
         * Modify to start of current given unit.
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16.334455')
         *   ->startOf('month')
         *   ->endOf('week', Carbon::FRIDAY);
         * ```
         *
         * @param string            $unit
         * @param array<int, mixed> $params
         *
         * @return static
         */
        public function startOf($unit, ...$params)
        {
            $ucfUnit = ucfirst(static::singularUnit($unit));
            $method = "startOf$ucfUnit";
            if (!method_exists($this, $method)) {
                throw new UnknownUnitException($unit);
            }

            return $this->$method(...$params);
        }

        /**
         * Modify to end of current given unit.
         *
         * @example
         * ```
         * echo Carbon::parse('2018-07-25 12:45:16.334455')
         *   ->startOf('month')
         *   ->endOf('week', Carbon::FRIDAY);
         * ```
         *
         * @param string            $unit
         * @param array<int, mixed> $params
         *
         * @return static
         */
        public function endOf($unit, ...$params)
        {
            $ucfUnit = ucfirst(static::singularUnit($unit));
            $method = "endOf$ucfUnit";
            if (!method_exists($this, $method)) {
                throw new UnknownUnitException($unit);
            }

            return $this->$method(...$params);
        }
    }
  uploads-Carbon-src-Carbon-Traits-Cast.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Traits;

    use Carbon\Exceptions\InvalidCastException;
    use DateTimeInterface;

    /**
     * Trait Cast.
     *
     * Utils to cast into an other class.
     */
    trait Cast
    {
        /**
         * Cast the current instance into the given class.
         *
         * @param string $className The $className::instance() method will be called to cast the current object.
         *
         * @return DateTimeInterface
         */
        public function cast(string $className)
        {
            if (!method_exists($className, 'instance')) {
                if (is_a($className, DateTimeInterface::class, true)) {
                    return new $className($this->rawFormat('Y-m-d H:i:s.u'), $this->getTimezone());
                }

                throw new InvalidCastException("$className has not the instance() method needed to cast the date.");
            }

            return $className::instance($this);
        }
    }
  uploads-Carbon-src-Carbon-Traits-Converter.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Traits;

    use Carbon\Carbon;
    use Carbon\CarbonImmutable;
    use Carbon\CarbonInterface;
    use Carbon\CarbonInterval;
    use Carbon\CarbonPeriod;
    use Carbon\Exceptions\UnitException;
    use Closure;
    use DateTime;
    use DateTimeImmutable;
    use ReturnTypeWillChange;

    /**
     * Trait Converter.
     *
     * Change date into different string formats and types and
     * handle the string cast.
     *
     * Depends on the following methods:
     *
     * @method static copy()
     */
    trait Converter
    {
        /**
         * Format to use for __toString method when type juggling occurs.
         *
         * @var string|Closure|null
         */
        protected static $toStringFormat;

        /**
         * Reset the format used to the default when type juggling a Carbon instance to a string
         *
         * @return void
         */
        public static function resetToStringFormat()
        {
            static::setToStringFormat(null);
        }

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather let Carbon object being casted to string with DEFAULT_TO_STRING_FORMAT, and
         *             use other method or custom format passed to format() method if you need to dump an other string
         *             format.
         *
         * Set the default format used when type juggling a Carbon instance to a string
         *
         * @param string|Closure|null $format
         *
         * @return void
         */
        public static function setToStringFormat($format)
        {
            static::$toStringFormat = $format;
        }

        /**
         * Returns the formatted date string on success or FALSE on failure.
         *
         * @see https://php.net/manual/en/datetime.format.php
         *
         * @param string $format
         *
         * @return string
         */
        #[ReturnTypeWillChange]
        public function format($format)
        {
            $function = $this->localFormatFunction ?: static::$formatFunction;

            if (!$function) {
                return $this->rawFormat($format);
            }

            if (\is_string($function) && method_exists($this, $function)) {
                $function = [$this, $function];
            }

            return $function(...\func_get_args());
        }

        /**
         * @see https://php.net/manual/en/datetime.format.php
         *
         * @param string $format
         *
         * @return string
         */
        public function rawFormat($format)
        {
            return parent::format($format);
        }

        /**
         * Format the instance as a string using the set format
         *
         * @example
         * ```
         * echo Carbon::now(); // Carbon instances can be casted to string
         * ```
         *
         * @return string
         */
        public function __toString()
        {
            $format = $this->localToStringFormat ?? static::$toStringFormat;

            return $format instanceof Closure
                ? $format($this)
                : $this->rawFormat($format ?: (
                    \defined('static::DEFAULT_TO_STRING_FORMAT')
                        ? static::DEFAULT_TO_STRING_FORMAT
                        : CarbonInterface::DEFAULT_TO_STRING_FORMAT
                ));
        }

        /**
         * Format the instance as date
         *
         * @example
         * ```
         * echo Carbon::now()->toDateString();
         * ```
         *
         * @return string
         */
        public function toDateString()
        {
            return $this->rawFormat('Y-m-d');
        }

        /**
         * Format the instance as a readable date
         *
         * @example
         * ```
         * echo Carbon::now()->toFormattedDateString();
         * ```
         *
         * @return string
         */
        public function toFormattedDateString()
        {
            return $this->rawFormat('M j, Y');
        }

        /**
         * Format the instance as time
         *
         * @example
         * ```
         * echo Carbon::now()->toTimeString();
         * ```
         *
         * @param string $unitPrecision
         *
         * @return string
         */
        public function toTimeString($unitPrecision = 'second')
        {
            return $this->rawFormat(static::getTimeFormatByPrecision($unitPrecision));
        }

        /**
         * Format the instance as date and time
         *
         * @example
         * ```
         * echo Carbon::now()->toDateTimeString();
         * ```
         *
         * @param string $unitPrecision
         *
         * @return string
         */
        public function toDateTimeString($unitPrecision = 'second')
        {
            return $this->rawFormat('Y-m-d '.static::getTimeFormatByPrecision($unitPrecision));
        }

        /**
         * Return a format from H:i to H:i:s.u according to given unit precision.
         *
         * @param string $unitPrecision "minute", "second", "millisecond" or "microsecond"
         *
         * @return string
         */
        public static function getTimeFormatByPrecision($unitPrecision)
        {
            switch (static::singularUnit($unitPrecision)) {
                case 'minute':
                    return 'H:i';
                case 'second':
                    return 'H:i:s';
                case 'm':
                case 'millisecond':
                    return 'H:i:s.v';
                case 'µ':
                case 'microsecond':
                    return 'H:i:s.u';
            }

            throw new UnitException('Precision unit expected among: minute, second, millisecond and microsecond.');
        }

        /**
         * Format the instance as date and time T-separated with no timezone
         *
         * @example
         * ```
         * echo Carbon::now()->toDateTimeLocalString();
         * echo "\n";
         * echo Carbon::now()->toDateTimeLocalString('minute'); // You can specify precision among: minute, second, millisecond and microsecond
         * ```
         *
         * @param string $unitPrecision
         *
         * @return string
         */
        public function toDateTimeLocalString($unitPrecision = 'second')
        {
            return $this->rawFormat('Y-m-d\T'.static::getTimeFormatByPrecision($unitPrecision));
        }

        /**
         * Format the instance with day, date and time
         *
         * @example
         * ```
         * echo Carbon::now()->toDayDateTimeString();
         * ```
         *
         * @return string
         */
        public function toDayDateTimeString()
        {
            return $this->rawFormat('D, M j, Y g:i A');
        }

        /**
         * Format the instance as ATOM
         *
         * @example
         * ```
         * echo Carbon::now()->toAtomString();
         * ```
         *
         * @return string
         */
        public function toAtomString()
        {
            return $this->rawFormat(DateTime::ATOM);
        }

        /**
         * Format the instance as COOKIE
         *
         * @example
         * ```
         * echo Carbon::now()->toCookieString();
         * ```
         *
         * @return string
         */
        public function toCookieString()
        {
            return $this->rawFormat(DateTime::COOKIE);
        }

        /**
         * Format the instance as ISO8601
         *
         * @example
         * ```
         * echo Carbon::now()->toIso8601String();
         * ```
         *
         * @return string
         */
        public function toIso8601String()
        {
            return $this->toAtomString();
        }

        /**
         * Format the instance as RFC822
         *
         * @example
         * ```
         * echo Carbon::now()->toRfc822String();
         * ```
         *
         * @return string
         */
        public function toRfc822String()
        {
            return $this->rawFormat(DateTime::RFC822);
        }

        /**
         * Convert the instance to UTC and return as Zulu ISO8601
         *
         * @example
         * ```
         * echo Carbon::now()->toIso8601ZuluString();
         * ```
         *
         * @param string $unitPrecision
         *
         * @return string
         */
        public function toIso8601ZuluString($unitPrecision = 'second')
        {
            return $this->avoidMutation()
                ->utc()
                ->rawFormat('Y-m-d\T'.static::getTimeFormatByPrecision($unitPrecision).'\Z');
        }

        /**
         * Format the instance as RFC850
         *
         * @example
         * ```
         * echo Carbon::now()->toRfc850String();
         * ```
         *
         * @return string
         */
        public function toRfc850String()
        {
            return $this->rawFormat(DateTime::RFC850);
        }

        /**
         * Format the instance as RFC1036
         *
         * @example
         * ```
         * echo Carbon::now()->toRfc1036String();
         * ```
         *
         * @return string
         */
        public function toRfc1036String()
        {
            return $this->rawFormat(DateTime::RFC1036);
        }

        /**
         * Format the instance as RFC1123
         *
         * @example
         * ```
         * echo Carbon::now()->toRfc1123String();
         * ```
         *
         * @return string
         */
        public function toRfc1123String()
        {
            return $this->rawFormat(DateTime::RFC1123);
        }

        /**
         * Format the instance as RFC2822
         *
         * @example
         * ```
         * echo Carbon::now()->toRfc2822String();
         * ```
         *
         * @return string
         */
        public function toRfc2822String()
        {
            return $this->rawFormat(DateTime::RFC2822);
        }

        /**
         * Format the instance as RFC3339
         *
         * @param bool $extended
         *
         * @example
         * ```
         * echo Carbon::now()->toRfc3339String() . "\n";
         * echo Carbon::now()->toRfc3339String(true) . "\n";
         * ```
         *
         * @return string
         */
        public function toRfc3339String($extended = false)
        {
            $format = DateTime::RFC3339;
            if ($extended) {
                $format = DateTime::RFC3339_EXTENDED;
            }

            return $this->rawFormat($format);
        }

        /**
         * Format the instance as RSS
         *
         * @example
         * ```
         * echo Carbon::now()->toRssString();
         * ```
         *
         * @return string
         */
        public function toRssString()
        {
            return $this->rawFormat(DateTime::RSS);
        }

        /**
         * Format the instance as W3C
         *
         * @example
         * ```
         * echo Carbon::now()->toW3cString();
         * ```
         *
         * @return string
         */
        public function toW3cString()
        {
            return $this->rawFormat(DateTime::W3C);
        }

        /**
         * Format the instance as RFC7231
         *
         * @example
         * ```
         * echo Carbon::now()->toRfc7231String();
         * ```
         *
         * @return string
         */
        public function toRfc7231String()
        {
            return $this->avoidMutation()
                ->setTimezone('GMT')
                ->rawFormat(\defined('static::RFC7231_FORMAT') ? static::RFC7231_FORMAT : CarbonInterface::RFC7231_FORMAT);
        }

        /**
         * Get default array representation.
         *
         * @example
         * ```
         * var_dump(Carbon::now()->toArray());
         * ```
         *
         * @return array
         */
        public function toArray()
        {
            return [
                'year' => $this->year,
                'month' => $this->month,
                'day' => $this->day,
                'dayOfWeek' => $this->dayOfWeek,
                'dayOfYear' => $this->dayOfYear,
                'hour' => $this->hour,
                'minute' => $this->minute,
                'second' => $this->second,
                'micro' => $this->micro,
                'timestamp' => $this->timestamp,
                'formatted' => $this->rawFormat(\defined('static::DEFAULT_TO_STRING_FORMAT') ? static::DEFAULT_TO_STRING_FORMAT : CarbonInterface::DEFAULT_TO_STRING_FORMAT),
                'timezone' => $this->timezone,
            ];
        }

        /**
         * Get default object representation.
         *
         * @example
         * ```
         * var_dump(Carbon::now()->toObject());
         * ```
         *
         * @return object
         */
        public function toObject()
        {
            return (object) $this->toArray();
        }

        /**
         * Returns english human readable complete date string.
         *
         * @example
         * ```
         * echo Carbon::now()->toString();
         * ```
         *
         * @return string
         */
        public function toString()
        {
            return $this->avoidMutation()->locale('en')->isoFormat('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
        }

        /**
         * Return the ISO-8601 string (ex: 1977-04-22T06:00:00Z, if $keepOffset truthy, offset will be kept:
         * 1977-04-22T01:00:00-05:00).
         *
         * @example
         * ```
         * echo Carbon::now('America/Toronto')->toISOString() . "\n";
         * echo Carbon::now('America/Toronto')->toISOString(true) . "\n";
         * ```
         *
         * @param bool $keepOffset Pass true to keep the date offset. Else forced to UTC.
         *
         * @return null|string
         */
        public function toISOString($keepOffset = false)
        {
            if (!$this->isValid()) {
                return null;
            }

            $yearFormat = $this->year < 0 || $this->year > 9999 ? 'YYYYYY' : 'YYYY';
            $tzFormat = $keepOffset ? 'Z' : '[Z]';
            $date = $keepOffset ? $this : $this->avoidMutation()->utc();

            return $date->isoFormat("$yearFormat-MM-DD[T]HH:mm:ss.SSSSSS$tzFormat");
        }

        /**
         * Return the ISO-8601 string (ex: 1977-04-22T06:00:00Z) with UTC timezone.
         *
         * @example
         * ```
         * echo Carbon::now('America/Toronto')->toJSON();
         * ```
         *
         * @return null|string
         */
        public function toJSON()
        {
            return $this->toISOString();
        }

        /**
         * Return native DateTime PHP object matching the current instance.
         *
         * @example
         * ```
         * var_dump(Carbon::now()->toDateTime());
         * ```
         *
         * @return DateTime
         */
        public function toDateTime()
        {
            return new DateTime($this->rawFormat('Y-m-d H:i:s.u'), $this->getTimezone());
        }

        /**
         * Return native toDateTimeImmutable PHP object matching the current instance.
         *
         * @example
         * ```
         * var_dump(Carbon::now()->toDateTimeImmutable());
         * ```
         *
         * @return DateTimeImmutable
         */
        public function toDateTimeImmutable()
        {
            return new DateTimeImmutable($this->rawFormat('Y-m-d H:i:s.u'), $this->getTimezone());
        }

        /**
         * @alias toDateTime
         *
         * Return native DateTime PHP object matching the current instance.
         *
         * @example
         * ```
         * var_dump(Carbon::now()->toDate());
         * ```
         *
         * @return DateTime
         */
        public function toDate()
        {
            return $this->toDateTime();
        }

        /**
         * Create a iterable CarbonPeriod object from current date to a given end date (and optional interval).
         *
         * @param \DateTimeInterface|Carbon|CarbonImmutable|int|null $end      period end date or recurrences count if int
         * @param int|\DateInterval|string|null                      $interval period default interval or number of the given $unit
         * @param string|null                                        $unit     if specified, $interval must be an integer
         *
         * @return CarbonPeriod
         */
        public function toPeriod($end = null, $interval = null, $unit = null)
        {
            if ($unit) {
                $interval = CarbonInterval::make("$interval ".static::pluralUnit($unit));
            }

            $period = (new CarbonPeriod())->setDateClass(static::class)->setStartDate($this);

            if ($interval) {
                $period->setDateInterval($interval);
            }

            if (\is_int($end) || \is_string($end) && ctype_digit($end)) {
                $period->setRecurrences($end);
            } elseif ($end) {
                $period->setEndDate($end);
            }

            return $period;
        }

        /**
         * Create a iterable CarbonPeriod object from current date to a given end date (and optional interval).
         *
         * @param \DateTimeInterface|Carbon|CarbonImmutable|null $end      period end date
         * @param int|\DateInterval|string|null                  $interval period default interval or number of the given $unit
         * @param string|null                                    $unit     if specified, $interval must be an integer
         *
         * @return CarbonPeriod
         */
        public function range($end = null, $interval = null, $unit = null)
        {
            return $this->toPeriod($end, $interval, $unit);
        }
    }
  uploads-Carbon-src-Carbon-Traits-Creator.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Traits;

    use Carbon\Carbon;
    use Carbon\CarbonImmutable;
    use Carbon\CarbonInterface;
    use Carbon\Exceptions\InvalidDateException;
    use Carbon\Exceptions\InvalidFormatException;
    use Carbon\Exceptions\OutOfRangeException;
    use Carbon\Translator;
    use Closure;
    use DateTimeInterface;
    use DateTimeZone;
    use Exception;
    use ReturnTypeWillChange;

    /**
     * Trait Creator.
     *
     * Static creators.
     *
     * Depends on the following methods:
     *
     * @method static Carbon|CarbonImmutable getTestNow()
     */
    trait Creator
    {
        use ObjectInitialisation;

        /**
         * The errors that can occur.
         *
         * @var array
         */
        protected static $lastErrors;

        /**
         * Create a new Carbon instance.
         *
         * Please see the testing aids section (specifically static::setTestNow())
         * for more on the possibility of this constructor returning a test instance.
         *
         * @param DateTimeInterface|string|null $time
         * @param DateTimeZone|string|null      $tz
         *
         * @throws InvalidFormatException
         */
        public function __construct($time = null, $tz = null)
        {
            if ($time instanceof DateTimeInterface) {
                $time = $this->constructTimezoneFromDateTime($time, $tz)->format('Y-m-d H:i:s.u');
            }

            if (is_numeric($time) && (!\is_string($time) || !preg_match('/^\d{1,14}$/', $time))) {
                $time = static::createFromTimestampUTC($time)->format('Y-m-d\TH:i:s.uP');
            }

            // If the class has a test now set and we are trying to create a now()
            // instance then override as required
            $isNow = empty($time) || $time === 'now';

            if (method_exists(static::class, 'hasTestNow') &&
                method_exists(static::class, 'getTestNow') &&
                static::hasTestNow() &&
                ($isNow || static::hasRelativeKeywords($time))
            ) {
                static::mockConstructorParameters($time, $tz);
            }

            // Work-around for PHP bug https://bugs.php.net/bug.php?id=67127
            if (!str_contains((string) .1, '.')) {
                $locale = setlocale(LC_NUMERIC, '0');
                setlocale(LC_NUMERIC, 'C');
            }

            try {
                parent::__construct($time ?: 'now', static::safeCreateDateTimeZone($tz) ?: null);
            } catch (Exception $exception) {
                throw new InvalidFormatException($exception->getMessage(), 0, $exception);
            }

            $this->constructedObjectId = spl_object_hash($this);

            if (isset($locale)) {
                setlocale(LC_NUMERIC, $locale);
            }

            static::setLastErrors(parent::getLastErrors());
        }

        /**
         * Get timezone from a datetime instance.
         *
         * @param DateTimeInterface        $date
         * @param DateTimeZone|string|null $tz
         *
         * @return DateTimeInterface
         */
        private function constructTimezoneFromDateTime(DateTimeInterface $date, &$tz)
        {
            if ($tz !== null) {
                $safeTz = static::safeCreateDateTimeZone($tz);

                if ($safeTz) {
                    return $date->setTimezone($safeTz);
                }

                return $date;
            }

            $tz = $date->getTimezone();

            return $date;
        }

        /**
         * Update constructedObjectId on cloned.
         */
        public function __clone()
        {
            $this->constructedObjectId = spl_object_hash($this);
        }

        /**
         * Create a Carbon instance from a DateTime one.
         *
         * @param DateTimeInterface $date
         *
         * @return static
         */
        public static function instance($date)
        {
            if ($date instanceof static) {
                return clone $date;
            }

            static::expectDateTime($date);

            $instance = new static($date->format('Y-m-d H:i:s.u'), $date->getTimezone());

            if ($date instanceof CarbonInterface || $date instanceof Options) {
                $settings = $date->getSettings();

                if (!$date->hasLocalTranslator()) {
                    unset($settings['locale']);
                }

                $instance->settings($settings);
            }

            return $instance;
        }

        /**
         * Create a carbon instance from a string.
         *
         * This is an alias for the constructor that allows better fluent syntax
         * as it allows you to do Carbon::parse('Monday next week')->fn() rather
         * than (new Carbon('Monday next week'))->fn().
         *
         * @param string|DateTimeInterface|null $time
         * @param DateTimeZone|string|null      $tz
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function rawParse($time = null, $tz = null)
        {
            if ($time instanceof DateTimeInterface) {
                return static::instance($time);
            }

            try {
                return new static($time, $tz);
            } catch (Exception $exception) {
                $date = @static::now($tz)->change($time);

                if (!$date) {
                    throw new InvalidFormatException("Could not parse '$time': ".$exception->getMessage(), 0, $exception);
                }

                return $date;
            }
        }

        /**
         * Create a carbon instance from a string.
         *
         * This is an alias for the constructor that allows better fluent syntax
         * as it allows you to do Carbon::parse('Monday next week')->fn() rather
         * than (new Carbon('Monday next week'))->fn().
         *
         * @param string|DateTimeInterface|null $time
         * @param DateTimeZone|string|null      $tz
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function parse($time = null, $tz = null)
        {
            $function = static::$parseFunction;

            if (!$function) {
                return static::rawParse($time, $tz);
            }

            if (\is_string($function) && method_exists(static::class, $function)) {
                $function = [static::class, $function];
            }

            return $function(...\func_get_args());
        }

        /**
         * Create a carbon instance from a localized string (in French, Japanese, Arabic, etc.).
         *
         * @param string                   $time   date/time string in the given language (may also contain English).
         * @param string|null              $locale if locale is null or not specified, current global locale will be
         *                                         used instead.
         * @param DateTimeZone|string|null $tz     optional timezone for the new instance.
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function parseFromLocale($time, $locale = null, $tz = null)
        {
            return static::rawParse(static::translateTimeString($time, $locale, 'en'), $tz);
        }

        /**
         * Get a Carbon instance for the current date and time.
         *
         * @param DateTimeZone|string|null $tz
         *
         * @return static
         */
        public static function now($tz = null)
        {
            return new static(null, $tz);
        }

        /**
         * Create a Carbon instance for today.
         *
         * @param DateTimeZone|string|null $tz
         *
         * @return static
         */
        public static function today($tz = null)
        {
            return static::rawParse('today', $tz);
        }

        /**
         * Create a Carbon instance for tomorrow.
         *
         * @param DateTimeZone|string|null $tz
         *
         * @return static
         */
        public static function tomorrow($tz = null)
        {
            return static::rawParse('tomorrow', $tz);
        }

        /**
         * Create a Carbon instance for yesterday.
         *
         * @param DateTimeZone|string|null $tz
         *
         * @return static
         */
        public static function yesterday($tz = null)
        {
            return static::rawParse('yesterday', $tz);
        }

        /**
         * Create a Carbon instance for the greatest supported date.
         *
         * @return static
         */
        public static function maxValue()
        {
            if (self::$PHPIntSize === 4) {
                // 32 bit
                return static::createFromTimestamp(PHP_INT_MAX); // @codeCoverageIgnore
            }

            // 64 bit
            return static::create(9999, 12, 31, 23, 59, 59);
        }

        /**
         * Create a Carbon instance for the lowest supported date.
         *
         * @return static
         */
        public static function minValue()
        {
            if (self::$PHPIntSize === 4) {
                // 32 bit
                return static::createFromTimestamp(~PHP_INT_MAX); // @codeCoverageIgnore
            }

            // 64 bit
            return static::create(1, 1, 1, 0, 0, 0);
        }

        private static function assertBetween($unit, $value, $min, $max)
        {
            if (static::isStrictModeEnabled() && ($value < $min || $value > $max)) {
                throw new OutOfRangeException($unit, $min, $max, $value);
            }
        }

        private static function createNowInstance($tz)
        {
            if (!static::hasTestNow()) {
                return static::now($tz);
            }

            $now = static::getTestNow();

            if ($now instanceof Closure) {
                return $now(static::now($tz));
            }

            return $now->avoidMutation()->tz($tz);
        }

        /**
         * Create a new Carbon instance from a specific date and time.
         *
         * If any of $year, $month or $day are set to null their now() values will
         * be used.
         *
         * If $hour is null it will be set to its now() value and the default
         * values for $minute and $second will be their now() values.
         *
         * If $hour is not null then the default values for $minute and $second
         * will be 0.
         *
         * @param int|null                 $year
         * @param int|null                 $month
         * @param int|null                 $day
         * @param int|null                 $hour
         * @param int|null                 $minute
         * @param int|null                 $second
         * @param DateTimeZone|string|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static|false
         */
        public static function create($year = 0, $month = 1, $day = 1, $hour = 0, $minute = 0, $second = 0, $tz = null)
        {
            if (\is_string($year) && !is_numeric($year) || $year instanceof DateTimeInterface) {
                return static::parse($year, $tz ?: (\is_string($month) || $month instanceof DateTimeZone ? $month : null));
            }

            $defaults = null;
            $getDefault = function ($unit) use ($tz, &$defaults) {
                if ($defaults === null) {
                    $now = self::createNowInstance($tz);

                    $defaults = array_combine([
                        'year',
                        'month',
                        'day',
                        'hour',
                        'minute',
                        'second',
                    ], explode('-', $now->rawFormat('Y-n-j-G-i-s.u')));
                }

                return $defaults[$unit];
            };

            $year = $year ?? $getDefault('year');
            $month = $month ?? $getDefault('month');
            $day = $day ?? $getDefault('day');
            $hour = $hour ?? $getDefault('hour');
            $minute = $minute ?? $getDefault('minute');
            $second = (float) ($second ?? $getDefault('second'));

            self::assertBetween('month', $month, 0, 99);
            self::assertBetween('day', $day, 0, 99);
            self::assertBetween('hour', $hour, 0, 99);
            self::assertBetween('minute', $minute, 0, 99);
            self::assertBetween('second', $second, 0, 99);

            $fixYear = null;

            if ($year < 0) {
                $fixYear = $year;
                $year = 0;
            } elseif ($year > 9999) {
                $fixYear = $year - 9999;
                $year = 9999;
            }

            $second = ($second < 10 ? '0' : '').number_format($second, 6);
            $instance = static::rawCreateFromFormat('!Y-n-j G:i:s.u', sprintf('%s-%s-%s %s:%02s:%02s', $year, $month, $day, $hour, $minute, $second), $tz);

            if ($fixYear !== null) {
                $instance = $instance->addYears($fixYear);
            }

            return $instance;
        }

        /**
         * Create a new safe Carbon instance from a specific date and time.
         *
         * If any of $year, $month or $day are set to null their now() values will
         * be used.
         *
         * If $hour is null it will be set to its now() value and the default
         * values for $minute and $second will be their now() values.
         *
         * If $hour is not null then the default values for $minute and $second
         * will be 0.
         *
         * If one of the set values is not valid, an InvalidDateException
         * will be thrown.
         *
         * @param int|null                 $year
         * @param int|null                 $month
         * @param int|null                 $day
         * @param int|null                 $hour
         * @param int|null                 $minute
         * @param int|null                 $second
         * @param DateTimeZone|string|null $tz
         *
         * @throws InvalidDateException
         *
         * @return static|false
         */
        public static function createSafe($year = null, $month = null, $day = null, $hour = null, $minute = null, $second = null, $tz = null)
        {
            $fields = static::getRangesByUnit();

            foreach ($fields as $field => $range) {
                if ($$field !== null && (!\is_int($$field) || $$field < $range[0] || $$field > $range[1])) {
                    if (static::isStrictModeEnabled()) {
                        throw new InvalidDateException($field, $$field);
                    }

                    return false;
                }
            }

            $instance = static::create($year, $month, $day, $hour, $minute, $second, $tz);

            foreach (array_reverse($fields) as $field => $range) {
                if ($$field !== null && (!\is_int($$field) || $$field !== $instance->$field)) {
                    if (static::isStrictModeEnabled()) {
                        throw new InvalidDateException($field, $$field);
                    }

                    return false;
                }
            }

            return $instance;
        }

        /**
         * Create a new Carbon instance from a specific date and time using strict validation.
         *
         * @see create()
         *
         * @param int|null                 $year
         * @param int|null                 $month
         * @param int|null                 $day
         * @param int|null                 $hour
         * @param int|null                 $minute
         * @param int|null                 $second
         * @param DateTimeZone|string|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function createStrict(?int $year = 0, ?int $month = 1, ?int $day = 1, ?int $hour = 0, ?int $minute = 0, ?int $second = 0, $tz = null): self
        {
            $initialStrictMode = static::isStrictModeEnabled();
            static::useStrictMode(true);

            try {
                $date = static::create($year, $month, $day, $hour, $minute, $second, $tz);
            } finally {
                static::useStrictMode($initialStrictMode);
            }

            return $date;
        }

        /**
         * Create a Carbon instance from just a date. The time portion is set to now.
         *
         * @param int|null                 $year
         * @param int|null                 $month
         * @param int|null                 $day
         * @param DateTimeZone|string|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function createFromDate($year = null, $month = null, $day = null, $tz = null)
        {
            return static::create($year, $month, $day, null, null, null, $tz);
        }

        /**
         * Create a Carbon instance from just a date. The time portion is set to midnight.
         *
         * @param int|null                 $year
         * @param int|null                 $month
         * @param int|null                 $day
         * @param DateTimeZone|string|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function createMidnightDate($year = null, $month = null, $day = null, $tz = null)
        {
            return static::create($year, $month, $day, 0, 0, 0, $tz);
        }

        /**
         * Create a Carbon instance from just a time. The date portion is set to today.
         *
         * @param int|null                 $hour
         * @param int|null                 $minute
         * @param int|null                 $second
         * @param DateTimeZone|string|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function createFromTime($hour = 0, $minute = 0, $second = 0, $tz = null)
        {
            return static::create(null, null, null, $hour, $minute, $second, $tz);
        }

        /**
         * Create a Carbon instance from a time string. The date portion is set to today.
         *
         * @param string                   $time
         * @param DateTimeZone|string|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static
         */
        public static function createFromTimeString($time, $tz = null)
        {
            return static::today($tz)->setTimeFromTimeString($time);
        }

        /**
         * @param string                         $format     Datetime format
         * @param string                         $time
         * @param DateTimeZone|string|false|null $originalTz
         *
         * @return DateTimeInterface|false
         */
        private static function createFromFormatAndTimezone($format, $time, $originalTz)
        {
            // Work-around for https://bugs.php.net/bug.php?id=75577
            // @codeCoverageIgnoreStart
            if (version_compare(PHP_VERSION, '7.3.0-dev', '<')) {
                $format = str_replace('.v', '.u', $format);
            }
            // @codeCoverageIgnoreEnd

            if ($originalTz === null) {
                return parent::createFromFormat($format, (string) $time);
            }

            $tz = \is_int($originalTz)
                ? @timezone_name_from_abbr('', (int) ($originalTz * static::MINUTES_PER_HOUR * static::SECONDS_PER_MINUTE), 1)
                : $originalTz;

            $tz = static::safeCreateDateTimeZone($tz, $originalTz);

            if ($tz === false) {
                return false;
            }

            return parent::createFromFormat($format, (string) $time, $tz);
        }

        /**
         * Create a Carbon instance from a specific format.
         *
         * @param string                         $format Datetime format
         * @param string                         $time
         * @param DateTimeZone|string|false|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static|false
         */
        public static function rawCreateFromFormat($format, $time, $tz = null)
        {
            // Work-around for https://bugs.php.net/bug.php?id=80141
            $format = preg_replace('/(?<!\\\\)((?:\\\\{2})*)c/', '$1Y-m-d\TH:i:sP', $format);

            if (preg_match('/(?<!\\\\)(?:\\\\{2})*(a|A)/', $format, $aMatches, PREG_OFFSET_CAPTURE) &&
                preg_match('/(?<!\\\\)(?:\\\\{2})*(h|g|H|G)/', $format, $hMatches, PREG_OFFSET_CAPTURE) &&
                $aMatches[1][1] < $hMatches[1][1] &&
                preg_match('/(am|pm|AM|PM)/', $time)
            ) {
                $format = preg_replace('/^(.*)(?<!\\\\)((?:\\\\{2})*)(a|A)(.*)$/U', '$1$2$4 $3', $format);
                $time = preg_replace('/^(.*)(am|pm|AM|PM)(.*)$/U', '$1$3 $2', $time);
            }

            // First attempt to create an instance, so that error messages are based on the unmodified format.
            $date = self::createFromFormatAndTimezone($format, $time, $tz);
            $lastErrors = parent::getLastErrors();
            /** @var \Carbon\CarbonImmutable|\Carbon\Carbon|null $mock */
            $mock = static::getMockedTestNow($tz);

            if ($mock && $date instanceof DateTimeInterface) {
                // Set timezone from mock if custom timezone was neither given directly nor as a part of format.
                // First let's skip the part that will be ignored by the parser.
                $nonEscaped = '(?<!\\\\)(\\\\{2})*';

                $nonIgnored = preg_replace("/^.*{$nonEscaped}!/s", '', $format);

                if ($tz === null && !preg_match("/{$nonEscaped}[eOPT]/", $nonIgnored)) {
                    $tz = clone $mock->getTimezone();
                }

                // Set microseconds to zero to match behavior of DateTime::createFromFormat()
                // See https://bugs.php.net/bug.php?id=74332
                $mock = $mock->copy()->microsecond(0);

                // Prepend mock datetime only if the format does not contain non escaped unix epoch reset flag.
                if (!preg_match("/{$nonEscaped}[!|]/", $format)) {
                    $format = static::MOCK_DATETIME_FORMAT.' '.$format;
                    $time = ($mock instanceof self ? $mock->rawFormat(static::MOCK_DATETIME_FORMAT) : $mock->format(static::MOCK_DATETIME_FORMAT)).' '.$time;
                }

                // Regenerate date from the modified format to base result on the mocked instance instead of now.
                $date = self::createFromFormatAndTimezone($format, $time, $tz);
            }

            if ($date instanceof DateTimeInterface) {
                $instance = static::instance($date);
                $instance::setLastErrors($lastErrors);

                return $instance;
            }

            if (static::isStrictModeEnabled()) {
                throw new InvalidFormatException(implode(PHP_EOL, $lastErrors['errors']));
            }

            return false;
        }

        /**
         * Create a Carbon instance from a specific format.
         *
         * @param string                         $format Datetime format
         * @param string                         $time
         * @param DateTimeZone|string|false|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static|false
         */
        #[ReturnTypeWillChange]
        public static function createFromFormat($format, $time, $tz = null)
        {
            $function = static::$createFromFormatFunction;

            if (!$function) {
                return static::rawCreateFromFormat($format, $time, $tz);
            }

            if (\is_string($function) && method_exists(static::class, $function)) {
                $function = [static::class, $function];
            }

            return $function(...\func_get_args());
        }

        /**
         * Create a Carbon instance from a specific ISO format (same replacements as ->isoFormat()).
         *
         * @param string                                             $format     Datetime format
         * @param string                                             $time
         * @param DateTimeZone|string|false|null                     $tz         optional timezone
         * @param string|null                                        $locale     locale to be used for LTS, LT, LL, LLL, etc. macro-formats (en by fault, unneeded if no such macro-format in use)
         * @param \Symfony\Component\Translation\TranslatorInterface $translator optional custom translator to use for macro-formats
         *
         * @throws InvalidFormatException
         *
         * @return static|false
         */
        public static function createFromIsoFormat($format, $time, $tz = null, $locale = 'en', $translator = null)
        {
            $format = preg_replace_callback('/(?<!\\\\)(\\\\{2})*(LTS|LT|[Ll]{1,4})/', function ($match) use ($locale, $translator) {
                [$code] = $match;

                static $formats = null;

                if ($formats === null) {
                    $translator = $translator ?: Translator::get($locale);

                    $formats = [
                        'LT' => static::getTranslationMessageWith($translator, 'formats.LT', $locale, 'h:mm A'),
                        'LTS' => static::getTranslationMessageWith($translator, 'formats.LTS', $locale, 'h:mm:ss A'),
                        'L' => static::getTranslationMessageWith($translator, 'formats.L', $locale, 'MM/DD/YYYY'),
                        'LL' => static::getTranslationMessageWith($translator, 'formats.LL', $locale, 'MMMM D, YYYY'),
                        'LLL' => static::getTranslationMessageWith($translator, 'formats.LLL', $locale, 'MMMM D, YYYY h:mm A'),
                        'LLLL' => static::getTranslationMessageWith($translator, 'formats.LLLL', $locale, 'dddd, MMMM D, YYYY h:mm A'),
                    ];
                }

                return $formats[$code] ?? preg_replace_callback(
                    '/MMMM|MM|DD|dddd/',
                    function ($code) {
                        return mb_substr($code[0], 1);
                    },
                    $formats[strtoupper($code)] ?? ''
                );
            }, $format);

            $format = preg_replace_callback('/(?<!\\\\)(\\\\{2})*('.CarbonInterface::ISO_FORMAT_REGEXP.'|[A-Za-z])/', function ($match) {
                [$code] = $match;

                static $replacements = null;

                if ($replacements === null) {
                    $replacements = [
                        'OD' => 'd',
                        'OM' => 'M',
                        'OY' => 'Y',
                        'OH' => 'G',
                        'Oh' => 'g',
                        'Om' => 'i',
                        'Os' => 's',
                        'D' => 'd',
                        'DD' => 'd',
                        'Do' => 'd',
                        'd' => '!',
                        'dd' => '!',
                        'ddd' => 'D',
                        'dddd' => 'D',
                        'DDD' => 'z',
                        'DDDD' => 'z',
                        'DDDo' => 'z',
                        'e' => '!',
                        'E' => '!',
                        'H' => 'G',
                        'HH' => 'H',
                        'h' => 'g',
                        'hh' => 'h',
                        'k' => 'G',
                        'kk' => 'G',
                        'hmm' => 'gi',
                        'hmmss' => 'gis',
                        'Hmm' => 'Gi',
                        'Hmmss' => 'Gis',
                        'm' => 'i',
                        'mm' => 'i',
                        'a' => 'a',
                        'A' => 'a',
                        's' => 's',
                        'ss' => 's',
                        'S' => '*',
                        'SS' => '*',
                        'SSS' => '*',
                        'SSSS' => '*',
                        'SSSSS' => '*',
                        'SSSSSS' => 'u',
                        'SSSSSSS' => 'u*',
                        'SSSSSSSS' => 'u*',
                        'SSSSSSSSS' => 'u*',
                        'M' => 'm',
                        'MM' => 'm',
                        'MMM' => 'M',
                        'MMMM' => 'M',
                        'Mo' => 'm',
                        'Q' => '!',
                        'Qo' => '!',
                        'G' => '!',
                        'GG' => '!',
                        'GGG' => '!',
                        'GGGG' => '!',
                        'GGGGG' => '!',
                        'g' => '!',
                        'gg' => '!',
                        'ggg' => '!',
                        'gggg' => '!',
                        'ggggg' => '!',
                        'W' => '!',
                        'WW' => '!',
                        'Wo' => '!',
                        'w' => '!',
                        'ww' => '!',
                        'wo' => '!',
                        'x' => 'U???',
                        'X' => 'U',
                        'Y' => 'Y',
                        'YY' => 'y',
                        'YYYY' => 'Y',
                        'YYYYY' => 'Y',
                        'YYYYYY' => 'Y',
                        'z' => 'e',
                        'zz' => 'e',
                        'Z' => 'e',
                        'ZZ' => 'e',
                    ];
                }

                $format = $replacements[$code] ?? '?';

                if ($format === '!') {
                    throw new InvalidFormatException("Format $code not supported for creation.");
                }

                return $format;
            }, $format);

            return static::rawCreateFromFormat($format, $time, $tz);
        }

        /**
         * Create a Carbon instance from a specific format and a string in a given language.
         *
         * @param string                         $format Datetime format
         * @param string                         $locale
         * @param string                         $time
         * @param DateTimeZone|string|false|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static|false
         */
        public static function createFromLocaleFormat($format, $locale, $time, $tz = null)
        {
            return static::rawCreateFromFormat($format, static::translateTimeString($time, $locale, 'en'), $tz);
        }

        /**
         * Create a Carbon instance from a specific ISO format and a string in a given language.
         *
         * @param string                         $format Datetime ISO format
         * @param string                         $locale
         * @param string                         $time
         * @param DateTimeZone|string|false|null $tz
         *
         * @throws InvalidFormatException
         *
         * @return static|false
         */
        public static function createFromLocaleIsoFormat($format, $locale, $time, $tz = null)
        {
            $time = static::translateTimeString($time, $locale, 'en', CarbonInterface::TRANSLATE_MONTHS | CarbonInterface::TRANSLATE_DAYS | CarbonInterface::TRANSLATE_MERIDIEM);

            return static::createFromIsoFormat($format, $time, $tz, $locale);
        }

        /**
         * Make a Carbon instance from given variable if possible.
         *
         * Always return a new instance. Parse only strings and only these likely to be dates (skip intervals
         * and recurrences). Throw an exception for invalid format, but otherwise return null.
         *
         * @param mixed $var
         *
         * @throws InvalidFormatException
         *
         * @return static|null
         */
        public static function make($var)
        {
            if ($var instanceof DateTimeInterface) {
                return static::instance($var);
            }

            $date = null;

            if (\is_string($var)) {
                $var = trim($var);

                if (!preg_match('/^P[0-9T]/', $var) &&
                    !preg_match('/^R[0-9]/', $var) &&
                    preg_match('/[a-z0-9]/i', $var)
                ) {
                    $date = static::parse($var);
                }
            }

            return $date;
        }

        /**
         * Set last errors.
         *
         * @param array $lastErrors
         *
         * @return void
         */
        private static function setLastErrors(array $lastErrors)
        {
            static::$lastErrors = $lastErrors;
        }

        /**
         * {@inheritdoc}
         *
         * @return array
         */
        #[ReturnTypeWillChange]
        public static function getLastErrors()
        {
            return static::$lastErrors;
        }
    }
  uploads-Carbon-src-Carbon-Traits-Date.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Traits;

    use BadMethodCallException;
    use Carbon\Carbon;
    use Carbon\CarbonInterface;
    use Carbon\CarbonPeriod;
    use Carbon\CarbonTimeZone;
    use Carbon\Exceptions\BadComparisonUnitException;
    use Carbon\Exceptions\ImmutableException;
    use Carbon\Exceptions\InvalidTimeZoneException;
    use Carbon\Exceptions\InvalidTypeException;
    use Carbon\Exceptions\UnknownGetterException;
    use Carbon\Exceptions\UnknownMethodException;
    use Carbon\Exceptions\UnknownSetterException;
    use Carbon\Exceptions\UnknownUnitException;
    use Closure;
    use DateInterval;
    use DatePeriod;
    use DateTime;
    use DateTimeImmutable;
    use DateTimeInterface;
    use DateTimeZone;
    use InvalidArgumentException;
    use ReflectionException;
    use ReturnTypeWillChange;
    use Throwable;

    /**
     * A simple API extension for DateTime.
     *
     * <autodoc generated by `composer phpdoc`>
     *
     * @property      int              $year
     * @property      int              $yearIso
     * @property      int              $month
     * @property      int              $day
     * @property      int              $hour
     * @property      int              $minute
     * @property      int              $second
     * @property      int              $micro
     * @property      int              $microsecond
     * @property      int|float|string $timestamp                                                                         seconds since the Unix Epoch
     * @property      string           $englishDayOfWeek                                                                  the day of week in English
     * @property      string           $shortEnglishDayOfWeek                                                             the abbreviated day of week in English
     * @property      string           $englishMonth                                                                      the month in English
     * @property      string           $shortEnglishMonth                                                                 the abbreviated month in English
     * @property      string           $localeDayOfWeek                                                                   the day of week in current locale LC_TIME
     * @property      string           $shortLocaleDayOfWeek                                                              the abbreviated day of week in current locale LC_TIME
     * @property      string           $localeMonth                                                                       the month in current locale LC_TIME
     * @property      string           $shortLocaleMonth                                                                  the abbreviated month in current locale LC_TIME
     * @property      int              $milliseconds
     * @property      int              $millisecond
     * @property      int              $milli
     * @property      int              $week                                                                              1 through 53
     * @property      int              $isoWeek                                                                           1 through 53
     * @property      int              $weekYear                                                                          year according to week format
     * @property      int              $isoWeekYear                                                                       year according to ISO week format
     * @property      int              $dayOfYear                                                                         1 through 366
     * @property      int              $age                                                                               does a diffInYears() with default parameters
     * @property      int              $offset                                                                            the timezone offset in seconds from UTC
     * @property      int              $offsetMinutes                                                                     the timezone offset in minutes from UTC
     * @property      int              $offsetHours                                                                       the timezone offset in hours from UTC
     * @property      CarbonTimeZone   $timezone                                                                          the current timezone
     * @property      CarbonTimeZone   $tz                                                                                alias of $timezone
     * @property-read int              $dayOfWeek                                                                         0 (for Sunday) through 6 (for Saturday)
     * @property-read int              $dayOfWeekIso                                                                      1 (for Monday) through 7 (for Sunday)
     * @property-read int              $weekOfYear                                                                        ISO-8601 week number of year, weeks starting on Monday
     * @property-read int              $daysInMonth                                                                       number of days in the given month
     * @property-read string           $latinMeridiem                                                                     "am"/"pm" (Ante meridiem or Post meridiem latin lowercase mark)
     * @property-read string           $latinUpperMeridiem                                                                "AM"/"PM" (Ante meridiem or Post meridiem latin uppercase mark)
     * @property-read string           $timezoneAbbreviatedName                                                           the current timezone abbreviated name
     * @property-read string           $tzAbbrName                                                                        alias of $timezoneAbbreviatedName
     * @property-read string           $dayName                                                                           long name of weekday translated according to Carbon locale, in english if no translation available for current language
     * @property-read string           $shortDayName                                                                      short name of weekday translated according to Carbon locale, in english if no translation available for current language
     * @property-read string           $minDayName                                                                        very short name of weekday translated according to Carbon locale, in english if no translation available for current language
     * @property-read string           $monthName                                                                         long name of month translated according to Carbon locale, in english if no translation available for current language
     * @property-read string           $shortMonthName                                                                    short name of month translated according to Carbon locale, in english if no translation available for current language
     * @property-read string           $meridiem                                                                          lowercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
     * @property-read string           $upperMeridiem                                                                     uppercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
     * @property-read int              $noZeroHour                                                                        current hour from 1 to 24
     * @property-read int              $weeksInYear                                                                       51 through 53
     * @property-read int              $isoWeeksInYear                                                                    51 through 53
     * @property-read int              $weekOfMonth                                                                       1 through 5
     * @property-read int              $weekNumberInMonth                                                                 1 through 5
     * @property-read int              $firstWeekDay                                                                      0 through 6
     * @property-read int              $lastWeekDay                                                                       0 through 6
     * @property-read int              $daysInYear                                                                        365 or 366
     * @property-read int              $quarter                                                                           the quarter of this instance, 1 - 4
     * @property-read int              $decade                                                                            the decade of this instance
     * @property-read int              $century                                                                           the century of this instance
     * @property-read int              $millennium                                                                        the millennium of this instance
     * @property-read bool             $dst                                                                               daylight savings time indicator, true if DST, false otherwise
     * @property-read bool             $local                                                                             checks if the timezone is local, true if local, false otherwise
     * @property-read bool             $utc                                                                               checks if the timezone is UTC, true if UTC, false otherwise
     * @property-read string           $timezoneName                                                                      the current timezone name
     * @property-read string           $tzName                                                                            alias of $timezoneName
     * @property-read string           $locale                                                                            locale of the current instance
     *
     * @method        bool             isUtc()                                                                            Check if the current instance has UTC timezone. (Both isUtc and isUTC cases are valid.)
     * @method        bool             isLocal()                                                                          Check if the current instance has non-UTC timezone.
     * @method        bool             isValid()                                                                          Check if the current instance is a valid date.
     * @method        bool             isDST()                                                                            Check if the current instance is in a daylight saving time.
     * @method        bool             isSunday()                                                                         Checks if the instance day is sunday.
     * @method        bool             isMonday()                                                                         Checks if the instance day is monday.
     * @method        bool             isTuesday()                                                                        Checks if the instance day is tuesday.
     * @method        bool             isWednesday()                                                                      Checks if the instance day is wednesday.
     * @method        bool             isThursday()                                                                       Checks if the instance day is thursday.
     * @method        bool             isFriday()                                                                         Checks if the instance day is friday.
     * @method        bool             isSaturday()                                                                       Checks if the instance day is saturday.
     * @method        bool             isSameYear(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same year as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentYear()                                                                    Checks if the instance is in the same year as the current moment.
     * @method        bool             isNextYear()                                                                       Checks if the instance is in the same year as the current moment next year.
     * @method        bool             isLastYear()                                                                       Checks if the instance is in the same year as the current moment last year.
     * @method        bool             isSameWeek(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same week as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentWeek()                                                                    Checks if the instance is in the same week as the current moment.
     * @method        bool             isNextWeek()                                                                       Checks if the instance is in the same week as the current moment next week.
     * @method        bool             isLastWeek()                                                                       Checks if the instance is in the same week as the current moment last week.
     * @method        bool             isSameDay(Carbon|DateTimeInterface|string|null $date = null)                       Checks if the given date is in the same day as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentDay()                                                                     Checks if the instance is in the same day as the current moment.
     * @method        bool             isNextDay()                                                                        Checks if the instance is in the same day as the current moment next day.
     * @method        bool             isLastDay()                                                                        Checks if the instance is in the same day as the current moment last day.
     * @method        bool             isSameHour(Carbon|DateTimeInterface|string|null $date = null)                      Checks if the given date is in the same hour as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentHour()                                                                    Checks if the instance is in the same hour as the current moment.
     * @method        bool             isNextHour()                                                                       Checks if the instance is in the same hour as the current moment next hour.
     * @method        bool             isLastHour()                                                                       Checks if the instance is in the same hour as the current moment last hour.
     * @method        bool             isSameMinute(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same minute as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentMinute()                                                                  Checks if the instance is in the same minute as the current moment.
     * @method        bool             isNextMinute()                                                                     Checks if the instance is in the same minute as the current moment next minute.
     * @method        bool             isLastMinute()                                                                     Checks if the instance is in the same minute as the current moment last minute.
     * @method        bool             isSameSecond(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same second as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentSecond()                                                                  Checks if the instance is in the same second as the current moment.
     * @method        bool             isNextSecond()                                                                     Checks if the instance is in the same second as the current moment next second.
     * @method        bool             isLastSecond()                                                                     Checks if the instance is in the same second as the current moment last second.
     * @method        bool             isSameMicro(Carbon|DateTimeInterface|string|null $date = null)                     Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentMicro()                                                                   Checks if the instance is in the same microsecond as the current moment.
     * @method        bool             isNextMicro()                                                                      Checks if the instance is in the same microsecond as the current moment next microsecond.
     * @method        bool             isLastMicro()                                                                      Checks if the instance is in the same microsecond as the current moment last microsecond.
     * @method        bool             isSameMicrosecond(Carbon|DateTimeInterface|string|null $date = null)               Checks if the given date is in the same microsecond as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentMicrosecond()                                                             Checks if the instance is in the same microsecond as the current moment.
     * @method        bool             isNextMicrosecond()                                                                Checks if the instance is in the same microsecond as the current moment next microsecond.
     * @method        bool             isLastMicrosecond()                                                                Checks if the instance is in the same microsecond as the current moment last microsecond.
     * @method        bool             isCurrentMonth()                                                                   Checks if the instance is in the same month as the current moment.
     * @method        bool             isNextMonth()                                                                      Checks if the instance is in the same month as the current moment next month.
     * @method        bool             isLastMonth()                                                                      Checks if the instance is in the same month as the current moment last month.
     * @method        bool             isCurrentQuarter()                                                                 Checks if the instance is in the same quarter as the current moment.
     * @method        bool             isNextQuarter()                                                                    Checks if the instance is in the same quarter as the current moment next quarter.
     * @method        bool             isLastQuarter()                                                                    Checks if the instance is in the same quarter as the current moment last quarter.
     * @method        bool             isSameDecade(Carbon|DateTimeInterface|string|null $date = null)                    Checks if the given date is in the same decade as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentDecade()                                                                  Checks if the instance is in the same decade as the current moment.
     * @method        bool             isNextDecade()                                                                     Checks if the instance is in the same decade as the current moment next decade.
     * @method        bool             isLastDecade()                                                                     Checks if the instance is in the same decade as the current moment last decade.
     * @method        bool             isSameCentury(Carbon|DateTimeInterface|string|null $date = null)                   Checks if the given date is in the same century as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentCentury()                                                                 Checks if the instance is in the same century as the current moment.
     * @method        bool             isNextCentury()                                                                    Checks if the instance is in the same century as the current moment next century.
     * @method        bool             isLastCentury()                                                                    Checks if the instance is in the same century as the current moment last century.
     * @method        bool             isSameMillennium(Carbon|DateTimeInterface|string|null $date = null)                Checks if the given date is in the same millennium as the instance. If null passed, compare to now (with the same timezone).
     * @method        bool             isCurrentMillennium()                                                              Checks if the instance is in the same millennium as the current moment.
     * @method        bool             isNextMillennium()                                                                 Checks if the instance is in the same millennium as the current moment next millennium.
     * @method        bool             isLastMillennium()                                                                 Checks if the instance is in the same millennium as the current moment last millennium.
     * @method        CarbonInterface  years(int $value)                                                                  Set current instance year to the given value.
     * @method        CarbonInterface  year(int $value)                                                                   Set current instance year to the given value.
     * @method        CarbonInterface  setYears(int $value)                                                               Set current instance year to the given value.
     * @method        CarbonInterface  setYear(int $value)                                                                Set current instance year to the given value.
     * @method        CarbonInterface  months(int $value)                                                                 Set current instance month to the given value.
     * @method        CarbonInterface  month(int $value)                                                                  Set current instance month to the given value.
     * @method        CarbonInterface  setMonths(int $value)                                                              Set current instance month to the given value.
     * @method        CarbonInterface  setMonth(int $value)                                                               Set current instance month to the given value.
     * @method        CarbonInterface  days(int $value)                                                                   Set current instance day to the given value.
     * @method        CarbonInterface  day(int $value)                                                                    Set current instance day to the given value.
     * @method        CarbonInterface  setDays(int $value)                                                                Set current instance day to the given value.
     * @method        CarbonInterface  setDay(int $value)                                                                 Set current instance day to the given value.
     * @method        CarbonInterface  hours(int $value)                                                                  Set current instance hour to the given value.
     * @method        CarbonInterface  hour(int $value)                                                                   Set current instance hour to the given value.
     * @method        CarbonInterface  setHours(int $value)                                                               Set current instance hour to the given value.
     * @method        CarbonInterface  setHour(int $value)                                                                Set current instance hour to the given value.
     * @method        CarbonInterface  minutes(int $value)                                                                Set current instance minute to the given value.
     * @method        CarbonInterface  minute(int $value)                                                                 Set current instance minute to the given value.
     * @method        CarbonInterface  setMinutes(int $value)                                                             Set current instance minute to the given value.
     * @method        CarbonInterface  setMinute(int $value)                                                              Set current instance minute to the given value.
     * @method        CarbonInterface  seconds(int $value)                                                                Set current instance second to the given value.
     * @method        CarbonInterface  second(int $value)                                                                 Set current instance second to the given value.
     * @method        CarbonInterface  setSeconds(int $value)                                                             Set current instance second to the given value.
     * @method        CarbonInterface  setSecond(int $value)                                                              Set current instance second to the given value.
     * @method        CarbonInterface  millis(int $value)                                                                 Set current instance millisecond to the given value.
     * @method        CarbonInterface  milli(int $value)                                                                  Set current instance millisecond to the given value.
     * @method        CarbonInterface  setMillis(int $value)                                                              Set current instance millisecond to the given value.
     * @method        CarbonInterface  setMilli(int $value)                                                               Set current instance millisecond to the given value.
     * @method        CarbonInterface  milliseconds(int $value)                                                           Set current instance millisecond to the given value.
     * @method        CarbonInterface  millisecond(int $value)                                                            Set current instance millisecond to the given value.
     * @method        CarbonInterface  setMilliseconds(int $value)                                                        Set current instance millisecond to the given value.
     * @method        CarbonInterface  setMillisecond(int $value)                                                         Set current instance millisecond to the given value.
     * @method        CarbonInterface  micros(int $value)                                                                 Set current instance microsecond to the given value.
     * @method        CarbonInterface  micro(int $value)                                                                  Set current instance microsecond to the given value.
     * @method        CarbonInterface  setMicros(int $value)                                                              Set current instance microsecond to the given value.
     * @method        CarbonInterface  setMicro(int $value)                                                               Set current instance microsecond to the given value.
     * @method        CarbonInterface  microseconds(int $value)                                                           Set current instance microsecond to the given value.
     * @method        CarbonInterface  microsecond(int $value)                                                            Set current instance microsecond to the given value.
     * @method        CarbonInterface  setMicroseconds(int $value)                                                        Set current instance microsecond to the given value.
     * @method        CarbonInterface  setMicrosecond(int $value)                                                         Set current instance microsecond to the given value.
     * @method        CarbonInterface  addYears(int $value = 1)                                                           Add years (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addYear()                                                                          Add one year to the instance (using date interval).
     * @method        CarbonInterface  subYears(int $value = 1)                                                           Sub years (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subYear()                                                                          Sub one year to the instance (using date interval).
     * @method        CarbonInterface  addYearsWithOverflow(int $value = 1)                                               Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addYearWithOverflow()                                                              Add one year to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subYearsWithOverflow(int $value = 1)                                               Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subYearWithOverflow()                                                              Sub one year to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addYearsWithoutOverflow(int $value = 1)                                            Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addYearWithoutOverflow()                                                           Add one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subYearsWithoutOverflow(int $value = 1)                                            Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subYearWithoutOverflow()                                                           Sub one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addYearsWithNoOverflow(int $value = 1)                                             Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addYearWithNoOverflow()                                                            Add one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subYearsWithNoOverflow(int $value = 1)                                             Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subYearWithNoOverflow()                                                            Sub one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addYearsNoOverflow(int $value = 1)                                                 Add years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addYearNoOverflow()                                                                Add one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subYearsNoOverflow(int $value = 1)                                                 Sub years (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subYearNoOverflow()                                                                Sub one year to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMonths(int $value = 1)                                                          Add months (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addMonth()                                                                         Add one month to the instance (using date interval).
     * @method        CarbonInterface  subMonths(int $value = 1)                                                          Sub months (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subMonth()                                                                         Sub one month to the instance (using date interval).
     * @method        CarbonInterface  addMonthsWithOverflow(int $value = 1)                                              Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addMonthWithOverflow()                                                             Add one month to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subMonthsWithOverflow(int $value = 1)                                              Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subMonthWithOverflow()                                                             Sub one month to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addMonthsWithoutOverflow(int $value = 1)                                           Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMonthWithoutOverflow()                                                          Add one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMonthsWithoutOverflow(int $value = 1)                                           Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMonthWithoutOverflow()                                                          Sub one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMonthsWithNoOverflow(int $value = 1)                                            Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMonthWithNoOverflow()                                                           Add one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMonthsWithNoOverflow(int $value = 1)                                            Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMonthWithNoOverflow()                                                           Sub one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMonthsNoOverflow(int $value = 1)                                                Add months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMonthNoOverflow()                                                               Add one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMonthsNoOverflow(int $value = 1)                                                Sub months (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMonthNoOverflow()                                                               Sub one month to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addDays(int $value = 1)                                                            Add days (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addDay()                                                                           Add one day to the instance (using date interval).
     * @method        CarbonInterface  subDays(int $value = 1)                                                            Sub days (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subDay()                                                                           Sub one day to the instance (using date interval).
     * @method        CarbonInterface  addHours(int $value = 1)                                                           Add hours (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addHour()                                                                          Add one hour to the instance (using date interval).
     * @method        CarbonInterface  subHours(int $value = 1)                                                           Sub hours (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subHour()                                                                          Sub one hour to the instance (using date interval).
     * @method        CarbonInterface  addMinutes(int $value = 1)                                                         Add minutes (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addMinute()                                                                        Add one minute to the instance (using date interval).
     * @method        CarbonInterface  subMinutes(int $value = 1)                                                         Sub minutes (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subMinute()                                                                        Sub one minute to the instance (using date interval).
     * @method        CarbonInterface  addSeconds(int $value = 1)                                                         Add seconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addSecond()                                                                        Add one second to the instance (using date interval).
     * @method        CarbonInterface  subSeconds(int $value = 1)                                                         Sub seconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subSecond()                                                                        Sub one second to the instance (using date interval).
     * @method        CarbonInterface  addMillis(int $value = 1)                                                          Add milliseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addMilli()                                                                         Add one millisecond to the instance (using date interval).
     * @method        CarbonInterface  subMillis(int $value = 1)                                                          Sub milliseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subMilli()                                                                         Sub one millisecond to the instance (using date interval).
     * @method        CarbonInterface  addMilliseconds(int $value = 1)                                                    Add milliseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addMillisecond()                                                                   Add one millisecond to the instance (using date interval).
     * @method        CarbonInterface  subMilliseconds(int $value = 1)                                                    Sub milliseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subMillisecond()                                                                   Sub one millisecond to the instance (using date interval).
     * @method        CarbonInterface  addMicros(int $value = 1)                                                          Add microseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addMicro()                                                                         Add one microsecond to the instance (using date interval).
     * @method        CarbonInterface  subMicros(int $value = 1)                                                          Sub microseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subMicro()                                                                         Sub one microsecond to the instance (using date interval).
     * @method        CarbonInterface  addMicroseconds(int $value = 1)                                                    Add microseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addMicrosecond()                                                                   Add one microsecond to the instance (using date interval).
     * @method        CarbonInterface  subMicroseconds(int $value = 1)                                                    Sub microseconds (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subMicrosecond()                                                                   Sub one microsecond to the instance (using date interval).
     * @method        CarbonInterface  addMillennia(int $value = 1)                                                       Add millennia (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addMillennium()                                                                    Add one millennium to the instance (using date interval).
     * @method        CarbonInterface  subMillennia(int $value = 1)                                                       Sub millennia (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subMillennium()                                                                    Sub one millennium to the instance (using date interval).
     * @method        CarbonInterface  addMillenniaWithOverflow(int $value = 1)                                           Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addMillenniumWithOverflow()                                                        Add one millennium to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subMillenniaWithOverflow(int $value = 1)                                           Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subMillenniumWithOverflow()                                                        Sub one millennium to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addMillenniaWithoutOverflow(int $value = 1)                                        Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMillenniumWithoutOverflow()                                                     Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMillenniaWithoutOverflow(int $value = 1)                                        Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMillenniumWithoutOverflow()                                                     Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMillenniaWithNoOverflow(int $value = 1)                                         Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMillenniumWithNoOverflow()                                                      Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMillenniaWithNoOverflow(int $value = 1)                                         Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMillenniumWithNoOverflow()                                                      Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMillenniaNoOverflow(int $value = 1)                                             Add millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addMillenniumNoOverflow()                                                          Add one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMillenniaNoOverflow(int $value = 1)                                             Sub millennia (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subMillenniumNoOverflow()                                                          Sub one millennium to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addCenturies(int $value = 1)                                                       Add centuries (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addCentury()                                                                       Add one century to the instance (using date interval).
     * @method        CarbonInterface  subCenturies(int $value = 1)                                                       Sub centuries (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subCentury()                                                                       Sub one century to the instance (using date interval).
     * @method        CarbonInterface  addCenturiesWithOverflow(int $value = 1)                                           Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addCenturyWithOverflow()                                                           Add one century to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subCenturiesWithOverflow(int $value = 1)                                           Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subCenturyWithOverflow()                                                           Sub one century to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addCenturiesWithoutOverflow(int $value = 1)                                        Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addCenturyWithoutOverflow()                                                        Add one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subCenturiesWithoutOverflow(int $value = 1)                                        Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subCenturyWithoutOverflow()                                                        Sub one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addCenturiesWithNoOverflow(int $value = 1)                                         Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addCenturyWithNoOverflow()                                                         Add one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subCenturiesWithNoOverflow(int $value = 1)                                         Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subCenturyWithNoOverflow()                                                         Sub one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addCenturiesNoOverflow(int $value = 1)                                             Add centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addCenturyNoOverflow()                                                             Add one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subCenturiesNoOverflow(int $value = 1)                                             Sub centuries (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subCenturyNoOverflow()                                                             Sub one century to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addDecades(int $value = 1)                                                         Add decades (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addDecade()                                                                        Add one decade to the instance (using date interval).
     * @method        CarbonInterface  subDecades(int $value = 1)                                                         Sub decades (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subDecade()                                                                        Sub one decade to the instance (using date interval).
     * @method        CarbonInterface  addDecadesWithOverflow(int $value = 1)                                             Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addDecadeWithOverflow()                                                            Add one decade to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subDecadesWithOverflow(int $value = 1)                                             Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subDecadeWithOverflow()                                                            Sub one decade to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addDecadesWithoutOverflow(int $value = 1)                                          Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addDecadeWithoutOverflow()                                                         Add one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subDecadesWithoutOverflow(int $value = 1)                                          Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subDecadeWithoutOverflow()                                                         Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addDecadesWithNoOverflow(int $value = 1)                                           Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addDecadeWithNoOverflow()                                                          Add one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subDecadesWithNoOverflow(int $value = 1)                                           Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subDecadeWithNoOverflow()                                                          Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addDecadesNoOverflow(int $value = 1)                                               Add decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addDecadeNoOverflow()                                                              Add one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subDecadesNoOverflow(int $value = 1)                                               Sub decades (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subDecadeNoOverflow()                                                              Sub one decade to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addQuarters(int $value = 1)                                                        Add quarters (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addQuarter()                                                                       Add one quarter to the instance (using date interval).
     * @method        CarbonInterface  subQuarters(int $value = 1)                                                        Sub quarters (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subQuarter()                                                                       Sub one quarter to the instance (using date interval).
     * @method        CarbonInterface  addQuartersWithOverflow(int $value = 1)                                            Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addQuarterWithOverflow()                                                           Add one quarter to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subQuartersWithOverflow(int $value = 1)                                            Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  subQuarterWithOverflow()                                                           Sub one quarter to the instance (using date interval) with overflow explicitly allowed.
     * @method        CarbonInterface  addQuartersWithoutOverflow(int $value = 1)                                         Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addQuarterWithoutOverflow()                                                        Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subQuartersWithoutOverflow(int $value = 1)                                         Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subQuarterWithoutOverflow()                                                        Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addQuartersWithNoOverflow(int $value = 1)                                          Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addQuarterWithNoOverflow()                                                         Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subQuartersWithNoOverflow(int $value = 1)                                          Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subQuarterWithNoOverflow()                                                         Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addQuartersNoOverflow(int $value = 1)                                              Add quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addQuarterNoOverflow()                                                             Add one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subQuartersNoOverflow(int $value = 1)                                              Sub quarters (the $value count passed in) to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  subQuarterNoOverflow()                                                             Sub one quarter to the instance (using date interval) with overflow explicitly forbidden.
     * @method        CarbonInterface  addWeeks(int $value = 1)                                                           Add weeks (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addWeek()                                                                          Add one week to the instance (using date interval).
     * @method        CarbonInterface  subWeeks(int $value = 1)                                                           Sub weeks (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subWeek()                                                                          Sub one week to the instance (using date interval).
     * @method        CarbonInterface  addWeekdays(int $value = 1)                                                        Add weekdays (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  addWeekday()                                                                       Add one weekday to the instance (using date interval).
     * @method        CarbonInterface  subWeekdays(int $value = 1)                                                        Sub weekdays (the $value count passed in) to the instance (using date interval).
     * @method        CarbonInterface  subWeekday()                                                                       Sub one weekday to the instance (using date interval).
     * @method        CarbonInterface  addRealMicros(int $value = 1)                                                      Add microseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealMicro()                                                                     Add one microsecond to the instance (using timestamp).
     * @method        CarbonInterface  subRealMicros(int $value = 1)                                                      Sub microseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealMicro()                                                                     Sub one microsecond to the instance (using timestamp).
     * @method        CarbonPeriod     microsUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
     * @method        CarbonInterface  addRealMicroseconds(int $value = 1)                                                Add microseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealMicrosecond()                                                               Add one microsecond to the instance (using timestamp).
     * @method        CarbonInterface  subRealMicroseconds(int $value = 1)                                                Sub microseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealMicrosecond()                                                               Sub one microsecond to the instance (using timestamp).
     * @method        CarbonPeriod     microsecondsUntil($endDate = null, int $factor = 1)                                Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each microsecond or every X microseconds if a factor is given.
     * @method        CarbonInterface  addRealMillis(int $value = 1)                                                      Add milliseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealMilli()                                                                     Add one millisecond to the instance (using timestamp).
     * @method        CarbonInterface  subRealMillis(int $value = 1)                                                      Sub milliseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealMilli()                                                                     Sub one millisecond to the instance (using timestamp).
     * @method        CarbonPeriod     millisUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
     * @method        CarbonInterface  addRealMilliseconds(int $value = 1)                                                Add milliseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealMillisecond()                                                               Add one millisecond to the instance (using timestamp).
     * @method        CarbonInterface  subRealMilliseconds(int $value = 1)                                                Sub milliseconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealMillisecond()                                                               Sub one millisecond to the instance (using timestamp).
     * @method        CarbonPeriod     millisecondsUntil($endDate = null, int $factor = 1)                                Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millisecond or every X milliseconds if a factor is given.
     * @method        CarbonInterface  addRealSeconds(int $value = 1)                                                     Add seconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealSecond()                                                                    Add one second to the instance (using timestamp).
     * @method        CarbonInterface  subRealSeconds(int $value = 1)                                                     Sub seconds (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealSecond()                                                                    Sub one second to the instance (using timestamp).
     * @method        CarbonPeriod     secondsUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each second or every X seconds if a factor is given.
     * @method        CarbonInterface  addRealMinutes(int $value = 1)                                                     Add minutes (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealMinute()                                                                    Add one minute to the instance (using timestamp).
     * @method        CarbonInterface  subRealMinutes(int $value = 1)                                                     Sub minutes (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealMinute()                                                                    Sub one minute to the instance (using timestamp).
     * @method        CarbonPeriod     minutesUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each minute or every X minutes if a factor is given.
     * @method        CarbonInterface  addRealHours(int $value = 1)                                                       Add hours (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealHour()                                                                      Add one hour to the instance (using timestamp).
     * @method        CarbonInterface  subRealHours(int $value = 1)                                                       Sub hours (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealHour()                                                                      Sub one hour to the instance (using timestamp).
     * @method        CarbonPeriod     hoursUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each hour or every X hours if a factor is given.
     * @method        CarbonInterface  addRealDays(int $value = 1)                                                        Add days (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealDay()                                                                       Add one day to the instance (using timestamp).
     * @method        CarbonInterface  subRealDays(int $value = 1)                                                        Sub days (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealDay()                                                                       Sub one day to the instance (using timestamp).
     * @method        CarbonPeriod     daysUntil($endDate = null, int $factor = 1)                                        Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each day or every X days if a factor is given.
     * @method        CarbonInterface  addRealWeeks(int $value = 1)                                                       Add weeks (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealWeek()                                                                      Add one week to the instance (using timestamp).
     * @method        CarbonInterface  subRealWeeks(int $value = 1)                                                       Sub weeks (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealWeek()                                                                      Sub one week to the instance (using timestamp).
     * @method        CarbonPeriod     weeksUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each week or every X weeks if a factor is given.
     * @method        CarbonInterface  addRealMonths(int $value = 1)                                                      Add months (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealMonth()                                                                     Add one month to the instance (using timestamp).
     * @method        CarbonInterface  subRealMonths(int $value = 1)                                                      Sub months (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealMonth()                                                                     Sub one month to the instance (using timestamp).
     * @method        CarbonPeriod     monthsUntil($endDate = null, int $factor = 1)                                      Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each month or every X months if a factor is given.
     * @method        CarbonInterface  addRealQuarters(int $value = 1)                                                    Add quarters (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealQuarter()                                                                   Add one quarter to the instance (using timestamp).
     * @method        CarbonInterface  subRealQuarters(int $value = 1)                                                    Sub quarters (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealQuarter()                                                                   Sub one quarter to the instance (using timestamp).
     * @method        CarbonPeriod     quartersUntil($endDate = null, int $factor = 1)                                    Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each quarter or every X quarters if a factor is given.
     * @method        CarbonInterface  addRealYears(int $value = 1)                                                       Add years (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealYear()                                                                      Add one year to the instance (using timestamp).
     * @method        CarbonInterface  subRealYears(int $value = 1)                                                       Sub years (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealYear()                                                                      Sub one year to the instance (using timestamp).
     * @method        CarbonPeriod     yearsUntil($endDate = null, int $factor = 1)                                       Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each year or every X years if a factor is given.
     * @method        CarbonInterface  addRealDecades(int $value = 1)                                                     Add decades (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealDecade()                                                                    Add one decade to the instance (using timestamp).
     * @method        CarbonInterface  subRealDecades(int $value = 1)                                                     Sub decades (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealDecade()                                                                    Sub one decade to the instance (using timestamp).
     * @method        CarbonPeriod     decadesUntil($endDate = null, int $factor = 1)                                     Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each decade or every X decades if a factor is given.
     * @method        CarbonInterface  addRealCenturies(int $value = 1)                                                   Add centuries (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealCentury()                                                                   Add one century to the instance (using timestamp).
     * @method        CarbonInterface  subRealCenturies(int $value = 1)                                                   Sub centuries (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealCentury()                                                                   Sub one century to the instance (using timestamp).
     * @method        CarbonPeriod     centuriesUntil($endDate = null, int $factor = 1)                                   Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each century or every X centuries if a factor is given.
     * @method        CarbonInterface  addRealMillennia(int $value = 1)                                                   Add millennia (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  addRealMillennium()                                                                Add one millennium to the instance (using timestamp).
     * @method        CarbonInterface  subRealMillennia(int $value = 1)                                                   Sub millennia (the $value count passed in) to the instance (using timestamp).
     * @method        CarbonInterface  subRealMillennium()                                                                Sub one millennium to the instance (using timestamp).
     * @method        CarbonPeriod     millenniaUntil($endDate = null, int $factor = 1)                                   Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each millennium or every X millennia if a factor is given.
     * @method        CarbonInterface  roundYear(float $precision = 1, string $function = "round")                        Round the current instance year with given precision using the given function.
     * @method        CarbonInterface  roundYears(float $precision = 1, string $function = "round")                       Round the current instance year with given precision using the given function.
     * @method        CarbonInterface  floorYear(float $precision = 1)                                                    Truncate the current instance year with given precision.
     * @method        CarbonInterface  floorYears(float $precision = 1)                                                   Truncate the current instance year with given precision.
     * @method        CarbonInterface  ceilYear(float $precision = 1)                                                     Ceil the current instance year with given precision.
     * @method        CarbonInterface  ceilYears(float $precision = 1)                                                    Ceil the current instance year with given precision.
     * @method        CarbonInterface  roundMonth(float $precision = 1, string $function = "round")                       Round the current instance month with given precision using the given function.
     * @method        CarbonInterface  roundMonths(float $precision = 1, string $function = "round")                      Round the current instance month with given precision using the given function.
     * @method        CarbonInterface  floorMonth(float $precision = 1)                                                   Truncate the current instance month with given precision.
     * @method        CarbonInterface  floorMonths(float $precision = 1)                                                  Truncate the current instance month with given precision.
     * @method        CarbonInterface  ceilMonth(float $precision = 1)                                                    Ceil the current instance month with given precision.
     * @method        CarbonInterface  ceilMonths(float $precision = 1)                                                   Ceil the current instance month with given precision.
     * @method        CarbonInterface  roundDay(float $precision = 1, string $function = "round")                         Round the current instance day with given precision using the given function.
     * @method        CarbonInterface  roundDays(float $precision = 1, string $function = "round")                        Round the current instance day with given precision using the given function.
     * @method        CarbonInterface  floorDay(float $precision = 1)                                                     Truncate the current instance day with given precision.
     * @method        CarbonInterface  floorDays(float $precision = 1)                                                    Truncate the current instance day with given precision.
     * @method        CarbonInterface  ceilDay(float $precision = 1)                                                      Ceil the current instance day with given precision.
     * @method        CarbonInterface  ceilDays(float $precision = 1)                                                     Ceil the current instance day with given precision.
     * @method        CarbonInterface  roundHour(float $precision = 1, string $function = "round")                        Round the current instance hour with given precision using the given function.
     * @method        CarbonInterface  roundHours(float $precision = 1, string $function = "round")                       Round the current instance hour with given precision using the given function.
     * @method        CarbonInterface  floorHour(float $precision = 1)                                                    Truncate the current instance hour with given precision.
     * @method        CarbonInterface  floorHours(float $precision = 1)                                                   Truncate the current instance hour with given precision.
     * @method        CarbonInterface  ceilHour(float $precision = 1)                                                     Ceil the current instance hour with given precision.
     * @method        CarbonInterface  ceilHours(float $precision = 1)                                                    Ceil the current instance hour with given precision.
     * @method        CarbonInterface  roundMinute(float $precision = 1, string $function = "round")                      Round the current instance minute with given precision using the given function.
     * @method        CarbonInterface  roundMinutes(float $precision = 1, string $function = "round")                     Round the current instance minute with given precision using the given function.
     * @method        CarbonInterface  floorMinute(float $precision = 1)                                                  Truncate the current instance minute with given precision.
     * @method        CarbonInterface  floorMinutes(float $precision = 1)                                                 Truncate the current instance minute with given precision.
     * @method        CarbonInterface  ceilMinute(float $precision = 1)                                                   Ceil the current instance minute with given precision.
     * @method        CarbonInterface  ceilMinutes(float $precision = 1)                                                  Ceil the current instance minute with given precision.
     * @method        CarbonInterface  roundSecond(float $precision = 1, string $function = "round")                      Round the current instance second with given precision using the given function.
     * @method        CarbonInterface  roundSeconds(float $precision = 1, string $function = "round")                     Round the current instance second with given precision using the given function.
     * @method        CarbonInterface  floorSecond(float $precision = 1)                                                  Truncate the current instance second with given precision.
     * @method        CarbonInterface  floorSeconds(float $precision = 1)                                                 Truncate the current instance second with given precision.
     * @method        CarbonInterface  ceilSecond(float $precision = 1)                                                   Ceil the current instance second with given precision.
     * @method        CarbonInterface  ceilSeconds(float $precision = 1)                                                  Ceil the current instance second with given precision.
     * @method        CarbonInterface  roundMillennium(float $precision = 1, string $function = "round")                  Round the current instance millennium with given precision using the given function.
     * @method        CarbonInterface  roundMillennia(float $precision = 1, string $function = "round")                   Round the current instance millennium with given precision using the given function.
     * @method        CarbonInterface  floorMillennium(float $precision = 1)                                              Truncate the current instance millennium with given precision.
     * @method        CarbonInterface  floorMillennia(float $precision = 1)                                               Truncate the current instance millennium with given precision.
     * @method        CarbonInterface  ceilMillennium(float $precision = 1)                                               Ceil the current instance millennium with given precision.
     * @method        CarbonInterface  ceilMillennia(float $precision = 1)                                                Ceil the current instance millennium with given precision.
     * @method        CarbonInterface  roundCentury(float $precision = 1, string $function = "round")                     Round the current instance century with given precision using the given function.
     * @method        CarbonInterface  roundCenturies(float $precision = 1, string $function = "round")                   Round the current instance century with given precision using the given function.
     * @method        CarbonInterface  floorCentury(float $precision = 1)                                                 Truncate the current instance century with given precision.
     * @method        CarbonInterface  floorCenturies(float $precision = 1)                                               Truncate the current instance century with given precision.
     * @method        CarbonInterface  ceilCentury(float $precision = 1)                                                  Ceil the current instance century with given precision.
     * @method        CarbonInterface  ceilCenturies(float $precision = 1)                                                Ceil the current instance century with given precision.
     * @method        CarbonInterface  roundDecade(float $precision = 1, string $function = "round")                      Round the current instance decade with given precision using the given function.
     * @method        CarbonInterface  roundDecades(float $precision = 1, string $function = "round")                     Round the current instance decade with given precision using the given function.
     * @method        CarbonInterface  floorDecade(float $precision = 1)                                                  Truncate the current instance decade with given precision.
     * @method        CarbonInterface  floorDecades(float $precision = 1)                                                 Truncate the current instance decade with given precision.
     * @method        CarbonInterface  ceilDecade(float $precision = 1)                                                   Ceil the current instance decade with given precision.
     * @method        CarbonInterface  ceilDecades(float $precision = 1)                                                  Ceil the current instance decade with given precision.
     * @method        CarbonInterface  roundQuarter(float $precision = 1, string $function = "round")                     Round the current instance quarter with given precision using the given function.
     * @method        CarbonInterface  roundQuarters(float $precision = 1, string $function = "round")                    Round the current instance quarter with given precision using the given function.
     * @method        CarbonInterface  floorQuarter(float $precision = 1)                                                 Truncate the current instance quarter with given precision.
     * @method        CarbonInterface  floorQuarters(float $precision = 1)                                                Truncate the current instance quarter with given precision.
     * @method        CarbonInterface  ceilQuarter(float $precision = 1)                                                  Ceil the current instance quarter with given precision.
     * @method        CarbonInterface  ceilQuarters(float $precision = 1)                                                 Ceil the current instance quarter with given precision.
     * @method        CarbonInterface  roundMillisecond(float $precision = 1, string $function = "round")                 Round the current instance millisecond with given precision using the given function.
     * @method        CarbonInterface  roundMilliseconds(float $precision = 1, string $function = "round")                Round the current instance millisecond with given precision using the given function.
     * @method        CarbonInterface  floorMillisecond(float $precision = 1)                                             Truncate the current instance millisecond with given precision.
     * @method        CarbonInterface  floorMilliseconds(float $precision = 1)                                            Truncate the current instance millisecond with given precision.
     * @method        CarbonInterface  ceilMillisecond(float $precision = 1)                                              Ceil the current instance millisecond with given precision.
     * @method        CarbonInterface  ceilMilliseconds(float $precision = 1)                                             Ceil the current instance millisecond with given precision.
     * @method        CarbonInterface  roundMicrosecond(float $precision = 1, string $function = "round")                 Round the current instance microsecond with given precision using the given function.
     * @method        CarbonInterface  roundMicroseconds(float $precision = 1, string $function = "round")                Round the current instance microsecond with given precision using the given function.
     * @method        CarbonInterface  floorMicrosecond(float $precision = 1)                                             Truncate the current instance microsecond with given precision.
     * @method        CarbonInterface  floorMicroseconds(float $precision = 1)                                            Truncate the current instance microsecond with given precision.
     * @method        CarbonInterface  ceilMicrosecond(float $precision = 1)                                              Ceil the current instance microsecond with given precision.
     * @method        CarbonInterface  ceilMicroseconds(float $precision = 1)                                             Ceil the current instance microsecond with given precision.
     * @method        string           shortAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)        Get the difference (short format, 'Absolute' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string           longAbsoluteDiffForHumans(DateTimeInterface $other = null, int $parts = 1)         Get the difference (long format, 'Absolute' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string           shortRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)        Get the difference (short format, 'Relative' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string           longRelativeDiffForHumans(DateTimeInterface $other = null, int $parts = 1)         Get the difference (long format, 'Relative' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string           shortRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)   Get the difference (short format, 'RelativeToNow' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string           longRelativeToNowDiffForHumans(DateTimeInterface $other = null, int $parts = 1)    Get the difference (long format, 'RelativeToNow' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string           shortRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1) Get the difference (short format, 'RelativeToOther' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     * @method        string           longRelativeToOtherDiffForHumans(DateTimeInterface $other = null, int $parts = 1)  Get the difference (long format, 'RelativeToOther' mode) in a human readable format in the current locale. ($other and $parts parameters can be swapped.)
     *
     * </autodoc>
     */
    trait Date
    {
        use Boundaries;
        use Comparison;
        use Converter;
        use Creator;
        use Difference;
        use Macro;
        use Modifiers;
        use Mutability;
        use ObjectInitialisation;
        use Options;
        use Rounding;
        use Serialization;
        use Test;
        use Timestamp;
        use Units;
        use Week;

        /**
         * Names of days of the week.
         *
         * @var array
         */
        protected static $days = [
            // @call isDayOfWeek
            CarbonInterface::SUNDAY => 'Sunday',
            // @call isDayOfWeek
            CarbonInterface::MONDAY => 'Monday',
            // @call isDayOfWeek
            CarbonInterface::TUESDAY => 'Tuesday',
            // @call isDayOfWeek
            CarbonInterface::WEDNESDAY => 'Wednesday',
            // @call isDayOfWeek
            CarbonInterface::THURSDAY => 'Thursday',
            // @call isDayOfWeek
            CarbonInterface::FRIDAY => 'Friday',
            // @call isDayOfWeek
            CarbonInterface::SATURDAY => 'Saturday',
        ];

        /**
         * Will UTF8 encoding be used to print localized date/time ?
         *
         * @var bool
         */
        protected static $utf8 = false;

        /**
         * List of unit and magic methods associated as doc-comments.
         *
         * @var array
         */
        protected static $units = [
            // @call setUnit
            // @call addUnit
            'year',
            // @call setUnit
            // @call addUnit
            'month',
            // @call setUnit
            // @call addUnit
            'day',
            // @call setUnit
            // @call addUnit
            'hour',
            // @call setUnit
            // @call addUnit
            'minute',
            // @call setUnit
            // @call addUnit
            'second',
            // @call setUnit
            // @call addUnit
            'milli',
            // @call setUnit
            // @call addUnit
            'millisecond',
            // @call setUnit
            // @call addUnit
            'micro',
            // @call setUnit
            // @call addUnit
            'microsecond',
        ];

        /**
         * Creates a DateTimeZone from a string, DateTimeZone or integer offset.
         *
         * @param DateTimeZone|string|int|null $object     original value to get CarbonTimeZone from it.
         * @param DateTimeZone|string|int|null $objectDump dump of the object for error messages.
         *
         * @throws InvalidTimeZoneException
         *
         * @return CarbonTimeZone|false
         */
        protected static function safeCreateDateTimeZone($object, $objectDump = null)
        {
            return CarbonTimeZone::instance($object, $objectDump);
        }

        /**
         * Get the TimeZone associated with the Carbon instance (as CarbonTimeZone).
         *
         * @return CarbonTimeZone
         *
         * @link https://php.net/manual/en/datetime.gettimezone.php
         */
        #[ReturnTypeWillChange]
        public function getTimezone()
        {
            return CarbonTimeZone::instance(parent::getTimezone());
        }

        /**
         * List of minimum and maximums for each unit.
         *
         * @return array
         */
        protected static function getRangesByUnit()
        {
            return [
                // @call roundUnit
                'year' => [1, 9999],
                // @call roundUnit
                'month' => [1, static::MONTHS_PER_YEAR],
                // @call roundUnit
                'day' => [1, 31],
                // @call roundUnit
                'hour' => [0, static::HOURS_PER_DAY - 1],
                // @call roundUnit
                'minute' => [0, static::MINUTES_PER_HOUR - 1],
                // @call roundUnit
                'second' => [0, static::SECONDS_PER_MINUTE - 1],
            ];
        }

        /**
         * Get a copy of the instance.
         *
         * @return static
         */
        public function copy()
        {
            return clone $this;
        }

        /**
         * @alias copy
         *
         * Get a copy of the instance.
         *
         * @return static
         */
        public function clone()
        {
            return clone $this;
        }

        /**
         * Clone the current instance if it's mutable.
         *
         * This method is convenient to ensure you don't mutate the initial object
         * but avoid to make a useless copy of it if it's already immutable.
         *
         * @return static
         */
        public function avoidMutation(): self
        {
            if ($this instanceof DateTimeImmutable) {
                return $this;
            }

            return clone $this;
        }

        /**
         * Returns a present instance in the same timezone.
         *
         * @return static
         */
        public function nowWithSameTz()
        {
            return static::now($this->getTimezone());
        }

        /**
         * Throws an exception if the given object is not a DateTime and does not implement DateTimeInterface.
         *
         * @param mixed        $date
         * @param string|array $other
         *
         * @throws InvalidTypeException
         */
        protected static function expectDateTime($date, $other = [])
        {
            $message = 'Expected ';
            foreach ((array) $other as $expect) {
                $message .= "$expect, ";
            }

            if (!$date instanceof DateTime && !$date instanceof DateTimeInterface) {
                throw new InvalidTypeException(
                    $message.'DateTime or DateTimeInterface, '.
                    (\is_object($date) ? \get_class($date) : \gettype($date)).' given'
                );
            }
        }

        /**
         * Return the Carbon instance passed through, a now instance in the same timezone
         * if null given or parse the input if string given.
         *
         * @param Carbon|DateTimeInterface|string|null $date
         *
         * @return static
         */
        protected function resolveCarbon($date = null)
        {
            if (!$date) {
                return $this->nowWithSameTz();
            }

            if (\is_string($date)) {
                return static::parse($date, $this->getTimezone());
            }

            static::expectDateTime($date, ['null', 'string']);

            return $date instanceof self ? $date : static::instance($date);
        }

        /**
         * Return the Carbon instance passed through, a now instance in UTC
         * if null given or parse the input if string given (using current timezone
         * then switching to UTC).
         *
         * @param Carbon|DateTimeInterface|string|null $date
         *
         * @return static
         */
        protected function resolveUTC($date = null): self
        {
            if (!$date) {
                return static::now('UTC');
            }

            if (\is_string($date)) {
                return static::parse($date, $this->getTimezone())->utc();
            }

            static::expectDateTime($date, ['null', 'string']);

            return $date instanceof self ? $date : static::instance($date)->utc();
        }

        /**
         * Return the Carbon instance passed through, a now instance in the same timezone
         * if null given or parse the input if string given.
         *
         * @param Carbon|\Carbon\CarbonPeriod|\Carbon\CarbonInterval|\DateInterval|\DatePeriod|DateTimeInterface|string|null $date
         *
         * @return static
         */
        public function carbonize($date = null)
        {
            if ($date instanceof DateInterval) {
                return $this->avoidMutation()->add($date);
            }

            if ($date instanceof DatePeriod || $date instanceof CarbonPeriod) {
                $date = $date->getStartDate();
            }

            return $this->resolveCarbon($date);
        }

        ///////////////////////////////////////////////////////////////////
        ///////////////////////// GETTERS AND SETTERS /////////////////////
        ///////////////////////////////////////////////////////////////////

        /**
         * Get a part of the Carbon object
         *
         * @param string $name
         *
         * @throws UnknownGetterException
         *
         * @return string|int|bool|DateTimeZone|null
         */
        public function __get($name)
        {
            return $this->get($name);
        }

        /**
         * Get a part of the Carbon object
         *
         * @param string $name
         *
         * @throws UnknownGetterException
         *
         * @return string|int|bool|DateTimeZone|null
         */
        public function get($name)
        {
            static $formats = [
                // @property int
                'year' => 'Y',
                // @property int
                'yearIso' => 'o',
                // @property int
                // @call isSameUnit
                'month' => 'n',
                // @property int
                'day' => 'j',
                // @property int
                'hour' => 'G',
                // @property int
                'minute' => 'i',
                // @property int
                'second' => 's',
                // @property int
                'micro' => 'u',
                // @property int
                'microsecond' => 'u',
                // @property-read int 0 (for Sunday) through 6 (for Saturday)
                'dayOfWeek' => 'w',
                // @property-read int 1 (for Monday) through 7 (for Sunday)
                'dayOfWeekIso' => 'N',
                // @property-read int ISO-8601 week number of year, weeks starting on Monday
                'weekOfYear' => 'W',
                // @property-read int number of days in the given month
                'daysInMonth' => 't',
                // @property int|float|string seconds since the Unix Epoch
                'timestamp' => 'U',
                // @property-read string "am"/"pm" (Ante meridiem or Post meridiem latin lowercase mark)
                'latinMeridiem' => 'a',
                // @property-read string "AM"/"PM" (Ante meridiem or Post meridiem latin uppercase mark)
                'latinUpperMeridiem' => 'A',
                // @property string the day of week in English
                'englishDayOfWeek' => 'l',
                // @property string the abbreviated day of week in English
                'shortEnglishDayOfWeek' => 'D',
                // @property string the month in English
                'englishMonth' => 'F',
                // @property string the abbreviated month in English
                'shortEnglishMonth' => 'M',
                // @property string the day of week in current locale LC_TIME
                'localeDayOfWeek' => '%A',
                // @property string the abbreviated day of week in current locale LC_TIME
                'shortLocaleDayOfWeek' => '%a',
                // @property string the month in current locale LC_TIME
                'localeMonth' => '%B',
                // @property string the abbreviated month in current locale LC_TIME
                'shortLocaleMonth' => '%b',
                // @property-read string $timezoneAbbreviatedName the current timezone abbreviated name
                'timezoneAbbreviatedName' => 'T',
                // @property-read string $tzAbbrName alias of $timezoneAbbreviatedName
                'tzAbbrName' => 'T',
            ];

            switch (true) {
                case isset($formats[$name]):
                    $format = $formats[$name];
                    $method = str_starts_with($format, '%') ? 'formatLocalized' : 'rawFormat';
                    $value = $this->$method($format);

                    return is_numeric($value) ? (int) $value : $value;

                // @property-read string long name of weekday translated according to Carbon locale, in english if no translation available for current language
                case $name === 'dayName':
                    return $this->getTranslatedDayName();
                // @property-read string short name of weekday translated according to Carbon locale, in english if no translation available for current language
                case $name === 'shortDayName':
                    return $this->getTranslatedShortDayName();
                // @property-read string very short name of weekday translated according to Carbon locale, in english if no translation available for current language
                case $name === 'minDayName':
                    return $this->getTranslatedMinDayName();
                // @property-read string long name of month translated according to Carbon locale, in english if no translation available for current language
                case $name === 'monthName':
                    return $this->getTranslatedMonthName();
                // @property-read string short name of month translated according to Carbon locale, in english if no translation available for current language
                case $name === 'shortMonthName':
                    return $this->getTranslatedShortMonthName();
                // @property-read string lowercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
                case $name === 'meridiem':
                    return $this->meridiem(true);
                // @property-read string uppercase meridiem mark translated according to Carbon locale, in latin if no translation available for current language
                case $name === 'upperMeridiem':
                    return $this->meridiem();
                // @property-read int current hour from 1 to 24
                case $name === 'noZeroHour':
                    return $this->hour ?: 24;
                // @property int
                case $name === 'milliseconds':
                    // @property int
                case $name === 'millisecond':
                // @property int
                case $name === 'milli':
                    return (int) floor($this->rawFormat('u') / 1000);

                // @property int 1 through 53
                case $name === 'week':
                    return (int) $this->week();

                // @property int 1 through 53
                case $name === 'isoWeek':
                    return (int) $this->isoWeek();

                // @property int year according to week format
                case $name === 'weekYear':
                    return (int) $this->weekYear();

                // @property int year according to ISO week format
                case $name === 'isoWeekYear':
                    return (int) $this->isoWeekYear();

                // @property-read int 51 through 53
                case $name === 'weeksInYear':
                    return $this->weeksInYear();

                // @property-read int 51 through 53
                case $name === 'isoWeeksInYear':
                    return $this->isoWeeksInYear();

                // @property-read int 1 through 5
                case $name === 'weekOfMonth':
                    return (int) ceil($this->day / static::DAYS_PER_WEEK);

                // @property-read int 1 through 5
                case $name === 'weekNumberInMonth':
                    return (int) ceil(($this->day + $this->avoidMutation()->startOfMonth()->dayOfWeekIso - 1) / static::DAYS_PER_WEEK);

                // @property-read int 0 through 6
                case $name === 'firstWeekDay':
                    return $this->localTranslator ? ($this->getTranslationMessage('first_day_of_week') ?? 0) : static::getWeekStartsAt();

                // @property-read int 0 through 6
                case $name === 'lastWeekDay':
                    return $this->localTranslator ? (($this->getTranslationMessage('first_day_of_week') ?? 0) + static::DAYS_PER_WEEK - 1) % static::DAYS_PER_WEEK : static::getWeekEndsAt();

                // @property int 1 through 366
                case $name === 'dayOfYear':
                    return 1 + (int) ($this->rawFormat('z'));

                // @property-read int 365 or 366
                case $name === 'daysInYear':
                    return $this->isLeapYear() ? 366 : 365;

                // @property int does a diffInYears() with default parameters
                case $name === 'age':
                    return $this->diffInYears();

                // @property-read int the quarter of this instance, 1 - 4
                // @call isSameUnit
                case $name === 'quarter':
                    return (int) ceil($this->month / static::MONTHS_PER_QUARTER);

                // @property-read int the decade of this instance
                // @call isSameUnit
                case $name === 'decade':
                    return (int) ceil($this->year / static::YEARS_PER_DECADE);

                // @property-read int the century of this instance
                // @call isSameUnit
                case $name === 'century':
                    $factor = 1;
                    $year = $this->year;
                    if ($year < 0) {
                        $year = -$year;
                        $factor = -1;
                    }

                    return (int) ($factor * ceil($year / static::YEARS_PER_CENTURY));

                // @property-read int the millennium of this instance
                // @call isSameUnit
                case $name === 'millennium':
                    $factor = 1;
                    $year = $this->year;
                    if ($year < 0) {
                        $year = -$year;
                        $factor = -1;
                    }

                    return (int) ($factor * ceil($year / static::YEARS_PER_MILLENNIUM));

                // @property int the timezone offset in seconds from UTC
                case $name === 'offset':
                    return $this->getOffset();

                // @property int the timezone offset in minutes from UTC
                case $name === 'offsetMinutes':
                    return $this->getOffset() / static::SECONDS_PER_MINUTE;

                // @property int the timezone offset in hours from UTC
                case $name === 'offsetHours':
                    return $this->getOffset() / static::SECONDS_PER_MINUTE / static::MINUTES_PER_HOUR;

                // @property-read bool daylight savings time indicator, true if DST, false otherwise
                case $name === 'dst':
                    return $this->rawFormat('I') === '1';

                // @property-read bool checks if the timezone is local, true if local, false otherwise
                case $name === 'local':
                    return $this->getOffset() === $this->avoidMutation()->setTimezone(date_default_timezone_get())->getOffset();

                // @property-read bool checks if the timezone is UTC, true if UTC, false otherwise
                case $name === 'utc':
                    return $this->getOffset() === 0;

                // @property CarbonTimeZone $timezone the current timezone
                // @property CarbonTimeZone $tz alias of $timezone
                case $name === 'timezone' || $name === 'tz':
                    return CarbonTimeZone::instance($this->getTimezone());

                // @property-read string $timezoneName the current timezone name
                // @property-read string $tzName alias of $timezoneName
                case $name === 'timezoneName' || $name === 'tzName':
                    return $this->getTimezone()->getName();

                // @property-read string locale of the current instance
                case $name === 'locale':
                    return $this->getTranslatorLocale();

                default:
                    $macro = $this->getLocalMacro('get'.ucfirst($name));

                    if ($macro) {
                        return $this->executeCallableWithContext($macro);
                    }

                    throw new UnknownGetterException($name);
            }
        }

        /**
         * Check if an attribute exists on the object
         *
         * @param string $name
         *
         * @return bool
         */
        public function __isset($name)
        {
            try {
                $this->__get($name);
            } catch (UnknownGetterException | ReflectionException $e) {
                return false;
            }

            return true;
        }

        /**
         * Set a part of the Carbon object
         *
         * @param string                  $name
         * @param string|int|DateTimeZone $value
         *
         * @throws UnknownSetterException|ReflectionException
         *
         * @return void
         */
        public function __set($name, $value)
        {
            if ($this->constructedObjectId === spl_object_hash($this)) {
                $this->set($name, $value);

                return;
            }

            $this->$name = $value;
        }

        /**
         * Set a part of the Carbon object
         *
         * @param string|array            $name
         * @param string|int|DateTimeZone $value
         *
         * @throws ImmutableException|UnknownSetterException
         *
         * @return $this
         */
        public function set($name, $value = null)
        {
            if ($this->isImmutable()) {
                throw new ImmutableException(sprintf('%s class', static::class));
            }

            if (\is_array($name)) {
                foreach ($name as $key => $value) {
                    $this->set($key, $value);
                }

                return $this;
            }

            switch ($name) {
                case 'milliseconds':
                case 'millisecond':
                case 'milli':
                case 'microseconds':
                case 'microsecond':
                case 'micro':
                    if (str_starts_with($name, 'milli')) {
                        $value *= 1000;
                    }

                    while ($value < 0) {
                        $this->subSecond();
                        $value += static::MICROSECONDS_PER_SECOND;
                    }

                    while ($value >= static::MICROSECONDS_PER_SECOND) {
                        $this->addSecond();
                        $value -= static::MICROSECONDS_PER_SECOND;
                    }

                    $this->modify($this->rawFormat('H:i:s.').str_pad((string) round($value), 6, '0', STR_PAD_LEFT));

                    break;

                case 'year':
                case 'month':
                case 'day':
                case 'hour':
                case 'minute':
                case 'second':
                    [$year, $month, $day, $hour, $minute, $second] = array_map('intval', explode('-', $this->rawFormat('Y-n-j-G-i-s')));
                    $$name = $value;
                    $this->setDateTime($year, $month, $day, $hour, $minute, $second);

                    break;

                case 'week':
                    $this->week($value);

                    break;

                case 'isoWeek':
                    $this->isoWeek($value);

                    break;

                case 'weekYear':
                    $this->weekYear($value);

                    break;

                case 'isoWeekYear':
                    $this->isoWeekYear($value);

                    break;

                case 'dayOfYear':
                    $this->addDays($value - $this->dayOfYear);

                    break;

                case 'timestamp':
                    $this->setTimestamp($value);

                    break;

                case 'offset':
                    $this->setTimezone(static::safeCreateDateTimeZone($value / static::SECONDS_PER_MINUTE / static::MINUTES_PER_HOUR));

                    break;

                case 'offsetMinutes':
                    $this->setTimezone(static::safeCreateDateTimeZone($value / static::MINUTES_PER_HOUR));

                    break;

                case 'offsetHours':
                    $this->setTimezone(static::safeCreateDateTimeZone($value));

                    break;

                case 'timezone':
                case 'tz':
                    $this->setTimezone($value);

                    break;

                default:
                    $macro = $this->getLocalMacro('set'.ucfirst($name));

                    if ($macro) {
                        $this->executeCallableWithContext($macro, $value);

                        break;
                    }

                    if ($this->localStrictModeEnabled ?? static::isStrictModeEnabled()) {
                        throw new UnknownSetterException($name);
                    }

                    $this->$name = $value;
            }

            return $this;
        }

        protected function getTranslatedFormByRegExp($baseKey, $keySuffix, $context, $subKey, $defaultValue)
        {
            $key = $baseKey.$keySuffix;
            $standaloneKey = "${key}_standalone";
            $baseTranslation = $this->getTranslationMessage($key);

            if ($baseTranslation instanceof Closure) {
                return $baseTranslation($this, $context, $subKey) ?: $defaultValue;
            }

            if (
                $this->getTranslationMessage("$standaloneKey.$subKey") &&
                (!$context || ($regExp = $this->getTranslationMessage("${baseKey}_regexp")) && !preg_match($regExp, $context))
            ) {
                $key = $standaloneKey;
            }

            return $this->getTranslationMessage("$key.$subKey", null, $defaultValue);
        }

        /**
         * Get the translation of the current week day name (with context for languages with multiple forms).
         *
         * @param string|null $context      whole format string
         * @param string      $keySuffix    "", "_short" or "_min"
         * @param string|null $defaultValue default value if translation missing
         *
         * @return string
         */
        public function getTranslatedDayName($context = null, $keySuffix = '', $defaultValue = null)
        {
            return $this->getTranslatedFormByRegExp('weekdays', $keySuffix, $context, $this->dayOfWeek, $defaultValue ?: $this->englishDayOfWeek);
        }

        /**
         * Get the translation of the current short week day name (with context for languages with multiple forms).
         *
         * @param string|null $context whole format string
         *
         * @return string
         */
        public function getTranslatedShortDayName($context = null)
        {
            return $this->getTranslatedDayName($context, '_short', $this->shortEnglishDayOfWeek);
        }

        /**
         * Get the translation of the current abbreviated week day name (with context for languages with multiple forms).
         *
         * @param string|null $context whole format string
         *
         * @return string
         */
        public function getTranslatedMinDayName($context = null)
        {
            return $this->getTranslatedDayName($context, '_min', $this->shortEnglishDayOfWeek);
        }

        /**
         * Get the translation of the current month day name (with context for languages with multiple forms).
         *
         * @param string|null $context      whole format string
         * @param string      $keySuffix    "" or "_short"
         * @param string|null $defaultValue default value if translation missing
         *
         * @return string
         */
        public function getTranslatedMonthName($context = null, $keySuffix = '', $defaultValue = null)
        {
            return $this->getTranslatedFormByRegExp('months', $keySuffix, $context, $this->month - 1, $defaultValue ?: $this->englishMonth);
        }

        /**
         * Get the translation of the current short month day name (with context for languages with multiple forms).
         *
         * @param string|null $context whole format string
         *
         * @return string
         */
        public function getTranslatedShortMonthName($context = null)
        {
            return $this->getTranslatedMonthName($context, '_short', $this->shortEnglishMonth);
        }

        /**
         * Get/set the day of year.
         *
         * @param int|null $value new value for day of year if using as setter.
         *
         * @return static|int
         */
        public function dayOfYear($value = null)
        {
            $dayOfYear = $this->dayOfYear;

            return $value === null ? $dayOfYear : $this->addDays($value - $dayOfYear);
        }

        /**
         * Get/set the weekday from 0 (Sunday) to 6 (Saturday).
         *
         * @param int|null $value new value for weekday if using as setter.
         *
         * @return static|int
         */
        public function weekday($value = null)
        {
            $dayOfWeek = ($this->dayOfWeek + 7 - (int) ($this->getTranslationMessage('first_day_of_week') ?? 0)) % 7;

            return $value === null ? $dayOfWeek : $this->addDays($value - $dayOfWeek);
        }

        /**
         * Get/set the ISO weekday from 1 (Monday) to 7 (Sunday).
         *
         * @param int|null $value new value for weekday if using as setter.
         *
         * @return static|int
         */
        public function isoWeekday($value = null)
        {
            $dayOfWeekIso = $this->dayOfWeekIso;

            return $value === null ? $dayOfWeekIso : $this->addDays($value - $dayOfWeekIso);
        }

        /**
         * Set any unit to a new value without overflowing current other unit given.
         *
         * @param string $valueUnit    unit name to modify
         * @param int    $value        new value for the input unit
         * @param string $overflowUnit unit name to not overflow
         *
         * @return static
         */
        public function setUnitNoOverflow($valueUnit, $value, $overflowUnit)
        {
            try {
                $original = $this->avoidMutation();
                /** @var static $date */
                $date = $this->$valueUnit($value);
                $end = $original->avoidMutation()->endOf($overflowUnit);
                $start = $original->avoidMutation()->startOf($overflowUnit);
                if ($date < $start) {
                    $date = $date->setDateTimeFrom($start);
                } elseif ($date > $end) {
                    $date = $date->setDateTimeFrom($end);
                }

                return $date;
            } catch (BadMethodCallException | ReflectionException $exception) {
                throw new UnknownUnitException($valueUnit, 0, $exception);
            }
        }

        /**
         * Add any unit to a new value without overflowing current other unit given.
         *
         * @param string $valueUnit    unit name to modify
         * @param int    $value        amount to add to the input unit
         * @param string $overflowUnit unit name to not overflow
         *
         * @return static
         */
        public function addUnitNoOverflow($valueUnit, $value, $overflowUnit)
        {
            return $this->setUnitNoOverflow($valueUnit, $this->$valueUnit + $value, $overflowUnit);
        }

        /**
         * Subtract any unit to a new value without overflowing current other unit given.
         *
         * @param string $valueUnit    unit name to modify
         * @param int    $value        amount to subtract to the input unit
         * @param string $overflowUnit unit name to not overflow
         *
         * @return static
         */
        public function subUnitNoOverflow($valueUnit, $value, $overflowUnit)
        {
            return $this->setUnitNoOverflow($valueUnit, $this->$valueUnit - $value, $overflowUnit);
        }

        /**
         * Returns the minutes offset to UTC if no arguments passed, else set the timezone with given minutes shift passed.
         *
         * @param int|null $minuteOffset
         *
         * @return int|static
         */
        public function utcOffset(int $minuteOffset = null)
        {
            if (\func_num_args() < 1) {
                return $this->offsetMinutes;
            }

            return $this->setTimezone(CarbonTimeZone::createFromMinuteOffset($minuteOffset));
        }

        /**
         * Set the date with gregorian year, month and day numbers.
         *
         * @see https://php.net/manual/en/datetime.setdate.php
         *
         * @param int $year
         * @param int $month
         * @param int $day
         *
         * @return static
         */
        #[ReturnTypeWillChange]
        public function setDate($year, $month, $day)
        {
            return parent::setDate((int) $year, (int) $month, (int) $day);
        }

        /**
         * Set a date according to the ISO 8601 standard - using weeks and day offsets rather than specific dates.
         *
         * @see https://php.net/manual/en/datetime.setisodate.php
         *
         * @param int $year
         * @param int $week
         * @param int $day
         *
         * @return static
         */
        #[ReturnTypeWillChange]
        public function setISODate($year, $week, $day = 1)
        {
            return parent::setISODate((int) $year, (int) $week, (int) $day);
        }

        /**
         * Set the date and time all together.
         *
         * @param int $year
         * @param int $month
         * @param int $day
         * @param int $hour
         * @param int $minute
         * @param int $second
         * @param int $microseconds
         *
         * @return static
         */
        public function setDateTime($year, $month, $day, $hour, $minute, $second = 0, $microseconds = 0)
        {
            return $this->setDate($year, $month, $day)->setTime((int) $hour, (int) $minute, (int) $second, (int) $microseconds);
        }

        /**
         * Resets the current time of the DateTime object to a different time.
         *
         * @see https://php.net/manual/en/datetime.settime.php
         *
         * @param int $hour
         * @param int $minute
         * @param int $second
         * @param int $microseconds
         *
         * @return static
         */
        #[ReturnTypeWillChange]
        public function setTime($hour, $minute, $second = 0, $microseconds = 0)
        {
            return parent::setTime((int) $hour, (int) $minute, (int) $second, (int) $microseconds);
        }

        /**
         * Set the instance's timestamp.
         *
         * Timestamp input can be given as int, float or a string containing one or more numbers.
         *
         * @param float|int|string $unixTimestamp
         *
         * @return static
         */
        #[ReturnTypeWillChange]
        public function setTimestamp($unixTimestamp)
        {
            [$timestamp, $microseconds] = self::getIntegerAndDecimalParts($unixTimestamp);

            return parent::setTimestamp((int) $timestamp)->setMicroseconds((int) $microseconds);
        }

        /**
         * Set the time by time string.
         *
         * @param string $time
         *
         * @return static
         */
        public function setTimeFromTimeString($time)
        {
            if (!str_contains($time, ':')) {
                $time .= ':0';
            }

            return $this->modify($time);
        }

        /**
         * @alias setTimezone
         *
         * @param DateTimeZone|string $value
         *
         * @return static
         */
        public function timezone($value)
        {
            return $this->setTimezone($value);
        }

        /**
         * Set the timezone or returns the timezone name if no arguments passed.
         *
         * @param DateTimeZone|string $value
         *
         * @return static|string
         */
        public function tz($value = null)
        {
            if (\func_num_args() < 1) {
                return $this->tzName;
            }

            return $this->setTimezone($value);
        }

        /**
         * Set the instance's timezone from a string or object.
         *
         * @param DateTimeZone|string $value
         *
         * @return static
         */
        #[ReturnTypeWillChange]
        public function setTimezone($value)
        {
            $tz = static::safeCreateDateTimeZone($value);

            if ($tz === false && !self::isStrictModeEnabled()) {
                $tz = new CarbonTimeZone();
            }

            return parent::setTimezone($tz);
        }

        /**
         * Set the instance's timezone from a string or object and add/subtract the offset difference.
         *
         * @param DateTimeZone|string $value
         *
         * @return static
         */
        public function shiftTimezone($value)
        {
            $dateTimeString = $this->format('Y-m-d H:i:s.u');

            return $this
                ->setTimezone($value)
                ->modify($dateTimeString);
        }

        /**
         * Set the instance's timezone to UTC.
         *
         * @return static
         */
        public function utc()
        {
            return $this->setTimezone('UTC');
        }

        /**
         * Set the year, month, and date for this instance to that of the passed instance.
         *
         * @param Carbon|DateTimeInterface $date now if null
         *
         * @return static
         */
        public function setDateFrom($date = null)
        {
            $date = $this->resolveCarbon($date);

            return $this->setDate($date->year, $date->month, $date->day);
        }

        /**
         * Set the hour, minute, second and microseconds for this instance to that of the passed instance.
         *
         * @param Carbon|DateTimeInterface $date now if null
         *
         * @return static
         */
        public function setTimeFrom($date = null)
        {
            $date = $this->resolveCarbon($date);

            return $this->setTime($date->hour, $date->minute, $date->second, $date->microsecond);
        }

        /**
         * Set the date and time for this instance to that of the passed instance.
         *
         * @param Carbon|DateTimeInterface $date
         *
         * @return static
         */
        public function setDateTimeFrom($date = null)
        {
            $date = $this->resolveCarbon($date);

            return $this->modify($date->rawFormat('Y-m-d H:i:s.u'));
        }

        /**
         * Get the days of the week
         *
         * @return array
         */
        public static function getDays()
        {
            return static::$days;
        }

        ///////////////////////////////////////////////////////////////////
        /////////////////////// WEEK SPECIAL DAYS /////////////////////////
        ///////////////////////////////////////////////////////////////////

        private static function getFirstDayOfWeek(): int
        {
            return (int) static::getTranslationMessageWith(
                static::getTranslator(),
                'first_day_of_week'
            );
        }

        /**
         * Get the first day of week
         *
         * @return int
         */
        public static function getWeekStartsAt()
        {
            if (static::$weekStartsAt === static::WEEK_DAY_AUTO) {
                return static::getFirstDayOfWeek();
            }

            return static::$weekStartsAt;
        }

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             Use $weekEndsAt optional parameter instead when using endOfWeek method. You can also use the
         *             'first_day_of_week' locale setting to change the start of week according to current locale
         *             selected and implicitly the end of week.
         *
         * Set the first day of week
         *
         * @param int|string $day week start day (or 'auto' to get the first day of week from Carbon::getLocale() culture).
         *
         * @return void
         */
        public static function setWeekStartsAt($day)
        {
            static::$weekStartsAt = $day === static::WEEK_DAY_AUTO ? $day : max(0, (7 + $day) % 7);
        }

        /**
         * Get the last day of week
         *
         * @return int
         */
        public static function getWeekEndsAt()
        {
            if (static::$weekStartsAt === static::WEEK_DAY_AUTO) {
                return (int) (static::DAYS_PER_WEEK - 1 + static::getFirstDayOfWeek()) % static::DAYS_PER_WEEK;
            }

            return static::$weekEndsAt;
        }

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             Use $weekStartsAt optional parameter instead when using startOfWeek, floorWeek, ceilWeek
         *             or roundWeek method. You can also use the 'first_day_of_week' locale setting to change the
         *             start of week according to current locale selected and implicitly the end of week.
         *
         * Set the last day of week
         *
         * @param int|string $day week end day (or 'auto' to get the day before the first day of week
         *                        from Carbon::getLocale() culture).
         *
         * @return void
         */
        public static function setWeekEndsAt($day)
        {
            static::$weekEndsAt = $day === static::WEEK_DAY_AUTO ? $day : max(0, (7 + $day) % 7);
        }

        /**
         * Get weekend days
         *
         * @return array
         */
        public static function getWeekendDays()
        {
            return static::$weekendDays;
        }

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather consider week-end is always saturday and sunday, and if you have some custom
         *             week-end days to handle, give to those days an other name and create a macro for them:
         *
         *             ```
         *             Carbon::macro('isDayOff', function ($date) {
         *                 return $date->isSunday() || $date->isMonday();
         *             });
         *             Carbon::macro('isNotDayOff', function ($date) {
         *                 return !$date->isDayOff();
         *             });
         *             if ($someDate->isDayOff()) ...
         *             if ($someDate->isNotDayOff()) ...
         *             // Add 5 not-off days
         *             $count = 5;
         *             while ($someDate->isDayOff() || ($count-- > 0)) {
         *                 $someDate->addDay();
         *             }
         *             ```
         *
         * Set weekend days
         *
         * @param array $days
         *
         * @return void
         */
        public static function setWeekendDays($days)
        {
            static::$weekendDays = $days;
        }

        /**
         * Determine if a time string will produce a relative date.
         *
         * @param string $time
         *
         * @return bool true if time match a relative date, false if absolute or invalid time string
         */
        public static function hasRelativeKeywords($time)
        {
            if (!$time || strtotime($time) === false) {
                return false;
            }

            $date1 = new DateTime('2000-01-01T00:00:00Z');
            $date1->modify($time);
            $date2 = new DateTime('2001-12-25T00:00:00Z');
            $date2->modify($time);

            return $date1 != $date2;
        }

        ///////////////////////////////////////////////////////////////////
        /////////////////////// STRING FORMATTING /////////////////////////
        ///////////////////////////////////////////////////////////////////

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather use UTF-8 language packages on every machine.
         *
         * Set if UTF8 will be used for localized date/time.
         *
         * @param bool $utf8
         */
        public static function setUtf8($utf8)
        {
            static::$utf8 = $utf8;
        }

        /**
         * Format the instance with the current locale.  You can set the current
         * locale using setlocale() https://php.net/setlocale.
         *
         * @param string $format
         *
         * @return string
         */
        public function formatLocalized($format)
        {
            // Check for Windows to find and replace the %e modifier correctly.
            if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
                $format = preg_replace('#(?<!%)((?:%%)*)%e#', '\1%#d', $format); // @codeCoverageIgnore
            }

            $formatted = strftime($format, strtotime($this->toDateTimeString()));

            return static::$utf8 ? utf8_encode($formatted) : $formatted;
        }

        /**
         * Returns list of locale formats for ISO formatting.
         *
         * @param string|null $locale current locale used if null
         *
         * @return array
         */
        public function getIsoFormats($locale = null)
        {
            return [
                'LT' => $this->getTranslationMessage('formats.LT', $locale, 'h:mm A'),
                'LTS' => $this->getTranslationMessage('formats.LTS', $locale, 'h:mm:ss A'),
                'L' => $this->getTranslationMessage('formats.L', $locale, 'MM/DD/YYYY'),
                'LL' => $this->getTranslationMessage('formats.LL', $locale, 'MMMM D, YYYY'),
                'LLL' => $this->getTranslationMessage('formats.LLL', $locale, 'MMMM D, YYYY h:mm A'),
                'LLLL' => $this->getTranslationMessage('formats.LLLL', $locale, 'dddd, MMMM D, YYYY h:mm A'),
            ];
        }

        /**
         * Returns list of calendar formats for ISO formatting.
         *
         * @param string|null $locale current locale used if null
         *
         * @return array
         */
        public function getCalendarFormats($locale = null)
        {
            return [
                'sameDay' => $this->getTranslationMessage('calendar.sameDay', $locale, '[Today at] LT'),
                'nextDay' => $this->getTranslationMessage('calendar.nextDay', $locale, '[Tomorrow at] LT'),
                'nextWeek' => $this->getTranslationMessage('calendar.nextWeek', $locale, 'dddd [at] LT'),
                'lastDay' => $this->getTranslationMessage('calendar.lastDay', $locale, '[Yesterday at] LT'),
                'lastWeek' => $this->getTranslationMessage('calendar.lastWeek', $locale, '[Last] dddd [at] LT'),
                'sameElse' => $this->getTranslationMessage('calendar.sameElse', $locale, 'L'),
            ];
        }

        /**
         * Returns list of locale units for ISO formatting.
         *
         * @return array
         */
        public static function getIsoUnits()
        {
            static $units = null;

            if ($units === null) {
                $units = [
                    'OD' => ['getAltNumber', ['day']],
                    'OM' => ['getAltNumber', ['month']],
                    'OY' => ['getAltNumber', ['year']],
                    'OH' => ['getAltNumber', ['hour']],
                    'Oh' => ['getAltNumber', ['h']],
                    'Om' => ['getAltNumber', ['minute']],
                    'Os' => ['getAltNumber', ['second']],
                    'D' => 'day',
                    'DD' => ['rawFormat', ['d']],
                    'Do' => ['ordinal', ['day', 'D']],
                    'd' => 'dayOfWeek',
                    'dd' => function (CarbonInterface $date, $originalFormat = null) {
                        return $date->getTranslatedMinDayName($originalFormat);
                    },
                    'ddd' => function (CarbonInterface $date, $originalFormat = null) {
                        return $date->getTranslatedShortDayName($originalFormat);
                    },
                    'dddd' => function (CarbonInterface $date, $originalFormat = null) {
                        return $date->getTranslatedDayName($originalFormat);
                    },
                    'DDD' => 'dayOfYear',
                    'DDDD' => ['getPaddedUnit', ['dayOfYear', 3]],
                    'DDDo' => ['ordinal', ['dayOfYear', 'DDD']],
                    'e' => ['weekday', []],
                    'E' => 'dayOfWeekIso',
                    'H' => ['rawFormat', ['G']],
                    'HH' => ['rawFormat', ['H']],
                    'h' => ['rawFormat', ['g']],
                    'hh' => ['rawFormat', ['h']],
                    'k' => 'noZeroHour',
                    'kk' => ['getPaddedUnit', ['noZeroHour']],
                    'hmm' => ['rawFormat', ['gi']],
                    'hmmss' => ['rawFormat', ['gis']],
                    'Hmm' => ['rawFormat', ['Gi']],
                    'Hmmss' => ['rawFormat', ['Gis']],
                    'm' => 'minute',
                    'mm' => ['rawFormat', ['i']],
                    'a' => 'meridiem',
                    'A' => 'upperMeridiem',
                    's' => 'second',
                    'ss' => ['getPaddedUnit', ['second']],
                    'S' => function (CarbonInterface $date) {
                        return (string) floor($date->micro / 100000);
                    },
                    'SS' => function (CarbonInterface $date) {
                        return str_pad((string) floor($date->micro / 10000), 2, '0', STR_PAD_LEFT);
                    },
                    'SSS' => function (CarbonInterface $date) {
                        return str_pad((string) floor($date->micro / 1000), 3, '0', STR_PAD_LEFT);
                    },
                    'SSSS' => function (CarbonInterface $date) {
                        return str_pad((string) floor($date->micro / 100), 4, '0', STR_PAD_LEFT);
                    },
                    'SSSSS' => function (CarbonInterface $date) {
                        return str_pad((string) floor($date->micro / 10), 5, '0', STR_PAD_LEFT);
                    },
                    'SSSSSS' => ['getPaddedUnit', ['micro', 6]],
                    'SSSSSSS' => function (CarbonInterface $date) {
                        return str_pad((string) floor($date->micro * 10), 7, '0', STR_PAD_LEFT);
                    },
                    'SSSSSSSS' => function (CarbonInterface $date) {
                        return str_pad((string) floor($date->micro * 100), 8, '0', STR_PAD_LEFT);
                    },
                    'SSSSSSSSS' => function (CarbonInterface $date) {
                        return str_pad((string) floor($date->micro * 1000), 9, '0', STR_PAD_LEFT);
                    },
                    'M' => 'month',
                    'MM' => ['rawFormat', ['m']],
                    'MMM' => function (CarbonInterface $date, $originalFormat = null) {
                        $month = $date->getTranslatedShortMonthName($originalFormat);
                        $suffix = $date->getTranslationMessage('mmm_suffix');
                        if ($suffix && $month !== $date->monthName) {
                            $month .= $suffix;
                        }

                        return $month;
                    },
                    'MMMM' => function (CarbonInterface $date, $originalFormat = null) {
                        return $date->getTranslatedMonthName($originalFormat);
                    },
                    'Mo' => ['ordinal', ['month', 'M']],
                    'Q' => 'quarter',
                    'Qo' => ['ordinal', ['quarter', 'M']],
                    'G' => 'isoWeekYear',
                    'GG' => ['getPaddedUnit', ['isoWeekYear']],
                    'GGG' => ['getPaddedUnit', ['isoWeekYear', 3]],
                    'GGGG' => ['getPaddedUnit', ['isoWeekYear', 4]],
                    'GGGGG' => ['getPaddedUnit', ['isoWeekYear', 5]],
                    'g' => 'weekYear',
                    'gg' => ['getPaddedUnit', ['weekYear']],
                    'ggg' => ['getPaddedUnit', ['weekYear', 3]],
                    'gggg' => ['getPaddedUnit', ['weekYear', 4]],
                    'ggggg' => ['getPaddedUnit', ['weekYear', 5]],
                    'W' => 'isoWeek',
                    'WW' => ['getPaddedUnit', ['isoWeek']],
                    'Wo' => ['ordinal', ['isoWeek', 'W']],
                    'w' => 'week',
                    'ww' => ['getPaddedUnit', ['week']],
                    'wo' => ['ordinal', ['week', 'w']],
                    'x' => ['valueOf', []],
                    'X' => 'timestamp',
                    'Y' => 'year',
                    'YY' => ['rawFormat', ['y']],
                    'YYYY' => ['getPaddedUnit', ['year', 4]],
                    'YYYYY' => ['getPaddedUnit', ['year', 5]],
                    'YYYYYY' => function (CarbonInterface $date) {
                        return ($date->year < 0 ? '' : '+').$date->getPaddedUnit('year', 6);
                    },
                    'z' => ['rawFormat', ['T']],
                    'zz' => 'tzName',
                    'Z' => ['getOffsetString', []],
                    'ZZ' => ['getOffsetString', ['']],
                ];
            }

            return $units;
        }

        /**
         * Returns a unit of the instance padded with 0 by default or any other string if specified.
         *
         * @param string $unit      Carbon unit name
         * @param int    $length    Length of the output (2 by default)
         * @param string $padString String to use for padding ("0" by default)
         * @param int    $padType   Side(s) to pad (STR_PAD_LEFT by default)
         *
         * @return string
         */
        public function getPaddedUnit($unit, $length = 2, $padString = '0', $padType = STR_PAD_LEFT)
        {
            return ($this->$unit < 0 ? '-' : '').str_pad((string) abs($this->$unit), $length, $padString, $padType);
        }

        /**
         * Return a property with its ordinal.
         *
         * @param string      $key
         * @param string|null $period
         *
         * @return string
         */
        public function ordinal(string $key, ?string $period = null): string
        {
            $number = $this->$key;
            $result = $this->translate('ordinal', [
                ':number' => $number,
                ':period' => (string) $period,
            ]);

            return (string) ($result === 'ordinal' ? $number : $result);
        }

        /**
         * Return the meridiem of the current time in the current locale.
         *
         * @param bool $isLower if true, returns lowercase variant if available in the current locale.
         *
         * @return string
         */
        public function meridiem(bool $isLower = false): string
        {
            $hour = $this->hour;
            $index = $hour < 12 ? 0 : 1;

            if ($isLower) {
                $key = 'meridiem.'.($index + 2);
                $result = $this->translate($key);

                if ($result !== $key) {
                    return $result;
                }
            }

            $key = "meridiem.$index";
            $result = $this->translate($key);
            if ($result === $key) {
                $result = $this->translate('meridiem', [
                    ':hour' => $this->hour,
                    ':minute' => $this->minute,
                    ':isLower' => $isLower,
                ]);

                if ($result === 'meridiem') {
                    return $isLower ? $this->latinMeridiem : $this->latinUpperMeridiem;
                }
            } elseif ($isLower) {
                $result = mb_strtolower($result);
            }

            return $result;
        }

        /**
         * Returns the alternative number for a given date property if available in the current locale.
         *
         * @param string $key date property
         *
         * @return string
         */
        public function getAltNumber(string $key): string
        {
            return $this->translateNumber(\strlen($key) > 1 ? $this->$key : $this->rawFormat('h'));
        }

        /**
         * Format in the current language using ISO replacement patterns.
         *
         * @param string      $format
         * @param string|null $originalFormat provide context if a chunk has been passed alone
         *
         * @return string
         */
        public function isoFormat(string $format, ?string $originalFormat = null): string
        {
            $result = '';
            $length = mb_strlen($format);
            $originalFormat = $originalFormat ?: $format;
            $inEscaped = false;
            $formats = null;
            $units = null;

            for ($i = 0; $i < $length; $i++) {
                $char = mb_substr($format, $i, 1);

                if ($char === '\\') {
                    $result .= mb_substr($format, ++$i, 1);

                    continue;
                }

                if ($char === '[' && !$inEscaped) {
                    $inEscaped = true;

                    continue;
                }

                if ($char === ']' && $inEscaped) {
                    $inEscaped = false;

                    continue;
                }

                if ($inEscaped) {
                    $result .= $char;

                    continue;
                }

                $input = mb_substr($format, $i);

                if (preg_match('/^(LTS|LT|[Ll]{1,4})/', $input, $match)) {
                    if ($formats === null) {
                        $formats = $this->getIsoFormats();
                    }

                    $code = $match[0];
                    $sequence = $formats[$code] ?? preg_replace_callback(
                        '/MMMM|MM|DD|dddd/',
                        function ($code) {
                            return mb_substr($code[0], 1);
                        },
                        $formats[strtoupper($code)] ?? ''
                    );
                    $rest = mb_substr($format, $i + mb_strlen($code));
                    $format = mb_substr($format, 0, $i).$sequence.$rest;
                    $length = mb_strlen($format);
                    $input = $sequence.$rest;
                }

                if (preg_match('/^'.CarbonInterface::ISO_FORMAT_REGEXP.'/', $input, $match)) {
                    $code = $match[0];

                    if ($units === null) {
                        $units = static::getIsoUnits();
                    }

                    $sequence = $units[$code] ?? '';

                    if ($sequence instanceof Closure) {
                        $sequence = $sequence($this, $originalFormat);
                    } elseif (\is_array($sequence)) {
                        try {
                            $sequence = $this->{$sequence[0]}(...$sequence[1]);
                        } catch (ReflectionException | InvalidArgumentException | BadMethodCallException $e) {
                            $sequence = '';
                        }
                    } elseif (\is_string($sequence)) {
                        $sequence = $this->$sequence ?? $code;
                    }

                    $format = mb_substr($format, 0, $i).$sequence.mb_substr($format, $i + mb_strlen($code));
                    $i += mb_strlen((string) $sequence) - 1;
                    $length = mb_strlen($format);
                    $char = $sequence;
                }

                $result .= $char;
            }

            return $result;
        }

        /**
         * List of replacements from date() format to isoFormat().
         *
         * @return array
         */
        public static function getFormatsToIsoReplacements()
        {
            static $replacements = null;

            if ($replacements === null) {
                $replacements = [
                    'd' => true,
                    'D' => 'ddd',
                    'j' => true,
                    'l' => 'dddd',
                    'N' => true,
                    'S' => function ($date) {
                        $day = $date->rawFormat('j');

                        return str_replace((string) $day, '', $date->isoFormat('Do'));
                    },
                    'w' => true,
                    'z' => true,
                    'W' => true,
                    'F' => 'MMMM',
                    'm' => true,
                    'M' => 'MMM',
                    'n' => true,
                    't' => true,
                    'L' => true,
                    'o' => true,
                    'Y' => true,
                    'y' => true,
                    'a' => 'a',
                    'A' => 'A',
                    'B' => true,
                    'g' => true,
                    'G' => true,
                    'h' => true,
                    'H' => true,
                    'i' => true,
                    's' => true,
                    'u' => true,
                    'v' => true,
                    'E' => true,
                    'I' => true,
                    'O' => true,
                    'P' => true,
                    'Z' => true,
                    'c' => true,
                    'r' => true,
                    'U' => true,
                ];
            }

            return $replacements;
        }

        /**
         * Format as ->format() do (using date replacements patterns from https://php.net/manual/en/function.date.php)
         * but translate words whenever possible (months, day names, etc.) using the current locale.
         *
         * @param string $format
         *
         * @return string
         */
        public function translatedFormat(string $format): string
        {
            $replacements = static::getFormatsToIsoReplacements();
            $context = '';
            $isoFormat = '';
            $length = mb_strlen($format);

            for ($i = 0; $i < $length; $i++) {
                $char = mb_substr($format, $i, 1);

                if ($char === '\\') {
                    $replacement = mb_substr($format, $i, 2);
                    $isoFormat .= $replacement;
                    $i++;

                    continue;
                }

                if (!isset($replacements[$char])) {
                    $replacement = preg_match('/^[A-Za-z]$/', $char) ? "\\$char" : $char;
                    $isoFormat .= $replacement;
                    $context .= $replacement;

                    continue;
                }

                $replacement = $replacements[$char];

                if ($replacement === true) {
                    static $contextReplacements = null;

                    if ($contextReplacements === null) {
                        $contextReplacements = [
                            'm' => 'MM',
                            'd' => 'DD',
                            't' => 'D',
                            'j' => 'D',
                            'N' => 'e',
                            'w' => 'e',
                            'n' => 'M',
                            'o' => 'YYYY',
                            'Y' => 'YYYY',
                            'y' => 'YY',
                            'g' => 'h',
                            'G' => 'H',
                            'h' => 'hh',
                            'H' => 'HH',
                            'i' => 'mm',
                            's' => 'ss',
                        ];
                    }

                    $isoFormat .= '['.$this->rawFormat($char).']';
                    $context .= $contextReplacements[$char] ?? ' ';

                    continue;
                }

                if ($replacement instanceof Closure) {
                    $replacement = '['.$replacement($this).']';
                    $isoFormat .= $replacement;
                    $context .= $replacement;

                    continue;
                }

                $isoFormat .= $replacement;
                $context .= $replacement;
            }

            return $this->isoFormat($isoFormat, $context);
        }

        /**
         * Returns the offset hour and minute formatted with +/- and a given separator (":" by default).
         * For example, if the time zone is 9 hours 30 minutes, you'll get "+09:30", with "@@" as first
         * argument, "+09@@30", with "" as first argument, "+0930". Negative offset will return something
         * like "-12:00".
         *
         * @param string $separator string to place between hours and minutes (":" by default)
         *
         * @return string
         */
        public function getOffsetString($separator = ':')
        {
            $second = $this->getOffset();
            $symbol = $second < 0 ? '-' : '+';
            $minute = abs($second) / static::SECONDS_PER_MINUTE;
            $hour = str_pad((string) floor($minute / static::MINUTES_PER_HOUR), 2, '0', STR_PAD_LEFT);
            $minute = str_pad((string) ($minute % static::MINUTES_PER_HOUR), 2, '0', STR_PAD_LEFT);

            return "$symbol$hour$separator$minute";
        }

        protected static function executeStaticCallable($macro, ...$parameters)
        {
            return static::bindMacroContext(null, function () use (&$macro, &$parameters) {
                if ($macro instanceof Closure) {
                    $boundMacro = @Closure::bind($macro, null, static::class);

                    return ($boundMacro ?: $macro)(...$parameters);
                }

                return $macro(...$parameters);
            });
        }

        /**
         * Dynamically handle calls to the class.
         *
         * @param string $method     magic method name called
         * @param array  $parameters parameters list
         *
         * @throws BadMethodCallException
         *
         * @return mixed
         */
        public static function __callStatic($method, $parameters)
        {
            if (!static::hasMacro($method)) {
                foreach (static::getGenericMacros() as $callback) {
                    try {
                        return static::executeStaticCallable($callback, $method, ...$parameters);
                    } catch (BadMethodCallException $exception) {
                        continue;
                    }
                }
                if (static::isStrictModeEnabled()) {
                    throw new UnknownMethodException(sprintf('%s::%s', static::class, $method));
                }

                return null;
            }

            return static::executeStaticCallable(static::$globalMacros[$method], ...$parameters);
        }

        /**
         * Set specified unit to new given value.
         *
         * @param string $unit  year, month, day, hour, minute, second or microsecond
         * @param int    $value new value for given unit
         *
         * @return static
         */
        public function setUnit($unit, $value = null)
        {
            $unit = static::singularUnit($unit);
            $dateUnits = ['year', 'month', 'day'];
            if (\in_array($unit, $dateUnits)) {
                return $this->setDate(...array_map(function ($name) use ($unit, $value) {
                    return (int) ($name === $unit ? $value : $this->$name);
                }, $dateUnits));
            }

            $units = ['hour', 'minute', 'second', 'micro'];
            if ($unit === 'millisecond' || $unit === 'milli') {
                $value *= 1000;
                $unit = 'micro';
            } elseif ($unit === 'microsecond') {
                $unit = 'micro';
            }

            return $this->setTime(...array_map(function ($name) use ($unit, $value) {
                return (int) ($name === $unit ? $value : $this->$name);
            }, $units));
        }

        /**
         * Returns standardized singular of a given singular/plural unit name (in English).
         *
         * @param string $unit
         *
         * @return string
         */
        public static function singularUnit(string $unit): string
        {
            $unit = rtrim(mb_strtolower($unit), 's');

            if ($unit === 'centurie') {
                return 'century';
            }

            if ($unit === 'millennia') {
                return 'millennium';
            }

            return $unit;
        }

        /**
         * Returns standardized plural of a given singular/plural unit name (in English).
         *
         * @param string $unit
         *
         * @return string
         */
        public static function pluralUnit(string $unit): string
        {
            $unit = rtrim(strtolower($unit), 's');

            if ($unit === 'century') {
                return 'centuries';
            }

            if ($unit === 'millennium' || $unit === 'millennia') {
                return 'millennia';
            }

            return "${unit}s";
        }

        protected function executeCallable($macro, ...$parameters)
        {
            if ($macro instanceof Closure) {
                $boundMacro = @$macro->bindTo($this, static::class) ?: @$macro->bindTo(null, static::class);

                return ($boundMacro ?: $macro)(...$parameters);
            }

            return $macro(...$parameters);
        }

        protected function executeCallableWithContext($macro, ...$parameters)
        {
            return static::bindMacroContext($this, function () use (&$macro, &$parameters) {
                return $this->executeCallable($macro, ...$parameters);
            });
        }

        protected static function getGenericMacros()
        {
            foreach (static::$globalGenericMacros as $list) {
                foreach ($list as $macro) {
                    yield $macro;
                }
            }
        }

        /**
         * Dynamically handle calls to the class.
         *
         * @param string $method     magic method name called
         * @param array  $parameters parameters list
         *
         * @throws UnknownMethodException|BadMethodCallException|ReflectionException|Throwable
         *
         * @return mixed
         */
        public function __call($method, $parameters)
        {
            $diffSizes = [
                // @mode diffForHumans
                'short' => true,
                // @mode diffForHumans
                'long' => false,
            ];
            $diffSyntaxModes = [
                // @call diffForHumans
                'Absolute' => CarbonInterface::DIFF_ABSOLUTE,
                // @call diffForHumans
                'Relative' => CarbonInterface::DIFF_RELATIVE_AUTO,
                // @call diffForHumans
                'RelativeToNow' => CarbonInterface::DIFF_RELATIVE_TO_NOW,
                // @call diffForHumans
                'RelativeToOther' => CarbonInterface::DIFF_RELATIVE_TO_OTHER,
            ];
            $sizePattern = implode('|', array_keys($diffSizes));
            $syntaxPattern = implode('|', array_keys($diffSyntaxModes));

            if (preg_match("/^(?<size>$sizePattern)(?<syntax>$syntaxPattern)DiffForHumans$/", $method, $match)) {
                $dates = array_filter($parameters, function ($parameter) {
                    return $parameter instanceof DateTimeInterface;
                });
                $other = null;

                if (\count($dates)) {
                    $key = key($dates);
                    $other = current($dates);
                    array_splice($parameters, $key, 1);
                }

                return $this->diffForHumans($other, $diffSyntaxModes[$match['syntax']], $diffSizes[$match['size']], ...$parameters);
            }

            $roundedValue = $this->callRoundMethod($method, $parameters);

            if ($roundedValue !== null) {
                return $roundedValue;
            }

            $unit = rtrim($method, 's');

            if (str_starts_with($unit, 'is')) {
                $word = substr($unit, 2);

                if (\in_array($word, static::$days)) {
                    return $this->isDayOfWeek($word);
                }

                switch ($word) {
                    // @call is Check if the current instance has UTC timezone. (Both isUtc and isUTC cases are valid.)
                    case 'Utc':
                    case 'UTC':
                        return $this->utc;
                    // @call is Check if the current instance has non-UTC timezone.
                    case 'Local':
                        return $this->local;
                    // @call is Check if the current instance is a valid date.
                    case 'Valid':
                        return $this->year !== 0;
                    // @call is Check if the current instance is in a daylight saving time.
                    case 'DST':
                        return $this->dst;
                }
            }

            $action = substr($unit, 0, 3);
            $overflow = null;

            if ($action === 'set') {
                $unit = strtolower(substr($unit, 3));
            }

            if (\in_array($unit, static::$units)) {
                return $this->setUnit($unit, ...$parameters);
            }

            if ($action === 'add' || $action === 'sub') {
                $unit = substr($unit, 3);

                if (str_starts_with($unit, 'Real')) {
                    $unit = static::singularUnit(substr($unit, 4));

                    return $this->{"${action}RealUnit"}($unit, ...$parameters);
                }

                if (preg_match('/^(Month|Quarter|Year|Decade|Century|Centurie|Millennium|Millennia)s?(No|With|Without|WithNo)Overflow$/', $unit, $match)) {
                    $unit = $match[1];
                    $overflow = $match[2] === 'With';
                }

                $unit = static::singularUnit($unit);
            }

            if (static::isModifiableUnit($unit)) {
                return $this->{"${action}Unit"}($unit, $parameters[0] ?? 1, $overflow);
            }

            $sixFirstLetters = substr($unit, 0, 6);
            $factor = -1;

            if ($sixFirstLetters === 'isLast') {
                $sixFirstLetters = 'isNext';
                $factor = 1;
            }

            if ($sixFirstLetters === 'isNext') {
                $lowerUnit = strtolower(substr($unit, 6));

                if (static::isModifiableUnit($lowerUnit)) {
                    return $this->copy()->addUnit($lowerUnit, $factor, false)->isSameUnit($lowerUnit, ...$parameters);
                }
            }

            if ($sixFirstLetters === 'isSame') {
                try {
                    return $this->isSameUnit(strtolower(substr($unit, 6)), ...$parameters);
                } catch (BadComparisonUnitException $exception) {
                    // Try next
                }
            }

            if (str_starts_with($unit, 'isCurrent')) {
                try {
                    return $this->isCurrentUnit(strtolower(substr($unit, 9)));
                } catch (BadComparisonUnitException | BadMethodCallException $exception) {
                    // Try next
                }
            }

            if (str_ends_with($method, 'Until')) {
                try {
                    $unit = static::singularUnit(substr($method, 0, -5));

                    return $this->range($parameters[0] ?? $this, $parameters[1] ?? 1, $unit);
                } catch (InvalidArgumentException $exception) {
                    // Try macros
                }
            }

            return static::bindMacroContext($this, function () use (&$method, &$parameters) {
                $macro = $this->getLocalMacro($method);

                if (!$macro) {
                    foreach ([$this->localGenericMacros ?: [], static::getGenericMacros()] as $list) {
                        foreach ($list as $callback) {
                            try {
                                return $this->executeCallable($callback, $method, ...$parameters);
                            } catch (BadMethodCallException $exception) {
                                continue;
                            }
                        }
                    }

                    if ($this->localStrictModeEnabled ?? static::isStrictModeEnabled()) {
                        throw new UnknownMethodException($method);
                    }

                    return null;
                }

                return $this->executeCallable($macro, ...$parameters);
            });
        }
    }
  uploads-Carbon-src-Carbon-Traits-Difference.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Traits;

    use Carbon\Carbon;
    use Carbon\CarbonImmutable;
    use Carbon\CarbonInterface;
    use Carbon\CarbonInterval;
    use Carbon\CarbonPeriod;
    use Carbon\Translator;
    use Closure;
    use DateInterval;
    use DateTimeInterface;
    use ReturnTypeWillChange;

    /**
     * Trait Difference.
     *
     * Depends on the following methods:
     *
     * @method bool lessThan($date)
     * @method static copy()
     * @method static resolveCarbon($date = null)
     * @method static Translator translator()
     */
    trait Difference
    {
        /**
         * @codeCoverageIgnore
         *
         * @param CarbonInterval $diff
         */
        protected static function fixNegativeMicroseconds(CarbonInterval $diff)
        {
            if ($diff->s !== 0 || $diff->i !== 0 || $diff->h !== 0 || $diff->d !== 0 || $diff->m !== 0 || $diff->y !== 0) {
                $diff->f = (round($diff->f * 1000000) + 1000000) / 1000000;
                $diff->s--;

                if ($diff->s < 0) {
                    $diff->s += 60;
                    $diff->i--;

                    if ($diff->i < 0) {
                        $diff->i += 60;
                        $diff->h--;

                        if ($diff->h < 0) {
                            $diff->h += 24;
                            $diff->d--;

                            if ($diff->d < 0) {
                                $diff->d += 30;
                                $diff->m--;

                                if ($diff->m < 0) {
                                    $diff->m += 12;
                                    $diff->y--;
                                }
                            }
                        }
                    }
                }

                return;
            }

            $diff->f *= -1;
            $diff->invert();
        }

        /**
         * @param DateInterval $diff
         * @param bool         $absolute
         *
         * @return CarbonInterval
         */
        protected static function fixDiffInterval(DateInterval $diff, $absolute)
        {
            $diff = CarbonInterval::instance($diff);

            // Work-around for https://bugs.php.net/bug.php?id=77145
            // @codeCoverageIgnoreStart
            if ($diff->f > 0 && $diff->y === -1 && $diff->m === 11 && $diff->d >= 27 && $diff->h === 23 && $diff->i === 59 && $diff->s === 59) {
                $diff->y = 0;
                $diff->m = 0;
                $diff->d = 0;
                $diff->h = 0;
                $diff->i = 0;
                $diff->s = 0;
                $diff->f = (1000000 - round($diff->f * 1000000)) / 1000000;
                $diff->invert();
            } elseif ($diff->f < 0) {
                static::fixNegativeMicroseconds($diff);
            }
            // @codeCoverageIgnoreEnd

            if ($absolute && $diff->invert) {
                $diff->invert();
            }

            return $diff;
        }

        /**
         * Get the difference as a DateInterval instance.
         * Return relative interval (negative if
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return DateInterval
         */
        #[ReturnTypeWillChange]
        public function diff($date = null, $absolute = false)
        {
            $other = $this->resolveCarbon($date);

            // Work-around for https://bugs.php.net/bug.php?id=81458
            // It was initially introduced for https://bugs.php.net/bug.php?id=80998
            // The very specific case of 80998 was fixed in PHP 8.1beta3, but it introduced 81458
            // So we still need to keep this for now
            // @codeCoverageIgnoreStart
            if (version_compare(PHP_VERSION, '8.1.0-dev', '>=') && $other->tz !== $this->tz) {
                $other = $other->avoidMutation()->tz($this->tz);
            }
            // @codeCoverageIgnoreEnd

            return parent::diff($other, (bool) $absolute);
        }

        /**
         * Get the difference as a CarbonInterval instance.
         * Return absolute interval (always positive) unless you pass false to the second argument.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return CarbonInterval
         */
        public function diffAsCarbonInterval($date = null, $absolute = true)
        {
            return static::fixDiffInterval($this->diff($this->resolveCarbon($date), $absolute), $absolute);
        }

        /**
         * Get the difference in years
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInYears($date = null, $absolute = true)
        {
            return (int) $this->diff($this->resolveCarbon($date), $absolute)->format('%r%y');
        }

        /**
         * Get the difference in quarters rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInQuarters($date = null, $absolute = true)
        {
            return (int) ($this->diffInMonths($date, $absolute) / static::MONTHS_PER_QUARTER);
        }

        /**
         * Get the difference in months rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInMonths($date = null, $absolute = true)
        {
            $date = $this->resolveCarbon($date);

            return $this->diffInYears($date, $absolute) * static::MONTHS_PER_YEAR + (int) $this->diff($date, $absolute)->format('%r%m');
        }

        /**
         * Get the difference in weeks rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInWeeks($date = null, $absolute = true)
        {
            return (int) ($this->diffInDays($date, $absolute) / static::DAYS_PER_WEEK);
        }

        /**
         * Get the difference in days rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInDays($date = null, $absolute = true)
        {
            return (int) $this->diff($this->resolveCarbon($date), $absolute)->format('%r%a');
        }

        /**
         * Get the difference in days using a filter closure rounded down.
         *
         * @param Closure                                                $callback
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInDaysFiltered(Closure $callback, $date = null, $absolute = true)
        {
            return $this->diffFiltered(CarbonInterval::day(), $callback, $date, $absolute);
        }

        /**
         * Get the difference in hours using a filter closure rounded down.
         *
         * @param Closure                                                $callback
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInHoursFiltered(Closure $callback, $date = null, $absolute = true)
        {
            return $this->diffFiltered(CarbonInterval::hour(), $callback, $date, $absolute);
        }

        /**
         * Get the difference by the given interval using a filter closure.
         *
         * @param CarbonInterval                                         $ci       An interval to traverse by
         * @param Closure                                                $callback
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffFiltered(CarbonInterval $ci, Closure $callback, $date = null, $absolute = true)
        {
            $start = $this;
            $end = $this->resolveCarbon($date);
            $inverse = false;

            if ($end < $start) {
                $start = $end;
                $end = $this;
                $inverse = true;
            }

            $options = CarbonPeriod::EXCLUDE_END_DATE | ($this->isMutable() ? 0 : CarbonPeriod::IMMUTABLE);
            $diff = $ci->toPeriod($start, $end, $options)->filter($callback)->count();

            return $inverse && !$absolute ? -$diff : $diff;
        }

        /**
         * Get the difference in weekdays rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInWeekdays($date = null, $absolute = true)
        {
            return $this->diffInDaysFiltered(function (CarbonInterface $date) {
                return $date->isWeekday();
            }, $date, $absolute);
        }

        /**
         * Get the difference in weekend days using a filter rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInWeekendDays($date = null, $absolute = true)
        {
            return $this->diffInDaysFiltered(function (CarbonInterface $date) {
                return $date->isWeekend();
            }, $date, $absolute);
        }

        /**
         * Get the difference in hours rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInHours($date = null, $absolute = true)
        {
            return (int) ($this->diffInSeconds($date, $absolute) / static::SECONDS_PER_MINUTE / static::MINUTES_PER_HOUR);
        }

        /**
         * Get the difference in hours rounded down using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInRealHours($date = null, $absolute = true)
        {
            return (int) ($this->diffInRealSeconds($date, $absolute) / static::SECONDS_PER_MINUTE / static::MINUTES_PER_HOUR);
        }

        /**
         * Get the difference in minutes rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInMinutes($date = null, $absolute = true)
        {
            return (int) ($this->diffInSeconds($date, $absolute) / static::SECONDS_PER_MINUTE);
        }

        /**
         * Get the difference in minutes rounded down using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInRealMinutes($date = null, $absolute = true)
        {
            return (int) ($this->diffInRealSeconds($date, $absolute) / static::SECONDS_PER_MINUTE);
        }

        /**
         * Get the difference in seconds rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInSeconds($date = null, $absolute = true)
        {
            $diff = $this->diff($date);

            if ($diff->days === 0) {
                $diff = static::fixDiffInterval($diff, $absolute);
            }

            $value = (((($diff->m || $diff->y ? $diff->days : $diff->d) * static::HOURS_PER_DAY) +
                $diff->h) * static::MINUTES_PER_HOUR +
                $diff->i) * static::SECONDS_PER_MINUTE +
                $diff->s;

            return $absolute || !$diff->invert ? $value : -$value;
        }

        /**
         * Get the difference in microseconds.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInMicroseconds($date = null, $absolute = true)
        {
            $diff = $this->diff($date);
            $value = (int) round(((((($diff->m || $diff->y ? $diff->days : $diff->d) * static::HOURS_PER_DAY) +
                $diff->h) * static::MINUTES_PER_HOUR +
                $diff->i) * static::SECONDS_PER_MINUTE +
                ($diff->f + $diff->s)) * static::MICROSECONDS_PER_SECOND);

            return $absolute || !$diff->invert ? $value : -$value;
        }

        /**
         * Get the difference in milliseconds rounded down.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInMilliseconds($date = null, $absolute = true)
        {
            return (int) ($this->diffInMicroseconds($date, $absolute) / static::MICROSECONDS_PER_MILLISECOND);
        }

        /**
         * Get the difference in seconds using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInRealSeconds($date = null, $absolute = true)
        {
            /** @var CarbonInterface $date */
            $date = $this->resolveCarbon($date);
            $value = $date->getTimestamp() - $this->getTimestamp();

            return $absolute ? abs($value) : $value;
        }

        /**
         * Get the difference in microseconds using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInRealMicroseconds($date = null, $absolute = true)
        {
            /** @var CarbonInterface $date */
            $date = $this->resolveCarbon($date);
            $value = ($date->timestamp - $this->timestamp) * static::MICROSECONDS_PER_SECOND +
                $date->micro - $this->micro;

            return $absolute ? abs($value) : $value;
        }

        /**
         * Get the difference in milliseconds rounded down using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return int
         */
        public function diffInRealMilliseconds($date = null, $absolute = true)
        {
            return (int) ($this->diffInRealMicroseconds($date, $absolute) / static::MICROSECONDS_PER_MILLISECOND);
        }

        /**
         * Get the difference in seconds as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInSeconds($date = null, $absolute = true)
        {
            return $this->diffInMicroseconds($date, $absolute) / static::MICROSECONDS_PER_SECOND;
        }

        /**
         * Get the difference in minutes as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInMinutes($date = null, $absolute = true)
        {
            return $this->floatDiffInSeconds($date, $absolute) / static::SECONDS_PER_MINUTE;
        }

        /**
         * Get the difference in hours as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInHours($date = null, $absolute = true)
        {
            return $this->floatDiffInMinutes($date, $absolute) / static::MINUTES_PER_HOUR;
        }

        /**
         * Get the difference in days as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInDays($date = null, $absolute = true)
        {
            $hoursDiff = $this->floatDiffInHours($date, $absolute);
            $interval = $this->diff($date, $absolute);

            if ($interval->y === 0 && $interval->m === 0 && $interval->d === 0) {
                return $hoursDiff / static::HOURS_PER_DAY;
            }

            $daysDiff = (int) $interval->format('%r%a');

            return $daysDiff + fmod($hoursDiff, static::HOURS_PER_DAY) / static::HOURS_PER_DAY;
        }

        /**
         * Get the difference in weeks as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInWeeks($date = null, $absolute = true)
        {
            return $this->floatDiffInDays($date, $absolute) / static::DAYS_PER_WEEK;
        }

        /**
         * Get the difference in months as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInMonths($date = null, $absolute = true)
        {
            $start = $this;
            $end = $this->resolveCarbon($date);
            $ascending = ($start <= $end);
            $sign = $absolute || $ascending ? 1 : -1;
            if (!$ascending) {
                [$start, $end] = [$end, $start];
            }
            $monthsDiff = $start->diffInMonths($end);
            /** @var Carbon|CarbonImmutable $floorEnd */
            $floorEnd = $start->avoidMutation()->addMonths($monthsDiff);

            if ($floorEnd >= $end) {
                return $sign * $monthsDiff;
            }

            /** @var Carbon|CarbonImmutable $startOfMonthAfterFloorEnd */
            $startOfMonthAfterFloorEnd = $floorEnd->avoidMutation()->addMonth()->startOfMonth();

            if ($startOfMonthAfterFloorEnd > $end) {
                return $sign * ($monthsDiff + $floorEnd->floatDiffInDays($end) / $floorEnd->daysInMonth);
            }

            return $sign * ($monthsDiff + $floorEnd->floatDiffInDays($startOfMonthAfterFloorEnd) / $floorEnd->daysInMonth + $startOfMonthAfterFloorEnd->floatDiffInDays($end) / $end->daysInMonth);
        }

        /**
         * Get the difference in year as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInYears($date = null, $absolute = true)
        {
            $start = $this;
            $end = $this->resolveCarbon($date);
            $ascending = ($start <= $end);
            $sign = $absolute || $ascending ? 1 : -1;
            if (!$ascending) {
                [$start, $end] = [$end, $start];
            }
            $yearsDiff = $start->diffInYears($end);
            /** @var Carbon|CarbonImmutable $floorEnd */
            $floorEnd = $start->avoidMutation()->addYears($yearsDiff);

            if ($floorEnd >= $end) {
                return $sign * $yearsDiff;
            }

            /** @var Carbon|CarbonImmutable $startOfYearAfterFloorEnd */
            $startOfYearAfterFloorEnd = $floorEnd->avoidMutation()->addYear()->startOfYear();

            if ($startOfYearAfterFloorEnd > $end) {
                return $sign * ($yearsDiff + $floorEnd->floatDiffInDays($end) / $floorEnd->daysInYear);
            }

            return $sign * ($yearsDiff + $floorEnd->floatDiffInDays($startOfYearAfterFloorEnd) / $floorEnd->daysInYear + $startOfYearAfterFloorEnd->floatDiffInDays($end) / $end->daysInYear);
        }

        /**
         * Get the difference in seconds as float (microsecond-precision) using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInRealSeconds($date = null, $absolute = true)
        {
            return $this->diffInRealMicroseconds($date, $absolute) / static::MICROSECONDS_PER_SECOND;
        }

        /**
         * Get the difference in minutes as float (microsecond-precision) using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInRealMinutes($date = null, $absolute = true)
        {
            return $this->floatDiffInRealSeconds($date, $absolute) / static::SECONDS_PER_MINUTE;
        }

        /**
         * Get the difference in hours as float (microsecond-precision) using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInRealHours($date = null, $absolute = true)
        {
            return $this->floatDiffInRealMinutes($date, $absolute) / static::MINUTES_PER_HOUR;
        }

        /**
         * Get the difference in days as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInRealDays($date = null, $absolute = true)
        {
            $date = $this->resolveUTC($date);
            $utc = $this->avoidMutation()->utc();
            $hoursDiff = $utc->floatDiffInRealHours($date, $absolute);

            return ($hoursDiff < 0 ? -1 : 1) * $utc->diffInDays($date) + fmod($hoursDiff, static::HOURS_PER_DAY) / static::HOURS_PER_DAY;
        }

        /**
         * Get the difference in weeks as float (microsecond-precision).
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInRealWeeks($date = null, $absolute = true)
        {
            return $this->floatDiffInRealDays($date, $absolute) / static::DAYS_PER_WEEK;
        }

        /**
         * Get the difference in months as float (microsecond-precision) using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInRealMonths($date = null, $absolute = true)
        {
            $start = $this;
            $end = $this->resolveCarbon($date);
            $ascending = ($start <= $end);
            $sign = $absolute || $ascending ? 1 : -1;
            if (!$ascending) {
                [$start, $end] = [$end, $start];
            }
            $monthsDiff = $start->diffInMonths($end);
            /** @var Carbon|CarbonImmutable $floorEnd */
            $floorEnd = $start->avoidMutation()->addMonths($monthsDiff);

            if ($floorEnd >= $end) {
                return $sign * $monthsDiff;
            }

            /** @var Carbon|CarbonImmutable $startOfMonthAfterFloorEnd */
            $startOfMonthAfterFloorEnd = $floorEnd->avoidMutation()->addMonth()->startOfMonth();

            if ($startOfMonthAfterFloorEnd > $end) {
                return $sign * ($monthsDiff + $floorEnd->floatDiffInRealDays($end) / $floorEnd->daysInMonth);
            }

            return $sign * ($monthsDiff + $floorEnd->floatDiffInRealDays($startOfMonthAfterFloorEnd) / $floorEnd->daysInMonth + $startOfMonthAfterFloorEnd->floatDiffInRealDays($end) / $end->daysInMonth);
        }

        /**
         * Get the difference in year as float (microsecond-precision) using timestamps.
         *
         * @param \Carbon\CarbonInterface|\DateTimeInterface|string|null $date
         * @param bool                                                   $absolute Get the absolute of the difference
         *
         * @return float
         */
        public function floatDiffInRealYears($date = null, $absolute = true)
        {
            $start = $this;
            $end = $this->resolveCarbon($date);
            $ascending = ($start <= $end);
            $sign = $absolute || $ascending ? 1 : -1;
            if (!$ascending) {
                [$start, $end] = [$end, $start];
            }
            $yearsDiff = $start->diffInYears($end);
            /** @var Carbon|CarbonImmutable $floorEnd */
            $floorEnd = $start->avoidMutation()->addYears($yearsDiff);

            if ($floorEnd >= $end) {
                return $sign * $yearsDiff;
            }

            /** @var Carbon|CarbonImmutable $startOfYearAfterFloorEnd */
            $startOfYearAfterFloorEnd = $floorEnd->avoidMutation()->addYear()->startOfYear();

            if ($startOfYearAfterFloorEnd > $end) {
                return $sign * ($yearsDiff + $floorEnd->floatDiffInRealDays($end) / $floorEnd->daysInYear);
            }

            return $sign * ($yearsDiff + $floorEnd->floatDiffInRealDays($startOfYearAfterFloorEnd) / $floorEnd->daysInYear + $startOfYearAfterFloorEnd->floatDiffInRealDays($end) / $end->daysInYear);
        }

        /**
         * The number of seconds since midnight.
         *
         * @return int
         */
        public function secondsSinceMidnight()
        {
            return $this->diffInSeconds($this->avoidMutation()->startOfDay());
        }

        /**
         * The number of seconds until 23:59:59.
         *
         * @return int
         */
        public function secondsUntilEndOfDay()
        {
            return $this->diffInSeconds($this->avoidMutation()->endOfDay());
        }

        /**
         * Get the difference in a human readable format in the current locale from current instance to an other
         * instance given (or now if null given).
         *
         * @example
         * ```
         * echo Carbon::tomorrow()->diffForHumans() . "\n";
         * echo Carbon::tomorrow()->diffForHumans(['parts' => 2]) . "\n";
         * echo Carbon::tomorrow()->diffForHumans(['parts' => 3, 'join' => true]) . "\n";
         * echo Carbon::tomorrow()->diffForHumans(Carbon::yesterday()) . "\n";
         * echo Carbon::tomorrow()->diffForHumans(Carbon::yesterday(), ['short' => true]) . "\n";
         * ```
         *
         * @param Carbon|\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
         *                                                             if null passed, now will be used as comparison reference;
         *                                                             if any other type, it will be converted to date and used as reference.
         * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
         *                                                             - 'syntax' entry (see below)
         *                                                             - 'short' entry (see below)
         *                                                             - 'parts' entry (see below)
         *                                                             - 'options' entry (see below)
         *                                                             - 'join' entry determines how to join multiple parts of the string
         *                                                             `  - if $join is a string, it's used as a joiner glue
         *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
         *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
         *                                                             `    will be used instead of the glue for the last item
         *                                                             `  - if $join is true, it will be guessed from the locale ('list' translation file entry)
         *                                                             `  - if $join is missing, a space will be used as glue
         *                                                             - 'other' entry (see above)
         *                                                             if int passed, it add modifiers:
         *                                                             Possible values:
         *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
         *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
         *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
         *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
         * @param bool                                        $short   displays short format of time units
         * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
         * @param int                                         $options human diff options
         *
         * @return string
         */
        public function diffForHumans($other = null, $syntax = null, $short = false, $parts = 1, $options = null)
        {
            /* @var CarbonInterface $this */
            if (\is_array($other)) {
                $other['syntax'] = \array_key_exists('syntax', $other) ? $other['syntax'] : $syntax;
                $syntax = $other;
                $other = $syntax['other'] ?? null;
            }

            $intSyntax = &$syntax;
            if (\is_array($syntax)) {
                $syntax['syntax'] = $syntax['syntax'] ?? null;
                $intSyntax = &$syntax['syntax'];
            }
            $intSyntax = (int) ($intSyntax ?? static::DIFF_RELATIVE_AUTO);
            $intSyntax = $intSyntax === static::DIFF_RELATIVE_AUTO && $other === null ? static::DIFF_RELATIVE_TO_NOW : $intSyntax;

            $parts = min(7, max(1, (int) $parts));

            return $this->diffAsCarbonInterval($other, false)
                ->setLocalTranslator($this->getLocalTranslator())
                ->forHumans($syntax, (bool) $short, $parts, $options ?? $this->localHumanDiffOptions ?? static::getHumanDiffOptions());
        }

        /**
         * @alias diffForHumans
         *
         * Get the difference in a human readable format in the current locale from current instance to an other
         * instance given (or now if null given).
         *
         * @param Carbon|\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
         *                                                             if null passed, now will be used as comparison reference;
         *                                                             if any other type, it will be converted to date and used as reference.
         * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
         *                                                             - 'syntax' entry (see below)
         *                                                             - 'short' entry (see below)
         *                                                             - 'parts' entry (see below)
         *                                                             - 'options' entry (see below)
         *                                                             - 'join' entry determines how to join multiple parts of the string
         *                                                             `  - if $join is a string, it's used as a joiner glue
         *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
         *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
         *                                                             `    will be used instead of the glue for the last item
         *                                                             `  - if $join is true, it will be guessed from the locale ('list' translation file entry)
         *                                                             `  - if $join is missing, a space will be used as glue
         *                                                             - 'other' entry (see above)
         *                                                             if int passed, it add modifiers:
         *                                                             Possible values:
         *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
         *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
         *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
         *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
         * @param bool                                        $short   displays short format of time units
         * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
         * @param int                                         $options human diff options
         *
         * @return string
         */
        public function from($other = null, $syntax = null, $short = false, $parts = 1, $options = null)
        {
            return $this->diffForHumans($other, $syntax, $short, $parts, $options);
        }

        /**
         * @alias diffForHumans
         *
         * Get the difference in a human readable format in the current locale from current instance to an other
         * instance given (or now if null given).
         */
        public function since($other = null, $syntax = null, $short = false, $parts = 1, $options = null)
        {
            return $this->diffForHumans($other, $syntax, $short, $parts, $options);
        }

        /**
         * Get the difference in a human readable format in the current locale from an other
         * instance given (or now if null given) to current instance.
         *
         * When comparing a value in the past to default now:
         * 1 hour from now
         * 5 months from now
         *
         * When comparing a value in the future to default now:
         * 1 hour ago
         * 5 months ago
         *
         * When comparing a value in the past to another value:
         * 1 hour after
         * 5 months after
         *
         * When comparing a value in the future to another value:
         * 1 hour before
         * 5 months before
         *
         * @param Carbon|\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
         *                                                             if null passed, now will be used as comparison reference;
         *                                                             if any other type, it will be converted to date and used as reference.
         * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
         *                                                             - 'syntax' entry (see below)
         *                                                             - 'short' entry (see below)
         *                                                             - 'parts' entry (see below)
         *                                                             - 'options' entry (see below)
         *                                                             - 'join' entry determines how to join multiple parts of the string
         *                                                             `  - if $join is a string, it's used as a joiner glue
         *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
         *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
         *                                                             `    will be used instead of the glue for the last item
         *                                                             `  - if $join is true, it will be guessed from the locale ('list' translation file entry)
         *                                                             `  - if $join is missing, a space will be used as glue
         *                                                             - 'other' entry (see above)
         *                                                             if int passed, it add modifiers:
         *                                                             Possible values:
         *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
         *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
         *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
         *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
         * @param bool                                        $short   displays short format of time units
         * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
         * @param int                                         $options human diff options
         *
         * @return string
         */
        public function to($other = null, $syntax = null, $short = false, $parts = 1, $options = null)
        {
            if (!$syntax && !$other) {
                $syntax = CarbonInterface::DIFF_RELATIVE_TO_NOW;
            }

            return $this->resolveCarbon($other)->diffForHumans($this, $syntax, $short, $parts, $options);
        }

        /**
         * @alias to
         *
         * Get the difference in a human readable format in the current locale from an other
         * instance given (or now if null given) to current instance.
         *
         * @param Carbon|\DateTimeInterface|string|array|null $other   if array passed, will be used as parameters array, see $syntax below;
         *                                                             if null passed, now will be used as comparison reference;
         *                                                             if any other type, it will be converted to date and used as reference.
         * @param int|array                                   $syntax  if array passed, parameters will be extracted from it, the array may contains:
         *                                                             - 'syntax' entry (see below)
         *                                                             - 'short' entry (see below)
         *                                                             - 'parts' entry (see below)
         *                                                             - 'options' entry (see below)
         *                                                             - 'join' entry determines how to join multiple parts of the string
         *                                                             `  - if $join is a string, it's used as a joiner glue
         *                                                             `  - if $join is a callable/closure, it get the list of string and should return a string
         *                                                             `  - if $join is an array, the first item will be the default glue, and the second item
         *                                                             `    will be used instead of the glue for the last item
         *                                                             `  - if $join is true, it will be guessed from the locale ('list' translation file entry)
         *                                                             `  - if $join is missing, a space will be used as glue
         *                                                             - 'other' entry (see above)
         *                                                             if int passed, it add modifiers:
         *                                                             Possible values:
         *                                                             - CarbonInterface::DIFF_ABSOLUTE          no modifiers
         *                                                             - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
         *                                                             - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
         *                                                             Default value: CarbonInterface::DIFF_ABSOLUTE
         * @param bool                                        $short   displays short format of time units
         * @param int                                         $parts   maximum number of parts to display (default value: 1: single unit)
         * @param int                                         $options human diff options
         *
         * @return string
         */
        public function until($other = null, $syntax = null, $short = false, $parts = 1, $options = null)
        {
            return $this->to($other, $syntax, $short, $parts, $options);
        }

        /**
         * Get the difference in a human readable format in the current locale from current
         * instance to now.
         *
         * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
         *                           - 'syntax' entry (see below)
         *                           - 'short' entry (see below)
         *                           - 'parts' entry (see below)
         *                           - 'options' entry (see below)
         *                           - 'join' entry determines how to join multiple parts of the string
         *                           `  - if $join is a string, it's used as a joiner glue
         *                           `  - if $join is a callable/closure, it get the list of string and should return a string
         *                           `  - if $join is an array, the first item will be the default glue, and the second item
         *                           `    will be used instead of the glue for the last item
         *                           `  - if $join is true, it will be guessed from the locale ('list' translation file entry)
         *                           `  - if $join is missing, a space will be used as glue
         *                           if int passed, it add modifiers:
         *                           Possible values:
         *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
         *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
         *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
         *                           Default value: CarbonInterface::DIFF_ABSOLUTE
         * @param bool      $short   displays short format of time units
         * @param int       $parts   maximum number of parts to display (default value: 1: single unit)
         * @param int       $options human diff options
         *
         * @return string
         */
        public function fromNow($syntax = null, $short = false, $parts = 1, $options = null)
        {
            $other = null;

            if ($syntax instanceof DateTimeInterface) {
                [$other, $syntax, $short, $parts, $options] = array_pad(\func_get_args(), 5, null);
            }

            return $this->from($other, $syntax, $short, $parts, $options);
        }

        /**
         * Get the difference in a human readable format in the current locale from an other
         * instance given to now
         *
         * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
         *                           - 'syntax' entry (see below)
         *                           - 'short' entry (see below)
         *                           - 'parts' entry (see below)
         *                           - 'options' entry (see below)
         *                           - 'join' entry determines how to join multiple parts of the string
         *                           `  - if $join is a string, it's used as a joiner glue
         *                           `  - if $join is a callable/closure, it get the list of string and should return a string
         *                           `  - if $join is an array, the first item will be the default glue, and the second item
         *                           `    will be used instead of the glue for the last item
         *                           `  - if $join is true, it will be guessed from the locale ('list' translation file entry)
         *                           `  - if $join is missing, a space will be used as glue
         *                           if int passed, it add modifiers:
         *                           Possible values:
         *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
         *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
         *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
         *                           Default value: CarbonInterface::DIFF_ABSOLUTE
         * @param bool      $short   displays short format of time units
         * @param int       $parts   maximum number of parts to display (default value: 1: single part)
         * @param int       $options human diff options
         *
         * @return string
         */
        public function toNow($syntax = null, $short = false, $parts = 1, $options = null)
        {
            return $this->to(null, $syntax, $short, $parts, $options);
        }

        /**
         * Get the difference in a human readable format in the current locale from an other
         * instance given to now
         *
         * @param int|array $syntax  if array passed, parameters will be extracted from it, the array may contains:
         *                           - 'syntax' entry (see below)
         *                           - 'short' entry (see below)
         *                           - 'parts' entry (see below)
         *                           - 'options' entry (see below)
         *                           - 'join' entry determines how to join multiple parts of the string
         *                           `  - if $join is a string, it's used as a joiner glue
         *                           `  - if $join is a callable/closure, it get the list of string and should return a string
         *                           `  - if $join is an array, the first item will be the default glue, and the second item
         *                           `    will be used instead of the glue for the last item
         *                           `  - if $join is true, it will be guessed from the locale ('list' translation file entry)
         *                           `  - if $join is missing, a space will be used as glue
         *                           if int passed, it add modifiers:
         *                           Possible values:
         *                           - CarbonInterface::DIFF_ABSOLUTE          no modifiers
         *                           - CarbonInterface::DIFF_RELATIVE_TO_NOW   add ago/from now modifier
         *                           - CarbonInterface::DIFF_RELATIVE_TO_OTHER add before/after modifier
         *                           Default value: CarbonInterface::DIFF_ABSOLUTE
         * @param bool      $short   displays short format of time units
         * @param int       $parts   maximum number of parts to display (default value: 1: single part)
         * @param int       $options human diff options
         *
         * @return string
         */
        public function ago($syntax = null, $short = false, $parts = 1, $options = null)
        {
            $other = null;

            if ($syntax instanceof DateTimeInterface) {
                [$other, $syntax, $short, $parts, $options] = array_pad(\func_get_args(), 5, null);
            }

            return $this->from($other, $syntax, $short, $parts, $options);
        }

        /**
         * Get the difference in a human readable format in the current locale from current instance to an other
         * instance given (or now if null given).
         *
         * @return string
         */
        public function timespan($other = null, $timezone = null)
        {
            if (!$other instanceof DateTimeInterface) {
                $other = static::parse($other, $timezone);
            }

            return $this->diffForHumans($other, [
                'join' => ', ',
                'syntax' => CarbonInterface::DIFF_ABSOLUTE,
                'options' => CarbonInterface::NO_ZERO_DIFF,
                'parts' => -1,
            ]);
        }

        /**
         * Returns either day of week + time (e.g. "Last Friday at 3:30 PM") if reference time is within 7 days,
         * or a calendar date (e.g. "10/29/2017") otherwise.
         *
         * Language, date and time formats will change according to the current locale.
         *
         * @param Carbon|\DateTimeInterface|string|null $referenceTime
         * @param array                                 $formats
         *
         * @return string
         */
        public function calendar($referenceTime = null, array $formats = [])
        {
            /** @var CarbonInterface $current */
            $current = $this->avoidMutation()->startOfDay();
            /** @var CarbonInterface $other */
            $other = $this->resolveCarbon($referenceTime)->avoidMutation()->setTimezone($this->getTimezone())->startOfDay();
            $diff = $other->diffInDays($current, false);
            $format = $diff < -6 ? 'sameElse' : (
                $diff < -1 ? 'lastWeek' : (
                    $diff < 0 ? 'lastDay' : (
                        $diff < 1 ? 'sameDay' : (
                            $diff < 2 ? 'nextDay' : (
                                $diff < 7 ? 'nextWeek' : 'sameElse'
                            )
                        )
                    )
                )
            );
            $format = array_merge($this->getCalendarFormats(), $formats)[$format];
            if ($format instanceof Closure) {
                $format = $format($current, $other) ?? '';
            }

            return $this->isoFormat((string) $format);
        }
    }
  uploads-Carbon-src-Carbon-Traits-IntervalRounding.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Traits;

    use Carbon\CarbonInterval;
    use Carbon\Exceptions\InvalidIntervalException;
    use DateInterval;

    /**
     * Trait to call rounding methods to interval or the interval of a period.
     */
    trait IntervalRounding
    {
        protected function callRoundMethod(string $method, array $parameters)
        {
            $action = substr($method, 0, 4);

            if ($action !== 'ceil') {
                $action = substr($method, 0, 5);
            }

            if (\in_array($action, ['round', 'floor', 'ceil'])) {
                return $this->{$action.'Unit'}(substr($method, \strlen($action)), ...$parameters);
            }

            return null;
        }

        protected function roundWith($precision, $function)
        {
            $unit = 'second';

            if ($precision instanceof DateInterval) {
                $precision = (string) CarbonInterval::instance($precision);
            }

            if (\is_string($precision) && preg_match('/^\s*(?<precision>\d+)?\s*(?<unit>\w+)(?<other>\W.*)?$/', $precision, $match)) {
                if (trim($match['other'] ?? '') !== '') {
                    throw new InvalidIntervalException('Rounding is only possible with single unit intervals.');
                }

                $precision = (int) ($match['precision'] ?: 1);
                $unit = $match['unit'];
            }

            return $this->roundUnit($unit, $precision, $function);
        }
    }
  uploads-Carbon-src-Carbon-Traits-Localization.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Traits;

    use Carbon\CarbonInterface;
    use Carbon\Exceptions\InvalidTypeException;
    use Carbon\Exceptions\NotLocaleAwareException;
    use Carbon\Language;
    use Carbon\Translator;
    use Closure;
    use Symfony\Component\Translation\TranslatorBagInterface;
    use Symfony\Component\Translation\TranslatorInterface;
    use Symfony\Contracts\Translation\LocaleAwareInterface;
    use Symfony\Contracts\Translation\TranslatorInterface as ContractsTranslatorInterface;

    if (!interface_exists('Symfony\\Component\\Translation\\TranslatorInterface')) {
        class_alias(
            'Symfony\\Contracts\\Translation\\TranslatorInterface',
            'Symfony\\Component\\Translation\\TranslatorInterface'
        );
    }

    /**
     * Trait Localization.
     *
     * Embed default and locale translators and translation base methods.
     */
    trait Localization
    {
        /**
         * Default translator.
         *
         * @var \Symfony\Component\Translation\TranslatorInterface
         */
        protected static $translator;

        /**
         * Specific translator of the current instance.
         *
         * @var \Symfony\Component\Translation\TranslatorInterface
         */
        protected $localTranslator;

        /**
         * Options for diffForHumans().
         *
         * @var int
         */
        protected static $humanDiffOptions = CarbonInterface::NO_ZERO_DIFF;

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather use the ->settings() method.
         * @see settings
         *
         * @param int $humanDiffOptions
         */
        public static function setHumanDiffOptions($humanDiffOptions)
        {
            static::$humanDiffOptions = $humanDiffOptions;
        }

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather use the ->settings() method.
         * @see settings
         *
         * @param int $humanDiffOption
         */
        public static function enableHumanDiffOption($humanDiffOption)
        {
            static::$humanDiffOptions = static::getHumanDiffOptions() | $humanDiffOption;
        }

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather use the ->settings() method.
         * @see settings
         *
         * @param int $humanDiffOption
         */
        public static function disableHumanDiffOption($humanDiffOption)
        {
            static::$humanDiffOptions = static::getHumanDiffOptions() & ~$humanDiffOption;
        }

        /**
         * Return default humanDiff() options (merged flags as integer).
         *
         * @return int
         */
        public static function getHumanDiffOptions()
        {
            return static::$humanDiffOptions;
        }

        /**
         * Get the default translator instance in use.
         *
         * @return \Symfony\Component\Translation\TranslatorInterface
         */
        public static function getTranslator()
        {
            return static::translator();
        }

        /**
         * Set the default translator instance to use.
         *
         * @param \Symfony\Component\Translation\TranslatorInterface $translator
         *
         * @return void
         */
        public static function setTranslator(TranslatorInterface $translator)
        {
            static::$translator = $translator;
        }

        /**
         * Return true if the current instance has its own translator.
         *
         * @return bool
         */
        public function hasLocalTranslator()
        {
            return isset($this->localTranslator);
        }

        /**
         * Get the translator of the current instance or the default if none set.
         *
         * @return \Symfony\Component\Translation\TranslatorInterface
         */
        public function getLocalTranslator()
        {
            return $this->localTranslator ?: static::translator();
        }

        /**
         * Set the translator for the current instance.
         *
         * @param \Symfony\Component\Translation\TranslatorInterface $translator
         *
         * @return $this
         */
        public function setLocalTranslator(TranslatorInterface $translator)
        {
            $this->localTranslator = $translator;

            return $this;
        }

        /**
         * Returns raw translation message for a given key.
         *
         * @param \Symfony\Component\Translation\TranslatorInterface $translator the translator to use
         * @param string                                             $key        key to find
         * @param string|null                                        $locale     current locale used if null
         * @param string|null                                        $default    default value if translation returns the key
         *
         * @return string
         */
        public static function getTranslationMessageWith($translator, string $key, ?string $locale = null, ?string $default = null)
        {
            if (!($translator instanceof TranslatorBagInterface && $translator instanceof TranslatorInterface)) {
                throw new InvalidTypeException(
                    'Translator does not implement '.TranslatorInterface::class.' and '.TranslatorBagInterface::class.'. '.
                    (\is_object($translator) ? \get_class($translator) : \gettype($translator)).' has been given.'
                );
            }

            if (!$locale && $translator instanceof LocaleAwareInterface) {
                $locale = $translator->getLocale();
            }

            $result = $translator->getCatalogue($locale)->get($key);

            return $result === $key ? $default : $result;
        }

        /**
         * Returns raw translation message for a given key.
         *
         * @param string                                             $key        key to find
         * @param string|null                                        $locale     current locale used if null
         * @param string|null                                        $default    default value if translation returns the key
         * @param \Symfony\Component\Translation\TranslatorInterface $translator an optional translator to use
         *
         * @return string
         */
        public function getTranslationMessage(string $key, ?string $locale = null, ?string $default = null, $translator = null)
        {
            return static::getTranslationMessageWith($translator ?: $this->getLocalTranslator(), $key, $locale, $default);
        }

        /**
         * Translate using translation string or callback available.
         *
         * @param \Symfony\Component\Translation\TranslatorInterface $translator
         * @param string                                             $key
         * @param array                                              $parameters
         * @param null                                               $number
         *
         * @return string
         */
        public static function translateWith(TranslatorInterface $translator, string $key, array $parameters = [], $number = null): string
        {
            $message = static::getTranslationMessageWith($translator, $key, null, $key);
            if ($message instanceof Closure) {
                return (string) $message(...array_values($parameters));
            }

            if ($number !== null) {
                $parameters['%count%'] = $number;
            }
            if (isset($parameters['%count%'])) {
                $parameters[':count'] = $parameters['%count%'];
            }

            // @codeCoverageIgnoreStart
            $choice = $translator instanceof ContractsTranslatorInterface
                ? $translator->trans($key, $parameters)
                : $translator->transChoice($key, $number, $parameters);
            // @codeCoverageIgnoreEnd

            return (string) $choice;
        }

        /**
         * Translate using translation string or callback available.
         *
         * @param string                                                  $key
         * @param array                                                   $parameters
         * @param string|int|float|null                                   $number
         * @param \Symfony\Component\Translation\TranslatorInterface|null $translator
         * @param bool                                                    $altNumbers
         *
         * @return string
         */
        public function translate(string $key, array $parameters = [], $number = null, ?TranslatorInterface $translator = null, bool $altNumbers = false): string
        {
            $translation = static::translateWith($translator ?: $this->getLocalTranslator(), $key, $parameters, $number);

            if ($number !== null && $altNumbers) {
                return str_replace($number, $this->translateNumber($number), $translation);
            }

            return $translation;
        }

        /**
         * Returns the alternative number for a given integer if available in the current locale.
         *
         * @param int $number
         *
         * @return string
         */
        public function translateNumber(int $number): string
        {
            $translateKey = "alt_numbers.$number";
            $symbol = $this->translate($translateKey);

            if ($symbol !== $translateKey) {
                return $symbol;
            }

            if ($number > 99 && $this->translate('alt_numbers.99') !== 'alt_numbers.99') {
                $start = '';
                foreach ([10000, 1000, 100] as $exp) {
                    $key = "alt_numbers_pow.$exp";
                    if ($number >= $exp && $number < $exp * 10 && ($pow = $this->translate($key)) !== $key) {
                        $unit = floor($number / $exp);
                        $number -= $unit * $exp;
                        $start .= ($unit > 1 ? $this->translate("alt_numbers.$unit") : '').$pow;
                    }
                }
                $result = '';
                while ($number) {
                    $chunk = $number % 100;
                    $result = $this->translate("alt_numbers.$chunk").$result;
                    $number = floor($number / 100);
                }

                return "$start$result";
            }

            if ($number > 9 && $this->translate('alt_numbers.9') !== 'alt_numbers.9') {
                $result = '';
                while ($number) {
                    $chunk = $number % 10;
                    $result = $this->translate("alt_numbers.$chunk").$result;
                    $number = floor($number / 10);
                }

                return $result;
            }

            return (string) $number;
        }

        /**
         * Translate a time string from a locale to an other.
         *
         * @param string      $timeString date/time/duration string to translate (may also contain English)
         * @param string|null $from       input locale of the $timeString parameter (`Carbon::getLocale()` by default)
         * @param string|null $to         output locale of the result returned (`"en"` by default)
         * @param int         $mode       specify what to translate with options:
         *                                - CarbonInterface::TRANSLATE_ALL (default)
         *                                - CarbonInterface::TRANSLATE_MONTHS
         *                                - CarbonInterface::TRANSLATE_DAYS
         *                                - CarbonInterface::TRANSLATE_UNITS
         *                                - CarbonInterface::TRANSLATE_MERIDIEM
         *                                You can use pipe to group: CarbonInterface::TRANSLATE_MONTHS | CarbonInterface::TRANSLATE_DAYS
         *
         * @return string
         */
        public static function translateTimeString($timeString, $from = null, $to = null, $mode = CarbonInterface::TRANSLATE_ALL)
        {
            // Fallback source and destination locales
            $from = $from ?: static::getLocale();
            $to = $to ?: 'en';

            if ($from === $to) {
                return $timeString;
            }

            // Standardize apostrophe
            $timeString = strtr($timeString, ['’' => "'"]);

            $fromTranslations = [];
            $toTranslations = [];

            foreach (['from', 'to'] as $key) {
                $language = $$key;
                $translator = Translator::get($language);
                $translations = $translator->getMessages();

                if (!isset($translations[$language])) {
                    return $timeString;
                }

                $translationKey = $key.'Translations';
                $messages = $translations[$language];
                $months = $messages['months'] ?? [];
                $weekdays = $messages['weekdays'] ?? [];
                $meridiem = $messages['meridiem'] ?? ['AM', 'PM'];

                if ($key === 'from') {
                    foreach (['months', 'weekdays'] as $variable) {
                        $list = $messages[$variable.'_standalone'] ?? null;

                        if ($list) {
                            foreach ($$variable as $index => &$name) {
                                $name .= '|'.$messages[$variable.'_standalone'][$index];
                            }
                        }
                    }
                }

                $$translationKey = array_merge(
                    $mode & CarbonInterface::TRANSLATE_MONTHS ? static::getTranslationArray($months, 12, $timeString) : [],
                    $mode & CarbonInterface::TRANSLATE_MONTHS ? static::getTranslationArray($messages['months_short'] ?? [], 12, $timeString) : [],
                    $mode & CarbonInterface::TRANSLATE_DAYS ? static::getTranslationArray($weekdays, 7, $timeString) : [],
                    $mode & CarbonInterface::TRANSLATE_DAYS ? static::getTranslationArray($messages['weekdays_short'] ?? [], 7, $timeString) : [],
                    $mode & CarbonInterface::TRANSLATE_DIFF ? static::translateWordsByKeys([
                        'diff_now',
                        'diff_today',
                        'diff_yesterday',
                        'diff_tomorrow',
                        'diff_before_yesterday',
                        'diff_after_tomorrow',
                    ], $messages, $key) : [],
                    $mode & CarbonInterface::TRANSLATE_UNITS ? static::translateWordsByKeys([
                        'year',
                        'month',
                        'week',
                        'day',
                        'hour',
                        'minute',
                        'second',
                    ], $messages, $key) : [],
                    $mode & CarbonInterface::TRANSLATE_MERIDIEM ? array_map(function ($hour) use ($meridiem) {
                        if (\is_array($meridiem)) {
                            return $meridiem[$hour < 12 ? 0 : 1];
                        }

                        return $meridiem($hour, 0, false);
                    }, range(0, 23)) : []
                );
            }

            return substr(preg_replace_callback('/(?<=[\d\s+.\/,_-])('.implode('|', $fromTranslations).')(?=[\d\s+.\/,_-])/iu', function ($match) use ($fromTranslations, $toTranslations) {
                [$chunk] = $match;

                foreach ($fromTranslations as $index => $word) {
                    if (preg_match("/^$word\$/iu", $chunk)) {
                        return $toTranslations[$index] ?? '';
                    }
                }

                return $chunk; // @codeCoverageIgnore
            }, " $timeString "), 1, -1);
        }

        /**
         * Translate a time string from the current locale (`$date->locale()`) to an other.
         *
         * @param string      $timeString time string to translate
         * @param string|null $to         output locale of the result returned ("en" by default)
         *
         * @return string
         */
        public function translateTimeStringTo($timeString, $to = null)
        {
            return static::translateTimeString($timeString, $this->getTranslatorLocale(), $to);
        }

        /**
         * Get/set the locale for the current instance.
         *
         * @param string|null $locale
         * @param string      ...$fallbackLocales
         *
         * @return $this|string
         */
        public function locale(string $locale = null, ...$fallbackLocales)
        {
            if ($locale === null) {
                return $this->getTranslatorLocale();
            }

            if (!$this->localTranslator || $this->getTranslatorLocale($this->localTranslator) !== $locale) {
                $translator = Translator::get($locale);

                if (!empty($fallbackLocales)) {
                    $translator->setFallbackLocales($fallbackLocales);

                    foreach ($fallbackLocales as $fallbackLocale) {
                        $messages = Translator::get($fallbackLocale)->getMessages();

                        if (isset($messages[$fallbackLocale])) {
                            $translator->setMessages($fallbackLocale, $messages[$fallbackLocale]);
                        }
                    }
                }

                $this->setLocalTranslator($translator);
            }

            return $this;
        }

        /**
         * Get the current translator locale.
         *
         * @return string
         */
        public static function getLocale()
        {
            return static::getLocaleAwareTranslator()->getLocale();
        }

        /**
         * Set the current translator locale and indicate if the source locale file exists.
         * Pass 'auto' as locale to use closest language from the current LC_TIME locale.
         *
         * @param string $locale locale ex. en
         *
         * @return bool
         */
        public static function setLocale($locale)
        {
            return static::getLocaleAwareTranslator()->setLocale($locale) !== false;
        }

        /**
         * Set the fallback locale.
         *
         * @see https://symfony.com/doc/current/components/translation.html#fallback-locales
         *
         * @param string $locale
         */
        public static function setFallbackLocale($locale)
        {
            $translator = static::getTranslator();

            if (method_exists($translator, 'setFallbackLocales')) {
                $translator->setFallbackLocales([$locale]);

                if ($translator instanceof Translator) {
                    $preferredLocale = $translator->getLocale();
                    $translator->setMessages($preferredLocale, array_replace_recursive(
                        $translator->getMessages()[$locale] ?? [],
                        Translator::get($locale)->getMessages()[$locale] ?? [],
                        $translator->getMessages($preferredLocale)
                    ));
                }
            }
        }

        /**
         * Get the fallback locale.
         *
         * @see https://symfony.com/doc/current/components/translation.html#fallback-locales
         *
         * @return string|null
         */
        public static function getFallbackLocale()
        {
            $translator = static::getTranslator();

            if (method_exists($translator, 'getFallbackLocales')) {
                return $translator->getFallbackLocales()[0] ?? null;
            }

            return null;
        }

        /**
         * Set the current locale to the given, execute the passed function, reset the locale to previous one,
         * then return the result of the closure (or null if the closure was void).
         *
         * @param string   $locale locale ex. en
         * @param callable $func
         *
         * @return mixed
         */
        public static function executeWithLocale($locale, $func)
        {
            $currentLocale = static::getLocale();
            $result = $func(static::setLocale($locale) ? static::getLocale() : false, static::translator());
            static::setLocale($currentLocale);

            return $result;
        }

        /**
         * Returns true if the given locale is internally supported and has short-units support.
         * Support is considered enabled if either year, day or hour has a short variant translated.
         *
         * @param string $locale locale ex. en
         *
         * @return bool
         */
        public static function localeHasShortUnits($locale)
        {
            return static::executeWithLocale($locale, function ($newLocale, TranslatorInterface $translator) {
                return $newLocale &&
                    (
                        ($y = static::translateWith($translator, 'y')) !== 'y' &&
                        $y !== static::translateWith($translator, 'year')
                    ) || (
                        ($y = static::translateWith($translator, 'd')) !== 'd' &&
                        $y !== static::translateWith($translator, 'day')
                    ) || (
                        ($y = static::translateWith($translator, 'h')) !== 'h' &&
                        $y !== static::translateWith($translator, 'hour')
                    );
            });
        }

        /**
         * Returns true if the given locale is internally supported and has diff syntax support (ago, from now, before, after).
         * Support is considered enabled if the 4 sentences are translated in the given locale.
         *
         * @param string $locale locale ex. en
         *
         * @return bool
         */
        public static function localeHasDiffSyntax($locale)
        {
            return static::executeWithLocale($locale, function ($newLocale, TranslatorInterface $translator) {
                if (!$newLocale) {
                    return false;
                }

                foreach (['ago', 'from_now', 'before', 'after'] as $key) {
                    if ($translator instanceof TranslatorBagInterface && $translator->getCatalogue($newLocale)->get($key) instanceof Closure) {
                        continue;
                    }

                    if ($translator->trans($key) === $key) {
                        return false;
                    }
                }

                return true;
            });
        }

        /**
         * Returns true if the given locale is internally supported and has words for 1-day diff (just now, yesterday, tomorrow).
         * Support is considered enabled if the 3 words are translated in the given locale.
         *
         * @param string $locale locale ex. en
         *
         * @return bool
         */
        public static function localeHasDiffOneDayWords($locale)
        {
            return static::executeWithLocale($locale, function ($newLocale, TranslatorInterface $translator) {
                return $newLocale &&
                    $translator->trans('diff_now') !== 'diff_now' &&
                    $translator->trans('diff_yesterday') !== 'diff_yesterday' &&
                    $translator->trans('diff_tomorrow') !== 'diff_tomorrow';
            });
        }

        /**
         * Returns true if the given locale is internally supported and has words for 2-days diff (before yesterday, after tomorrow).
         * Support is considered enabled if the 2 words are translated in the given locale.
         *
         * @param string $locale locale ex. en
         *
         * @return bool
         */
        public static function localeHasDiffTwoDayWords($locale)
        {
            return static::executeWithLocale($locale, function ($newLocale, TranslatorInterface $translator) {
                return $newLocale &&
                    $translator->trans('diff_before_yesterday') !== 'diff_before_yesterday' &&
                    $translator->trans('diff_after_tomorrow') !== 'diff_after_tomorrow';
            });
        }

        /**
         * Returns true if the given locale is internally supported and has period syntax support (X times, every X, from X, to X).
         * Support is considered enabled if the 4 sentences are translated in the given locale.
         *
         * @param string $locale locale ex. en
         *
         * @return bool
         */
        public static function localeHasPeriodSyntax($locale)
        {
            return static::executeWithLocale($locale, function ($newLocale, TranslatorInterface $translator) {
                return $newLocale &&
                    $translator->trans('period_recurrences') !== 'period_recurrences' &&
                    $translator->trans('period_interval') !== 'period_interval' &&
                    $translator->trans('period_start_date') !== 'period_start_date' &&
                    $translator->trans('period_end_date') !== 'period_end_date';
            });
        }

        /**
         * Returns the list of internally available locales and already loaded custom locales.
         * (It will ignore custom translator dynamic loading.)
         *
         * @return array
         */
        public static function getAvailableLocales()
        {
            $translator = static::getLocaleAwareTranslator();

            return $translator instanceof Translator
                ? $translator->getAvailableLocales()
                : [$translator->getLocale()];
        }

        /**
         * Returns list of Language object for each available locale. This object allow you to get the ISO name, native
         * name, region and variant of the locale.
         *
         * @return Language[]
         */
        public static function getAvailableLocalesInfo()
        {
            $languages = [];
            foreach (static::getAvailableLocales() as $id) {
                $languages[$id] = new Language($id);
            }

            return $languages;
        }

        /**
         * Initialize the default translator instance if necessary.
         *
         * @return \Symfony\Component\Translation\TranslatorInterface
         */
        protected static function translator()
        {
            if (static::$translator === null) {
                static::$translator = Translator::get();
            }

            return static::$translator;
        }

        /**
         * Get the locale of a given translator.
         *
         * If null or omitted, current local translator is used.
         * If no local translator is in use, current global translator is used.
         *
         * @param null $translator
         *
         * @return string|null
         */
        protected function getTranslatorLocale($translator = null): ?string
        {
            if (\func_num_args() === 0) {
                $translator = $this->getLocalTranslator();
            }

            $translator = static::getLocaleAwareTranslator($translator);

            return $translator ? $translator->getLocale() : null;
        }

        /**
         * Throw an error if passed object is not LocaleAwareInterface.
         *
         * @param LocaleAwareInterface|null $translator
         *
         * @return LocaleAwareInterface|null
         */
        protected static function getLocaleAwareTranslator($translator = null)
        {
            if (\func_num_args() === 0) {
                $translator = static::translator();
            }

            if ($translator && !($translator instanceof LocaleAwareInterface || method_exists($translator, 'getLocale'))) {
                throw new NotLocaleAwareException($translator);
            }

            return $translator;
        }

        /**
         * Return the word cleaned from its translation codes.
         *
         * @param string $word
         *
         * @return string
         */
        private static function cleanWordFromTranslationString($word)
        {
            $word = str_replace([':count', '%count', ':time'], '', $word);
            $word = strtr($word, ['’' => "'"]);
            $word = preg_replace('/({\d+(,(\d+|Inf))?}|[\[\]]\d+(,(\d+|Inf))?[\[\]])/', '', $word);

            return trim($word);
        }

        /**
         * Translate a list of words.
         *
         * @param string[] $keys     keys to translate.
         * @param string[] $messages messages bag handling translations.
         * @param string   $key      'to' (to get the translation) or 'from' (to get the detection RegExp pattern).
         *
         * @return string[]
         */
        private static function translateWordsByKeys($keys, $messages, $key): array
        {
            return array_map(function ($wordKey) use ($messages, $key) {
                $message = $key === 'from' && isset($messages[$wordKey.'_regexp'])
                    ? $messages[$wordKey.'_regexp']
                    : ($messages[$wordKey] ?? null);

                if (!$message) {
                    return '>>DO NOT REPLACE<<';
                }

                $parts = explode('|', $message);

                return $key === 'to'
                    ? static::cleanWordFromTranslationString(end($parts))
                    : '(?:'.implode('|', array_map([static::class, 'cleanWordFromTranslationString'], $parts)).')';
            }, $keys);
        }

        /**
         * Get an array of translations based on the current date.
         *
         * @param callable $translation
         * @param int      $length
         * @param string   $timeString
         *
         * @return string[]
         */
        private static function getTranslationArray($translation, $length, $timeString): array
        {
            $filler = '>>DO NOT REPLACE<<';

            if (\is_array($translation)) {
                return array_pad($translation, $length, $filler);
            }

            $list = [];
            $date = static::now();

            for ($i = 0; $i < $length; $i++) {
                $list[] = $translation($date, $timeString, $i) ?? $filler;
            }

            return $list;
        }
    }
  uploads-Carbon-src-Carbon-Traits-Macro.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Traits;

    /**
     * Trait Macros.
     *
     * Allows users to register macros within the Carbon class.
     */
    trait Macro
    {
        use Mixin;

        /**
         * The registered macros.
         *
         * @var array
         */
        protected static $globalMacros = [];

        /**
         * The registered generic macros.
         *
         * @var array
         */
        protected static $globalGenericMacros = [];

        /**
         * Register a custom macro.
         *
         * @example
         * ```
         * $userSettings = [
         *   'locale' => 'pt',
         *   'timezone' => 'America/Sao_Paulo',
         * ];
         * Carbon::macro('userFormat', function () use ($userSettings) {
         *   return $this->copy()->locale($userSettings['locale'])->tz($userSettings['timezone'])->calendar();
         * });
         * echo Carbon::yesterday()->hours(11)->userFormat();
         * ```
         *
         * @param string          $name
         * @param object|callable $macro
         *
         * @return void
         */
        public static function macro($name, $macro)
        {
            static::$globalMacros[$name] = $macro;
        }

        /**
         * Remove all macros and generic macros.
         */
        public static function resetMacros()
        {
            static::$globalMacros = [];
            static::$globalGenericMacros = [];
        }

        /**
         * Register a custom macro.
         *
         * @param object|callable $macro
         * @param int             $priority marco with higher priority is tried first
         *
         * @return void
         */
        public static function genericMacro($macro, $priority = 0)
        {
            if (!isset(static::$globalGenericMacros[$priority])) {
                static::$globalGenericMacros[$priority] = [];
                krsort(static::$globalGenericMacros, SORT_NUMERIC);
            }

            static::$globalGenericMacros[$priority][] = $macro;
        }

        /**
         * Checks if macro is registered globally.
         *
         * @param string $name
         *
         * @return bool
         */
        public static function hasMacro($name)
        {
            return isset(static::$globalMacros[$name]);
        }

        /**
         * Get the raw callable macro registered globally for a given name.
         *
         * @param string $name
         *
         * @return callable|null
         */
        public static function getMacro($name)
        {
            return static::$globalMacros[$name] ?? null;
        }

        /**
         * Checks if macro is registered globally or locally.
         *
         * @param string $name
         *
         * @return bool
         */
        public function hasLocalMacro($name)
        {
            return ($this->localMacros && isset($this->localMacros[$name])) || static::hasMacro($name);
        }

        /**
         * Get the raw callable macro registered globally or locally for a given name.
         *
         * @param string $name
         *
         * @return callable|null
         */
        public function getLocalMacro($name)
        {
            return ($this->localMacros ?? [])[$name] ?? static::getMacro($name);
        }
    }
  uploads-Carbon-src-Carbon-Traits-Mixin.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Traits;

    use Closure;
    use Generator;
    use ReflectionClass;
    use ReflectionException;
    use ReflectionMethod;
    use Throwable;

    /**
     * Trait Mixin.
     *
     * Allows mixing in entire classes with multiple macros.
     */
    trait Mixin
    {
        /**
         * Stack of macro instance contexts.
         *
         * @var array
         */
        protected static $macroContextStack = [];

        /**
         * Mix another object into the class.
         *
         * @example
         * ```
         * Carbon::mixin(new class {
         *   public function addMoon() {
         *     return function () {
         *       return $this->addDays(30);
         *     };
         *   }
         *   public function subMoon() {
         *     return function () {
         *       return $this->subDays(30);
         *     };
         *   }
         * });
         * $fullMoon = Carbon::create('2018-12-22');
         * $nextFullMoon = $fullMoon->addMoon();
         * $blackMoon = Carbon::create('2019-01-06');
         * $previousBlackMoon = $blackMoon->subMoon();
         * echo "$nextFullMoon\n";
         * echo "$previousBlackMoon\n";
         * ```
         *
         * @param object|string $mixin
         *
         * @throws ReflectionException
         *
         * @return void
         */
        public static function mixin($mixin)
        {
            \is_string($mixin) && trait_exists($mixin)
                ? static::loadMixinTrait($mixin)
                : static::loadMixinClass($mixin);
        }

        /**
         * @param object|string $mixin
         *
         * @throws ReflectionException
         */
        private static function loadMixinClass($mixin)
        {
            $methods = (new ReflectionClass($mixin))->getMethods(
                ReflectionMethod::IS_PUBLIC | ReflectionMethod::IS_PROTECTED
            );

            foreach ($methods as $method) {
                if ($method->isConstructor() || $method->isDestructor()) {
                    continue;
                }

                $method->setAccessible(true);

                static::macro($method->name, $method->invoke($mixin));
            }
        }

        /**
         * @param string $trait
         */
        private static function loadMixinTrait($trait)
        {
            $context = eval(self::getAnonymousClassCodeForTrait($trait));
            $className = get_class($context);

            foreach (self::getMixableMethods($context) as $name) {
                $closureBase = Closure::fromCallable([$context, $name]);

                static::macro($name, function () use ($closureBase, $className) {
                    $context = end(static::$macroContextStack) ?: new $className();

                    try {
                        $closure = @$closureBase->bindTo($context);
                    } catch (Throwable $throwable) {
                        $closure = $closureBase;
                    }

                    return $closure(...func_get_args());
                });
            }
        }

        private static function getAnonymousClassCodeForTrait(string $trait)
        {
            return 'return new class() extends '.static::class.' {use '.$trait.';};';
        }

        private static function getMixableMethods(self $context): Generator
        {
            foreach (get_class_methods($context) as $name) {
                if (method_exists(static::class, $name)) {
                    continue;
                }

                yield $name;
            }
        }

        /**
         * Stack a Carbon context from inside calls of self::this() and execute a given action.
         *
         * @param static|null $context
         * @param callable    $callable
         *
         * @throws Throwable
         *
         * @return mixed
         */
        protected static function bindMacroContext($context, callable $callable)
        {
            static::$macroContextStack[] = $context;
            $exception = null;
            $result = null;

            try {
                $result = $callable();
            } catch (Throwable $throwable) {
                $exception = $throwable;
            }

            array_pop(static::$macroContextStack);

            if ($exception) {
                throw $exception;
            }

            return $result;
        }

        /**
         * Return the current context from inside a macro callee or a null if static.
         *
         * @return static|null
         */
        protected static function context()
        {
            return end(static::$macroContextStack) ?: null;
        }

        /**
         * Return the current context from inside a macro callee or a new one if static.
         *
         * @return static
         */
        protected static function this()
        {
            return end(static::$macroContextStack) ?: new static();
        }
    }
  uploads-Carbon-src-Carbon-Traits-Modifiers.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Traits;

    use Carbon\CarbonInterface;
    use ReturnTypeWillChange;

    /**
     * Trait Modifiers.
     *
     * Returns dates relative to current date using modifier short-hand.
     */
    trait Modifiers
    {
        /**
         * Midday/noon hour.
         *
         * @var int
         */
        protected static $midDayAt = 12;

        /**
         * get midday/noon hour
         *
         * @return int
         */
        public static function getMidDayAt()
        {
            return static::$midDayAt;
        }

        /**
         * @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
         *             You should rather consider mid-day is always 12pm, then if you need to test if it's an other
         *             hour, test it explicitly:
         *                 $date->format('G') == 13
         *             or to set explicitly to a given hour:
         *                 $date->setTime(13, 0, 0, 0)
         *
         * Set midday/noon hour
         *
         * @param int $hour midday hour
         *
         * @return void
         */
        public static function setMidDayAt($hour)
        {
            static::$midDayAt = $hour;
        }

        /**
         * Modify to midday, default to self::$midDayAt
         *
         * @return static
         */
        public function midDay()
        {
            return $this->setTime(static::$midDayAt, 0, 0, 0);
        }

        /**
         * Modify to the next occurrence of a given modifier such as a day of
         * the week. If no modifier is provided, modify to the next occurrence
         * of the current day of the week. Use the supplied constants
         * to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param string|int|null $modifier
         *
         * @return static
         */
        public function next($modifier = null)
        {
            if ($modifier === null) {
                $modifier = $this->dayOfWeek;
            }

            return $this->change(
                'next '.(\is_string($modifier) ? $modifier : static::$days[$modifier])
            );
        }

        /**
         * Go forward or backward to the next week- or weekend-day.
         *
         * @param bool $weekday
         * @param bool $forward
         *
         * @return static
         */
        private function nextOrPreviousDay($weekday = true, $forward = true)
        {
            /** @var CarbonInterface $date */
            $date = $this;
            $step = $forward ? 1 : -1;

            do {
                $date = $date->addDays($step);
            } while ($weekday ? $date->isWeekend() : $date->isWeekday());

            return $date;
        }

        /**
         * Go forward to the next weekday.
         *
         * @return static
         */
        public function nextWeekday()
        {
            return $this->nextOrPreviousDay();
        }

        /**
         * Go backward to the previous weekday.
         *
         * @return static
         */
        public function previousWeekday()
        {
            return $this->nextOrPreviousDay(true, false);
        }

        /**
         * Go forward to the next weekend day.
         *
         * @return static
         */
        public function nextWeekendDay()
        {
            return $this->nextOrPreviousDay(false);
        }

        /**
         * Go backward to the previous weekend day.
         *
         * @return static
         */
        public function previousWeekendDay()
        {
            return $this->nextOrPreviousDay(false, false);
        }

        /**
         * Modify to the previous occurrence of a given modifier such as a day of
         * the week. If no dayOfWeek is provided, modify to the previous occurrence
         * of the current day of the week. Use the supplied constants
         * to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param string|int|null $modifier
         *
         * @return static
         */
        public function previous($modifier = null)
        {
            if ($modifier === null) {
                $modifier = $this->dayOfWeek;
            }

            return $this->change(
                'last '.(\is_string($modifier) ? $modifier : static::$days[$modifier])
            );
        }

        /**
         * Modify to the first occurrence of a given day of the week
         * in the current month. If no dayOfWeek is provided, modify to the
         * first day of the current month.  Use the supplied constants
         * to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int|null $dayOfWeek
         *
         * @return static
         */
        public function firstOfMonth($dayOfWeek = null)
        {
            $date = $this->startOfDay();

            if ($dayOfWeek === null) {
                return $date->day(1);
            }

            return $date->modify('first '.static::$days[$dayOfWeek].' of '.$date->rawFormat('F').' '.$date->year);
        }

        /**
         * Modify to the last occurrence of a given day of the week
         * in the current month. If no dayOfWeek is provided, modify to the
         * last day of the current month.  Use the supplied constants
         * to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int|null $dayOfWeek
         *
         * @return static
         */
        public function lastOfMonth($dayOfWeek = null)
        {
            $date = $this->startOfDay();

            if ($dayOfWeek === null) {
                return $date->day($date->daysInMonth);
            }

            return $date->modify('last '.static::$days[$dayOfWeek].' of '.$date->rawFormat('F').' '.$date->year);
        }

        /**
         * Modify to the given occurrence of a given day of the week
         * in the current month. If the calculated occurrence is outside the scope
         * of the current month, then return false and no modifications are made.
         * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int $nth
         * @param int $dayOfWeek
         *
         * @return mixed
         */
        public function nthOfMonth($nth, $dayOfWeek)
        {
            $date = $this->avoidMutation()->firstOfMonth();
            $check = $date->rawFormat('Y-m');
            $date = $date->modify('+'.$nth.' '.static::$days[$dayOfWeek]);

            return $date->rawFormat('Y-m') === $check ? $this->modify((string) $date) : false;
        }

        /**
         * Modify to the first occurrence of a given day of the week
         * in the current quarter. If no dayOfWeek is provided, modify to the
         * first day of the current quarter.  Use the supplied constants
         * to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int|null $dayOfWeek day of the week default null
         *
         * @return static
         */
        public function firstOfQuarter($dayOfWeek = null)
        {
            return $this->setDate($this->year, $this->quarter * static::MONTHS_PER_QUARTER - 2, 1)->firstOfMonth($dayOfWeek);
        }

        /**
         * Modify to the last occurrence of a given day of the week
         * in the current quarter. If no dayOfWeek is provided, modify to the
         * last day of the current quarter.  Use the supplied constants
         * to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int|null $dayOfWeek day of the week default null
         *
         * @return static
         */
        public function lastOfQuarter($dayOfWeek = null)
        {
            return $this->setDate($this->year, $this->quarter * static::MONTHS_PER_QUARTER, 1)->lastOfMonth($dayOfWeek);
        }

        /**
         * Modify to the given occurrence of a given day of the week
         * in the current quarter. If the calculated occurrence is outside the scope
         * of the current quarter, then return false and no modifications are made.
         * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int $nth
         * @param int $dayOfWeek
         *
         * @return mixed
         */
        public function nthOfQuarter($nth, $dayOfWeek)
        {
            $date = $this->avoidMutation()->day(1)->month($this->quarter * static::MONTHS_PER_QUARTER);
            $lastMonth = $date->month;
            $year = $date->year;
            $date = $date->firstOfQuarter()->modify('+'.$nth.' '.static::$days[$dayOfWeek]);

            return ($lastMonth < $date->month || $year !== $date->year) ? false : $this->modify((string) $date);
        }

        /**
         * Modify to the first occurrence of a given day of the week
         * in the current year. If no dayOfWeek is provided, modify to the
         * first day of the current year.  Use the supplied constants
         * to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int|null $dayOfWeek day of the week default null
         *
         * @return static
         */
        public function firstOfYear($dayOfWeek = null)
        {
            return $this->month(1)->firstOfMonth($dayOfWeek);
        }

        /**
         * Modify to the last occurrence of a given day of the week
         * in the current year. If no dayOfWeek is provided, modify to the
         * last day of the current year.  Use the supplied constants
         * to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int|null $dayOfWeek day of the week default null
         *
         * @return static
         */
        public function lastOfYear($dayOfWeek = null)
        {
            return $this->month(static::MONTHS_PER_YEAR)->lastOfMonth($dayOfWeek);
        }

        /**
         * Modify to the given occurrence of a given day of the week
         * in the current year. If the calculated occurrence is outside the scope
         * of the current year, then return false and no modifications are made.
         * Use the supplied constants to indicate the desired dayOfWeek, ex. static::MONDAY.
         *
         * @param int $nth
         * @param int $dayOfWeek
         *
         * @return mixed
         */
        public function nthOfYear($nth, $dayOfWeek)
        {
            $date = $this->avoidMutation()->firstOfYear()->modify('+'.$nth.' '.static::$days[$dayOfWeek]);

            return $this->year === $date->year ? $this->modify((string) $date) : false;
        }

        /**
         * Modify the current instance to the average of a given instance (default now) and the current instance
         * (second-precision).
         *
         * @param \Carbon\Carbon|\DateTimeInterface|null $date
         *
         * @return static
         */
        public function average($date = null)
        {
            return $this->addRealMicroseconds((int) ($this->diffInRealMicroseconds($this->resolveCarbon($date), false) / 2));
        }

        /**
         * Get the closest date from the instance (second-precision).
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date1
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date2
         *
         * @return static
         */
        public function closest($date1, $date2)
        {
            return $this->diffInRealMicroseconds($date1) < $this->diffInRealMicroseconds($date2) ? $date1 : $date2;
        }

        /**
         * Get the farthest date from the instance (second-precision).
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date1
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date2
         *
         * @return static
         */
        public function farthest($date1, $date2)
        {
            return $this->diffInRealMicroseconds($date1) > $this->diffInRealMicroseconds($date2) ? $date1 : $date2;
        }

        /**
         * Get the minimum instance between a given instance (default now) and the current instance.
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @return static
         */
        public function min($date = null)
        {
            $date = $this->resolveCarbon($date);

            return $this->lt($date) ? $this : $date;
        }

        /**
         * Get the minimum instance between a given instance (default now) and the current instance.
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @see min()
         *
         * @return static
         */
        public function minimum($date = null)
        {
            return $this->min($date);
        }

        /**
         * Get the maximum instance between a given instance (default now) and the current instance.
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @return static
         */
        public function max($date = null)
        {
            $date = $this->resolveCarbon($date);

            return $this->gt($date) ? $this : $date;
        }

        /**
         * Get the maximum instance between a given instance (default now) and the current instance.
         *
         * @param \Carbon\Carbon|\DateTimeInterface|mixed $date
         *
         * @see max()
         *
         * @return static
         */
        public function maximum($date = null)
        {
            return $this->max($date);
        }

        /**
         * Calls \DateTime::modify if mutable or \DateTimeImmutable::modify else.
         *
         * @see https://php.net/manual/en/datetime.modify.php
         *
         * @return static|false
         */
        #[ReturnTypeWillChange]
        public function modify($modify)
        {
            return parent::modify((string) $modify);
        }

        /**
         * Similar to native modify() method of DateTime but can handle more grammars.
         *
         * @example
         * ```
         * echo Carbon::now()->change('next 2pm');
         * ```
         *
         * @link https://php.net/manual/en/datetime.modify.php
         *
         * @param string $modifier
         *
         * @return static
         */
        public function change($modifier)
        {
            return $this->modify(preg_replace_callback('/^(next|previous|last)\s+(\d{1,2}(h|am|pm|:\d{1,2}(:\d{1,2})?))$/i', function ($match) {
                $match[2] = str_replace('h', ':00', $match[2]);
                $test = $this->avoidMutation()->modify($match[2]);
                $method = $match[1] === 'next' ? 'lt' : 'gt';
                $match[1] = $test->$method($this) ? $match[1].' day' : 'today';

                return $match[1].' '.$match[2];
            }, strtr(trim($modifier), [
                ' at ' => ' ',
                'just now' => 'now',
                'after tomorrow' => 'tomorrow +1 day',
                'before yesterday' => 'yesterday -1 day',
            ])));
        }
    }
  uploads-Carbon-src-Carbon-Traits-Mutability.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Traits;

    use Carbon\Carbon;
    use Carbon\CarbonImmutable;

    /**
     * Trait Mutability.
     *
     * Utils to know if the current object is mutable or immutable and convert it.
     */
    trait Mutability
    {
        use Cast;

        /**
         * Returns true if the current class/instance is mutable.
         *
         * @return bool
         */
        public static function isMutable()
        {
            return false;
        }

        /**
         * Returns true if the current class/instance is immutable.
         *
         * @return bool
         */
        public static function isImmutable()
        {
            return !static::isMutable();
        }

        /**
         * Return a mutable copy of the instance.
         *
         * @return Carbon
         */
        public function toMutable()
        {
            /** @var Carbon $date */
            $date = $this->cast(Carbon::class);

            return $date;
        }

        /**
         * Return a immutable copy of the instance.
         *
         * @return CarbonImmutable
         */
        public function toImmutable()
        {
            /** @var CarbonImmutable $date */
            $date = $this->cast(CarbonImmutable::class);

            return $date;
        }
    }
  uploads-Carbon-src-Carbon-Traits-Rounding.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Traits;

    use Carbon\CarbonInterface;
    use Carbon\Exceptions\UnknownUnitException;

    /**
     * Trait Rounding.
     *
     * Round, ceil, floor units.
     *
     * Depends on the following methods:
     *
     * @method static copy()
     * @method static startOfWeek(int $weekStartsAt = null)
     */
    trait Rounding
    {
        use IntervalRounding;

        /**
         * Round the current instance at the given unit with given precision if specified and the given function.
         *
         * @param string    $unit
         * @param float|int $precision
         * @param string    $function
         *
         * @return CarbonInterface
         */
        public function roundUnit($unit, $precision = 1, $function = 'round')
        {
            $metaUnits = [
                // @call roundUnit
                'millennium' => [static::YEARS_PER_MILLENNIUM, 'year'],
                // @call roundUnit
                'century' => [static::YEARS_PER_CENTURY, 'year'],
                // @call roundUnit
                'decade' => [static::YEARS_PER_DECADE, 'year'],
                // @call roundUnit
                'quarter' => [static::MONTHS_PER_QUARTER, 'month'],
                // @call roundUnit
                'millisecond' => [1000, 'microsecond'],
            ];
            $normalizedUnit = static::singularUnit($unit);
            $ranges = array_merge(static::getRangesByUnit(), [
                // @call roundUnit
                'microsecond' => [0, 999999],
            ]);
            $factor = 1;
            $initialMonth = $this->month;

            if ($normalizedUnit === 'week') {
                $normalizedUnit = 'day';
                $precision *= static::DAYS_PER_WEEK;
            }

            if (isset($metaUnits[$normalizedUnit])) {
                [$factor, $normalizedUnit] = $metaUnits[$normalizedUnit];
            }

            $precision *= $factor;

            if (!isset($ranges[$normalizedUnit])) {
                throw new UnknownUnitException($unit);
            }

            $found = false;
            $fraction = 0;
            $arguments = null;
            $factor = $this->year < 0 ? -1 : 1;
            $changes = [];

            foreach ($ranges as $unit => [$minimum, $maximum]) {
                if ($normalizedUnit === $unit) {
                    $arguments = [$this->$unit, $minimum];
                    $fraction = $precision - floor($precision);
                    $found = true;

                    continue;
                }

                if ($found) {
                    $delta = $maximum + 1 - $minimum;
                    $factor /= $delta;
                    $fraction *= $delta;
                    $arguments[0] += $this->$unit * $factor;
                    $changes[$unit] = round(
                        $minimum + ($fraction ? $fraction * $function(($this->$unit - $minimum) / $fraction) : 0)
                    );

                    // Cannot use modulo as it lose double precision
                    while ($changes[$unit] >= $delta) {
                        $changes[$unit] -= $delta;
                    }

                    $fraction -= floor($fraction);
                }
            }

            [$value, $minimum] = $arguments;
            $normalizedValue = floor($function(($value - $minimum) / $precision) * $precision + $minimum);

            /** @var CarbonInterface $result */
            $result = $this->$normalizedUnit($normalizedValue);

            foreach ($changes as $unit => $value) {
                $result = $result->$unit($value);
            }

            return $normalizedUnit === 'month' && $precision <= 1 && abs($result->month - $initialMonth) === 2
                // Re-run the change in case an overflow occurred
                ? $result->$normalizedUnit($normalizedValue)
                : $result;
        }

        /**
         * Truncate the current instance at the given unit with given precision if specified.
         *
         * @param string    $unit
         * @param float|int $precision
         *
         * @return CarbonInterface
         */
        public function floorUnit($unit, $precision = 1)
        {
            return $this->roundUnit($unit, $precision, 'floor');
        }

        /**
         * Ceil the current instance at the given unit with given precision if specified.
         *
         * @param string    $unit
         * @param float|int $precision
         *
         * @return CarbonInterface
         */
        public function ceilUnit($unit, $precision = 1)
        {
            return $this->roundUnit($unit, $precision, 'ceil');
        }

        /**
         * Round the current instance second with given precision if specified.
         *
         * @param float|int|string|\DateInterval|null $precision
         * @param string                              $function
         *
         * @return CarbonInterface
         */
        public function round($precision = 1, $function = 'round')
        {
            return $this->roundWith($precision, $function);
        }

        /**
         * Round the current instance second with given precision if specified.
         *
         * @param float|int|string|\DateInterval|null $precision
         *
         * @return CarbonInterface
         */
        public function floor($precision = 1)
        {
            return $this->round($precision, 'floor');
        }

        /**
         * Ceil the current instance second with given precision if specified.
         *
         * @param float|int|string|\DateInterval|null $precision
         *
         * @return CarbonInterface
         */
        public function ceil($precision = 1)
        {
            return $this->round($precision, 'ceil');
        }

        /**
         * Round the current instance week.
         *
         * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
         *
         * @return CarbonInterface
         */
        public function roundWeek($weekStartsAt = null)
        {
            return $this->closest(
                $this->avoidMutation()->floorWeek($weekStartsAt),
                $this->avoidMutation()->ceilWeek($weekStartsAt)
            );
        }

        /**
         * Truncate the current instance week.
         *
         * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
         *
         * @return CarbonInterface
         */
        public function floorWeek($weekStartsAt = null)
        {
            return $this->startOfWeek($weekStartsAt);
        }

        /**
         * Ceil the current instance week.
         *
         * @param int $weekStartsAt optional start allow you to specify the day of week to use to start the week
         *
         * @return CarbonInterface
         */
        public function ceilWeek($weekStartsAt = null)
        {
            if ($this->isMutable()) {
                $startOfWeek = $this->avoidMutation()->startOfWeek($weekStartsAt);

                return $startOfWeek != $this ?
                    $this->startOfWeek($weekStartsAt)->addWeek() :
                    $this;
            }

            $startOfWeek = $this->startOfWeek($weekStartsAt);

            return $startOfWeek != $this ?
                $startOfWeek->addWeek() :
                $this->avoidMutation();
        }
    }
  uploads-Carbon-src-Carbon-Traits-Test.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Traits;

    use Carbon\CarbonInterface;
    use Closure;
    use DateTimeImmutable;
    use DateTimeInterface;

    trait Test
    {
        ///////////////////////////////////////////////////////////////////
        ///////////////////////// TESTING AIDS ////////////////////////////
        ///////////////////////////////////////////////////////////////////

        /**
         * A test Carbon instance to be returned when now instances are created.
         *
         * @var static
         */
        protected static $testNow;

        /**
         * Set a Carbon instance (real or mock) to be returned when a "now"
         * instance is created.  The provided instance will be returned
         * specifically under the following conditions:
         *   - A call to the static now() method, ex. Carbon::now()
         *   - When a null (or blank string) is passed to the constructor or parse(), ex. new Carbon(null)
         *   - When the string "now" is passed to the constructor or parse(), ex. new Carbon('now')
         *   - When a string containing the desired time is passed to Carbon::parse().
         *
         * Note the timezone parameter was left out of the examples above and
         * has no affect as the mock value will be returned regardless of its value.
         *
         * To clear the test instance call this method using the default
         * parameter of null.
         *
         * /!\ Use this method for unit tests only.
         *
         * @param Closure|static|string|false|null $testNow real or mock Carbon instance
         */
        public static function setTestNow($testNow = null)
        {
            if ($testNow === false) {
                $testNow = null;
            }

            static::$testNow = \is_string($testNow) ? static::parse($testNow) : $testNow;
        }

        public static function setTestNowAndTimezone($testNow = null, $tz = null)
        {
            $useDateInstanceTimezone = $testNow instanceof DateTimeInterface;

            if ($useDateInstanceTimezone) {
                date_default_timezone_set($testNow->getTimezone()->getName());
            }

            static::setTestNow($testNow);

            if (!$useDateInstanceTimezone) {
                date_default_timezone_set(static::getMockedTestNow(\func_num_args() === 1 ? null : $tz)->timezone);
            }
        }

        /**
         * Temporarily sets a static date to be used within the callback.
         * Using setTestNow to set the date, executing the callback, then
         * clearing the test instance.
         *
         * /!\ Use this method for unit tests only.
         *
         * @param Closure|static|string|false|null $testNow  real or mock Carbon instance
         * @param Closure|null                     $callback
         *
         * @return mixed
         */
        public static function withTestNow($testNow = null, $callback = null)
        {
            static::setTestNow($testNow);
            $result = $callback();
            static::setTestNow();

            return $result;
        }

        /**
         * Get the Carbon instance (real or mock) to be returned when a "now"
         * instance is created.
         *
         * @return Closure|static the current instance used for testing
         */
        public static function getTestNow()
        {
            return static::$testNow;
        }

        /**
         * Determine if there is a valid test instance set. A valid test instance
         * is anything that is not null.
         *
         * @return bool true if there is a test instance, otherwise false
         */
        public static function hasTestNow()
        {
            return static::getTestNow() !== null;
        }

        /**
         * Get the mocked date passed in setTestNow() and if it's a Closure, execute it.
         *
         * @param string|\DateTimeZone $tz
         *
         * @return \Carbon\CarbonImmutable|\Carbon\Carbon|null
         */
        protected static function getMockedTestNow($tz)
        {
            $testNow = static::getTestNow();

            if ($testNow instanceof Closure) {
                $realNow = new DateTimeImmutable('now');
                $testNow = $testNow(static::parse(
                    $realNow->format('Y-m-d H:i:s.u'),
                    $tz ?: $realNow->getTimezone()
                ));
            }
            /* @var \Carbon\CarbonImmutable|\Carbon\Carbon|null $testNow */

            return $testNow instanceof CarbonInterface
                ? $testNow->avoidMutation()->tz($tz)
                : $testNow;
        }

        protected static function mockConstructorParameters(&$time, $tz)
        {
            /** @var \Carbon\CarbonImmutable|\Carbon\Carbon $testInstance */
            $testInstance = clone static::getMockedTestNow($tz);

            if (static::hasRelativeKeywords($time)) {
                $testInstance = $testInstance->modify($time);
            }

            $time = $testInstance instanceof self
                ? $testInstance->rawFormat(static::MOCK_DATETIME_FORMAT)
                : $testInstance->format(static::MOCK_DATETIME_FORMAT);
        }
    }
  uploads-Carbon-src-Carbon-Traits-Units.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Traits;

    use Carbon\CarbonConverterInterface;
    use Carbon\CarbonInterface;
    use Carbon\CarbonInterval;
    use Carbon\Exceptions\UnitException;
    use Closure;
    use DateInterval;
    use ReturnTypeWillChange;

    /**
     * Trait Units.
     *
     * Add, subtract and set units.
     */
    trait Units
    {
        /**
         * Add seconds to the instance using timestamp. Positive $value travels
         * forward while negative $value travels into the past.
         *
         * @param string $unit
         * @param int    $value
         *
         * @return static
         */
        public function addRealUnit($unit, $value = 1)
        {
            switch ($unit) {
                // @call addRealUnit
                case 'micro':

                // @call addRealUnit
                case 'microsecond':
                    /* @var CarbonInterface $this */
                    $diff = $this->microsecond + $value;
                    $time = $this->getTimestamp();
                    $seconds = (int) floor($diff / static::MICROSECONDS_PER_SECOND);
                    $time += $seconds;
                    $diff -= $seconds * static::MICROSECONDS_PER_SECOND;
                    $microtime = str_pad((string) $diff, 6, '0', STR_PAD_LEFT);
                    $tz = $this->tz;

                    return $this->tz('UTC')->modify("@$time.$microtime")->tz($tz);

                // @call addRealUnit
                case 'milli':
                // @call addRealUnit
                case 'millisecond':
                    return $this->addRealUnit('microsecond', $value * static::MICROSECONDS_PER_MILLISECOND);

                    break;

                // @call addRealUnit
                case 'second':
                    break;

                // @call addRealUnit
                case 'minute':
                    $value *= static::SECONDS_PER_MINUTE;

                    break;

                // @call addRealUnit
                case 'hour':
                    $value *= static::MINUTES_PER_HOUR * static::SECONDS_PER_MINUTE;

                    break;

                // @call addRealUnit
                case 'day':
                    $value *= static::HOURS_PER_DAY * static::MINUTES_PER_HOUR * static::SECONDS_PER_MINUTE;

                    break;

                // @call addRealUnit
                case 'week':
                    $value *= static::DAYS_PER_WEEK * static::HOURS_PER_DAY * static::MINUTES_PER_HOUR * static::SECONDS_PER_MINUTE;

                    break;

                // @call addRealUnit
                case 'month':
                    $value *= 30 * static::HOURS_PER_DAY * static::MINUTES_PER_HOUR * static::SECONDS_PER_MINUTE;

                    break;

                // @call addRealUnit
                case 'quarter':
                    $value *= static::MONTHS_PER_QUARTER * 30 * static::HOURS_PER_DAY * static::MINUTES_PER_HOUR * static::SECONDS_PER_MINUTE;

                    break;

                // @call addRealUnit
                case 'year':
                    $value *= 365 * static::HOURS_PER_DAY * static::MINUTES_PER_HOUR * static::SECONDS_PER_MINUTE;

                    break;

                // @call addRealUnit
                case 'decade':
                    $value *= static::YEARS_PER_DECADE * 365 * static::HOURS_PER_DAY * static::MINUTES_PER_HOUR * static::SECONDS_PER_MINUTE;

                    break;

                // @call addRealUnit
                case 'century':
                    $value *= static::YEARS_PER_CENTURY * 365 * static::HOURS_PER_DAY * static::MINUTES_PER_HOUR * static::SECONDS_PER_MINUTE;

                    break;

                // @call addRealUnit
                case 'millennium':
                    $value *= static::YEARS_PER_MILLENNIUM * 365 * static::HOURS_PER_DAY * static::MINUTES_PER_HOUR * static::SECONDS_PER_MINUTE;

                    break;

                default:
                    if ($this->localStrictModeEnabled ?? static::isStrictModeEnabled()) {
                        throw new UnitException("Invalid unit for real timestamp add/sub: '$unit'");
                    }

                    return $this;
            }

            /* @var CarbonInterface $this */
            return $this->setTimestamp((int) ($this->getTimestamp() + $value));
        }

        public function subRealUnit($unit, $value = 1)
        {
            return $this->addRealUnit($unit, -$value);
        }

        /**
         * Returns true if a property can be changed via setter.
         *
         * @param string $unit
         *
         * @return bool
         */
        public static function isModifiableUnit($unit)
        {
            static $modifiableUnits = [
                // @call addUnit
                'millennium',
                // @call addUnit
                'century',
                // @call addUnit
                'decade',
                // @call addUnit
                'quarter',
                // @call addUnit
                'week',
                // @call addUnit
                'weekday',
            ];

            return \in_array($unit, $modifiableUnits) || \in_array($unit, static::$units);
        }

        /**
         * Call native PHP DateTime/DateTimeImmutable add() method.
         *
         * @param DateInterval $interval
         *
         * @return static
         */
        public function rawAdd(DateInterval $interval)
        {
            return parent::add($interval);
        }

        /**
         * Add given units or interval to the current instance.
         *
         * @example $date->add('hour', 3)
         * @example $date->add(15, 'days')
         * @example $date->add(CarbonInterval::days(4))
         *
         * @param string|DateInterval|Closure|CarbonConverterInterface $unit
         * @param int                                                  $value
         * @param bool|null                                            $overflow
         *
         * @return static
         */
        #[ReturnTypeWillChange]
        public function add($unit, $value = 1, $overflow = null)
        {
            if (\is_string($unit) && \func_num_args() === 1) {
                $unit = CarbonInterval::make($unit);
            }

            if ($unit instanceof CarbonConverterInterface) {
                return $this->resolveCarbon($unit->convertDate($this, false));
            }

            if ($unit instanceof Closure) {
                return $this->resolveCarbon($unit($this, false));
            }

            if ($unit instanceof DateInterval) {
                return parent::add($unit);
            }

            if (is_numeric($unit)) {
                [$value, $unit] = [$unit, $value];
            }

            return $this->addUnit($unit, $value, $overflow);
        }

        /**
         * Add given units to the current instance.
         *
         * @param string    $unit
         * @param int       $value
         * @param bool|null $overflow
         *
         * @return static
         */
        public function addUnit($unit, $value = 1, $overflow = null)
        {
            $date = $this;

            if (!is_numeric($value) || !(float) $value) {
                return $date->isMutable() ? $date : $date->avoidMutation();
            }

            $unit = self::singularUnit($unit);
            $metaUnits = [
                'millennium' => [static::YEARS_PER_MILLENNIUM, 'year'],
                'century' => [static::YEARS_PER_CENTURY, 'year'],
                'decade' => [static::YEARS_PER_DECADE, 'year'],
                'quarter' => [static::MONTHS_PER_QUARTER, 'month'],
            ];

            if (isset($metaUnits[$unit])) {
                [$factor, $unit] = $metaUnits[$unit];
                $value *= $factor;
            }

            if ($unit === 'weekday') {
                $weekendDays = static::getWeekendDays();

                if ($weekendDays !== [static::SATURDAY, static::SUNDAY]) {
                    $absoluteValue = abs($value);
                    $sign = $value / max(1, $absoluteValue);
                    $weekDaysCount = 7 - min(6, \count(array_unique($weekendDays)));
                    $weeks = floor($absoluteValue / $weekDaysCount);

                    for ($diff = $absoluteValue % $weekDaysCount; $diff; $diff--) {
                        /** @var static $date */
                        $date = $date->addDays($sign);

                        while (\in_array($date->dayOfWeek, $weekendDays)) {
                            $date = $date->addDays($sign);
                        }
                    }

                    $value = $weeks * $sign;
                    $unit = 'week';
                }

                $timeString = $date->toTimeString();
            } elseif ($canOverflow = \in_array($unit, [
                    'month',
                    'year',
                ]) && ($overflow === false || (
                    $overflow === null &&
                    ($ucUnit = ucfirst($unit).'s') &&
                    !($this->{'local'.$ucUnit.'Overflow'} ?? static::{'shouldOverflow'.$ucUnit}())
                ))) {
                $day = $date->day;
            }

            $value = (int) $value;

            if ($unit === 'milli' || $unit === 'millisecond') {
                $unit = 'microsecond';
                $value *= static::MICROSECONDS_PER_MILLISECOND;
            }

            // Work-around for bug https://bugs.php.net/bug.php?id=75642
            if ($unit === 'micro' || $unit === 'microsecond') {
                $microseconds = $this->micro + $value;
                $second = (int) floor($microseconds / static::MICROSECONDS_PER_SECOND);
                $microseconds %= static::MICROSECONDS_PER_SECOND;
                if ($microseconds < 0) {
                    $microseconds += static::MICROSECONDS_PER_SECOND;
                }
                $date = $date->microseconds($microseconds);
                $unit = 'second';
                $value = $second;
            }
            $date = $date->modify("$value $unit");

            if (isset($timeString)) {
                $date = $date->setTimeFromTimeString($timeString);
            } elseif (isset($canOverflow, $day) && $canOverflow && $day !== $date->day) {
                $date = $date->modify('last day of previous month');
            }

            if (!$date) {
                throw new UnitException('Unable to add unit '.var_export(\func_get_args(), true));
            }

            return $date;
        }

        /**
         * Subtract given units to the current instance.
         *
         * @param string    $unit
         * @param int       $value
         * @param bool|null $overflow
         *
         * @return static
         */
        public function subUnit($unit, $value = 1, $overflow = null)
        {
            return $this->addUnit($unit, -$value, $overflow);
        }

        /**
         * Call native PHP DateTime/DateTimeImmutable sub() method.
         *
         * @param DateInterval $interval
         *
         * @return static
         */
        public function rawSub(DateInterval $interval)
        {
            return parent::sub($interval);
        }

        /**
         * Subtract given units or interval to the current instance.
         *
         * @example $date->sub('hour', 3)
         * @example $date->sub(15, 'days')
         * @example $date->sub(CarbonInterval::days(4))
         *
         * @param string|DateInterval|Closure|CarbonConverterInterface $unit
         * @param int                                                  $value
         * @param bool|null                                            $overflow
         *
         * @return static
         */
        #[ReturnTypeWillChange]
        public function sub($unit, $value = 1, $overflow = null)
        {
            if (\is_string($unit) && \func_num_args() === 1) {
                $unit = CarbonInterval::make($unit);
            }

            if ($unit instanceof CarbonConverterInterface) {
                return $this->resolveCarbon($unit->convertDate($this, true));
            }

            if ($unit instanceof Closure) {
                return $this->resolveCarbon($unit($this, true));
            }

            if ($unit instanceof DateInterval) {
                return parent::sub($unit);
            }

            if (is_numeric($unit)) {
                [$value, $unit] = [$unit, $value];
            }

            return $this->addUnit($unit, -(float) $value, $overflow);
        }

        /**
         * Subtract given units or interval to the current instance.
         *
         * @see sub()
         *
         * @param string|DateInterval $unit
         * @param int                 $value
         * @param bool|null           $overflow
         *
         * @return static
         */
        public function subtract($unit, $value = 1, $overflow = null)
        {
            if (\is_string($unit) && \func_num_args() === 1) {
                $unit = CarbonInterval::make($unit);
            }

            return $this->sub($unit, $value, $overflow);
        }
    }
  uploads-Carbon-src-Carbon-Traits-Week.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon\Traits;

    /**
     * Trait Week.
     *
     * week and ISO week number, year and count in year.
     *
     * Depends on the following properties:
     *
     * @property int $daysInYear
     * @property int $dayOfWeek
     * @property int $dayOfYear
     * @property int $year
     *
     * Depends on the following methods:
     *
     * @method static addWeeks(int $weeks = 1)
     * @method static copy()
     * @method static dayOfYear(int $dayOfYear)
     * @method string getTranslationMessage(string $key, ?string $locale = null, ?string $default = null, $translator = null)
     * @method static next(int|string $day = null)
     * @method static startOfWeek(int $day = 1)
     * @method static subWeeks(int $weeks = 1)
     * @method static year(int $year = null)
     */
    trait Week
    {
        /**
         * Set/get the week number of year using given first day of week and first
         * day of year included in the first week. Or use ISO format if no settings
         * given.
         *
         * @param int|null $year      if null, act as a getter, if not null, set the year and return current instance.
         * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
         * @param int|null $dayOfYear first day of year included in the week #1
         *
         * @return int|static
         */
        public function isoWeekYear($year = null, $dayOfWeek = null, $dayOfYear = null)
        {
            return $this->weekYear(
                $year,
                $dayOfWeek ?? 1,
                $dayOfYear ?? 4
            );
        }

        /**
         * Set/get the week number of year using given first day of week and first
         * day of year included in the first week. Or use US format if no settings
         * given (Sunday / Jan 6).
         *
         * @param int|null $year      if null, act as a getter, if not null, set the year and return current instance.
         * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
         * @param int|null $dayOfYear first day of year included in the week #1
         *
         * @return int|static
         */
        public function weekYear($year = null, $dayOfWeek = null, $dayOfYear = null)
        {
            $dayOfWeek = $dayOfWeek ?? $this->getTranslationMessage('first_day_of_week') ?? 0;
            $dayOfYear = $dayOfYear ?? $this->getTranslationMessage('day_of_first_week_of_year') ?? 1;

            if ($year !== null) {
                $year = (int) round($year);

                if ($this->weekYear(null, $dayOfWeek, $dayOfYear) === $year) {
                    return $this->avoidMutation();
                }

                $week = $this->week(null, $dayOfWeek, $dayOfYear);
                $day = $this->dayOfWeek;
                $date = $this->year($year);
                switch ($date->weekYear(null, $dayOfWeek, $dayOfYear) - $year) {
                    case 1:
                        $date = $date->subWeeks(26);

                        break;
                    case -1:
                        $date = $date->addWeeks(26);

                        break;
                }

                $date = $date->addWeeks($week - $date->week(null, $dayOfWeek, $dayOfYear))->startOfWeek($dayOfWeek);

                if ($date->dayOfWeek === $day) {
                    return $date;
                }

                return $date->next($day);
            }

            $year = $this->year;
            $day = $this->dayOfYear;
            $date = $this->avoidMutation()->dayOfYear($dayOfYear)->startOfWeek($dayOfWeek);

            if ($date->year === $year && $day < $date->dayOfYear) {
                return $year - 1;
            }

            $date = $this->avoidMutation()->addYear()->dayOfYear($dayOfYear)->startOfWeek($dayOfWeek);

            if ($date->year === $year && $day >= $date->dayOfYear) {
                return $year + 1;
            }

            return $year;
        }

        /**
         * Get the number of weeks of the current week-year using given first day of week and first
         * day of year included in the first week. Or use ISO format if no settings
         * given.
         *
         * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
         * @param int|null $dayOfYear first day of year included in the week #1
         *
         * @return int
         */
        public function isoWeeksInYear($dayOfWeek = null, $dayOfYear = null)
        {
            return $this->weeksInYear(
                $dayOfWeek ?? 1,
                $dayOfYear ?? 4
            );
        }

        /**
         * Get the number of weeks of the current week-year using given first day of week and first
         * day of year included in the first week. Or use US format if no settings
         * given (Sunday / Jan 6).
         *
         * @param int|null $dayOfWeek first date of week from 0 (Sunday) to 6 (Saturday)
         * @param int|null $dayOfYear first day of year included in the week #1
         *
         * @return int
         */
        public function weeksInYear($dayOfWeek = null, $dayOfYear = null)
        {
            $dayOfWeek = $dayOfWeek ?? $this->getTranslationMessage('first_day_of_week') ?? 0;
            $dayOfYear = $dayOfYear ?? $this->getTranslationMessage('day_of_first_week_of_year') ?? 1;
            $year = $this->year;
            $start = $this->avoidMutation()->dayOfYear($dayOfYear)->startOfWeek($dayOfWeek);
            $startDay = $start->dayOfYear;
            if ($start->year !== $year) {
                $startDay -= $start->daysInYear;
            }
            $end = $this->avoidMutation()->addYear()->dayOfYear($dayOfYear)->startOfWeek($dayOfWeek);
            $endDay = $end->dayOfYear;
            if ($end->year !== $year) {
                $endDay += $this->daysInYear;
            }

            return (int) round(($endDay - $startDay) / 7);
        }

        /**
         * Get/set the week number using given first day of week and first
         * day of year included in the first week. Or use US format if no settings
         * given (Sunday / Jan 6).
         *
         * @param int|null $week
         * @param int|null $dayOfWeek
         * @param int|null $dayOfYear
         *
         * @return int|static
         */
        public function week($week = null, $dayOfWeek = null, $dayOfYear = null)
        {
            $date = $this;
            $dayOfWeek = $dayOfWeek ?? $this->getTranslationMessage('first_day_of_week') ?? 0;
            $dayOfYear = $dayOfYear ?? $this->getTranslationMessage('day_of_first_week_of_year') ?? 1;

            if ($week !== null) {
                return $date->addWeeks(round($week) - $this->week(null, $dayOfWeek, $dayOfYear));
            }

            $start = $date->avoidMutation()->dayOfYear($dayOfYear)->startOfWeek($dayOfWeek);
            $end = $date->avoidMutation()->startOfWeek($dayOfWeek);
            if ($start > $end) {
                $start = $start->subWeeks(26)->dayOfYear($dayOfYear)->startOfWeek($dayOfWeek);
            }
            $week = (int) ($start->diffInDays($end) / 7 + 1);

            return $week > $end->weeksInYear($dayOfWeek, $dayOfYear) ? 1 : $week;
        }

        /**
         * Get/set the week number using given first day of week and first
         * day of year included in the first week. Or use ISO format if no settings
         * given.
         *
         * @param int|null $week
         * @param int|null $dayOfWeek
         * @param int|null $dayOfYear
         *
         * @return int|static
         */
        public function isoWeek($week = null, $dayOfWeek = null, $dayOfYear = null)
        {
            return $this->week(
                $week,
                $dayOfWeek ?? 1,
                $dayOfYear ?? 4
            );
        }
    }
  uploads-Carbon-src-Carbon-Translator.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Carbon;

    use Closure;
    use ReflectionException;
    use ReflectionFunction;
    use Symfony\Component\Translation;

    class Translator extends Translation\Translator
    {
        /**
         * Translator singletons for each language.
         *
         * @var array
         */
        protected static $singletons = [];

        /**
         * List of custom localized messages.
         *
         * @var array
         */
        protected $messages = [];

        /**
         * List of custom directories that contain translation files.
         *
         * @var string[]
         */
        protected $directories = [];

        /**
         * Set to true while constructing.
         *
         * @var bool
         */
        protected $initializing = false;

        /**
         * List of locales aliases.
         *
         * @var string[]
         */
        protected $aliases = [
            'me' => 'sr_Latn_ME',
            'scr' => 'sh',
        ];

        /**
         * Return a singleton instance of Translator.
         *
         * @param string|null $locale optional initial locale ("en" - english by default)
         *
         * @return static
         */
        public static function get($locale = null)
        {
            $locale = $locale ?: 'en';

            if (!isset(static::$singletons[$locale])) {
                static::$singletons[$locale] = new static($locale ?: 'en');
            }

            return static::$singletons[$locale];
        }

        public function __construct($locale, Translation\Formatter\MessageFormatterInterface $formatter = null, $cacheDir = null, $debug = false)
        {
            $this->initializing = true;
            $this->directories = [__DIR__.'/Lang'];
            $this->addLoader('array', new Translation\Loader\ArrayLoader());
            parent::__construct($locale, $formatter, $cacheDir, $debug);
            $this->initializing = false;
        }

        /**
         * Returns the list of directories translation files are searched in.
         *
         * @return array
         */
        public function getDirectories(): array
        {
            return $this->directories;
        }

        /**
         * Set list of directories translation files are searched in.
         *
         * @param array $directories new directories list
         *
         * @return $this
         */
        public function setDirectories(array $directories)
        {
            $this->directories = $directories;

            return $this;
        }

        /**
         * Add a directory to the list translation files are searched in.
         *
         * @param string $directory new directory
         *
         * @return $this
         */
        public function addDirectory(string $directory)
        {
            $this->directories[] = $directory;

            return $this;
        }

        /**
         * Remove a directory from the list translation files are searched in.
         *
         * @param string $directory directory path
         *
         * @return $this
         */
        public function removeDirectory(string $directory)
        {
            $search = rtrim(strtr($directory, '\\', '/'), '/');

            return $this->setDirectories(array_filter($this->getDirectories(), function ($item) use ($search) {
                return rtrim(strtr($item, '\\', '/'), '/') !== $search;
            }));
        }

        /**
         * Returns the translation.
         *
         * @param string $id
         * @param array  $parameters
         * @param string $domain
         * @param string $locale
         *
         * @return string
         */
        public function trans($id, array $parameters = [], $domain = null, $locale = null)
        {
            if ($domain === null) {
                $domain = 'messages';
            }

            $format = $this->getCatalogue($locale)->get((string) $id, $domain);

            if ($format instanceof Closure) {
                // @codeCoverageIgnoreStart
                try {
                    $count = (new ReflectionFunction($format))->getNumberOfRequiredParameters();
                } catch (ReflectionException $exception) {
                    $count = 0;
                }
                // @codeCoverageIgnoreEnd

                return $format(
                    ...array_values($parameters),
                    ...array_fill(0, max(0, $count - \count($parameters)), null)
                );
            }

            return parent::trans($id, $parameters, $domain, $locale);
        }

        /**
         * Reset messages of a locale (all locale if no locale passed).
         * Remove custom messages and reload initial messages from matching
         * file in Lang directory.
         *
         * @param string|null $locale
         *
         * @return bool
         */
        public function resetMessages($locale = null)
        {
            if ($locale === null) {
                $this->messages = [];

                return true;
            }

            foreach ($this->getDirectories() as $directory) {
                $data = @include sprintf('%s/%s.php', rtrim($directory, '\\/'), $locale);

                if ($data !== false) {
                    $this->messages[$locale] = $data;
                    $this->addResource('array', $this->messages[$locale], $locale);

                    return true;
                }
            }

            return false;
        }

        /**
         * Returns the list of files matching a given locale prefix (or all if empty).
         *
         * @param string $prefix prefix required to filter result
         *
         * @return array
         */
        public function getLocalesFiles($prefix = '')
        {
            $files = [];

            foreach ($this->getDirectories() as $directory) {
                $directory = rtrim($directory, '\\/');

                foreach (glob("$directory/$prefix*.php") as $file) {
                    $files[] = $file;
                }
            }

            return array_unique($files);
        }

        /**
         * Returns the list of internally available locales and already loaded custom locales.
         * (It will ignore custom translator dynamic loading.)
         *
         * @param string $prefix prefix required to filter result
         *
         * @return array
         */
        public function getAvailableLocales($prefix = '')
        {
            $locales = [];
            foreach ($this->getLocalesFiles($prefix) as $file) {
                $locales[] = substr($file, strrpos($file, '/') + 1, -4);
            }

            return array_unique(array_merge($locales, array_keys($this->messages)));
        }

        /**
         * Init messages language from matching file in Lang directory.
         *
         * @param string $locale
         *
         * @return bool
         */
        protected function loadMessagesFromFile($locale)
        {
            if (isset($this->messages[$locale])) {
                return true;
            }

            return $this->resetMessages($locale);
        }

        /**
         * Set messages of a locale and take file first if present.
         *
         * @param string $locale
         * @param array  $messages
         *
         * @return $this
         */
        public function setMessages($locale, $messages)
        {
            $this->loadMessagesFromFile($locale);
            $this->addResource('array', $messages, $locale);
            $this->messages[$locale] = array_merge(
                $this->messages[$locale] ?? [],
                $messages
            );

            return $this;
        }

        /**
         * Set messages of the current locale and take file first if present.
         *
         * @param array $messages
         *
         * @return $this
         */
        public function setTranslations($messages)
        {
            return $this->setMessages($this->getLocale(), $messages);
        }

        /**
         * Get messages of a locale, if none given, return all the
         * languages.
         *
         * @param string|null $locale
         *
         * @return array
         */
        public function getMessages($locale = null)
        {
            return $locale === null ? $this->messages : $this->messages[$locale];
        }

        /**
         * Set the current translator locale and indicate if the source locale file exists
         *
         * @param string $locale locale ex. en
         *
         * @return bool
         */
        public function setLocale($locale)
        {
            $locale = preg_replace_callback('/[-_]([a-z]{2,}|[0-9]{2,})/', function ($matches) {
                // _2-letters or YUE is a region, _3+-letters is a variant
                $upper = strtoupper($matches[1]);

                if ($upper === 'YUE' || $upper === 'ISO' || \strlen($upper) < 3) {
                    return "_$upper";
                }

                return '_'.ucfirst($matches[1]);
            }, strtolower($locale));

            $previousLocale = $this->getLocale();

            if ($previousLocale === $locale && isset($this->messages[$locale])) {
                return true;
            }

            unset(static::$singletons[$previousLocale]);

            if ($locale === 'auto') {
                $completeLocale = setlocale(LC_TIME, '0');
                $locale = preg_replace('/^([^_.-]+).*$/', '$1', $completeLocale);
                $locales = $this->getAvailableLocales($locale);

                $completeLocaleChunks = preg_split('/[_.-]+/', $completeLocale);

                $getScore = function ($language) use ($completeLocaleChunks) {
                    return static::compareChunkLists($completeLocaleChunks, preg_split('/[_.-]+/', $language));
                };

                usort($locales, function ($first, $second) use ($getScore) {
                    return $getScore($second) <=> $getScore($first);
                });

                $locale = $locales[0];
            }

            if (isset($this->aliases[$locale])) {
                $locale = $this->aliases[$locale];
            }

            // If subtag (ex: en_CA) first load the macro (ex: en) to have a fallback
            if (str_contains($locale, '_') &&
                $this->loadMessagesFromFile($macroLocale = preg_replace('/^([^_]+).*$/', '$1', $locale))
            ) {
                parent::setLocale($macroLocale);
            }

            if ($this->loadMessagesFromFile($locale) || $this->initializing) {
                parent::setLocale($locale);

                return true;
            }

            return false;
        }

        /**
         * Show locale on var_dump().
         *
         * @return array
         */
        public function __debugInfo()
        {
            return [
                'locale' => $this->getLocale(),
            ];
        }

        private static function compareChunkLists($referenceChunks, $chunks)
        {
            $score = 0;

            foreach ($referenceChunks as $index => $chunk) {
                if (!isset($chunks[$index])) {
                    $score++;

                    continue;
                }

                if (strtolower($chunks[$index]) === strtolower($chunk)) {
                    $score += 10;
                }
            }

            return $score;
        }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: php-code-content-114
