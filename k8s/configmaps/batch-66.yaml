apiVersion: v1
data:
  Carbon-autoload.php: |
    <?php

    /**
     * @version 2.54.0
     */

    require __DIR__.'/vendor/autoload.php';
  Carbon-vendor-autoload.php: |
    <?php

    // autoload.php @generated by Composer

    require_once __DIR__ . '/composer/autoload_real.php';

    return ComposerAutoloaderInit7189d73e7439cae0d20081029c4407cc::getLoader();
  Carbon-vendor-composer-ClassLoader.php: |
    <?php

    /*
     * This file is part of Composer.
     *
     * (c) Nils Adermann <naderman@naderman.de>
     *     Jordi Boggiano <j.boggiano@seld.be>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Composer\Autoload;

    /**
     * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.
     *
     *     $loader = new \Composer\Autoload\ClassLoader();
     *
     *     // register classes with namespaces
     *     $loader->add('Symfony\Component', __DIR__.'/component');
     *     $loader->add('Symfony',           __DIR__.'/framework');
     *
     *     // activate the autoloader
     *     $loader->register();
     *
     *     // to enable searching the include path (eg. for PEAR packages)
     *     $loader->setUseIncludePath(true);
     *
     * In this example, if you try to use a class in the Symfony\Component
     * namespace or one of its children (Symfony\Component\Console for instance),
     * the autoloader will first look for the class under the component/
     * directory, and it will then fallback to the framework/ directory if not
     * found before giving up.
     *
     * This class is loosely based on the Symfony UniversalClassLoader.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     * @author Jordi Boggiano <j.boggiano@seld.be>
     * @see    https://www.php-fig.org/psr/psr-0/
     * @see    https://www.php-fig.org/psr/psr-4/
     */
    class ClassLoader
    {
        private $vendorDir;

        // PSR-4
        private $prefixLengthsPsr4 = array();
        private $prefixDirsPsr4 = array();
        private $fallbackDirsPsr4 = array();

        // PSR-0
        private $prefixesPsr0 = array();
        private $fallbackDirsPsr0 = array();

        private $useIncludePath = false;
        private $classMap = array();
        private $classMapAuthoritative = false;
        private $missingClasses = array();
        private $apcuPrefix;

        private static $registeredLoaders = array();

        public function __construct($vendorDir = null)
        {
            $this->vendorDir = $vendorDir;
        }

        public function getPrefixes()
        {
            if (!empty($this->prefixesPsr0)) {
                return call_user_func_array('array_merge', array_values($this->prefixesPsr0));
            }

            return array();
        }

        public function getPrefixesPsr4()
        {
            return $this->prefixDirsPsr4;
        }

        public function getFallbackDirs()
        {
            return $this->fallbackDirsPsr0;
        }

        public function getFallbackDirsPsr4()
        {
            return $this->fallbackDirsPsr4;
        }

        public function getClassMap()
        {
            return $this->classMap;
        }

        /**
         * @param array $classMap Class to filename map
         */
        public function addClassMap(array $classMap)
        {
            if ($this->classMap) {
                $this->classMap = array_merge($this->classMap, $classMap);
            } else {
                $this->classMap = $classMap;
            }
        }

        /**
         * Registers a set of PSR-0 directories for a given prefix, either
         * appending or prepending to the ones previously set for this prefix.
         *
         * @param string       $prefix  The prefix
         * @param array|string $paths   The PSR-0 root directories
         * @param bool         $prepend Whether to prepend the directories
         */
        public function add($prefix, $paths, $prepend = false)
        {
            if (!$prefix) {
                if ($prepend) {
                    $this->fallbackDirsPsr0 = array_merge(
                        (array) $paths,
                        $this->fallbackDirsPsr0
                    );
                } else {
                    $this->fallbackDirsPsr0 = array_merge(
                        $this->fallbackDirsPsr0,
                        (array) $paths
                    );
                }

                return;
            }

            $first = $prefix[0];
            if (!isset($this->prefixesPsr0[$first][$prefix])) {
                $this->prefixesPsr0[$first][$prefix] = (array) $paths;

                return;
            }
            if ($prepend) {
                $this->prefixesPsr0[$first][$prefix] = array_merge(
                    (array) $paths,
                    $this->prefixesPsr0[$first][$prefix]
                );
            } else {
                $this->prefixesPsr0[$first][$prefix] = array_merge(
                    $this->prefixesPsr0[$first][$prefix],
                    (array) $paths
                );
            }
        }

        /**
         * Registers a set of PSR-4 directories for a given namespace, either
         * appending or prepending to the ones previously set for this namespace.
         *
         * @param string       $prefix  The prefix/namespace, with trailing '\\'
         * @param array|string $paths   The PSR-4 base directories
         * @param bool         $prepend Whether to prepend the directories
         *
         * @throws \InvalidArgumentException
         */
        public function addPsr4($prefix, $paths, $prepend = false)
        {
            if (!$prefix) {
                // Register directories for the root namespace.
                if ($prepend) {
                    $this->fallbackDirsPsr4 = array_merge(
                        (array) $paths,
                        $this->fallbackDirsPsr4
                    );
                } else {
                    $this->fallbackDirsPsr4 = array_merge(
                        $this->fallbackDirsPsr4,
                        (array) $paths
                    );
                }
            } elseif (!isset($this->prefixDirsPsr4[$prefix])) {
                // Register directories for a new namespace.
                $length = strlen($prefix);
                if ('\\' !== $prefix[$length - 1]) {
                    throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
                }
                $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
                $this->prefixDirsPsr4[$prefix] = (array) $paths;
            } elseif ($prepend) {
                // Prepend directories for an already registered namespace.
                $this->prefixDirsPsr4[$prefix] = array_merge(
                    (array) $paths,
                    $this->prefixDirsPsr4[$prefix]
                );
            } else {
                // Append directories for an already registered namespace.
                $this->prefixDirsPsr4[$prefix] = array_merge(
                    $this->prefixDirsPsr4[$prefix],
                    (array) $paths
                );
            }
        }

        /**
         * Registers a set of PSR-0 directories for a given prefix,
         * replacing any others previously set for this prefix.
         *
         * @param string       $prefix The prefix
         * @param array|string $paths  The PSR-0 base directories
         */
        public function set($prefix, $paths)
        {
            if (!$prefix) {
                $this->fallbackDirsPsr0 = (array) $paths;
            } else {
                $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;
            }
        }

        /**
         * Registers a set of PSR-4 directories for a given namespace,
         * replacing any others previously set for this namespace.
         *
         * @param string       $prefix The prefix/namespace, with trailing '\\'
         * @param array|string $paths  The PSR-4 base directories
         *
         * @throws \InvalidArgumentException
         */
        public function setPsr4($prefix, $paths)
        {
            if (!$prefix) {
                $this->fallbackDirsPsr4 = (array) $paths;
            } else {
                $length = strlen($prefix);
                if ('\\' !== $prefix[$length - 1]) {
                    throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
                }
                $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
                $this->prefixDirsPsr4[$prefix] = (array) $paths;
            }
        }

        /**
         * Turns on searching the include path for class files.
         *
         * @param bool $useIncludePath
         */
        public function setUseIncludePath($useIncludePath)
        {
            $this->useIncludePath = $useIncludePath;
        }

        /**
         * Can be used to check if the autoloader uses the include path to check
         * for classes.
         *
         * @return bool
         */
        public function getUseIncludePath()
        {
            return $this->useIncludePath;
        }

        /**
         * Turns off searching the prefix and fallback directories for classes
         * that have not been registered with the class map.
         *
         * @param bool $classMapAuthoritative
         */
        public function setClassMapAuthoritative($classMapAuthoritative)
        {
            $this->classMapAuthoritative = $classMapAuthoritative;
        }

        /**
         * Should class lookup fail if not found in the current class map?
         *
         * @return bool
         */
        public function isClassMapAuthoritative()
        {
            return $this->classMapAuthoritative;
        }

        /**
         * APCu prefix to use to cache found/not-found classes, if the extension is enabled.
         *
         * @param string|null $apcuPrefix
         */
        public function setApcuPrefix($apcuPrefix)
        {
            $this->apcuPrefix = function_exists('apcu_fetch') && filter_var(ini_get('apc.enabled'), FILTER_VALIDATE_BOOLEAN) ? $apcuPrefix : null;
        }

        /**
         * The APCu prefix in use, or null if APCu caching is not enabled.
         *
         * @return string|null
         */
        public function getApcuPrefix()
        {
            return $this->apcuPrefix;
        }

        /**
         * Registers this instance as an autoloader.
         *
         * @param bool $prepend Whether to prepend the autoloader or not
         */
        public function register($prepend = false)
        {
            spl_autoload_register(array($this, 'loadClass'), true, $prepend);

            if (null === $this->vendorDir) {
                return;
            }

            if ($prepend) {
                self::$registeredLoaders = array($this->vendorDir => $this) + self::$registeredLoaders;
            } else {
                unset(self::$registeredLoaders[$this->vendorDir]);
                self::$registeredLoaders[$this->vendorDir] = $this;
            }
        }

        /**
         * Unregisters this instance as an autoloader.
         */
        public function unregister()
        {
            spl_autoload_unregister(array($this, 'loadClass'));

            if (null !== $this->vendorDir) {
                unset(self::$registeredLoaders[$this->vendorDir]);
            }
        }

        /**
         * Loads the given class or interface.
         *
         * @param  string    $class The name of the class
         * @return true|null True if loaded, null otherwise
         */
        public function loadClass($class)
        {
            if ($file = $this->findFile($class)) {
                includeFile($file);

                return true;
            }

            return null;
        }

        /**
         * Finds the path to the file where the class is defined.
         *
         * @param string $class The name of the class
         *
         * @return string|false The path if found, false otherwise
         */
        public function findFile($class)
        {
            // class map lookup
            if (isset($this->classMap[$class])) {
                return $this->classMap[$class];
            }
            if ($this->classMapAuthoritative || isset($this->missingClasses[$class])) {
                return false;
            }
            if (null !== $this->apcuPrefix) {
                $file = apcu_fetch($this->apcuPrefix.$class, $hit);
                if ($hit) {
                    return $file;
                }
            }

            $file = $this->findFileWithExtension($class, '.php');

            // Search for Hack files if we are running on HHVM
            if (false === $file && defined('HHVM_VERSION')) {
                $file = $this->findFileWithExtension($class, '.hh');
            }

            if (null !== $this->apcuPrefix) {
                apcu_add($this->apcuPrefix.$class, $file);
            }

            if (false === $file) {
                // Remember that this class does not exist.
                $this->missingClasses[$class] = true;
            }

            return $file;
        }

        /**
         * Returns the currently registered loaders indexed by their corresponding vendor directories.
         *
         * @return self[]
         */
        public static function getRegisteredLoaders()
        {
            return self::$registeredLoaders;
        }

        private function findFileWithExtension($class, $ext)
        {
            // PSR-4 lookup
            $logicalPathPsr4 = strtr($class, '\\', DIRECTORY_SEPARATOR) . $ext;

            $first = $class[0];
            if (isset($this->prefixLengthsPsr4[$first])) {
                $subPath = $class;
                while (false !== $lastPos = strrpos($subPath, '\\')) {
                    $subPath = substr($subPath, 0, $lastPos);
                    $search = $subPath . '\\';
                    if (isset($this->prefixDirsPsr4[$search])) {
                        $pathEnd = DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $lastPos + 1);
                        foreach ($this->prefixDirsPsr4[$search] as $dir) {
                            if (file_exists($file = $dir . $pathEnd)) {
                                return $file;
                            }
                        }
                    }
                }
            }

            // PSR-4 fallback dirs
            foreach ($this->fallbackDirsPsr4 as $dir) {
                if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {
                    return $file;
                }
            }

            // PSR-0 lookup
            if (false !== $pos = strrpos($class, '\\')) {
                // namespaced class name
                $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)
                    . strtr(substr($logicalPathPsr4, $pos + 1), '_', DIRECTORY_SEPARATOR);
            } else {
                // PEAR-like class name
                $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;
            }

            if (isset($this->prefixesPsr0[$first])) {
                foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {
                    if (0 === strpos($class, $prefix)) {
                        foreach ($dirs as $dir) {
                            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {
                                return $file;
                            }
                        }
                    }
                }
            }

            // PSR-0 fallback dirs
            foreach ($this->fallbackDirsPsr0 as $dir) {
                if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {
                    return $file;
                }
            }

            // PSR-0 include paths.
            if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {
                return $file;
            }

            return false;
        }
    }

    /**
     * Scope isolated include.
     *
     * Prevents access to $this/self from included files.
     */
    function includeFile($file)
    {
        include $file;
    }
  Carbon-vendor-composer-InstalledVersions.php: |
    <?php

    /*
     * This file is part of Composer.
     *
     * (c) Nils Adermann <naderman@naderman.de>
     *     Jordi Boggiano <j.boggiano@seld.be>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Composer;

    use Composer\Autoload\ClassLoader;
    use Composer\Semver\VersionParser;

    /**
     * This class is copied in every Composer installed project and available to all
     *
     * See also https://getcomposer.org/doc/07-runtime.md#installed-versions
     *
     * To require it's presence, you can require `composer-runtime-api ^2.0`
     */
    class InstalledVersions
    {
        private static $installed;
        private static $canGetVendors;
        private static $installedByVendor = array();

        /**
         * Returns a list of all package names which are present, either by being installed, replaced or provided
         *
         * @return string[]
         * @psalm-return list<string>
         */
        public static function getInstalledPackages()
        {
            $packages = array();
            foreach (self::getInstalled() as $installed) {
                $packages[] = array_keys($installed['versions']);
            }

            if (1 === \count($packages)) {
                return $packages[0];
            }

            return array_keys(array_flip(\call_user_func_array('array_merge', $packages)));
        }

        /**
         * Returns a list of all package names with a specific type e.g. 'library'
         *
         * @param  string   $type
         * @return string[]
         * @psalm-return list<string>
         */
        public static function getInstalledPackagesByType($type)
        {
            $packagesByType = array();

            foreach (self::getInstalled() as $installed) {
                foreach ($installed['versions'] as $name => $package) {
                    if (isset($package['type']) && $package['type'] === $type) {
                        $packagesByType[] = $name;
                    }
                }
            }

            return $packagesByType;
        }

        /**
         * Checks whether the given package is installed
         *
         * This also returns true if the package name is provided or replaced by another package
         *
         * @param  string $packageName
         * @param  bool   $includeDevRequirements
         * @return bool
         */
        public static function isInstalled($packageName, $includeDevRequirements = true)
        {
            foreach (self::getInstalled() as $installed) {
                if (isset($installed['versions'][$packageName])) {
                    return $includeDevRequirements || empty($installed['versions'][$packageName]['dev_requirement']);
                }
            }

            return false;
        }

        /**
         * Checks whether the given package satisfies a version constraint
         *
         * e.g. If you want to know whether version 2.3+ of package foo/bar is installed, you would call:
         *
         *   Composer\InstalledVersions::satisfies(new VersionParser, 'foo/bar', '^2.3')
         *
         * @param  VersionParser $parser      Install composer/semver to have access to this class and functionality
         * @param  string        $packageName
         * @param  string|null   $constraint  A version constraint to check for, if you pass one you have to make sure composer/semver is required by your package
         * @return bool
         */
        public static function satisfies(VersionParser $parser, $packageName, $constraint)
        {
            $constraint = $parser->parseConstraints($constraint);
            $provided = $parser->parseConstraints(self::getVersionRanges($packageName));

            return $provided->matches($constraint);
        }

        /**
         * Returns a version constraint representing all the range(s) which are installed for a given package
         *
         * It is easier to use this via isInstalled() with the $constraint argument if you need to check
         * whether a given version of a package is installed, and not just whether it exists
         *
         * @param  string $packageName
         * @return string Version constraint usable with composer/semver
         */
        public static function getVersionRanges($packageName)
        {
            foreach (self::getInstalled() as $installed) {
                if (!isset($installed['versions'][$packageName])) {
                    continue;
                }

                $ranges = array();
                if (isset($installed['versions'][$packageName]['pretty_version'])) {
                    $ranges[] = $installed['versions'][$packageName]['pretty_version'];
                }
                if (array_key_exists('aliases', $installed['versions'][$packageName])) {
                    $ranges = array_merge($ranges, $installed['versions'][$packageName]['aliases']);
                }
                if (array_key_exists('replaced', $installed['versions'][$packageName])) {
                    $ranges = array_merge($ranges, $installed['versions'][$packageName]['replaced']);
                }
                if (array_key_exists('provided', $installed['versions'][$packageName])) {
                    $ranges = array_merge($ranges, $installed['versions'][$packageName]['provided']);
                }

                return implode(' || ', $ranges);
            }

            throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
        }

        /**
         * @param  string      $packageName
         * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present
         */
        public static function getVersion($packageName)
        {
            foreach (self::getInstalled() as $installed) {
                if (!isset($installed['versions'][$packageName])) {
                    continue;
                }

                if (!isset($installed['versions'][$packageName]['version'])) {
                    return null;
                }

                return $installed['versions'][$packageName]['version'];
            }

            throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
        }

        /**
         * @param  string      $packageName
         * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present
         */
        public static function getPrettyVersion($packageName)
        {
            foreach (self::getInstalled() as $installed) {
                if (!isset($installed['versions'][$packageName])) {
                    continue;
                }

                if (!isset($installed['versions'][$packageName]['pretty_version'])) {
                    return null;
                }

                return $installed['versions'][$packageName]['pretty_version'];
            }

            throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
        }

        /**
         * @param  string      $packageName
         * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as reference
         */
        public static function getReference($packageName)
        {
            foreach (self::getInstalled() as $installed) {
                if (!isset($installed['versions'][$packageName])) {
                    continue;
                }

                if (!isset($installed['versions'][$packageName]['reference'])) {
                    return null;
                }

                return $installed['versions'][$packageName]['reference'];
            }

            throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
        }

        /**
         * @param  string      $packageName
         * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as install path. Packages of type metapackages also have a null install path.
         */
        public static function getInstallPath($packageName)
        {
            foreach (self::getInstalled() as $installed) {
                if (!isset($installed['versions'][$packageName])) {
                    continue;
                }

                return isset($installed['versions'][$packageName]['install_path']) ? $installed['versions'][$packageName]['install_path'] : null;
            }

            throw new \OutOfBoundsException('Package "' . $packageName . '" is not installed');
        }

        /**
         * @return array
         * @psalm-return array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string}
         */
        public static function getRootPackage()
        {
            $installed = self::getInstalled();

            return $installed[0]['root'];
        }

        /**
         * Returns the raw installed.php data for custom implementations
         *
         * @deprecated Use getAllRawData() instead which returns all datasets for all autoloaders present in the process. getRawData only returns the first dataset loaded, which may not be what you expect.
         * @return array[]
         * @psalm-return array{root: array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string}, versions: array<string, array{dev_requirement: bool, pretty_version?: string, version?: string, aliases?: string[], reference?: string, replaced?: string[], provided?: string[], install_path?: string}>}
         */
        public static function getRawData()
        {
            @trigger_error('getRawData only returns the first dataset loaded, which may not be what you expect. Use getAllRawData() instead which returns all datasets for all autoloaders present in the process.', E_USER_DEPRECATED);

            if (null === self::$installed) {
                // only require the installed.php file if this file is loaded from its dumped location,
                // and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937
                if (substr(__DIR__, -8, 1) !== 'C') {
                    self::$installed = include __DIR__ . '/installed.php';
                } else {
                    self::$installed = array();
                }
            }

            return self::$installed;
        }

        /**
         * Returns the raw data of all installed.php which are currently loaded for custom implementations
         *
         * @return array[]
         * @psalm-return list<array{root: array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string}, versions: array<string, array{dev_requirement: bool, pretty_version?: string, version?: string, aliases?: string[], reference?: string, replaced?: string[], provided?: string[], install_path?: string}>}>
         */
        public static function getAllRawData()
        {
            return self::getInstalled();
        }

        /**
         * Lets you reload the static array from another file
         *
         * This is only useful for complex integrations in which a project needs to use
         * this class but then also needs to execute another project's autoloader in process,
         * and wants to ensure both projects have access to their version of installed.php.
         *
         * A typical case would be PHPUnit, where it would need to make sure it reads all
         * the data it needs from this class, then call reload() with
         * `require $CWD/vendor/composer/installed.php` (or similar) as input to make sure
         * the project in which it runs can then also use this class safely, without
         * interference between PHPUnit's dependencies and the project's dependencies.
         *
         * @param  array[] $data A vendor/composer/installed.php data set
         * @return void
         *
         * @psalm-param array{root: array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string}, versions: array<string, array{dev_requirement: bool, pretty_version?: string, version?: string, aliases?: string[], reference?: string, replaced?: string[], provided?: string[], install_path?: string}>} $data
         */
        public static function reload($data)
        {
            self::$installed = $data;
            self::$installedByVendor = array();
        }

        /**
         * @return array[]
         * @psalm-return list<array{root: array{name: string, version: string, reference: string, pretty_version: string, aliases: string[], dev: bool, install_path: string}, versions: array<string, array{dev_requirement: bool, pretty_version?: string, version?: string, aliases?: string[], reference?: string, replaced?: string[], provided?: string[], install_path?: string}>}>
         */
        private static function getInstalled()
        {
            if (null === self::$canGetVendors) {
                self::$canGetVendors = method_exists('Composer\Autoload\ClassLoader', 'getRegisteredLoaders');
            }

            $installed = array();

            if (self::$canGetVendors) {
                foreach (ClassLoader::getRegisteredLoaders() as $vendorDir => $loader) {
                    if (isset(self::$installedByVendor[$vendorDir])) {
                        $installed[] = self::$installedByVendor[$vendorDir];
                    } elseif (is_file($vendorDir.'/composer/installed.php')) {
                        $installed[] = self::$installedByVendor[$vendorDir] = require $vendorDir.'/composer/installed.php';
                        if (null === self::$installed && strtr($vendorDir.'/composer', '\\', '/') === strtr(__DIR__, '\\', '/')) {
                            self::$installed = $installed[count($installed) - 1];
                        }
                    }
                }
            }

            if (null === self::$installed) {
                // only require the installed.php file if this file is loaded from its dumped location,
                // and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937
                if (substr(__DIR__, -8, 1) !== 'C') {
                    self::$installed = require __DIR__ . '/installed.php';
                } else {
                    self::$installed = array();
                }
            }
            $installed[] = self::$installed;

            return $installed;
        }
    }
  Carbon-vendor-composer-LICENSE: |2+

    Copyright (c) Nils Adermann, Jordi Boggiano

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished
    to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.

  Carbon-vendor-composer-autoload_classmap.php: |
    <?php

    // autoload_classmap.php @generated by Composer

    $vendorDir = dirname(dirname(__FILE__));
    $baseDir = dirname($vendorDir);

    return array(
        'Attribute' => $vendorDir . '/symfony/polyfill-php80/Resources/stubs/Attribute.php',
        'Carbon\\Carbon' => $baseDir . '/src/Carbon/Carbon.php',
        'Carbon\\CarbonConverterInterface' => $baseDir . '/src/Carbon/CarbonConverterInterface.php',
        'Carbon\\CarbonImmutable' => $baseDir . '/src/Carbon/CarbonImmutable.php',
        'Carbon\\CarbonInterface' => $baseDir . '/src/Carbon/CarbonInterface.php',
        'Carbon\\CarbonInterval' => $baseDir . '/src/Carbon/CarbonInterval.php',
        'Carbon\\CarbonPeriod' => $baseDir . '/src/Carbon/CarbonPeriod.php',
        'Carbon\\CarbonTimeZone' => $baseDir . '/src/Carbon/CarbonTimeZone.php',
        'Carbon\\Cli\\Invoker' => $baseDir . '/src/Carbon/Cli/Invoker.php',
        'Carbon\\Doctrine\\CarbonDoctrineType' => $baseDir . '/src/Carbon/Doctrine/CarbonDoctrineType.php',
        'Carbon\\Doctrine\\CarbonImmutableType' => $baseDir . '/src/Carbon/Doctrine/CarbonImmutableType.php',
        'Carbon\\Doctrine\\CarbonType' => $baseDir . '/src/Carbon/Doctrine/CarbonType.php',
        'Carbon\\Doctrine\\CarbonTypeConverter' => $baseDir . '/src/Carbon/Doctrine/CarbonTypeConverter.php',
        'Carbon\\Doctrine\\DateTimeDefaultPrecision' => $baseDir . '/src/Carbon/Doctrine/DateTimeDefaultPrecision.php',
        'Carbon\\Doctrine\\DateTimeImmutableType' => $baseDir . '/src/Carbon/Doctrine/DateTimeImmutableType.php',
        'Carbon\\Doctrine\\DateTimeType' => $baseDir . '/src/Carbon/Doctrine/DateTimeType.php',
        'Carbon\\Exceptions\\BadComparisonUnitException' => $baseDir . '/src/Carbon/Exceptions/BadComparisonUnitException.php',
        'Carbon\\Exceptions\\BadFluentConstructorException' => $baseDir . '/src/Carbon/Exceptions/BadFluentConstructorException.php',
        'Carbon\\Exceptions\\BadFluentSetterException' => $baseDir . '/src/Carbon/Exceptions/BadFluentSetterException.php',
        'Carbon\\Exceptions\\BadMethodCallException' => $baseDir . '/src/Carbon/Exceptions/BadMethodCallException.php',
        'Carbon\\Exceptions\\Exception' => $baseDir . '/src/Carbon/Exceptions/Exception.php',
        'Carbon\\Exceptions\\ImmutableException' => $baseDir . '/src/Carbon/Exceptions/ImmutableException.php',
        'Carbon\\Exceptions\\InvalidArgumentException' => $baseDir . '/src/Carbon/Exceptions/InvalidArgumentException.php',
        'Carbon\\Exceptions\\InvalidCastException' => $baseDir . '/src/Carbon/Exceptions/InvalidCastException.php',
        'Carbon\\Exceptions\\InvalidDateException' => $baseDir . '/src/Carbon/Exceptions/InvalidDateException.php',
        'Carbon\\Exceptions\\InvalidFormatException' => $baseDir . '/src/Carbon/Exceptions/InvalidFormatException.php',
        'Carbon\\Exceptions\\InvalidIntervalException' => $baseDir . '/src/Carbon/Exceptions/InvalidIntervalException.php',
        'Carbon\\Exceptions\\InvalidPeriodDateException' => $baseDir . '/src/Carbon/Exceptions/InvalidPeriodDateException.php',
        'Carbon\\Exceptions\\InvalidPeriodParameterException' => $baseDir . '/src/Carbon/Exceptions/InvalidPeriodParameterException.php',
        'Carbon\\Exceptions\\InvalidTimeZoneException' => $baseDir . '/src/Carbon/Exceptions/InvalidTimeZoneException.php',
        'Carbon\\Exceptions\\InvalidTypeException' => $baseDir . '/src/Carbon/Exceptions/InvalidTypeException.php',
        'Carbon\\Exceptions\\NotACarbonClassException' => $baseDir . '/src/Carbon/Exceptions/NotACarbonClassException.php',
        'Carbon\\Exceptions\\NotAPeriodException' => $baseDir . '/src/Carbon/Exceptions/NotAPeriodException.php',
        'Carbon\\Exceptions\\NotLocaleAwareException' => $baseDir . '/src/Carbon/Exceptions/NotLocaleAwareException.php',
        'Carbon\\Exceptions\\OutOfRangeException' => $baseDir . '/src/Carbon/Exceptions/OutOfRangeException.php',
        'Carbon\\Exceptions\\ParseErrorException' => $baseDir . '/src/Carbon/Exceptions/ParseErrorException.php',
        'Carbon\\Exceptions\\RuntimeException' => $baseDir . '/src/Carbon/Exceptions/RuntimeException.php',
        'Carbon\\Exceptions\\UnitException' => $baseDir . '/src/Carbon/Exceptions/UnitException.php',
        'Carbon\\Exceptions\\UnitNotConfiguredException' => $baseDir . '/src/Carbon/Exceptions/UnitNotConfiguredException.php',
        'Carbon\\Exceptions\\UnknownGetterException' => $baseDir . '/src/Carbon/Exceptions/UnknownGetterException.php',
        'Carbon\\Exceptions\\UnknownMethodException' => $baseDir . '/src/Carbon/Exceptions/UnknownMethodException.php',
        'Carbon\\Exceptions\\UnknownSetterException' => $baseDir . '/src/Carbon/Exceptions/UnknownSetterException.php',
        'Carbon\\Exceptions\\UnknownUnitException' => $baseDir . '/src/Carbon/Exceptions/UnknownUnitException.php',
        'Carbon\\Exceptions\\UnreachableException' => $baseDir . '/src/Carbon/Exceptions/UnreachableException.php',
        'Carbon\\Factory' => $baseDir . '/src/Carbon/Factory.php',
        'Carbon\\FactoryImmutable' => $baseDir . '/src/Carbon/FactoryImmutable.php',
        'Carbon\\Language' => $baseDir . '/src/Carbon/Language.php',
        'Carbon\\Laravel\\ServiceProvider' => $baseDir . '/src/Carbon/Laravel/ServiceProvider.php',
        'Carbon\\PHPStan\\Macro' => $baseDir . '/src/Carbon/PHPStan/Macro.php',
        'Carbon\\PHPStan\\MacroExtension' => $baseDir . '/src/Carbon/PHPStan/MacroExtension.php',
        'Carbon\\PHPStan\\MacroScanner' => $baseDir . '/src/Carbon/PHPStan/MacroScanner.php',
        'Carbon\\Traits\\Boundaries' => $baseDir . '/src/Carbon/Traits/Boundaries.php',
        'Carbon\\Traits\\Cast' => $baseDir . '/src/Carbon/Traits/Cast.php',
        'Carbon\\Traits\\Comparison' => $baseDir . '/src/Carbon/Traits/Comparison.php',
        'Carbon\\Traits\\Converter' => $baseDir . '/src/Carbon/Traits/Converter.php',
        'Carbon\\Traits\\Creator' => $baseDir . '/src/Carbon/Traits/Creator.php',
        'Carbon\\Traits\\Date' => $baseDir . '/src/Carbon/Traits/Date.php',
        'Carbon\\Traits\\Difference' => $baseDir . '/src/Carbon/Traits/Difference.php',
        'Carbon\\Traits\\IntervalRounding' => $baseDir . '/src/Carbon/Traits/IntervalRounding.php',
        'Carbon\\Traits\\IntervalStep' => $baseDir . '/src/Carbon/Traits/IntervalStep.php',
        'Carbon\\Traits\\Localization' => $baseDir . '/src/Carbon/Traits/Localization.php',
        'Carbon\\Traits\\Macro' => $baseDir . '/src/Carbon/Traits/Macro.php',
        'Carbon\\Traits\\Mixin' => $baseDir . '/src/Carbon/Traits/Mixin.php',
        'Carbon\\Traits\\Modifiers' => $baseDir . '/src/Carbon/Traits/Modifiers.php',
        'Carbon\\Traits\\Mutability' => $baseDir . '/src/Carbon/Traits/Mutability.php',
        'Carbon\\Traits\\ObjectInitialisation' => $baseDir . '/src/Carbon/Traits/ObjectInitialisation.php',
        'Carbon\\Traits\\Options' => $baseDir . '/src/Carbon/Traits/Options.php',
        'Carbon\\Traits\\Rounding' => $baseDir . '/src/Carbon/Traits/Rounding.php',
        'Carbon\\Traits\\Serialization' => $baseDir . '/src/Carbon/Traits/Serialization.php',
        'Carbon\\Traits\\Test' => $baseDir . '/src/Carbon/Traits/Test.php',
        'Carbon\\Traits\\Timestamp' => $baseDir . '/src/Carbon/Traits/Timestamp.php',
        'Carbon\\Traits\\Units' => $baseDir . '/src/Carbon/Traits/Units.php',
        'Carbon\\Traits\\Week' => $baseDir . '/src/Carbon/Traits/Week.php',
        'Carbon\\Translator' => $baseDir . '/src/Carbon/Translator.php',
        'Composer\\InstalledVersions' => $vendorDir . '/composer/InstalledVersions.php',
        'Stringable' => $vendorDir . '/symfony/polyfill-php80/Resources/stubs/Stringable.php',
        'Symfony\\Component\\Translation\\Catalogue\\AbstractOperation' => $vendorDir . '/symfony/translation/Catalogue/AbstractOperation.php',
        'Symfony\\Component\\Translation\\Catalogue\\MergeOperation' => $vendorDir . '/symfony/translation/Catalogue/MergeOperation.php',
        'Symfony\\Component\\Translation\\Catalogue\\OperationInterface' => $vendorDir . '/symfony/translation/Catalogue/OperationInterface.php',
        'Symfony\\Component\\Translation\\Catalogue\\TargetOperation' => $vendorDir . '/symfony/translation/Catalogue/TargetOperation.php',
        'Symfony\\Component\\Translation\\Command\\XliffLintCommand' => $vendorDir . '/symfony/translation/Command/XliffLintCommand.php',
        'Symfony\\Component\\Translation\\DataCollectorTranslator' => $vendorDir . '/symfony/translation/DataCollectorTranslator.php',
        'Symfony\\Component\\Translation\\DataCollector\\TranslationDataCollector' => $vendorDir . '/symfony/translation/DataCollector/TranslationDataCollector.php',
        'Symfony\\Component\\Translation\\DependencyInjection\\TranslationDumperPass' => $vendorDir . '/symfony/translation/DependencyInjection/TranslationDumperPass.php',
        'Symfony\\Component\\Translation\\DependencyInjection\\TranslationExtractorPass' => $vendorDir . '/symfony/translation/DependencyInjection/TranslationExtractorPass.php',
        'Symfony\\Component\\Translation\\DependencyInjection\\TranslatorPass' => $vendorDir . '/symfony/translation/DependencyInjection/TranslatorPass.php',
        'Symfony\\Component\\Translation\\DependencyInjection\\TranslatorPathsPass' => $vendorDir . '/symfony/translation/DependencyInjection/TranslatorPathsPass.php',
        'Symfony\\Component\\Translation\\Dumper\\CsvFileDumper' => $vendorDir . '/symfony/translation/Dumper/CsvFileDumper.php',
        'Symfony\\Component\\Translation\\Dumper\\DumperInterface' => $vendorDir . '/symfony/translation/Dumper/DumperInterface.php',
        'Symfony\\Component\\Translation\\Dumper\\FileDumper' => $vendorDir . '/symfony/translation/Dumper/FileDumper.php',
        'Symfony\\Component\\Translation\\Dumper\\IcuResFileDumper' => $vendorDir . '/symfony/translation/Dumper/IcuResFileDumper.php',
        'Symfony\\Component\\Translation\\Dumper\\IniFileDumper' => $vendorDir . '/symfony/translation/Dumper/IniFileDumper.php',
        'Symfony\\Component\\Translation\\Dumper\\JsonFileDumper' => $vendorDir . '/symfony/translation/Dumper/JsonFileDumper.php',
        'Symfony\\Component\\Translation\\Dumper\\MoFileDumper' => $vendorDir . '/symfony/translation/Dumper/MoFileDumper.php',
        'Symfony\\Component\\Translation\\Dumper\\PhpFileDumper' => $vendorDir . '/symfony/translation/Dumper/PhpFileDumper.php',
        'Symfony\\Component\\Translation\\Dumper\\PoFileDumper' => $vendorDir . '/symfony/translation/Dumper/PoFileDumper.php',
        'Symfony\\Component\\Translation\\Dumper\\QtFileDumper' => $vendorDir . '/symfony/translation/Dumper/QtFileDumper.php',
        'Symfony\\Component\\Translation\\Dumper\\XliffFileDumper' => $vendorDir . '/symfony/translation/Dumper/XliffFileDumper.php',
        'Symfony\\Component\\Translation\\Dumper\\YamlFileDumper' => $vendorDir . '/symfony/translation/Dumper/YamlFileDumper.php',
        'Symfony\\Component\\Translation\\Exception\\ExceptionInterface' => $vendorDir . '/symfony/translation/Exception/ExceptionInterface.php',
        'Symfony\\Component\\Translation\\Exception\\InvalidArgumentException' => $vendorDir . '/symfony/translation/Exception/InvalidArgumentException.php',
        'Symfony\\Component\\Translation\\Exception\\InvalidResourceException' => $vendorDir . '/symfony/translation/Exception/InvalidResourceException.php',
        'Symfony\\Component\\Translation\\Exception\\LogicException' => $vendorDir . '/symfony/translation/Exception/LogicException.php',
        'Symfony\\Component\\Translation\\Exception\\NotFoundResourceException' => $vendorDir . '/symfony/translation/Exception/NotFoundResourceException.php',
        'Symfony\\Component\\Translation\\Exception\\RuntimeException' => $vendorDir . '/symfony/translation/Exception/RuntimeException.php',
        'Symfony\\Component\\Translation\\Extractor\\AbstractFileExtractor' => $vendorDir . '/symfony/translation/Extractor/AbstractFileExtractor.php',
        'Symfony\\Component\\Translation\\Extractor\\ChainExtractor' => $vendorDir . '/symfony/translation/Extractor/ChainExtractor.php',
        'Symfony\\Component\\Translation\\Extractor\\ExtractorInterface' => $vendorDir . '/symfony/translation/Extractor/ExtractorInterface.php',
        'Symfony\\Component\\Translation\\Extractor\\PhpExtractor' => $vendorDir . '/symfony/translation/Extractor/PhpExtractor.php',
        'Symfony\\Component\\Translation\\Extractor\\PhpStringTokenParser' => $vendorDir . '/symfony/translation/Extractor/PhpStringTokenParser.php',
        'Symfony\\Component\\Translation\\Formatter\\ChoiceMessageFormatterInterface' => $vendorDir . '/symfony/translation/Formatter/ChoiceMessageFormatterInterface.php',
        'Symfony\\Component\\Translation\\Formatter\\IntlFormatter' => $vendorDir . '/symfony/translation/Formatter/IntlFormatter.php',
        'Symfony\\Component\\Translation\\Formatter\\IntlFormatterInterface' => $vendorDir . '/symfony/translation/Formatter/IntlFormatterInterface.php',
        'Symfony\\Component\\Translation\\Formatter\\MessageFormatter' => $vendorDir . '/symfony/translation/Formatter/MessageFormatter.php',
        'Symfony\\Component\\Translation\\Formatter\\MessageFormatterInterface' => $vendorDir . '/symfony/translation/Formatter/MessageFormatterInterface.php',
        'Symfony\\Component\\Translation\\IdentityTranslator' => $vendorDir . '/symfony/translation/IdentityTranslator.php',
        'Symfony\\Component\\Translation\\Interval' => $vendorDir . '/symfony/translation/Interval.php',
        'Symfony\\Component\\Translation\\Loader\\ArrayLoader' => $vendorDir . '/symfony/translation/Loader/ArrayLoader.php',
        'Symfony\\Component\\Translation\\Loader\\CsvFileLoader' => $vendorDir . '/symfony/translation/Loader/CsvFileLoader.php',
        'Symfony\\Component\\Translation\\Loader\\FileLoader' => $vendorDir . '/symfony/translation/Loader/FileLoader.php',
        'Symfony\\Component\\Translation\\Loader\\IcuDatFileLoader' => $vendorDir . '/symfony/translation/Loader/IcuDatFileLoader.php',
        'Symfony\\Component\\Translation\\Loader\\IcuResFileLoader' => $vendorDir . '/symfony/translation/Loader/IcuResFileLoader.php',
        'Symfony\\Component\\Translation\\Loader\\IniFileLoader' => $vendorDir . '/symfony/translation/Loader/IniFileLoader.php',
        'Symfony\\Component\\Translation\\Loader\\JsonFileLoader' => $vendorDir . '/symfony/translation/Loader/JsonFileLoader.php',
        'Symfony\\Component\\Translation\\Loader\\LoaderInterface' => $vendorDir . '/symfony/translation/Loader/LoaderInterface.php',
        'Symfony\\Component\\Translation\\Loader\\MoFileLoader' => $vendorDir . '/symfony/translation/Loader/MoFileLoader.php',
        'Symfony\\Component\\Translation\\Loader\\PhpFileLoader' => $vendorDir . '/symfony/translation/Loader/PhpFileLoader.php',
        'Symfony\\Component\\Translation\\Loader\\PoFileLoader' => $vendorDir . '/symfony/translation/Loader/PoFileLoader.php',
        'Symfony\\Component\\Translation\\Loader\\QtFileLoader' => $vendorDir . '/symfony/translation/Loader/QtFileLoader.php',
        'Symfony\\Component\\Translation\\Loader\\XliffFileLoader' => $vendorDir . '/symfony/translation/Loader/XliffFileLoader.php',
        'Symfony\\Component\\Translation\\Loader\\YamlFileLoader' => $vendorDir . '/symfony/translation/Loader/YamlFileLoader.php',
        'Symfony\\Component\\Translation\\LoggingTranslator' => $vendorDir . '/symfony/translation/LoggingTranslator.php',
        'Symfony\\Component\\Translation\\MessageCatalogue' => $vendorDir . '/symfony/translation/MessageCatalogue.php',
        'Symfony\\Component\\Translation\\MessageCatalogueInterface' => $vendorDir . '/symfony/translation/MessageCatalogueInterface.php',
        'Symfony\\Component\\Translation\\MessageSelector' => $vendorDir . '/symfony/translation/MessageSelector.php',
        'Symfony\\Component\\Translation\\MetadataAwareInterface' => $vendorDir . '/symfony/translation/MetadataAwareInterface.php',
        'Symfony\\Component\\Translation\\PluralizationRules' => $vendorDir . '/symfony/translation/PluralizationRules.php',
        'Symfony\\Component\\Translation\\Reader\\TranslationReader' => $vendorDir . '/symfony/translation/Reader/TranslationReader.php',
        'Symfony\\Component\\Translation\\Reader\\TranslationReaderInterface' => $vendorDir . '/symfony/translation/Reader/TranslationReaderInterface.php',
        'Symfony\\Component\\Translation\\Translator' => $vendorDir . '/symfony/translation/Translator.php',
        'Symfony\\Component\\Translation\\TranslatorBagInterface' => $vendorDir . '/symfony/translation/TranslatorBagInterface.php',
        'Symfony\\Component\\Translation\\TranslatorInterface' => $vendorDir . '/symfony/translation/TranslatorInterface.php',
        'Symfony\\Component\\Translation\\Util\\ArrayConverter' => $vendorDir . '/symfony/translation/Util/ArrayConverter.php',
        'Symfony\\Component\\Translation\\Util\\XliffUtils' => $vendorDir . '/symfony/translation/Util/XliffUtils.php',
        'Symfony\\Component\\Translation\\Writer\\TranslationWriter' => $vendorDir . '/symfony/translation/Writer/TranslationWriter.php',
        'Symfony\\Component\\Translation\\Writer\\TranslationWriterInterface' => $vendorDir . '/symfony/translation/Writer/TranslationWriterInterface.php',
        'Symfony\\Contracts\\Translation\\LocaleAwareInterface' => $vendorDir . '/symfony/translation-contracts/LocaleAwareInterface.php',
        'Symfony\\Contracts\\Translation\\Test\\TranslatorTest' => $vendorDir . '/symfony/translation-contracts/Test/TranslatorTest.php',
        'Symfony\\Contracts\\Translation\\TranslatorInterface' => $vendorDir . '/symfony/translation-contracts/TranslatorInterface.php',
        'Symfony\\Contracts\\Translation\\TranslatorTrait' => $vendorDir . '/symfony/translation-contracts/TranslatorTrait.php',
        'Symfony\\Polyfill\\Mbstring\\Mbstring' => $vendorDir . '/symfony/polyfill-mbstring/Mbstring.php',
        'Symfony\\Polyfill\\Php80\\Php80' => $vendorDir . '/symfony/polyfill-php80/Php80.php',
        'UnhandledMatchError' => $vendorDir . '/symfony/polyfill-php80/Resources/stubs/UnhandledMatchError.php',
        'ValueError' => $vendorDir . '/symfony/polyfill-php80/Resources/stubs/ValueError.php',
    );
  Carbon-vendor-composer-autoload_files.php: |
    <?php

    // autoload_files.php @generated by Composer

    $vendorDir = dirname(dirname(__FILE__));
    $baseDir = dirname($vendorDir);

    return array(
        '0e6d7bf4a5811bfa5cf40c5ccd6fae6a' => $vendorDir . '/symfony/polyfill-mbstring/bootstrap.php',
        'a4a119a56e50fbb293281d9a48007e0e' => $vendorDir . '/symfony/polyfill-php80/bootstrap.php',
    );
  Carbon-vendor-composer-autoload_namespaces.php: |
    <?php

    // autoload_namespaces.php @generated by Composer

    $vendorDir = dirname(dirname(__FILE__));
    $baseDir = dirname($vendorDir);

    return array(
    );
  Carbon-vendor-composer-autoload_psr4.php: |
    <?php

    // autoload_psr4.php @generated by Composer

    $vendorDir = dirname(dirname(__FILE__));
    $baseDir = dirname($vendorDir);

    return array(
        'Symfony\\Polyfill\\Php80\\' => array($vendorDir . '/symfony/polyfill-php80'),
        'Symfony\\Polyfill\\Mbstring\\' => array($vendorDir . '/symfony/polyfill-mbstring'),
        'Symfony\\Contracts\\Translation\\' => array($vendorDir . '/symfony/translation-contracts'),
        'Symfony\\Component\\Translation\\' => array($vendorDir . '/symfony/translation'),
        'Carbon\\' => array($baseDir . '/src/Carbon'),
    );
  Carbon-vendor-composer-autoload_real.php: |
    <?php

    // autoload_real.php @generated by Composer

    class ComposerAutoloaderInit7189d73e7439cae0d20081029c4407cc
    {
        private static $loader;

        public static function loadClassLoader($class)
        {
            if ('Composer\Autoload\ClassLoader' === $class) {
                require __DIR__ . '/ClassLoader.php';
            }
        }

        /**
         * @return \Composer\Autoload\ClassLoader
         */
        public static function getLoader()
        {
            if (null !== self::$loader) {
                return self::$loader;
            }

            require __DIR__ . '/platform_check.php';

            spl_autoload_register(array('ComposerAutoloaderInit7189d73e7439cae0d20081029c4407cc', 'loadClassLoader'), true, true);
            self::$loader = $loader = new \Composer\Autoload\ClassLoader(\dirname(\dirname(__FILE__)));
            spl_autoload_unregister(array('ComposerAutoloaderInit7189d73e7439cae0d20081029c4407cc', 'loadClassLoader'));

            $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());
            if ($useStaticLoader) {
                require __DIR__ . '/autoload_static.php';

                call_user_func(\Composer\Autoload\ComposerStaticInit7189d73e7439cae0d20081029c4407cc::getInitializer($loader));
            } else {
                $map = require __DIR__ . '/autoload_namespaces.php';
                foreach ($map as $namespace => $path) {
                    $loader->set($namespace, $path);
                }

                $map = require __DIR__ . '/autoload_psr4.php';
                foreach ($map as $namespace => $path) {
                    $loader->setPsr4($namespace, $path);
                }

                $classMap = require __DIR__ . '/autoload_classmap.php';
                if ($classMap) {
                    $loader->addClassMap($classMap);
                }
            }

            $loader->register(true);

            if ($useStaticLoader) {
                $includeFiles = Composer\Autoload\ComposerStaticInit7189d73e7439cae0d20081029c4407cc::$files;
            } else {
                $includeFiles = require __DIR__ . '/autoload_files.php';
            }
            foreach ($includeFiles as $fileIdentifier => $file) {
                composerRequire7189d73e7439cae0d20081029c4407cc($fileIdentifier, $file);
            }

            return $loader;
        }
    }

    function composerRequire7189d73e7439cae0d20081029c4407cc($fileIdentifier, $file)
    {
        if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
            require $file;

            $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;
        }
    }
  Carbon-vendor-composer-autoload_static.php: |
    <?php

    // autoload_static.php @generated by Composer

    namespace Composer\Autoload;

    class ComposerStaticInit7189d73e7439cae0d20081029c4407cc
    {
        public static $files = array(
            '0e6d7bf4a5811bfa5cf40c5ccd6fae6a' => __DIR__ . '/..' . '/symfony/polyfill-mbstring/bootstrap.php',
            'a4a119a56e50fbb294281d9a48007e0e' => __DIR__ . '/..' . '/symfony/polyfill-php80/bootstrap.php',
        );

        public static $prefixLengthsPsr4 = array(
            'S' =>
            array(
                'Symfony\\Polyfill\\Php80\\' => 23,
                'Symfony\\Polyfill\\Mbstring\\' => 26,
                'Symfony\\Contracts\\Translation\\' => 30,
                'Symfony\\Component\\Translation\\' => 30,
            ),
            'C' =>
            array(
                'Carbon\\' => 7,
            ),
        );

        public static $prefixDirsPsr4 = array(
            'Symfony\\Polyfill\\Php80\\' =>
            array(
                0 => __DIR__ . '/..' . '/symfony/polyfill-php80',
            ),
            'Symfony\\Polyfill\\Mbstring\\' =>
            array(
                0 => __DIR__ . '/..' . '/symfony/polyfill-mbstring',
            ),
            'Symfony\\Contracts\\Translation\\' =>
            array(
                0 => __DIR__ . '/..' . '/symfony/translation-contracts',
            ),
            'Symfony\\Component\\Translation\\' =>
            array(
                0 => __DIR__ . '/..' . '/symfony/translation',
            ),
            'Carbon\\' =>
            array(
                0 => __DIR__ . '/../..' . '/src/Carbon',
            ),
        );

        public static $classMap = array(
            'Attribute' => __DIR__ . '/..' . '/symfony/polyfill-php80/Resources/stubs/Attribute.php',
            'Carbon\\Carbon' => __DIR__ . '/../..' . '/src/Carbon/Carbon.php',
            'Carbon\\CarbonConverterInterface' => __DIR__ . '/../..' . '/src/Carbon/CarbonConverterInterface.php',
            'Carbon\\CarbonImmutable' => __DIR__ . '/../..' . '/src/Carbon/CarbonImmutable.php',
            'Carbon\\CarbonInterface' => __DIR__ . '/../..' . '/src/Carbon/CarbonInterface.php',
            'Carbon\\CarbonInterval' => __DIR__ . '/../..' . '/src/Carbon/CarbonInterval.php',
            'Carbon\\CarbonPeriod' => __DIR__ . '/../..' . '/src/Carbon/CarbonPeriod.php',
            'Carbon\\CarbonTimeZone' => __DIR__ . '/../..' . '/src/Carbon/CarbonTimeZone.php',
            'Carbon\\Cli\\Invoker' => __DIR__ . '/../..' . '/src/Carbon/Cli/Invoker.php',
            'Carbon\\Doctrine\\CarbonDoctrineType' => __DIR__ . '/../..' . '/src/Carbon/Doctrine/CarbonDoctrineType.php',
            'Carbon\\Doctrine\\CarbonImmutableType' => __DIR__ . '/../..' . '/src/Carbon/Doctrine/CarbonImmutableType.php',
            'Carbon\\Doctrine\\CarbonType' => __DIR__ . '/../..' . '/src/Carbon/Doctrine/CarbonType.php',
            'Carbon\\Doctrine\\CarbonTypeConverter' => __DIR__ . '/../..' . '/src/Carbon/Doctrine/CarbonTypeConverter.php',
            'Carbon\\Doctrine\\DateTimeDefaultPrecision' => __DIR__ . '/../..' . '/src/Carbon/Doctrine/DateTimeDefaultPrecision.php',
            'Carbon\\Doctrine\\DateTimeImmutableType' => __DIR__ . '/../..' . '/src/Carbon/Doctrine/DateTimeImmutableType.php',
            'Carbon\\Doctrine\\DateTimeType' => __DIR__ . '/../..' . '/src/Carbon/Doctrine/DateTimeType.php',
            'Carbon\\Exceptions\\BadComparisonUnitException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/BadComparisonUnitException.php',
            'Carbon\\Exceptions\\BadFluentConstructorException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/BadFluentConstructorException.php',
            'Carbon\\Exceptions\\BadFluentSetterException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/BadFluentSetterException.php',
            'Carbon\\Exceptions\\BadMethodCallException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/BadMethodCallException.php',
            'Carbon\\Exceptions\\Exception' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/Exception.php',
            'Carbon\\Exceptions\\ImmutableException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/ImmutableException.php',
            'Carbon\\Exceptions\\InvalidArgumentException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/InvalidArgumentException.php',
            'Carbon\\Exceptions\\InvalidCastException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/InvalidCastException.php',
            'Carbon\\Exceptions\\InvalidDateException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/InvalidDateException.php',
            'Carbon\\Exceptions\\InvalidFormatException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/InvalidFormatException.php',
            'Carbon\\Exceptions\\InvalidIntervalException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/InvalidIntervalException.php',
            'Carbon\\Exceptions\\InvalidPeriodDateException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/InvalidPeriodDateException.php',
            'Carbon\\Exceptions\\InvalidPeriodParameterException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/InvalidPeriodParameterException.php',
            'Carbon\\Exceptions\\InvalidTimeZoneException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/InvalidTimeZoneException.php',
            'Carbon\\Exceptions\\InvalidTypeException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/InvalidTypeException.php',
            'Carbon\\Exceptions\\NotACarbonClassException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/NotACarbonClassException.php',
            'Carbon\\Exceptions\\NotAPeriodException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/NotAPeriodException.php',
            'Carbon\\Exceptions\\NotLocaleAwareException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/NotLocaleAwareException.php',
            'Carbon\\Exceptions\\OutOfRangeException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/OutOfRangeException.php',
            'Carbon\\Exceptions\\ParseErrorException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/ParseErrorException.php',
            'Carbon\\Exceptions\\RuntimeException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/RuntimeException.php',
            'Carbon\\Exceptions\\UnitException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/UnitException.php',
            'Carbon\\Exceptions\\UnitNotConfiguredException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/UnitNotConfiguredException.php',
            'Carbon\\Exceptions\\UnknownGetterException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/UnknownGetterException.php',
            'Carbon\\Exceptions\\UnknownMethodException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/UnknownMethodException.php',
            'Carbon\\Exceptions\\UnknownSetterException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/UnknownSetterException.php',
            'Carbon\\Exceptions\\UnknownUnitException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/UnknownUnitException.php',
            'Carbon\\Exceptions\\UnreachableException' => __DIR__ . '/../..' . '/src/Carbon/Exceptions/UnreachableException.php',
            'Carbon\\Factory' => __DIR__ . '/../..' . '/src/Carbon/Factory.php',
            'Carbon\\FactoryImmutable' => __DIR__ . '/../..' . '/src/Carbon/FactoryImmutable.php',
            'Carbon\\Language' => __DIR__ . '/../..' . '/src/Carbon/Language.php',
            'Carbon\\Laravel\\ServiceProvider' => __DIR__ . '/../..' . '/src/Carbon/Laravel/ServiceProvider.php',
            'Carbon\\PHPStan\\Macro' => __DIR__ . '/../..' . '/src/Carbon/PHPStan/Macro.php',
            'Carbon\\PHPStan\\MacroExtension' => __DIR__ . '/../..' . '/src/Carbon/PHPStan/MacroExtension.php',
            'Carbon\\PHPStan\\MacroScanner' => __DIR__ . '/../..' . '/src/Carbon/PHPStan/MacroScanner.php',
            'Carbon\\Traits\\Boundaries' => __DIR__ . '/../..' . '/src/Carbon/Traits/Boundaries.php',
            'Carbon\\Traits\\Cast' => __DIR__ . '/../..' . '/src/Carbon/Traits/Cast.php',
            'Carbon\\Traits\\Comparison' => __DIR__ . '/../..' . '/src/Carbon/Traits/Comparison.php',
            'Carbon\\Traits\\Converter' => __DIR__ . '/../..' . '/src/Carbon/Traits/Converter.php',
            'Carbon\\Traits\\Creator' => __DIR__ . '/../..' . '/src/Carbon/Traits/Creator.php',
            'Carbon\\Traits\\Date' => __DIR__ . '/../..' . '/src/Carbon/Traits/Date.php',
            'Carbon\\Traits\\Difference' => __DIR__ . '/../..' . '/src/Carbon/Traits/Difference.php',
            'Carbon\\Traits\\IntervalRounding' => __DIR__ . '/../..' . '/src/Carbon/Traits/IntervalRounding.php',
            'Carbon\\Traits\\IntervalStep' => __DIR__ . '/../..' . '/src/Carbon/Traits/IntervalStep.php',
            'Carbon\\Traits\\Localization' => __DIR__ . '/../..' . '/src/Carbon/Traits/Localization.php',
            'Carbon\\Traits\\Macro' => __DIR__ . '/../..' . '/src/Carbon/Traits/Macro.php',
            'Carbon\\Traits\\Mixin' => __DIR__ . '/../..' . '/src/Carbon/Traits/Mixin.php',
            'Carbon\\Traits\\Modifiers' => __DIR__ . '/../..' . '/src/Carbon/Traits/Modifiers.php',
            'Carbon\\Traits\\Mutability' => __DIR__ . '/../..' . '/src/Carbon/Traits/Mutability.php',
            'Carbon\\Traits\\ObjectInitialisation' => __DIR__ . '/../..' . '/src/Carbon/Traits/ObjectInitialisation.php',
            'Carbon\\Traits\\Options' => __DIR__ . '/../..' . '/src/Carbon/Traits/Options.php',
            'Carbon\\Traits\\Rounding' => __DIR__ . '/../..' . '/src/Carbon/Traits/Rounding.php',
            'Carbon\\Traits\\Serialization' => __DIR__ . '/../..' . '/src/Carbon/Traits/Serialization.php',
            'Carbon\\Traits\\Test' => __DIR__ . '/../..' . '/src/Carbon/Traits/Test.php',
            'Carbon\\Traits\\Timestamp' => __DIR__ . '/../..' . '/src/Carbon/Traits/Timestamp.php',
            'Carbon\\Traits\\Units' => __DIR__ . '/../..' . '/src/Carbon/Traits/Units.php',
            'Carbon\\Traits\\Week' => __DIR__ . '/../..' . '/src/Carbon/Traits/Week.php',
            'Carbon\\Translator' => __DIR__ . '/../..' . '/src/Carbon/Translator.php',
            'Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php',
            'Stringable' => __DIR__ . '/..' . '/symfony/polyfill-php80/Resources/stubs/Stringable.php',
            'Symfony\\Component\\Translation\\Catalogue\\AbstractOperation' => __DIR__ . '/..' . '/symfony/translation/Catalogue/AbstractOperation.php',
            'Symfony\\Component\\Translation\\Catalogue\\MergeOperation' => __DIR__ . '/..' . '/symfony/translation/Catalogue/MergeOperation.php',
            'Symfony\\Component\\Translation\\Catalogue\\OperationInterface' => __DIR__ . '/..' . '/symfony/translation/Catalogue/OperationInterface.php',
            'Symfony\\Component\\Translation\\Catalogue\\TargetOperation' => __DIR__ . '/..' . '/symfony/translation/Catalogue/TargetOperation.php',
            'Symfony\\Component\\Translation\\Command\\XliffLintCommand' => __DIR__ . '/..' . '/symfony/translation/Command/XliffLintCommand.php',
            'Symfony\\Component\\Translation\\DataCollectorTranslator' => __DIR__ . '/..' . '/symfony/translation/DataCollectorTranslator.php',
            'Symfony\\Component\\Translation\\DataCollector\\TranslationDataCollector' => __DIR__ . '/..' . '/symfony/translation/DataCollector/TranslationDataCollector.php',
            'Symfony\\Component\\Translation\\DependencyInjection\\TranslationDumperPass' => __DIR__ . '/..' . '/symfony/translation/DependencyInjection/TranslationDumperPass.php',
            'Symfony\\Component\\Translation\\DependencyInjection\\TranslationExtractorPass' => __DIR__ . '/..' . '/symfony/translation/DependencyInjection/TranslationExtractorPass.php',
            'Symfony\\Component\\Translation\\DependencyInjection\\TranslatorPass' => __DIR__ . '/..' . '/symfony/translation/DependencyInjection/TranslatorPass.php',
            'Symfony\\Component\\Translation\\DependencyInjection\\TranslatorPathsPass' => __DIR__ . '/..' . '/symfony/translation/DependencyInjection/TranslatorPathsPass.php',
            'Symfony\\Component\\Translation\\Dumper\\CsvFileDumper' => __DIR__ . '/..' . '/symfony/translation/Dumper/CsvFileDumper.php',
            'Symfony\\Component\\Translation\\Dumper\\DumperInterface' => __DIR__ . '/..' . '/symfony/translation/Dumper/DumperInterface.php',
            'Symfony\\Component\\Translation\\Dumper\\FileDumper' => __DIR__ . '/..' . '/symfony/translation/Dumper/FileDumper.php',
            'Symfony\\Component\\Translation\\Dumper\\IcuResFileDumper' => __DIR__ . '/..' . '/symfony/translation/Dumper/IcuResFileDumper.php',
            'Symfony\\Component\\Translation\\Dumper\\IniFileDumper' => __DIR__ . '/..' . '/symfony/translation/Dumper/IniFileDumper.php',
            'Symfony\\Component\\Translation\\Dumper\\JsonFileDumper' => __DIR__ . '/..' . '/symfony/translation/Dumper/JsonFileDumper.php',
            'Symfony\\Component\\Translation\\Dumper\\MoFileDumper' => __DIR__ . '/..' . '/symfony/translation/Dumper/MoFileDumper.php',
            'Symfony\\Component\\Translation\\Dumper\\PhpFileDumper' => __DIR__ . '/..' . '/symfony/translation/Dumper/PhpFileDumper.php',
            'Symfony\\Component\\Translation\\Dumper\\PoFileDumper' => __DIR__ . '/..' . '/symfony/translation/Dumper/PoFileDumper.php',
            'Symfony\\Component\\Translation\\Dumper\\QtFileDumper' => __DIR__ . '/..' . '/symfony/translation/Dumper/QtFileDumper.php',
            'Symfony\\Component\\Translation\\Dumper\\XliffFileDumper' => __DIR__ . '/..' . '/symfony/translation/Dumper/XliffFileDumper.php',
            'Symfony\\Component\\Translation\\Dumper\\YamlFileDumper' => __DIR__ . '/..' . '/symfony/translation/Dumper/YamlFileDumper.php',
            'Symfony\\Component\\Translation\\Exception\\ExceptionInterface' => __DIR__ . '/..' . '/symfony/translation/Exception/ExceptionInterface.php',
            'Symfony\\Component\\Translation\\Exception\\InvalidArgumentException' => __DIR__ . '/..' . '/symfony/translation/Exception/InvalidArgumentException.php',
            'Symfony\\Component\\Translation\\Exception\\InvalidResourceException' => __DIR__ . '/..' . '/symfony/translation/Exception/InvalidResourceException.php',
            'Symfony\\Component\\Translation\\Exception\\LogicException' => __DIR__ . '/..' . '/symfony/translation/Exception/LogicException.php',
            'Symfony\\Component\\Translation\\Exception\\NotFoundResourceException' => __DIR__ . '/..' . '/symfony/translation/Exception/NotFoundResourceException.php',
            'Symfony\\Component\\Translation\\Exception\\RuntimeException' => __DIR__ . '/..' . '/symfony/translation/Exception/RuntimeException.php',
            'Symfony\\Component\\Translation\\Extractor\\AbstractFileExtractor' => __DIR__ . '/..' . '/symfony/translation/Extractor/AbstractFileExtractor.php',
            'Symfony\\Component\\Translation\\Extractor\\ChainExtractor' => __DIR__ . '/..' . '/symfony/translation/Extractor/ChainExtractor.php',
            'Symfony\\Component\\Translation\\Extractor\\ExtractorInterface' => __DIR__ . '/..' . '/symfony/translation/Extractor/ExtractorInterface.php',
            'Symfony\\Component\\Translation\\Extractor\\PhpExtractor' => __DIR__ . '/..' . '/symfony/translation/Extractor/PhpExtractor.php',
            'Symfony\\Component\\Translation\\Extractor\\PhpStringTokenParser' => __DIR__ . '/..' . '/symfony/translation/Extractor/PhpStringTokenParser.php',
            'Symfony\\Component\\Translation\\Formatter\\ChoiceMessageFormatterInterface' => __DIR__ . '/..' . '/symfony/translation/Formatter/ChoiceMessageFormatterInterface.php',
            'Symfony\\Component\\Translation\\Formatter\\IntlFormatter' => __DIR__ . '/..' . '/symfony/translation/Formatter/IntlFormatter.php',
            'Symfony\\Component\\Translation\\Formatter\\IntlFormatterInterface' => __DIR__ . '/..' . '/symfony/translation/Formatter/IntlFormatterInterface.php',
            'Symfony\\Component\\Translation\\Formatter\\MessageFormatter' => __DIR__ . '/..' . '/symfony/translation/Formatter/MessageFormatter.php',
            'Symfony\\Component\\Translation\\Formatter\\MessageFormatterInterface' => __DIR__ . '/..' . '/symfony/translation/Formatter/MessageFormatterInterface.php',
            'Symfony\\Component\\Translation\\IdentityTranslator' => __DIR__ . '/..' . '/symfony/translation/IdentityTranslator.php',
            'Symfony\\Component\\Translation\\Interval' => __DIR__ . '/..' . '/symfony/translation/Interval.php',
            'Symfony\\Component\\Translation\\Loader\\ArrayLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/ArrayLoader.php',
            'Symfony\\Component\\Translation\\Loader\\CsvFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/CsvFileLoader.php',
            'Symfony\\Component\\Translation\\Loader\\FileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/FileLoader.php',
            'Symfony\\Component\\Translation\\Loader\\IcuDatFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/IcuDatFileLoader.php',
            'Symfony\\Component\\Translation\\Loader\\IcuResFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/IcuResFileLoader.php',
            'Symfony\\Component\\Translation\\Loader\\IniFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/IniFileLoader.php',
            'Symfony\\Component\\Translation\\Loader\\JsonFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/JsonFileLoader.php',
            'Symfony\\Component\\Translation\\Loader\\LoaderInterface' => __DIR__ . '/..' . '/symfony/translation/Loader/LoaderInterface.php',
            'Symfony\\Component\\Translation\\Loader\\MoFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/MoFileLoader.php',
            'Symfony\\Component\\Translation\\Loader\\PhpFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/PhpFileLoader.php',
            'Symfony\\Component\\Translation\\Loader\\PoFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/PoFileLoader.php',
            'Symfony\\Component\\Translation\\Loader\\QtFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/QtFileLoader.php',
            'Symfony\\Component\\Translation\\Loader\\XliffFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/XliffFileLoader.php',
            'Symfony\\Component\\Translation\\Loader\\YamlFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/YamlFileLoader.php',
            'Symfony\\Component\\Translation\\LoggingTranslator' => __DIR__ . '/..' . '/symfony/translation/LoggingTranslator.php',
            'Symfony\\Component\\Translation\\MessageCatalogue' => __DIR__ . '/..' . '/symfony/translation/MessageCatalogue.php',
            'Symfony\\Component\\Translation\\MessageCatalogueInterface' => __DIR__ . '/..' . '/symfony/translation/MessageCatalogueInterface.php',
            'Symfony\\Component\\Translation\\MessageSelector' => __DIR__ . '/..' . '/symfony/translation/MessageSelector.php',
            'Symfony\\Component\\Translation\\MetadataAwareInterface' => __DIR__ . '/..' . '/symfony/translation/MetadataAwareInterface.php',
            'Symfony\\Component\\Translation\\PluralizationRules' => __DIR__ . '/..' . '/symfony/translation/PluralizationRules.php',
            'Symfony\\Component\\Translation\\Reader\\TranslationReader' => __DIR__ . '/..' . '/symfony/translation/Reader/TranslationReader.php',
            'Symfony\\Component\\Translation\\Reader\\TranslationReaderInterface' => __DIR__ . '/..' . '/symfony/translation/Reader/TranslationReaderInterface.php',
            'Symfony\\Component\\Translation\\Translator' => __DIR__ . '/..' . '/symfony/translation/Translator.php',
            'Symfony\\Component\\Translation\\TranslatorBagInterface' => __DIR__ . '/..' . '/symfony/translation/TranslatorBagInterface.php',
            'Symfony\\Component\\Translation\\TranslatorInterface' => __DIR__ . '/..' . '/symfony/translation/TranslatorInterface.php',
            'Symfony\\Component\\Translation\\Util\\ArrayConverter' => __DIR__ . '/..' . '/symfony/translation/Util/ArrayConverter.php',
            'Symfony\\Component\\Translation\\Util\\XliffUtils' => __DIR__ . '/..' . '/symfony/translation/Util/XliffUtils.php',
            'Symfony\\Component\\Translation\\Writer\\TranslationWriter' => __DIR__ . '/..' . '/symfony/translation/Writer/TranslationWriter.php',
            'Symfony\\Component\\Translation\\Writer\\TranslationWriterInterface' => __DIR__ . '/..' . '/symfony/translation/Writer/TranslationWriterInterface.php',
            'Symfony\\Contracts\\Translation\\LocaleAwareInterface' => __DIR__ . '/..' . '/symfony/translation-contracts/LocaleAwareInterface.php',
            'Symfony\\Contracts\\Translation\\Test\\TranslatorTest' => __DIR__ . '/..' . '/symfony/translation-contracts/Test/TranslatorTest.php',
            'Symfony\\Contracts\\Translation\\TranslatorInterface' => __DIR__ . '/..' . '/symfony/translation-contracts/TranslatorInterface.php',
            'Symfony\\Contracts\\Translation\\TranslatorTrait' => __DIR__ . '/..' . '/symfony/translation-contracts/TranslatorTrait.php',
            'Symfony\\Polyfill\\Mbstring\\Mbstring' => __DIR__ . '/..' . '/symfony/polyfill-mbstring/Mbstring.php',
            'Symfony\\Polyfill\\Php80\\Php80' => __DIR__ . '/..' . '/symfony/polyfill-php80/Php80.php',
            'UnhandledMatchError' => __DIR__ . '/..' . '/symfony/polyfill-php80/Resources/stubs/UnhandledMatchError.php',
            'ValueError' => __DIR__ . '/..' . '/symfony/polyfill-php80/Resources/stubs/ValueError.php',
        );

        public static function getInitializer(ClassLoader $loader)
        {
            return \Closure::bind(function () use ($loader) {
                $loader->prefixLengthsPsr4 = ComposerStaticInit7189d73e7439cae0d20081029c4407cc::$prefixLengthsPsr4;
                $loader->prefixDirsPsr4 = ComposerStaticInit7189d73e7439cae0d20081029c4407cc::$prefixDirsPsr4;
                $loader->classMap = ComposerStaticInit7189d73e7439cae0d20081029c4407cc::$classMap;
            }, null, ClassLoader::class);
        }
    }
  Carbon-vendor-composer-installed.json: |
    {
        "packages": [
            {
                "name": "symfony/polyfill-mbstring",
                "version": "v1.23.1",
                "version_normalized": "1.23.1.0",
                "source": {
                    "type": "git",
                    "url": "https://github.com/symfony/polyfill-mbstring.git",
                    "reference": "9174a3d80210dca8daa7f31fec659150bbeabfc6"
                },
                "dist": {
                    "type": "zip",
                    "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/9174a3d80210dca8daa7f31fec659150bbeabfc6",
                    "reference": "9174a3d80210dca8daa7f31fec659150bbeabfc6",
                    "shasum": ""
                },
                "require": {
                    "php": ">=7.1"
                },
                "suggest": {
                    "ext-mbstring": "For best performance"
                },
                "time": "2021-05-27T12:26:48+00:00",
                "type": "library",
                "extra": {
                    "branch-alias": {
                        "dev-main": "1.23-dev"
                    },
                    "thanks": {
                        "name": "symfony/polyfill",
                        "url": "https://github.com/symfony/polyfill"
                    }
                },
                "installation-source": "dist",
                "autoload": {
                    "psr-4": {
                        "Symfony\\Polyfill\\Mbstring\\": ""
                    },
                    "files": [
                        "bootstrap.php"
                    ]
                },
                "notification-url": "https://packagist.org/downloads/",
                "license": [
                    "MIT"
                ],
                "authors": [
                    {
                        "name": "Nicolas Grekas",
                        "email": "p@tchwork.com"
                    },
                    {
                        "name": "Symfony Community",
                        "homepage": "https://symfony.com/contributors"
                    }
                ],
                "description": "Symfony polyfill for the Mbstring extension",
                "homepage": "https://symfony.com",
                "keywords": [
                    "compatibility",
                    "mbstring",
                    "polyfill",
                    "portable",
                    "shim"
                ],
                "support": {
                    "source": "https://github.com/symfony/polyfill-mbstring/tree/v1.23.1"
                },
                "funding": [
                    {
                        "url": "https://symfony.com/sponsor",
                        "type": "custom"
                    },
                    {
                        "url": "https://github.com/fabpot",
                        "type": "github"
                    },
                    {
                        "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                        "type": "tidelift"
                    }
                ],
                "install-path": "../symfony/polyfill-mbstring"
            },
            {
                "name": "symfony/polyfill-php80",
                "version": "v1.23.1",
                "version_normalized": "1.23.1.0",
                "source": {
                    "type": "git",
                    "url": "https://github.com/symfony/polyfill-php80.git",
                    "reference": "1100343ed1a92e3a38f9ae122fc0eb21602547be"
                },
                "dist": {
                    "type": "zip",
                    "url": "https://api.github.com/repos/symfony/polyfill-php80/zipball/1100343ed1a92e3a38f9ae122fc0eb21602547be",
                    "reference": "1100343ed1a92e3a38f9ae122fc0eb21602547be",
                    "shasum": ""
                },
                "require": {
                    "php": ">=7.1"
                },
                "time": "2021-07-28T13:41:28+00:00",
                "type": "library",
                "extra": {
                    "branch-alias": {
                        "dev-main": "1.23-dev"
                    },
                    "thanks": {
                        "name": "symfony/polyfill",
                        "url": "https://github.com/symfony/polyfill"
                    }
                },
                "installation-source": "dist",
                "autoload": {
                    "psr-4": {
                        "Symfony\\Polyfill\\Php80\\": ""
                    },
                    "files": [
                        "bootstrap.php"
                    ],
                    "classmap": [
                        "Resources/stubs"
                    ]
                },
                "notification-url": "https://packagist.org/downloads/",
                "license": [
                    "MIT"
                ],
                "authors": [
                    {
                        "name": "Ion Bazan",
                        "email": "ion.bazan@gmail.com"
                    },
                    {
                        "name": "Nicolas Grekas",
                        "email": "p@tchwork.com"
                    },
                    {
                        "name": "Symfony Community",
                        "homepage": "https://symfony.com/contributors"
                    }
                ],
                "description": "Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions",
                "homepage": "https://symfony.com",
                "keywords": [
                    "compatibility",
                    "polyfill",
                    "portable",
                    "shim"
                ],
                "support": {
                    "source": "https://github.com/symfony/polyfill-php80/tree/v1.23.1"
                },
                "funding": [
                    {
                        "url": "https://symfony.com/sponsor",
                        "type": "custom"
                    },
                    {
                        "url": "https://github.com/fabpot",
                        "type": "github"
                    },
                    {
                        "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                        "type": "tidelift"
                    }
                ],
                "install-path": "../symfony/polyfill-php80"
            },
            {
                "name": "symfony/translation",
                "version": "v4.4.32",
                "version_normalized": "4.4.32.0",
                "source": {
                    "type": "git",
                    "url": "https://github.com/symfony/translation.git",
                    "reference": "db0ba1e85280d8ff11e38d53c70f8814d4d740f5"
                },
                "dist": {
                    "type": "zip",
                    "url": "https://api.github.com/repos/symfony/translation/zipball/db0ba1e85280d8ff11e38d53c70f8814d4d740f5",
                    "reference": "db0ba1e85280d8ff11e38d53c70f8814d4d740f5",
                    "shasum": ""
                },
                "require": {
                    "php": ">=7.1.3",
                    "symfony/polyfill-mbstring": "~1.0",
                    "symfony/polyfill-php80": "^1.16",
                    "symfony/translation-contracts": "^1.1.6|^2"
                },
                "conflict": {
                    "symfony/config": "<3.4",
                    "symfony/dependency-injection": "<3.4",
                    "symfony/http-kernel": "<4.4",
                    "symfony/yaml": "<3.4"
                },
                "provide": {
                    "symfony/translation-implementation": "1.0|2.0"
                },
                "require-dev": {
                    "psr/log": "^1|^2|^3",
                    "symfony/config": "^3.4|^4.0|^5.0",
                    "symfony/console": "^3.4|^4.0|^5.0",
                    "symfony/dependency-injection": "^3.4|^4.0|^5.0",
                    "symfony/finder": "~2.8|~3.0|~4.0|^5.0",
                    "symfony/http-kernel": "^4.4",
                    "symfony/intl": "^3.4|^4.0|^5.0",
                    "symfony/service-contracts": "^1.1.2|^2",
                    "symfony/yaml": "^3.4|^4.0|^5.0"
                },
                "suggest": {
                    "psr/log-implementation": "To use logging capability in translator",
                    "symfony/config": "",
                    "symfony/yaml": ""
                },
                "time": "2021-08-26T05:57:13+00:00",
                "type": "library",
                "installation-source": "dist",
                "autoload": {
                    "psr-4": {
                        "Symfony\\Component\\Translation\\": ""
                    },
                    "exclude-from-classmap": [
                        "/Tests/"
                    ]
                },
                "notification-url": "https://packagist.org/downloads/",
                "license": [
                    "MIT"
                ],
                "authors": [
                    {
                        "name": "Fabien Potencier",
                        "email": "fabien@symfony.com"
                    },
                    {
                        "name": "Symfony Community",
                        "homepage": "https://symfony.com/contributors"
                    }
                ],
                "description": "Provides tools to internationalize your application",
                "homepage": "https://symfony.com",
                "support": {
                    "source": "https://github.com/symfony/translation/tree/v4.4.32"
                },
                "funding": [
                    {
                        "url": "https://symfony.com/sponsor",
                        "type": "custom"
                    },
                    {
                        "url": "https://github.com/fabpot",
                        "type": "github"
                    },
                    {
                        "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                        "type": "tidelift"
                    }
                ],
                "install-path": "../symfony/translation"
            },
            {
                "name": "symfony/translation-contracts",
                "version": "v1.1.10",
                "version_normalized": "1.1.10.0",
                "source": {
                    "type": "git",
                    "url": "https://github.com/symfony/translation-contracts.git",
                    "reference": "84180a25fad31e23bebd26ca09d89464f082cacc"
                },
                "dist": {
                    "type": "zip",
                    "url": "https://api.github.com/repos/symfony/translation-contracts/zipball/84180a25fad31e23bebd26ca09d89464f082cacc",
                    "reference": "84180a25fad31e23bebd26ca09d89464f082cacc",
                    "shasum": ""
                },
                "require": {
                    "php": ">=7.1.3"
                },
                "suggest": {
                    "symfony/translation-implementation": ""
                },
                "time": "2020-09-02T16:08:58+00:00",
                "type": "library",
                "extra": {
                    "branch-alias": {
                        "dev-master": "1.1-dev"
                    },
                    "thanks": {
                        "name": "symfony/contracts",
                        "url": "https://github.com/symfony/contracts"
                    }
                },
                "installation-source": "dist",
                "autoload": {
                    "psr-4": {
                        "Symfony\\Contracts\\Translation\\": ""
                    }
                },
                "notification-url": "https://packagist.org/downloads/",
                "license": [
                    "MIT"
                ],
                "authors": [
                    {
                        "name": "Nicolas Grekas",
                        "email": "p@tchwork.com"
                    },
                    {
                        "name": "Symfony Community",
                        "homepage": "https://symfony.com/contributors"
                    }
                ],
                "description": "Generic abstractions related to translation",
                "homepage": "https://symfony.com",
                "keywords": [
                    "abstractions",
                    "contracts",
                    "decoupling",
                    "interfaces",
                    "interoperability",
                    "standards"
                ],
                "support": {
                    "source": "https://github.com/symfony/translation-contracts/tree/v1.1.10"
                },
                "funding": [
                    {
                        "url": "https://symfony.com/sponsor",
                        "type": "custom"
                    },
                    {
                        "url": "https://github.com/fabpot",
                        "type": "github"
                    },
                    {
                        "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                        "type": "tidelift"
                    }
                ],
                "install-path": "../symfony/translation-contracts"
            }
        ],
        "dev": false,
        "dev-package-names": []
    }
  Carbon-vendor-composer-installed.php: |
    <?php return array(
        'root' => array(
            'pretty_version' => 'dev-master',
            'version' => 'dev-master',
            'type' => 'library',
            'install_path' => __DIR__ . '/../../',
            'aliases' => array(
                0 => '2.x-dev',
            ),
            'reference' => 'eed83939f1aed3eee517d03a33f5ec587ac529b5',
            'name' => 'nesbot/carbon',
            'dev' => false,
        ),
        'versions' => array(
            'nesbot/carbon' => array(
                'pretty_version' => 'dev-master',
                'version' => 'dev-master',
                'type' => 'library',
                'install_path' => __DIR__ . '/../../',
                'aliases' => array(
                    0 => '2.x-dev',
                ),
                'reference' => 'eed83939f1aed3eee517d03a33f5ec587ac529b5',
                'dev_requirement' => false,
            ),
            'symfony/polyfill-mbstring' => array(
                'pretty_version' => 'v1.23.1',
                'version' => '1.23.1.0',
                'type' => 'library',
                'install_path' => __DIR__ . '/../symfony/polyfill-mbstring',
                'aliases' => array(),
                'reference' => '9174a3d80210dca8daa7f31fec659150bbeabfc6',
                'dev_requirement' => false,
            ),
            'symfony/polyfill-php80' => array(
                'pretty_version' => 'v1.23.1',
                'version' => '1.23.1.0',
                'type' => 'library',
                'install_path' => __DIR__ . '/../symfony/polyfill-php80',
                'aliases' => array(),
                'reference' => '1100343ed1a92e3a38f9ae122fc0eb21602547be',
                'dev_requirement' => false,
            ),
            'symfony/translation' => array(
                'pretty_version' => 'v4.4.32',
                'version' => '4.4.32.0',
                'type' => 'library',
                'install_path' => __DIR__ . '/../symfony/translation',
                'aliases' => array(),
                'reference' => 'db0ba1e85280d8ff11e38d53c70f8814d4d740f5',
                'dev_requirement' => false,
            ),
            'symfony/translation-contracts' => array(
                'pretty_version' => 'v1.1.10',
                'version' => '1.1.10.0',
                'type' => 'library',
                'install_path' => __DIR__ . '/../symfony/translation-contracts',
                'aliases' => array(),
                'reference' => '84180a25fad31e23bebd26ca09d89464f082cacc',
                'dev_requirement' => false,
            ),
            'symfony/translation-implementation' => array(
                'dev_requirement' => false,
                'provided' => array(
                    0 => '1.0|2.0',
                ),
            ),
        ),
    );
  Carbon-vendor-composer-platform_check.php: |
    <?php

    // platform_check.php @generated by Composer

    $issues = array();

    if (!(PHP_VERSION_ID >= 70108)) {
        $issues[] = 'Your Composer dependencies require a PHP version ">= 7.1.8". You are running ' . PHP_VERSION . '.';
    }

    if ($issues) {
        if (!headers_sent()) {
            header('HTTP/1.1 500 Internal Server Error');
        }
        if (!ini_get('display_errors')) {
            if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {
                fwrite(STDERR, 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . implode(PHP_EOL, $issues) . PHP_EOL.PHP_EOL);
            } elseif (!headers_sent()) {
                echo 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . str_replace('You are running '.PHP_VERSION.'.', '', implode(PHP_EOL, $issues)) . PHP_EOL.PHP_EOL;
            }
        }
        trigger_error(
            'Composer detected issues in your platform: ' . implode(' ', $issues),
            E_USER_ERROR
        );
    }
  Carbon-vendor-symfony-translation-CHANGELOG.md: |
    CHANGELOG
    =========

    4.4.0
    -----

     * deprecated support for using `null` as the locale in `Translator`
     * deprecated accepting STDIN implicitly when using the `lint:xliff` command, use `lint:xliff -` (append a dash) instead to make it explicit.
     * Marked the `TranslationDataCollector` class as `@final`.

    4.3.0
    -----

     * Improved Xliff 1.2 loader to load the original file's metadata
     * Added `TranslatorPathsPass`

    4.2.0
    -----

     * Started using ICU parent locales as fallback locales.
     * allow using the ICU message format using domains with the "+intl-icu" suffix
     * deprecated `Translator::transChoice()` in favor of using `Translator::trans()` with a `%count%` parameter
     * deprecated `TranslatorInterface` in favor of `Symfony\Contracts\Translation\TranslatorInterface`
     * deprecated `MessageSelector`, `Interval` and `PluralizationRules`; use `IdentityTranslator` instead
     * Added `IntlFormatter` and `IntlFormatterInterface`
     * added support for multiple files and directories in `XliffLintCommand`
     * Marked `Translator::getFallbackLocales()` and `TranslationDataCollector::getFallbackLocales()` as internal

    4.1.0
    -----

     * The `FileDumper::setBackup()` method is deprecated.
     * The `TranslationWriter::disableBackup()` method is deprecated.
     * The `XliffFileDumper` will write "name" on the "unit" node when dumping XLIFF 2.0.

    4.0.0
    -----

     * removed the backup feature of the `FileDumper` class
     * removed `TranslationWriter::writeTranslations()` method
     * removed support for passing `MessageSelector` instances to the constructor of the `Translator` class

    3.4.0
    -----

     * Added `TranslationDumperPass`
     * Added `TranslationExtractorPass`
     * Added `TranslatorPass`
     * Added `TranslationReader` and `TranslationReaderInterface`
     * Added `<notes>` section to the Xliff 2.0 dumper.
     * Improved Xliff 2.0 loader to load `<notes>` section.
     * Added `TranslationWriterInterface`
     * Deprecated `TranslationWriter::writeTranslations` in favor of `TranslationWriter::write`
     * added support for adding custom message formatter and decoupling the default one.
     * Added `PhpExtractor`
     * Added `PhpStringTokenParser`

    3.2.0
    -----

     * Added support for escaping `|` in plural translations with double pipe.

    3.1.0
    -----

     * Deprecated the backup feature of the file dumper classes.

    3.0.0
    -----

     * removed `FileDumper::format()` method.
     * Changed the visibility of the locale property in `Translator` from protected to private.

    2.8.0
    -----

     * deprecated FileDumper::format(), overwrite FileDumper::formatCatalogue() instead.
     * deprecated Translator::getMessages(), rely on TranslatorBagInterface::getCatalogue() instead.
     * added `FileDumper::formatCatalogue` which allows format the catalogue without dumping it into file.
     * added option `json_encoding` to JsonFileDumper
     * added options `as_tree`, `inline` to YamlFileDumper
     * added support for XLIFF 2.0.
     * added support for XLIFF target and tool attributes.
     * added message parameters to DataCollectorTranslator.
     * [DEPRECATION] The `DiffOperation` class has been deprecated and
       will be removed in Symfony 3.0, since its operation has nothing to do with 'diff',
       so the class name is misleading. The `TargetOperation` class should be used for
       this use-case instead.

    2.7.0
    -----

     * added DataCollectorTranslator for collecting the translated messages.

    2.6.0
    -----

     * added possibility to cache catalogues
     * added TranslatorBagInterface
     * added LoggingTranslator
     * added Translator::getMessages() for retrieving the message catalogue as an array

    2.5.0
    -----

     * added relative file path template to the file dumpers
     * added optional backup to the file dumpers
     * changed IcuResFileDumper to extend FileDumper

    2.3.0
    -----

     * added classes to make operations on catalogues (like making a diff or a merge on 2 catalogues)
     * added Translator::getFallbackLocales()
     * deprecated Translator::setFallbackLocale() in favor of the new Translator::setFallbackLocales() method

    2.2.0
    -----

     * QtTranslationsLoader class renamed to QtFileLoader. QtTranslationsLoader is deprecated and will be removed in 2.3.
     * [BC BREAK] uniformized the exception thrown by the load() method when an error occurs. The load() method now
       throws Symfony\Component\Translation\Exception\NotFoundResourceException when a resource cannot be found
       and Symfony\Component\Translation\Exception\InvalidResourceException when a resource is invalid.
     * changed the exception class thrown by some load() methods from \RuntimeException to \InvalidArgumentException
       (IcuDatFileLoader, IcuResFileLoader and QtFileLoader)

    2.1.0
    -----

     * added support for more than one fallback locale
     * added support for extracting translation messages from templates (Twig and PHP)
     * added dumpers for translation catalogs
     * added support for QT, gettext, and ResourceBundles
  Carbon-vendor-symfony-translation-Catalogue-AbstractOperation.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\Catalogue;

    use Symfony\Component\Translation\Exception\InvalidArgumentException;
    use Symfony\Component\Translation\Exception\LogicException;
    use Symfony\Component\Translation\MessageCatalogue;
    use Symfony\Component\Translation\MessageCatalogueInterface;

    /**
     * Base catalogues binary operation class.
     *
     * A catalogue binary operation performs operation on
     * source (the left argument) and target (the right argument) catalogues.
     *
     * @author Jean-François Simon <contact@jfsimon.fr>
     */
    abstract class AbstractOperation implements OperationInterface
    {
        protected $source;
        protected $target;
        protected $result;

        /**
         * @var array|null The domains affected by this operation
         */
        private $domains;

        /**
         * This array stores 'all', 'new' and 'obsolete' messages for all valid domains.
         *
         * The data structure of this array is as follows:
         *
         *     [
         *         'domain 1' => [
         *             'all' => [...],
         *             'new' => [...],
         *             'obsolete' => [...]
         *         ],
         *         'domain 2' => [
         *             'all' => [...],
         *             'new' => [...],
         *             'obsolete' => [...]
         *         ],
         *         ...
         *     ]
         *
         * @var array The array that stores 'all', 'new' and 'obsolete' messages
         */
        protected $messages;

        /**
         * @throws LogicException
         */
        public function __construct(MessageCatalogueInterface $source, MessageCatalogueInterface $target)
        {
            if ($source->getLocale() !== $target->getLocale()) {
                throw new LogicException('Operated catalogues must belong to the same locale.');
            }

            $this->source = $source;
            $this->target = $target;
            $this->result = new MessageCatalogue($source->getLocale());
            $this->messages = [];
        }

        /**
         * {@inheritdoc}
         */
        public function getDomains()
        {
            if (null === $this->domains) {
                $this->domains = array_values(array_unique(array_merge($this->source->getDomains(), $this->target->getDomains())));
            }

            return $this->domains;
        }

        /**
         * {@inheritdoc}
         */
        public function getMessages($domain)
        {
            if (!\in_array($domain, $this->getDomains())) {
                throw new InvalidArgumentException(sprintf('Invalid domain: "%s".', $domain));
            }

            if (!isset($this->messages[$domain]['all'])) {
                $this->processDomain($domain);
            }

            return $this->messages[$domain]['all'];
        }

        /**
         * {@inheritdoc}
         */
        public function getNewMessages($domain)
        {
            if (!\in_array($domain, $this->getDomains())) {
                throw new InvalidArgumentException(sprintf('Invalid domain: "%s".', $domain));
            }

            if (!isset($this->messages[$domain]['new'])) {
                $this->processDomain($domain);
            }

            return $this->messages[$domain]['new'];
        }

        /**
         * {@inheritdoc}
         */
        public function getObsoleteMessages($domain)
        {
            if (!\in_array($domain, $this->getDomains())) {
                throw new InvalidArgumentException(sprintf('Invalid domain: "%s".', $domain));
            }

            if (!isset($this->messages[$domain]['obsolete'])) {
                $this->processDomain($domain);
            }

            return $this->messages[$domain]['obsolete'];
        }

        /**
         * {@inheritdoc}
         */
        public function getResult()
        {
            foreach ($this->getDomains() as $domain) {
                if (!isset($this->messages[$domain])) {
                    $this->processDomain($domain);
                }
            }

            return $this->result;
        }

        /**
         * Performs operation on source and target catalogues for the given domain and
         * stores the results.
         *
         * @param string $domain The domain which the operation will be performed for
         */
        abstract protected function processDomain($domain);
    }
  Carbon-vendor-symfony-translation-Catalogue-MergeOperation.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\Catalogue;

    use Symfony\Component\Translation\MessageCatalogueInterface;

    /**
     * Merge operation between two catalogues as follows:
     * all = source ∪ target = {x: x ∈ source ∨ x ∈ target}
     * new = all ∖ source = {x: x ∈ target ∧ x ∉ source}
     * obsolete = source ∖ all = {x: x ∈ source ∧ x ∉ source ∧ x ∉ target} = ∅
     * Basically, the result contains messages from both catalogues.
     *
     * @author Jean-François Simon <contact@jfsimon.fr>
     */
    class MergeOperation extends AbstractOperation
    {
        /**
         * {@inheritdoc}
         */
        protected function processDomain($domain)
        {
            $this->messages[$domain] = [
                'all' => [],
                'new' => [],
                'obsolete' => [],
            ];
            $intlDomain = $domain.MessageCatalogueInterface::INTL_DOMAIN_SUFFIX;

            foreach ($this->source->all($domain) as $id => $message) {
                $this->messages[$domain]['all'][$id] = $message;
                $d = $this->source->defines($id, $intlDomain) ? $intlDomain : $domain;
                $this->result->add([$id => $message], $d);
                if (null !== $keyMetadata = $this->source->getMetadata($id, $d)) {
                    $this->result->setMetadata($id, $keyMetadata, $d);
                }
            }

            foreach ($this->target->all($domain) as $id => $message) {
                if (!$this->source->has($id, $domain)) {
                    $this->messages[$domain]['all'][$id] = $message;
                    $this->messages[$domain]['new'][$id] = $message;
                    $d = $this->target->defines($id, $intlDomain) ? $intlDomain : $domain;
                    $this->result->add([$id => $message], $d);
                    if (null !== $keyMetadata = $this->target->getMetadata($id, $d)) {
                        $this->result->setMetadata($id, $keyMetadata, $d);
                    }
                }
            }
        }
    }
  Carbon-vendor-symfony-translation-Catalogue-OperationInterface.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\Catalogue;

    use Symfony\Component\Translation\MessageCatalogueInterface;

    /**
     * Represents an operation on catalogue(s).
     *
     * An instance of this interface performs an operation on one or more catalogues and
     * stores intermediate and final results of the operation.
     *
     * The first catalogue in its argument(s) is called the 'source catalogue' or 'source' and
     * the following results are stored:
     *
     * Messages: also called 'all', are valid messages for the given domain after the operation is performed.
     *
     * New Messages: also called 'new' (new = all ∖ source = {x: x ∈ all ∧ x ∉ source}).
     *
     * Obsolete Messages: also called 'obsolete' (obsolete = source ∖ all = {x: x ∈ source ∧ x ∉ all}).
     *
     * Result: also called 'result', is the resulting catalogue for the given domain that holds the same messages as 'all'.
     *
     * @author Jean-François Simon <jeanfrancois.simon@sensiolabs.com>
     */
    interface OperationInterface
    {
        /**
         * Returns domains affected by operation.
         *
         * @return array
         */
        public function getDomains();

        /**
         * Returns all valid messages ('all') after operation.
         *
         * @param string $domain
         *
         * @return array
         */
        public function getMessages($domain);

        /**
         * Returns new messages ('new') after operation.
         *
         * @param string $domain
         *
         * @return array
         */
        public function getNewMessages($domain);

        /**
         * Returns obsolete messages ('obsolete') after operation.
         *
         * @param string $domain
         *
         * @return array
         */
        public function getObsoleteMessages($domain);

        /**
         * Returns resulting catalogue ('result').
         *
         * @return MessageCatalogueInterface
         */
        public function getResult();
    }
  Carbon-vendor-symfony-translation-Catalogue-TargetOperation.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\Catalogue;

    use Symfony\Component\Translation\MessageCatalogueInterface;

    /**
     * Target operation between two catalogues:
     * intersection = source ∩ target = {x: x ∈ source ∧ x ∈ target}
     * all = intersection ∪ (target ∖ intersection) = target
     * new = all ∖ source = {x: x ∈ target ∧ x ∉ source}
     * obsolete = source ∖ all = source ∖ target = {x: x ∈ source ∧ x ∉ target}
     * Basically, the result contains messages from the target catalogue.
     *
     * @author Michael Lee <michael.lee@zerustech.com>
     */
    class TargetOperation extends AbstractOperation
    {
        /**
         * {@inheritdoc}
         */
        protected function processDomain($domain)
        {
            $this->messages[$domain] = [
                'all' => [],
                'new' => [],
                'obsolete' => [],
            ];
            $intlDomain = $domain.MessageCatalogueInterface::INTL_DOMAIN_SUFFIX;

            // For 'all' messages, the code can't be simplified as ``$this->messages[$domain]['all'] = $target->all($domain);``,
            // because doing so will drop messages like {x: x ∈ source ∧ x ∉ target.all ∧ x ∈ target.fallback}
            //
            // For 'new' messages, the code can't be simplified as ``array_diff_assoc($this->target->all($domain), $this->source->all($domain));``
            // because doing so will not exclude messages like {x: x ∈ target ∧ x ∉ source.all ∧ x ∈ source.fallback}
            //
            // For 'obsolete' messages, the code can't be simplified as ``array_diff_assoc($this->source->all($domain), $this->target->all($domain))``
            // because doing so will not exclude messages like {x: x ∈ source ∧ x ∉ target.all ∧ x ∈ target.fallback}

            foreach ($this->source->all($domain) as $id => $message) {
                if ($this->target->has($id, $domain)) {
                    $this->messages[$domain]['all'][$id] = $message;
                    $d = $this->target->defines($id, $intlDomain) ? $intlDomain : $domain;
                    $this->result->add([$id => $message], $d);
                    if (null !== $keyMetadata = $this->source->getMetadata($id, $d)) {
                        $this->result->setMetadata($id, $keyMetadata, $d);
                    }
                } else {
                    $this->messages[$domain]['obsolete'][$id] = $message;
                }
            }

            foreach ($this->target->all($domain) as $id => $message) {
                if (!$this->source->has($id, $domain)) {
                    $this->messages[$domain]['all'][$id] = $message;
                    $this->messages[$domain]['new'][$id] = $message;
                    $d = $this->target->defines($id, $intlDomain) ? $intlDomain : $domain;
                    $this->result->add([$id => $message], $d);
                    if (null !== $keyMetadata = $this->target->getMetadata($id, $d)) {
                        $this->result->setMetadata($id, $keyMetadata, $d);
                    }
                }
            }
        }
    }
  Carbon-vendor-symfony-translation-DependencyInjection-TranslationDumperPass.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\DependencyInjection;

    use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
    use Symfony\Component\DependencyInjection\ContainerBuilder;
    use Symfony\Component\DependencyInjection\Reference;

    /**
     * Adds tagged translation.formatter services to translation writer.
     */
    class TranslationDumperPass implements CompilerPassInterface
    {
        private $writerServiceId;
        private $dumperTag;

        public function __construct(string $writerServiceId = 'translation.writer', string $dumperTag = 'translation.dumper')
        {
            $this->writerServiceId = $writerServiceId;
            $this->dumperTag = $dumperTag;
        }

        public function process(ContainerBuilder $container)
        {
            if (!$container->hasDefinition($this->writerServiceId)) {
                return;
            }

            $definition = $container->getDefinition($this->writerServiceId);

            foreach ($container->findTaggedServiceIds($this->dumperTag, true) as $id => $attributes) {
                $definition->addMethodCall('addDumper', [$attributes[0]['alias'], new Reference($id)]);
            }
        }
    }
  Carbon-vendor-symfony-translation-DependencyInjection-TranslationExtractorPass.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\DependencyInjection;

    use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
    use Symfony\Component\DependencyInjection\ContainerBuilder;
    use Symfony\Component\DependencyInjection\Exception\RuntimeException;
    use Symfony\Component\DependencyInjection\Reference;

    /**
     * Adds tagged translation.extractor services to translation extractor.
     */
    class TranslationExtractorPass implements CompilerPassInterface
    {
        private $extractorServiceId;
        private $extractorTag;

        public function __construct(string $extractorServiceId = 'translation.extractor', string $extractorTag = 'translation.extractor')
        {
            $this->extractorServiceId = $extractorServiceId;
            $this->extractorTag = $extractorTag;
        }

        public function process(ContainerBuilder $container)
        {
            if (!$container->hasDefinition($this->extractorServiceId)) {
                return;
            }

            $definition = $container->getDefinition($this->extractorServiceId);

            foreach ($container->findTaggedServiceIds($this->extractorTag, true) as $id => $attributes) {
                if (!isset($attributes[0]['alias'])) {
                    throw new RuntimeException(sprintf('The alias for the tag "translation.extractor" of service "%s" must be set.', $id));
                }

                $definition->addMethodCall('addExtractor', [$attributes[0]['alias'], new Reference($id)]);
            }
        }
    }
  Carbon-vendor-symfony-translation-DependencyInjection-TranslatorPass.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\DependencyInjection;

    use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
    use Symfony\Component\DependencyInjection\Compiler\ServiceLocatorTagPass;
    use Symfony\Component\DependencyInjection\ContainerBuilder;
    use Symfony\Component\DependencyInjection\Reference;

    class TranslatorPass implements CompilerPassInterface
    {
        private $translatorServiceId;
        private $readerServiceId;
        private $loaderTag;
        private $debugCommandServiceId;
        private $updateCommandServiceId;

        public function __construct(string $translatorServiceId = 'translator.default', string $readerServiceId = 'translation.reader', string $loaderTag = 'translation.loader', string $debugCommandServiceId = 'console.command.translation_debug', string $updateCommandServiceId = 'console.command.translation_update')
        {
            $this->translatorServiceId = $translatorServiceId;
            $this->readerServiceId = $readerServiceId;
            $this->loaderTag = $loaderTag;
            $this->debugCommandServiceId = $debugCommandServiceId;
            $this->updateCommandServiceId = $updateCommandServiceId;
        }

        public function process(ContainerBuilder $container)
        {
            if (!$container->hasDefinition($this->translatorServiceId)) {
                return;
            }

            $loaders = [];
            $loaderRefs = [];
            foreach ($container->findTaggedServiceIds($this->loaderTag, true) as $id => $attributes) {
                $loaderRefs[$id] = new Reference($id);
                $loaders[$id][] = $attributes[0]['alias'];
                if (isset($attributes[0]['legacy-alias'])) {
                    $loaders[$id][] = $attributes[0]['legacy-alias'];
                }
            }

            if ($container->hasDefinition($this->readerServiceId)) {
                $definition = $container->getDefinition($this->readerServiceId);
                foreach ($loaders as $id => $formats) {
                    foreach ($formats as $format) {
                        $definition->addMethodCall('addLoader', [$format, $loaderRefs[$id]]);
                    }
                }
            }

            $container
                ->findDefinition($this->translatorServiceId)
                ->replaceArgument(0, ServiceLocatorTagPass::register($container, $loaderRefs))
                ->replaceArgument(3, $loaders)
            ;

            if (!$container->hasParameter('twig.default_path')) {
                return;
            }

            $paths = array_keys($container->getDefinition('twig.template_iterator')->getArgument(2));
            if ($container->hasDefinition($this->debugCommandServiceId)) {
                $definition = $container->getDefinition($this->debugCommandServiceId);
                $definition->replaceArgument(4, $container->getParameter('twig.default_path'));

                if (\count($definition->getArguments()) > 6) {
                    $definition->replaceArgument(6, $paths);
                }
            }
            if ($container->hasDefinition($this->updateCommandServiceId)) {
                $definition = $container->getDefinition($this->updateCommandServiceId);
                $definition->replaceArgument(5, $container->getParameter('twig.default_path'));

                if (\count($definition->getArguments()) > 7) {
                    $definition->replaceArgument(7, $paths);
                }
            }
        }
    }
  Carbon-vendor-symfony-translation-DependencyInjection-TranslatorPathsPass.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\DependencyInjection;

    use Symfony\Component\DependencyInjection\Compiler\AbstractRecursivePass;
    use Symfony\Component\DependencyInjection\ContainerBuilder;
    use Symfony\Component\DependencyInjection\Definition;
    use Symfony\Component\DependencyInjection\Reference;
    use Symfony\Component\DependencyInjection\ServiceLocator;

    /**
     * @author Yonel Ceruto <yonelceruto@gmail.com>
     */
    class TranslatorPathsPass extends AbstractRecursivePass
    {
        private $translatorServiceId;
        private $debugCommandServiceId;
        private $updateCommandServiceId;
        private $resolverServiceId;
        private $level = 0;
        private $paths = [];
        private $definitions = [];
        private $controllers = [];

        public function __construct(string $translatorServiceId = 'translator', string $debugCommandServiceId = 'console.command.translation_debug', string $updateCommandServiceId = 'console.command.translation_update', string $resolverServiceId = 'argument_resolver.service')
        {
            $this->translatorServiceId = $translatorServiceId;
            $this->debugCommandServiceId = $debugCommandServiceId;
            $this->updateCommandServiceId = $updateCommandServiceId;
            $this->resolverServiceId = $resolverServiceId;
        }

        public function process(ContainerBuilder $container)
        {
            if (!$container->hasDefinition($this->translatorServiceId)) {
                return;
            }

            foreach ($this->findControllerArguments($container) as $controller => $argument) {
                $id = substr($controller, 0, strpos($controller, ':') ?: \strlen($controller));
                if ($container->hasDefinition($id)) {
                    [$locatorRef] = $argument->getValues();
                    $this->controllers[(string) $locatorRef][$container->getDefinition($id)->getClass()] = true;
                }
            }

            try {
                parent::process($container);

                $paths = [];
                foreach ($this->paths as $class => $_) {
                    if (($r = $container->getReflectionClass($class)) && !$r->isInterface()) {
                        $paths[] = $r->getFileName();
                        foreach ($r->getTraits() as $trait) {
                            $paths[] = $trait->getFileName();
                        }
                    }
                }
                if ($paths) {
                    if ($container->hasDefinition($this->debugCommandServiceId)) {
                        $definition = $container->getDefinition($this->debugCommandServiceId);
                        $definition->replaceArgument(6, array_merge($definition->getArgument(6), $paths));
                    }
                    if ($container->hasDefinition($this->updateCommandServiceId)) {
                        $definition = $container->getDefinition($this->updateCommandServiceId);
                        $definition->replaceArgument(7, array_merge($definition->getArgument(7), $paths));
                    }
                }
            } finally {
                $this->level = 0;
                $this->paths = [];
                $this->definitions = [];
            }
        }

        protected function processValue($value, $isRoot = false)
        {
            if ($value instanceof Reference) {
                if ((string) $value === $this->translatorServiceId) {
                    for ($i = $this->level - 1; $i >= 0; --$i) {
                        $class = $this->definitions[$i]->getClass();

                        if (ServiceLocator::class === $class) {
                            if (!isset($this->controllers[$this->currentId])) {
                                continue;
                            }
                            foreach ($this->controllers[$this->currentId] as $class => $_) {
                                $this->paths[$class] = true;
                            }
                        } else {
                            $this->paths[$class] = true;
                        }

                        break;
                    }
                }

                return $value;
            }

            if ($value instanceof Definition) {
                $this->definitions[$this->level++] = $value;
                $value = parent::processValue($value, $isRoot);
                unset($this->definitions[--$this->level]);

                return $value;
            }

            return parent::processValue($value, $isRoot);
        }

        private function findControllerArguments(ContainerBuilder $container): array
        {
            if ($container->hasDefinition($this->resolverServiceId)) {
                $argument = $container->getDefinition($this->resolverServiceId)->getArgument(0);
                if ($argument instanceof Reference) {
                    $argument = $container->getDefinition($argument);
                }

                return $argument->getArgument(0);
            }

            if ($container->hasDefinition('debug.'.$this->resolverServiceId)) {
                $argument = $container->getDefinition('debug.'.$this->resolverServiceId)->getArgument(0);
                if ($argument instanceof Reference) {
                    $argument = $container->getDefinition($argument);
                }
                $argument = $argument->getArgument(0);
                if ($argument instanceof Reference) {
                    $argument = $container->getDefinition($argument);
                }

                return $argument->getArgument(0);
            }

            return [];
        }
    }
  Carbon-vendor-symfony-translation-Exception-ExceptionInterface.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\Exception;

    /**
     * Exception interface for all exceptions thrown by the component.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface ExceptionInterface extends \Throwable
    {
    }
  Carbon-vendor-symfony-translation-Exception-InvalidArgumentException.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\Exception;

    /**
     * Base InvalidArgumentException for the Translation component.
     *
     * @author Abdellatif Ait boudad <a.aitboudad@gmail.com>
     */
    class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface
    {
    }
  Carbon-vendor-symfony-translation-Exception-InvalidResourceException.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\Exception;

    /**
     * Thrown when a resource cannot be loaded.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class InvalidResourceException extends \InvalidArgumentException implements ExceptionInterface
    {
    }
  Carbon-vendor-symfony-translation-Exception-LogicException.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\Exception;

    /**
     * Base LogicException for Translation component.
     *
     * @author Abdellatif Ait boudad <a.aitboudad@gmail.com>
     */
    class LogicException extends \LogicException implements ExceptionInterface
    {
    }
  Carbon-vendor-symfony-translation-Exception-NotFoundResourceException.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\Exception;

    /**
     * Thrown when a resource does not exist.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class NotFoundResourceException extends \InvalidArgumentException implements ExceptionInterface
    {
    }
  Carbon-vendor-symfony-translation-Exception-RuntimeException.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\Exception;

    /**
     * Base RuntimeException for the Translation component.
     *
     * @author Abdellatif Ait boudad <a.aitboudad@gmail.com>
     */
    class RuntimeException extends \RuntimeException implements ExceptionInterface
    {
    }
  Carbon-vendor-symfony-translation-Interval.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation;

    @trigger_error(sprintf('The "%s" class is deprecated since Symfony 4.2, use IdentityTranslator instead.', Interval::class), \E_USER_DEPRECATED);

    use Symfony\Component\Translation\Exception\InvalidArgumentException;

    /**
     * Tests if a given number belongs to a given math interval.
     *
     * An interval can represent a finite set of numbers:
     *
     *  {1,2,3,4}
     *
     * An interval can represent numbers between two numbers:
     *
     *  [1, +Inf]
     *  ]-1,2[
     *
     * The left delimiter can be [ (inclusive) or ] (exclusive).
     * The right delimiter can be [ (exclusive) or ] (inclusive).
     * Beside numbers, you can use -Inf and +Inf for the infinite.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @see    http://en.wikipedia.org/wiki/Interval_%28mathematics%29#The_ISO_notation
     * @deprecated since Symfony 4.2, use IdentityTranslator instead
     */
    class Interval
    {
        /**
         * Tests if the given number is in the math interval.
         *
         * @param int    $number   A number
         * @param string $interval An interval
         *
         * @return bool
         *
         * @throws InvalidArgumentException
         */
        public static function test($number, $interval)
        {
            $interval = trim($interval);

            if (!preg_match('/^'.self::getIntervalRegexp().'$/x', $interval, $matches)) {
                throw new InvalidArgumentException(sprintf('"%s" is not a valid interval.', $interval));
            }

            if ($matches[1]) {
                foreach (explode(',', $matches[2]) as $n) {
                    if ($number == $n) {
                        return true;
                    }
                }
            } else {
                $leftNumber = self::convertNumber($matches['left']);
                $rightNumber = self::convertNumber($matches['right']);

                return
                    ('[' === $matches['left_delimiter'] ? $number >= $leftNumber : $number > $leftNumber)
                    && (']' === $matches['right_delimiter'] ? $number <= $rightNumber : $number < $rightNumber)
                ;
            }

            return false;
        }

        /**
         * Returns a Regexp that matches valid intervals.
         *
         * @return string A Regexp (without the delimiters)
         */
        public static function getIntervalRegexp()
        {
            return <<<EOF
            ({\s*
                (\-?\d+(\.\d+)?[\s*,\s*\-?\d+(\.\d+)?]*)
            \s*})

                |

            (?P<left_delimiter>[\[\]])
                \s*
                (?P<left>-Inf|\-?\d+(\.\d+)?)
                \s*,\s*
                (?P<right>\+?Inf|\-?\d+(\.\d+)?)
                \s*
            (?P<right_delimiter>[\[\]])
    EOF;
        }

        private static function convertNumber(string $number): float
        {
            if ('-Inf' === $number) {
                return log(0);
            } elseif ('+Inf' === $number || 'Inf' === $number) {
                return -log(0);
            }

            return (float) $number;
        }
    }
  Carbon-vendor-symfony-translation-MessageCatalogue.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation;

    use Symfony\Component\Config\Resource\ResourceInterface;
    use Symfony\Component\Translation\Exception\LogicException;

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class MessageCatalogue implements MessageCatalogueInterface, MetadataAwareInterface
    {
        private $messages = [];
        private $metadata = [];
        private $resources = [];
        private $locale;
        private $fallbackCatalogue;
        private $parent;

        /**
         * @param array $messages An array of messages classified by domain
         */
        public function __construct(?string $locale, array $messages = [])
        {
            if (null === $locale) {
                @trigger_error(sprintf('Passing "null" to the first argument of the "%s" method has been deprecated since Symfony 4.4 and will throw an error in 5.0.', __METHOD__), \E_USER_DEPRECATED);
            }

            $this->locale = $locale;
            $this->messages = $messages;
        }

        /**
         * {@inheritdoc}
         */
        public function getLocale()
        {
            return $this->locale;
        }

        /**
         * {@inheritdoc}
         */
        public function getDomains()
        {
            $domains = [];

            foreach ($this->messages as $domain => $messages) {
                if (str_ends_with($domain, self::INTL_DOMAIN_SUFFIX)) {
                    $domain = substr($domain, 0, -\strlen(self::INTL_DOMAIN_SUFFIX));
                }
                $domains[$domain] = $domain;
            }

            return array_values($domains);
        }

        /**
         * {@inheritdoc}
         */
        public function all($domain = null)
        {
            if (null !== $domain) {
                // skip messages merge if intl-icu requested explicitly
                if (str_ends_with($domain, self::INTL_DOMAIN_SUFFIX)) {
                    return $this->messages[$domain] ?? [];
                }

                return ($this->messages[$domain.self::INTL_DOMAIN_SUFFIX] ?? []) + ($this->messages[$domain] ?? []);
            }

            $allMessages = [];

            foreach ($this->messages as $domain => $messages) {
                if (str_ends_with($domain, self::INTL_DOMAIN_SUFFIX)) {
                    $domain = substr($domain, 0, -\strlen(self::INTL_DOMAIN_SUFFIX));
                    $allMessages[$domain] = $messages + ($allMessages[$domain] ?? []);
                } else {
                    $allMessages[$domain] = ($allMessages[$domain] ?? []) + $messages;
                }
            }

            return $allMessages;
        }

        /**
         * {@inheritdoc}
         */
        public function set($id, $translation, $domain = 'messages')
        {
            $this->add([$id => $translation], $domain);
        }

        /**
         * {@inheritdoc}
         */
        public function has($id, $domain = 'messages')
        {
            if (isset($this->messages[$domain][$id]) || isset($this->messages[$domain.self::INTL_DOMAIN_SUFFIX][$id])) {
                return true;
            }

            if (null !== $this->fallbackCatalogue) {
                return $this->fallbackCatalogue->has($id, $domain);
            }

            return false;
        }

        /**
         * {@inheritdoc}
         */
        public function defines($id, $domain = 'messages')
        {
            return isset($this->messages[$domain][$id]) || isset($this->messages[$domain.self::INTL_DOMAIN_SUFFIX][$id]);
        }

        /**
         * {@inheritdoc}
         */
        public function get($id, $domain = 'messages')
        {
            if (isset($this->messages[$domain.self::INTL_DOMAIN_SUFFIX][$id])) {
                return $this->messages[$domain.self::INTL_DOMAIN_SUFFIX][$id];
            }

            if (isset($this->messages[$domain][$id])) {
                return $this->messages[$domain][$id];
            }

            if (null !== $this->fallbackCatalogue) {
                return $this->fallbackCatalogue->get($id, $domain);
            }

            return $id;
        }

        /**
         * {@inheritdoc}
         */
        public function replace($messages, $domain = 'messages')
        {
            unset($this->messages[$domain], $this->messages[$domain.self::INTL_DOMAIN_SUFFIX]);

            $this->add($messages, $domain);
        }

        /**
         * {@inheritdoc}
         */
        public function add($messages, $domain = 'messages')
        {
            if (!isset($this->messages[$domain])) {
                $this->messages[$domain] = [];
            }
            $intlDomain = $domain;
            if (!str_ends_with($domain, self::INTL_DOMAIN_SUFFIX)) {
                $intlDomain .= self::INTL_DOMAIN_SUFFIX;
            }
            foreach ($messages as $id => $message) {
                if (isset($this->messages[$intlDomain]) && \array_key_exists($id, $this->messages[$intlDomain])) {
                    $this->messages[$intlDomain][$id] = $message;
                } else {
                    $this->messages[$domain][$id] = $message;
                }
            }
        }

        /**
         * {@inheritdoc}
         */
        public function addCatalogue(MessageCatalogueInterface $catalogue)
        {
            if ($catalogue->getLocale() !== $this->locale) {
                throw new LogicException(sprintf('Cannot add a catalogue for locale "%s" as the current locale for this catalogue is "%s".', $catalogue->getLocale(), $this->locale));
            }

            foreach ($catalogue->all() as $domain => $messages) {
                if ($intlMessages = $catalogue->all($domain.self::INTL_DOMAIN_SUFFIX)) {
                    $this->add($intlMessages, $domain.self::INTL_DOMAIN_SUFFIX);
                    $messages = array_diff_key($messages, $intlMessages);
                }
                $this->add($messages, $domain);
            }

            foreach ($catalogue->getResources() as $resource) {
                $this->addResource($resource);
            }

            if ($catalogue instanceof MetadataAwareInterface) {
                $metadata = $catalogue->getMetadata('', '');
                $this->addMetadata($metadata);
            }
        }

        /**
         * {@inheritdoc}
         */
        public function addFallbackCatalogue(MessageCatalogueInterface $catalogue)
        {
            // detect circular references
            $c = $catalogue;
            while ($c = $c->getFallbackCatalogue()) {
                if ($c->getLocale() === $this->getLocale()) {
                    throw new LogicException(sprintf('Circular reference detected when adding a fallback catalogue for locale "%s".', $catalogue->getLocale()));
                }
            }

            $c = $this;
            do {
                if ($c->getLocale() === $catalogue->getLocale()) {
                    throw new LogicException(sprintf('Circular reference detected when adding a fallback catalogue for locale "%s".', $catalogue->getLocale()));
                }

                foreach ($catalogue->getResources() as $resource) {
                    $c->addResource($resource);
                }
            } while ($c = $c->parent);

            $catalogue->parent = $this;
            $this->fallbackCatalogue = $catalogue;

            foreach ($catalogue->getResources() as $resource) {
                $this->addResource($resource);
            }
        }

        /**
         * {@inheritdoc}
         */
        public function getFallbackCatalogue()
        {
            return $this->fallbackCatalogue;
        }

        /**
         * {@inheritdoc}
         */
        public function getResources()
        {
            return array_values($this->resources);
        }

        /**
         * {@inheritdoc}
         */
        public function addResource(ResourceInterface $resource)
        {
            $this->resources[$resource->__toString()] = $resource;
        }

        /**
         * {@inheritdoc}
         */
        public function getMetadata($key = '', $domain = 'messages')
        {
            if ('' == $domain) {
                return $this->metadata;
            }

            if (isset($this->metadata[$domain])) {
                if ('' == $key) {
                    return $this->metadata[$domain];
                }

                if (isset($this->metadata[$domain][$key])) {
                    return $this->metadata[$domain][$key];
                }
            }

            return null;
        }

        /**
         * {@inheritdoc}
         */
        public function setMetadata($key, $value, $domain = 'messages')
        {
            $this->metadata[$domain][$key] = $value;
        }

        /**
         * {@inheritdoc}
         */
        public function deleteMetadata($key = '', $domain = 'messages')
        {
            if ('' == $domain) {
                $this->metadata = [];
            } elseif ('' == $key) {
                unset($this->metadata[$domain]);
            } else {
                unset($this->metadata[$domain][$key]);
            }
        }

        /**
         * Adds current values with the new values.
         *
         * @param array $values Values to add
         */
        private function addMetadata(array $values)
        {
            foreach ($values as $domain => $keys) {
                foreach ($keys as $key => $value) {
                    $this->setMetadata($key, $value, $domain);
                }
            }
        }
    }
  Carbon-vendor-symfony-translation-MessageCatalogueInterface.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation;

    use Symfony\Component\Config\Resource\ResourceInterface;

    /**
     * MessageCatalogueInterface.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface MessageCatalogueInterface
    {
        public const INTL_DOMAIN_SUFFIX = '+intl-icu';

        /**
         * Gets the catalogue locale.
         *
         * @return string The locale
         */
        public function getLocale();

        /**
         * Gets the domains.
         *
         * @return array An array of domains
         */
        public function getDomains();

        /**
         * Gets the messages within a given domain.
         *
         * If $domain is null, it returns all messages.
         *
         * @param string $domain The domain name
         *
         * @return array An array of messages
         */
        public function all($domain = null);

        /**
         * Sets a message translation.
         *
         * @param string $id          The message id
         * @param string $translation The messages translation
         * @param string $domain      The domain name
         */
        public function set($id, $translation, $domain = 'messages');

        /**
         * Checks if a message has a translation.
         *
         * @param string $id     The message id
         * @param string $domain The domain name
         *
         * @return bool true if the message has a translation, false otherwise
         */
        public function has($id, $domain = 'messages');

        /**
         * Checks if a message has a translation (it does not take into account the fallback mechanism).
         *
         * @param string $id     The message id
         * @param string $domain The domain name
         *
         * @return bool true if the message has a translation, false otherwise
         */
        public function defines($id, $domain = 'messages');

        /**
         * Gets a message translation.
         *
         * @param string $id     The message id
         * @param string $domain The domain name
         *
         * @return string The message translation
         */
        public function get($id, $domain = 'messages');

        /**
         * Sets translations for a given domain.
         *
         * @param array  $messages An array of translations
         * @param string $domain   The domain name
         */
        public function replace($messages, $domain = 'messages');

        /**
         * Adds translations for a given domain.
         *
         * @param array  $messages An array of translations
         * @param string $domain   The domain name
         */
        public function add($messages, $domain = 'messages');

        /**
         * Merges translations from the given Catalogue into the current one.
         *
         * The two catalogues must have the same locale.
         */
        public function addCatalogue(self $catalogue);

        /**
         * Merges translations from the given Catalogue into the current one
         * only when the translation does not exist.
         *
         * This is used to provide default translations when they do not exist for the current locale.
         */
        public function addFallbackCatalogue(self $catalogue);

        /**
         * Gets the fallback catalogue.
         *
         * @return self|null A MessageCatalogueInterface instance or null when no fallback has been set
         */
        public function getFallbackCatalogue();

        /**
         * Returns an array of resources loaded to build this collection.
         *
         * @return ResourceInterface[] An array of resources
         */
        public function getResources();

        /**
         * Adds a resource for this collection.
         */
        public function addResource(ResourceInterface $resource);
    }
  Carbon-vendor-symfony-translation-MetadataAwareInterface.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation;

    /**
     * MetadataAwareInterface.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface MetadataAwareInterface
    {
        /**
         * Gets metadata for the given domain and key.
         *
         * Passing an empty domain will return an array with all metadata indexed by
         * domain and then by key. Passing an empty key will return an array with all
         * metadata for the given domain.
         *
         * @param string $key    The key
         * @param string $domain The domain name
         *
         * @return mixed The value that was set or an array with the domains/keys or null
         */
        public function getMetadata($key = '', $domain = 'messages');

        /**
         * Adds metadata to a message domain.
         *
         * @param string $key    The key
         * @param mixed  $value  The value
         * @param string $domain The domain name
         */
        public function setMetadata($key, $value, $domain = 'messages');

        /**
         * Deletes metadata for the given key and domain.
         *
         * Passing an empty domain will delete all metadata. Passing an empty key will
         * delete all metadata for the given domain.
         *
         * @param string $key    The key
         * @param string $domain The domain name
         */
        public function deleteMetadata($key = '', $domain = 'messages');
    }
  Carbon-vendor-symfony-translation-Reader-TranslationReader.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\Reader;

    use Symfony\Component\Finder\Finder;
    use Symfony\Component\Translation\Loader\LoaderInterface;
    use Symfony\Component\Translation\MessageCatalogue;

    /**
     * TranslationReader reads translation messages from translation files.
     *
     * @author Michel Salib <michelsalib@hotmail.com>
     */
    class TranslationReader implements TranslationReaderInterface
    {
        /**
         * Loaders used for import.
         *
         * @var array
         */
        private $loaders = [];

        /**
         * Adds a loader to the translation extractor.
         *
         * @param string $format The format of the loader
         */
        public function addLoader($format, LoaderInterface $loader)
        {
            $this->loaders[$format] = $loader;
        }

        /**
         * {@inheritdoc}
         */
        public function read($directory, MessageCatalogue $catalogue)
        {
            if (!is_dir($directory)) {
                return;
            }

            foreach ($this->loaders as $format => $loader) {
                // load any existing translation files
                $finder = new Finder();
                $extension = $catalogue->getLocale().'.'.$format;
                $files = $finder->files()->name('*.'.$extension)->in($directory);
                foreach ($files as $file) {
                    $domain = substr($file->getFilename(), 0, -1 * \strlen($extension) - 1);
                    $catalogue->addCatalogue($loader->load($file->getPathname(), $catalogue->getLocale(), $domain));
                }
            }
        }
    }
  Carbon-vendor-symfony-translation-Reader-TranslationReaderInterface.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\Reader;

    use Symfony\Component\Translation\MessageCatalogue;

    /**
     * TranslationReader reads translation messages from translation files.
     *
     * @author Tobias Nyholm <tobias.nyholm@gmail.com>
     */
    interface TranslationReaderInterface
    {
        /**
         * Reads translation messages from a directory to the catalogue.
         *
         * @param string $directory
         */
        public function read($directory, MessageCatalogue $catalogue);
    }
  Carbon-vendor-symfony-translation-Resources-bin-translation-status.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    $usageInstructions = <<<END

      Usage instructions
      -------------------------------------------------------------------------------

      $ cd symfony-code-root-directory/

      # show the translation status of all locales
      $ php translation-status.php

      # only show the translation status of incomplete or erroneous locales
      $ php translation-status.php --incomplete

      # show the translation status of all locales, all their missing translations and mismatches between trans-unit id and source
      $ php translation-status.php -v

      # show the status of a single locale
      $ php translation-status.php fr

      # show the status of a single locale, missing translations and mismatches between trans-unit id and source
      $ php translation-status.php fr -v

    END;

    $config = [
        // if TRUE, the full list of missing translations is displayed
        'verbose_output' => false,
        // NULL = analyze all locales
        'locale_to_analyze' => null,
        // append --incomplete to only show incomplete languages
        'include_completed_languages' => true,
        // the reference files all the other translations are compared to
        'original_files' => [
            'src/Symfony/Component/Form/Resources/translations/validators.en.xlf',
            'src/Symfony/Component/Security/Core/Resources/translations/security.en.xlf',
            'src/Symfony/Component/Validator/Resources/translations/validators.en.xlf',
        ],
    ];

    $argc = $_SERVER['argc'];
    $argv = $_SERVER['argv'];

    if ($argc > 4) {
        echo str_replace('translation-status.php', $argv[0], $usageInstructions);
        exit(1);
    }

    foreach (array_slice($argv, 1) as $argumentOrOption) {
        if ('--incomplete' === $argumentOrOption) {
            $config['include_completed_languages'] = false;
            continue;
        }

        if (0 === strpos($argumentOrOption, '-')) {
            $config['verbose_output'] = true;
        } else {
            $config['locale_to_analyze'] = $argumentOrOption;
        }
    }

    foreach ($config['original_files'] as $originalFilePath) {
        if (!file_exists($originalFilePath)) {
            echo sprintf('The following file does not exist. Make sure that you execute this command at the root dir of the Symfony code repository.%s  %s', \PHP_EOL, $originalFilePath);
            exit(1);
        }
    }

    $totalMissingTranslations = 0;
    $totalTranslationMismatches = 0;

    foreach ($config['original_files'] as $originalFilePath) {
        $translationFilePaths = findTranslationFiles($originalFilePath, $config['locale_to_analyze']);
        $translationStatus = calculateTranslationStatus($originalFilePath, $translationFilePaths);

        $totalMissingTranslations += array_sum(array_map(function ($translation) {
            return count($translation['missingKeys']);
        }, array_values($translationStatus)));
        $totalTranslationMismatches += array_sum(array_map(function ($translation) {
            return count($translation['mismatches']);
        }, array_values($translationStatus)));

        printTranslationStatus($originalFilePath, $translationStatus, $config['verbose_output'], $config['include_completed_languages']);
    }

    exit($totalTranslationMismatches > 0 ? 1 : 0);

    function findTranslationFiles($originalFilePath, $localeToAnalyze)
    {
        $translations = [];

        $translationsDir = dirname($originalFilePath);
        $originalFileName = basename($originalFilePath);
        $translationFileNamePattern = str_replace('.en.', '.*.', $originalFileName);

        $translationFiles = glob($translationsDir.'/'.$translationFileNamePattern, \GLOB_NOSORT);
        sort($translationFiles);
        foreach ($translationFiles as $filePath) {
            $locale = extractLocaleFromFilePath($filePath);

            if (null !== $localeToAnalyze && $locale !== $localeToAnalyze) {
                continue;
            }

            $translations[$locale] = $filePath;
        }

        return $translations;
    }

    function calculateTranslationStatus($originalFilePath, $translationFilePaths)
    {
        $translationStatus = [];
        $allTranslationKeys = extractTranslationKeys($originalFilePath);

        foreach ($translationFilePaths as $locale => $translationPath) {
            $translatedKeys = extractTranslationKeys($translationPath);
            $missingKeys = array_diff_key($allTranslationKeys, $translatedKeys);
            $mismatches = findTransUnitMismatches($allTranslationKeys, $translatedKeys);

            $translationStatus[$locale] = [
                'total' => count($allTranslationKeys),
                'translated' => count($translatedKeys),
                'missingKeys' => $missingKeys,
                'mismatches' => $mismatches,
            ];
            $translationStatus[$locale]['is_completed'] = isTranslationCompleted($translationStatus[$locale]);
        }

        return $translationStatus;
    }

    function isTranslationCompleted(array $translationStatus): bool
    {
        return $translationStatus['total'] === $translationStatus['translated'] && 0 === count($translationStatus['mismatches']);
    }

    function printTranslationStatus($originalFilePath, $translationStatus, $verboseOutput, $includeCompletedLanguages)
    {
        printTitle($originalFilePath);
        printTable($translationStatus, $verboseOutput, $includeCompletedLanguages);
        echo \PHP_EOL.\PHP_EOL;
    }

    function extractLocaleFromFilePath($filePath)
    {
        $parts = explode('.', $filePath);

        return $parts[count($parts) - 2];
    }

    function extractTranslationKeys($filePath)
    {
        $translationKeys = [];
        $contents = new \SimpleXMLElement(file_get_contents($filePath));

        foreach ($contents->file->body->{'trans-unit'} as $translationKey) {
            $translationId = (string) $translationKey['id'];
            $translationKey = (string) $translationKey->source;

            $translationKeys[$translationId] = $translationKey;
        }

        return $translationKeys;
    }

    /**
     * Check whether the trans-unit id and source match with the base translation.
     */
    function findTransUnitMismatches(array $baseTranslationKeys, array $translatedKeys): array
    {
        $mismatches = [];

        foreach ($baseTranslationKeys as $translationId => $translationKey) {
            if (!isset($translatedKeys[$translationId])) {
                continue;
            }
            if ($translatedKeys[$translationId] !== $translationKey) {
                $mismatches[$translationId] = [
                    'found' => $translatedKeys[$translationId],
                    'expected' => $translationKey,
                ];
            }
        }

        return $mismatches;
    }

    function printTitle($title)
    {
        echo $title.\PHP_EOL;
        echo str_repeat('=', strlen($title)).\PHP_EOL.\PHP_EOL;
    }

    function printTable($translations, $verboseOutput, bool $includeCompletedLanguages)
    {
        if (0 === count($translations)) {
            echo 'No translations found';

            return;
        }
        $longestLocaleNameLength = max(array_map('strlen', array_keys($translations)));

        foreach ($translations as $locale => $translation) {
            if (!$includeCompletedLanguages && $translation['is_completed']) {
                continue;
            }

            if ($translation['translated'] > $translation['total']) {
                textColorRed();
            } elseif (count($translation['mismatches']) > 0) {
                textColorRed();
            } elseif ($translation['is_completed']) {
                textColorGreen();
            }

            echo sprintf(
                '|  Locale: %-'.$longestLocaleNameLength.'s  |  Translated: %2d/%2d  |  Mismatches: %d  |',
                $locale,
                $translation['translated'],
                $translation['total'],
                count($translation['mismatches'])
            ).\PHP_EOL;

            textColorNormal();

            $shouldBeClosed = false;
            if (true === $verboseOutput && count($translation['missingKeys']) > 0) {
                echo '|    Missing Translations:'.\PHP_EOL;

                foreach ($translation['missingKeys'] as $id => $content) {
                    echo sprintf('|      (id=%s) %s', $id, $content).\PHP_EOL;
                }
                $shouldBeClosed = true;
            }
            if (true === $verboseOutput && count($translation['mismatches']) > 0) {
                echo '|    Mismatches between trans-unit id and source:'.\PHP_EOL;

                foreach ($translation['mismatches'] as $id => $content) {
                    echo sprintf('|      (id=%s) Expected: %s', $id, $content['expected']).\PHP_EOL;
                    echo sprintf('|              Found:    %s', $content['found']).\PHP_EOL;
                }
                $shouldBeClosed = true;
            }
            if ($shouldBeClosed) {
                echo str_repeat('-', 80).\PHP_EOL;
            }
        }
    }

    function textColorGreen()
    {
        echo "\033[32m";
    }

    function textColorRed()
    {
        echo "\033[31m";
    }

    function textColorNormal()
    {
        echo "\033[0m";
    }
  Carbon-vendor-symfony-translation-Resources-data-parents.json: |
    {
        "az_Cyrl": "root",
        "bs_Cyrl": "root",
        "en_150": "en_001",
        "en_AG": "en_001",
        "en_AI": "en_001",
        "en_AT": "en_150",
        "en_AU": "en_001",
        "en_BB": "en_001",
        "en_BE": "en_150",
        "en_BM": "en_001",
        "en_BS": "en_001",
        "en_BW": "en_001",
        "en_BZ": "en_001",
        "en_CA": "en_001",
        "en_CC": "en_001",
        "en_CH": "en_150",
        "en_CK": "en_001",
        "en_CM": "en_001",
        "en_CX": "en_001",
        "en_CY": "en_001",
        "en_DE": "en_150",
        "en_DG": "en_001",
        "en_DK": "en_150",
        "en_DM": "en_001",
        "en_ER": "en_001",
        "en_FI": "en_150",
        "en_FJ": "en_001",
        "en_FK": "en_001",
        "en_FM": "en_001",
        "en_GB": "en_001",
        "en_GD": "en_001",
        "en_GG": "en_001",
        "en_GH": "en_001",
        "en_GI": "en_001",
        "en_GM": "en_001",
        "en_GY": "en_001",
        "en_HK": "en_001",
        "en_IE": "en_001",
        "en_IL": "en_001",
        "en_IM": "en_001",
        "en_IN": "en_001",
        "en_IO": "en_001",
        "en_JE": "en_001",
        "en_JM": "en_001",
        "en_KE": "en_001",
        "en_KI": "en_001",
        "en_KN": "en_001",
        "en_KY": "en_001",
        "en_LC": "en_001",
        "en_LR": "en_001",
        "en_LS": "en_001",
        "en_MG": "en_001",
        "en_MO": "en_001",
        "en_MS": "en_001",
        "en_MT": "en_001",
        "en_MU": "en_001",
        "en_MW": "en_001",
        "en_MY": "en_001",
        "en_NA": "en_001",
        "en_NF": "en_001",
        "en_NG": "en_001",
        "en_NL": "en_150",
        "en_NR": "en_001",
        "en_NU": "en_001",
        "en_NZ": "en_001",
        "en_PG": "en_001",
        "en_PH": "en_001",
        "en_PK": "en_001",
        "en_PN": "en_001",
        "en_PW": "en_001",
        "en_RW": "en_001",
        "en_SB": "en_001",
        "en_SC": "en_001",
        "en_SD": "en_001",
        "en_SE": "en_150",
        "en_SG": "en_001",
        "en_SH": "en_001",
        "en_SI": "en_150",
        "en_SL": "en_001",
        "en_SS": "en_001",
        "en_SX": "en_001",
        "en_SZ": "en_001",
        "en_TC": "en_001",
        "en_TK": "en_001",
        "en_TO": "en_001",
        "en_TT": "en_001",
        "en_TV": "en_001",
        "en_TZ": "en_001",
        "en_UG": "en_001",
        "en_VC": "en_001",
        "en_VG": "en_001",
        "en_VU": "en_001",
        "en_WS": "en_001",
        "en_ZA": "en_001",
        "en_ZM": "en_001",
        "en_ZW": "en_001",
        "es_AR": "es_419",
        "es_BO": "es_419",
        "es_BR": "es_419",
        "es_BZ": "es_419",
        "es_CL": "es_419",
        "es_CO": "es_419",
        "es_CR": "es_419",
        "es_CU": "es_419",
        "es_DO": "es_419",
        "es_EC": "es_419",
        "es_GT": "es_419",
        "es_HN": "es_419",
        "es_MX": "es_419",
        "es_NI": "es_419",
        "es_PA": "es_419",
        "es_PE": "es_419",
        "es_PR": "es_419",
        "es_PY": "es_419",
        "es_SV": "es_419",
        "es_US": "es_419",
        "es_UY": "es_419",
        "es_VE": "es_419",
        "ff_Adlm": "root",
        "pa_Arab": "root",
        "pt_AO": "pt_PT",
        "pt_CH": "pt_PT",
        "pt_CV": "pt_PT",
        "pt_GQ": "pt_PT",
        "pt_GW": "pt_PT",
        "pt_LU": "pt_PT",
        "pt_MO": "pt_PT",
        "pt_MZ": "pt_PT",
        "pt_ST": "pt_PT",
        "pt_TL": "pt_PT",
        "sd_Deva": "root",
        "sr_Latn": "root",
        "uz_Arab": "root",
        "uz_Cyrl": "root",
        "zh_Hant": "root",
        "zh_Hant_MO": "zh_Hant_HK"
    }
  Carbon-vendor-symfony-translation-Writer-TranslationWriter.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\Writer;

    use Symfony\Component\Translation\Dumper\DumperInterface;
    use Symfony\Component\Translation\Exception\InvalidArgumentException;
    use Symfony\Component\Translation\Exception\RuntimeException;
    use Symfony\Component\Translation\MessageCatalogue;

    /**
     * TranslationWriter writes translation messages.
     *
     * @author Michel Salib <michelsalib@hotmail.com>
     */
    class TranslationWriter implements TranslationWriterInterface
    {
        private $dumpers = [];

        /**
         * Adds a dumper to the writer.
         *
         * @param string $format The format of the dumper
         */
        public function addDumper($format, DumperInterface $dumper)
        {
            $this->dumpers[$format] = $dumper;
        }

        /**
         * Disables dumper backup.
         *
         * @deprecated since Symfony 4.1
         */
        public function disableBackup()
        {
            @trigger_error(sprintf('The "%s()" method is deprecated since Symfony 4.1.', __METHOD__), \E_USER_DEPRECATED);

            foreach ($this->dumpers as $dumper) {
                if (method_exists($dumper, 'setBackup')) {
                    $dumper->setBackup(false);
                }
            }
        }

        /**
         * Obtains the list of supported formats.
         *
         * @return array
         */
        public function getFormats()
        {
            return array_keys($this->dumpers);
        }

        /**
         * Writes translation from the catalogue according to the selected format.
         *
         * @param string $format  The format to use to dump the messages
         * @param array  $options Options that are passed to the dumper
         *
         * @throws InvalidArgumentException
         */
        public function write(MessageCatalogue $catalogue, $format, $options = [])
        {
            if (!isset($this->dumpers[$format])) {
                throw new InvalidArgumentException(sprintf('There is no dumper associated with format "%s".', $format));
            }

            // get the right dumper
            $dumper = $this->dumpers[$format];

            if (isset($options['path']) && !is_dir($options['path']) && !@mkdir($options['path'], 0777, true) && !is_dir($options['path'])) {
                throw new RuntimeException(sprintf('Translation Writer was not able to create directory "%s".', $options['path']));
            }

            // save
            $dumper->dump($catalogue, $options);
        }
    }
  Carbon-vendor-symfony-translation-Writer-TranslationWriterInterface.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\Writer;

    use Symfony\Component\Translation\Exception\InvalidArgumentException;
    use Symfony\Component\Translation\MessageCatalogue;

    /**
     * TranslationWriter writes translation messages.
     *
     * @author Michel Salib <michelsalib@hotmail.com>
     */
    interface TranslationWriterInterface
    {
        /**
         * Writes translation from the catalogue according to the selected format.
         *
         * @param string $format  The format to use to dump the messages
         * @param array  $options Options that are passed to the dumper
         *
         * @throws InvalidArgumentException
         */
        public function write(MessageCatalogue $catalogue, $format, $options = []);
    }
  Carbon-vendor-symfony-translation-contracts-.gitignore: |
    vendor/
    composer.lock
    phpunit.xml
  Carbon-vendor-symfony-translation-contracts-LICENSE: |
    Copyright (c) 2018-2020 Fabien Potencier

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished
    to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
  Carbon-vendor-symfony-translation-contracts-LocaleAwareInterface.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Contracts\Translation;

    interface LocaleAwareInterface
    {
        /**
         * Sets the current locale.
         *
         * @param string $locale The locale
         *
         * @throws \InvalidArgumentException If the locale contains invalid characters
         */
        public function setLocale($locale);

        /**
         * Returns the current locale.
         *
         * @return string The locale
         */
        public function getLocale();
    }
  Carbon-vendor-symfony-translation-contracts-README.md: |
    Symfony Translation Contracts
    =============================

    A set of abstractions extracted out of the Symfony components.

    Can be used to build on semantics that the Symfony components proved useful - and
    that already have battle tested implementations.

    See https://github.com/symfony/contracts/blob/master/README.md for more information.
  Carbon-vendor-symfony-translation-contracts-Test-TranslatorTest.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Contracts\Translation\Test;

    use PHPUnit\Framework\TestCase;
    use Symfony\Contracts\Translation\TranslatorInterface;
    use Symfony\Contracts\Translation\TranslatorTrait;

    /**
     * Test should cover all languages mentioned on http://translate.sourceforge.net/wiki/l10n/pluralforms
     * and Plural forms mentioned on http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms.
     *
     * See also https://developer.mozilla.org/en/Localization_and_Plurals which mentions 15 rules having a maximum of 6 forms.
     * The mozilla code is also interesting to check for.
     *
     * As mentioned by chx http://drupal.org/node/1273968 we can cover all by testing number from 0 to 199
     *
     * The goal to cover all languages is to far fetched so this test case is smaller.
     *
     * @author Clemens Tolboom clemens@build2be.nl
     */
    class TranslatorTest extends TestCase
    {
        public function getTranslator()
        {
            return new class() implements TranslatorInterface {
                use TranslatorTrait;
            };
        }

        /**
         * @dataProvider getTransTests
         */
        public function testTrans($expected, $id, $parameters)
        {
            $translator = $this->getTranslator();

            $this->assertEquals($expected, $translator->trans($id, $parameters));
        }

        /**
         * @dataProvider getTransChoiceTests
         */
        public function testTransChoiceWithExplicitLocale($expected, $id, $number)
        {
            $translator = $this->getTranslator();
            $translator->setLocale('en');

            $this->assertEquals($expected, $translator->trans($id, ['%count%' => $number]));
        }

        /**
         * @dataProvider getTransChoiceTests
         */
        public function testTransChoiceWithDefaultLocale($expected, $id, $number)
        {
            \Locale::setDefault('en');

            $translator = $this->getTranslator();

            $this->assertEquals($expected, $translator->trans($id, ['%count%' => $number]));
        }

        public function testGetSetLocale()
        {
            $translator = $this->getTranslator();
            $translator->setLocale('en');

            $this->assertEquals('en', $translator->getLocale());
        }

        /**
         * @requires extension intl
         */
        public function testGetLocaleReturnsDefaultLocaleIfNotSet()
        {
            $translator = $this->getTranslator();

            \Locale::setDefault('pt_BR');
            $this->assertEquals('pt_BR', $translator->getLocale());

            \Locale::setDefault('en');
            $this->assertEquals('en', $translator->getLocale());
        }

        public function getTransTests()
        {
            return [
                ['Symfony is great!', 'Symfony is great!', []],
                ['Symfony is awesome!', 'Symfony is %what%!', ['%what%' => 'awesome']],
            ];
        }

        public function getTransChoiceTests()
        {
            return [
                ['There are no apples', '{0} There are no apples|{1} There is one apple|]1,Inf] There are %count% apples', 0],
                ['There is one apple', '{0} There are no apples|{1} There is one apple|]1,Inf] There are %count% apples', 1],
                ['There are 10 apples', '{0} There are no apples|{1} There is one apple|]1,Inf] There are %count% apples', 10],
                ['There are 0 apples', 'There is 1 apple|There are %count% apples', 0],
                ['There is 1 apple', 'There is 1 apple|There are %count% apples', 1],
                ['There are 10 apples', 'There is 1 apple|There are %count% apples', 10],
                // custom validation messages may be coded with a fixed value
                ['There are 2 apples', 'There are 2 apples', 2],
            ];
        }

        /**
         * @dataProvider getInternal
         */
        public function testInterval($expected, $number, $interval)
        {
            $translator = $this->getTranslator();

            $this->assertEquals($expected, $translator->trans($interval.' foo|[1,Inf[ bar', ['%count%' => $number]));
        }

        public function getInternal()
        {
            return [
                ['foo', 3, '{1,2, 3 ,4}'],
                ['bar', 10, '{1,2, 3 ,4}'],
                ['bar', 3, '[1,2]'],
                ['foo', 1, '[1,2]'],
                ['foo', 2, '[1,2]'],
                ['bar', 1, ']1,2['],
                ['bar', 2, ']1,2['],
                ['foo', log(0), '[-Inf,2['],
                ['foo', -log(0), '[-2,+Inf]'],
            ];
        }

        /**
         * @dataProvider getChooseTests
         */
        public function testChoose($expected, $id, $number)
        {
            $translator = $this->getTranslator();

            $this->assertEquals($expected, $translator->trans($id, ['%count%' => $number]));
        }

        public function testReturnMessageIfExactlyOneStandardRuleIsGiven()
        {
            $translator = $this->getTranslator();

            $this->assertEquals('There are two apples', $translator->trans('There are two apples', ['%count%' => 2]));
        }

        /**
         * @dataProvider getNonMatchingMessages
         */
        public function testThrowExceptionIfMatchingMessageCannotBeFound($id, $number)
        {
            $this->expectException('InvalidArgumentException');
            $translator = $this->getTranslator();

            $translator->trans($id, ['%count%' => $number]);
        }

        public function getNonMatchingMessages()
        {
            return [
                ['{0} There are no apples|{1} There is one apple', 2],
                ['{1} There is one apple|]1,Inf] There are %count% apples', 0],
                ['{1} There is one apple|]2,Inf] There are %count% apples', 2],
                ['{0} There are no apples|There is one apple', 2],
            ];
        }

        public function getChooseTests()
        {
            return [
                ['There are no apples', '{0} There are no apples|{1} There is one apple|]1,Inf] There are %count% apples', 0],
                ['There are no apples', '{0}     There are no apples|{1} There is one apple|]1,Inf] There are %count% apples', 0],
                ['There are no apples', '{0}There are no apples|{1} There is one apple|]1,Inf] There are %count% apples', 0],

                ['There is one apple', '{0} There are no apples|{1} There is one apple|]1,Inf] There are %count% apples', 1],

                ['There are 10 apples', '{0} There are no apples|{1} There is one apple|]1,Inf] There are %count% apples', 10],
                ['There are 10 apples', '{0} There are no apples|{1} There is one apple|]1,Inf]There are %count% apples', 10],
                ['There are 10 apples', '{0} There are no apples|{1} There is one apple|]1,Inf]     There are %count% apples', 10],

                ['There are 0 apples', 'There is one apple|There are %count% apples', 0],
                ['There is one apple', 'There is one apple|There are %count% apples', 1],
                ['There are 10 apples', 'There is one apple|There are %count% apples', 10],

                ['There are 0 apples', 'one: There is one apple|more: There are %count% apples', 0],
                ['There is one apple', 'one: There is one apple|more: There are %count% apples', 1],
                ['There are 10 apples', 'one: There is one apple|more: There are %count% apples', 10],

                ['There are no apples', '{0} There are no apples|one: There is one apple|more: There are %count% apples', 0],
                ['There is one apple', '{0} There are no apples|one: There is one apple|more: There are %count% apples', 1],
                ['There are 10 apples', '{0} There are no apples|one: There is one apple|more: There are %count% apples', 10],

                ['', '{0}|{1} There is one apple|]1,Inf] There are %count% apples', 0],
                ['', '{0} There are no apples|{1}|]1,Inf] There are %count% apples', 1],

                // Indexed only tests which are Gettext PoFile* compatible strings.
                ['There are 0 apples', 'There is one apple|There are %count% apples', 0],
                ['There is one apple', 'There is one apple|There are %count% apples', 1],
                ['There are 2 apples', 'There is one apple|There are %count% apples', 2],

                // Tests for float numbers
                ['There is almost one apple', '{0} There are no apples|]0,1[ There is almost one apple|{1} There is one apple|[1,Inf] There is more than one apple', 0.7],
                ['There is one apple', '{0} There are no apples|]0,1[There are %count% apples|{1} There is one apple|[1,Inf] There is more than one apple', 1],
                ['There is more than one apple', '{0} There are no apples|]0,1[There are %count% apples|{1} There is one apple|[1,Inf] There is more than one apple', 1.7],
                ['There are no apples', '{0} There are no apples|]0,1[There are %count% apples|{1} There is one apple|[1,Inf] There is more than one apple', 0],
                ['There are no apples', '{0} There are no apples|]0,1[There are %count% apples|{1} There is one apple|[1,Inf] There is more than one apple', 0.0],
                ['There are no apples', '{0.0} There are no apples|]0,1[There are %count% apples|{1} There is one apple|[1,Inf] There is more than one apple', 0],

                // Test texts with new-lines
                // with double-quotes and \n in id & double-quotes and actual newlines in text
                ["This is a text with a\n            new-line in it. Selector = 0.", '{0}This is a text with a
                new-line in it. Selector = 0.|{1}This is a text with a
                new-line in it. Selector = 1.|[1,Inf]This is a text with a
                new-line in it. Selector > 1.', 0],
                // with double-quotes and \n in id and single-quotes and actual newlines in text
                ["This is a text with a\n            new-line in it. Selector = 1.", '{0}This is a text with a
                new-line in it. Selector = 0.|{1}This is a text with a
                new-line in it. Selector = 1.|[1,Inf]This is a text with a
                new-line in it. Selector > 1.', 1],
                ["This is a text with a\n            new-line in it. Selector > 1.", '{0}This is a text with a
                new-line in it. Selector = 0.|{1}This is a text with a
                new-line in it. Selector = 1.|[1,Inf]This is a text with a
                new-line in it. Selector > 1.', 5],
                // with double-quotes and id split accros lines
                ['This is a text with a
                new-line in it. Selector = 1.', '{0}This is a text with a
                new-line in it. Selector = 0.|{1}This is a text with a
                new-line in it. Selector = 1.|[1,Inf]This is a text with a
                new-line in it. Selector > 1.', 1],
                // with single-quotes and id split accros lines
                ['This is a text with a
                new-line in it. Selector > 1.', '{0}This is a text with a
                new-line in it. Selector = 0.|{1}This is a text with a
                new-line in it. Selector = 1.|[1,Inf]This is a text with a
                new-line in it. Selector > 1.', 5],
                // with single-quotes and \n in text
                ['This is a text with a\nnew-line in it. Selector = 0.', '{0}This is a text with a\nnew-line in it. Selector = 0.|{1}This is a text with a\nnew-line in it. Selector = 1.|[1,Inf]This is a text with a\nnew-line in it. Selector > 1.', 0],
                // with double-quotes and id split accros lines
                ["This is a text with a\nnew-line in it. Selector = 1.", "{0}This is a text with a\nnew-line in it. Selector = 0.|{1}This is a text with a\nnew-line in it. Selector = 1.|[1,Inf]This is a text with a\nnew-line in it. Selector > 1.", 1],
                // esacape pipe
                ['This is a text with | in it. Selector = 0.', '{0}This is a text with || in it. Selector = 0.|{1}This is a text with || in it. Selector = 1.', 0],
                // Empty plural set (2 plural forms) from a .PO file
                ['', '|', 1],
                // Empty plural set (3 plural forms) from a .PO file
                ['', '||', 1],
            ];
        }

        /**
         * @dataProvider failingLangcodes
         */
        public function testFailedLangcodes($nplural, $langCodes)
        {
            $matrix = $this->generateTestData($langCodes);
            $this->validateMatrix($nplural, $matrix, false);
        }

        /**
         * @dataProvider successLangcodes
         */
        public function testLangcodes($nplural, $langCodes)
        {
            $matrix = $this->generateTestData($langCodes);
            $this->validateMatrix($nplural, $matrix);
        }

        /**
         * This array should contain all currently known langcodes.
         *
         * As it is impossible to have this ever complete we should try as hard as possible to have it almost complete.
         *
         * @return array
         */
        public function successLangcodes()
        {
            return [
                ['1', ['ay', 'bo', 'cgg', 'dz', 'id', 'ja', 'jbo', 'ka', 'kk', 'km', 'ko', 'ky']],
                ['2', ['nl', 'fr', 'en', 'de', 'de_GE', 'hy', 'hy_AM']],
                ['3', ['be', 'bs', 'cs', 'hr']],
                ['4', ['cy', 'mt', 'sl']],
                ['6', ['ar']],
            ];
        }

        /**
         * This array should be at least empty within the near future.
         *
         * This both depends on a complete list trying to add above as understanding
         * the plural rules of the current failing languages.
         *
         * @return array with nplural together with langcodes
         */
        public function failingLangcodes()
        {
            return [
                ['1', ['fa']],
                ['2', ['jbo']],
                ['3', ['cbs']],
                ['4', ['gd', 'kw']],
                ['5', ['ga']],
            ];
        }

        /**
         * We validate only on the plural coverage. Thus the real rules is not tested.
         *
         * @param string $nplural       Plural expected
         * @param array  $matrix        Containing langcodes and their plural index values
         * @param bool   $expectSuccess
         */
        protected function validateMatrix($nplural, $matrix, $expectSuccess = true)
        {
            foreach ($matrix as $langCode => $data) {
                $indexes = array_flip($data);
                if ($expectSuccess) {
                    $this->assertEquals($nplural, \count($indexes), "Langcode '$langCode' has '$nplural' plural forms.");
                } else {
                    $this->assertNotEquals((int) $nplural, \count($indexes), "Langcode '$langCode' has '$nplural' plural forms.");
                }
            }
        }

        protected function generateTestData($langCodes)
        {
            $translator = new class() {
                use TranslatorTrait {
                    getPluralizationRule as public;
                }
            };

            $matrix = [];
            foreach ($langCodes as $langCode) {
                for ($count = 0; $count < 200; ++$count) {
                    $plural = $translator->getPluralizationRule($count, $langCode);
                    $matrix[$langCode][$count] = $plural;
                }
            }

            return $matrix;
        }
    }
  Carbon-vendor-symfony-translation-contracts-TranslatorInterface.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Contracts\Translation;

    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface TranslatorInterface
    {
        /**
         * Translates the given message.
         *
         * When a number is provided as a parameter named "%count%", the message is parsed for plural
         * forms and a translation is chosen according to this number using the following rules:
         *
         * Given a message with different plural translations separated by a
         * pipe (|), this method returns the correct portion of the message based
         * on the given number, locale and the pluralization rules in the message
         * itself.
         *
         * The message supports two different types of pluralization rules:
         *
         * interval: {0} There are no apples|{1} There is one apple|]1,Inf] There are %count% apples
         * indexed:  There is one apple|There are %count% apples
         *
         * The indexed solution can also contain labels (e.g. one: There is one apple).
         * This is purely for making the translations more clear - it does not
         * affect the functionality.
         *
         * The two methods can also be mixed:
         *     {0} There are no apples|one: There is one apple|more: There are %count% apples
         *
         * An interval can represent a finite set of numbers:
         *  {1,2,3,4}
         *
         * An interval can represent numbers between two numbers:
         *  [1, +Inf]
         *  ]-1,2[
         *
         * The left delimiter can be [ (inclusive) or ] (exclusive).
         * The right delimiter can be [ (exclusive) or ] (inclusive).
         * Beside numbers, you can use -Inf and +Inf for the infinite.
         *
         * @see https://en.wikipedia.org/wiki/ISO_31-11
         *
         * @param string      $id         The message id (may also be an object that can be cast to string)
         * @param array       $parameters An array of parameters for the message
         * @param string|null $domain     The domain for the message or null to use the default
         * @param string|null $locale     The locale or null to use the default
         *
         * @return string The translated string
         *
         * @throws \InvalidArgumentException If the locale contains invalid characters
         */
        public function trans($id, array $parameters = [], $domain = null, $locale = null);
    }
  Carbon-vendor-symfony-translation-contracts-TranslatorTrait.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Contracts\Translation;

    use Symfony\Component\Translation\Exception\InvalidArgumentException;

    /**
     * A trait to help implement TranslatorInterface and LocaleAwareInterface.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    trait TranslatorTrait
    {
        private $locale;

        /**
         * {@inheritdoc}
         */
        public function setLocale($locale)
        {
            $this->locale = (string) $locale;
        }

        /**
         * {@inheritdoc}
         */
        public function getLocale()
        {
            return $this->locale ?: \Locale::getDefault();
        }

        /**
         * {@inheritdoc}
         */
        public function trans($id, array $parameters = [], $domain = null, $locale = null)
        {
            if ('' === $id = (string) $id) {
                return '';
            }

            if (!isset($parameters['%count%']) || !is_numeric($parameters['%count%'])) {
                return strtr($id, $parameters);
            }

            $number = (float) $parameters['%count%'];
            $locale = (string) $locale ?: $this->getLocale();

            $parts = [];
            if (preg_match('/^\|++$/', $id)) {
                $parts = explode('|', $id);
            } elseif (preg_match_all('/(?:\|\||[^\|])++/', $id, $matches)) {
                $parts = $matches[0];
            }

            $intervalRegexp = <<<'EOF'
    /^(?P<interval>
        ({\s*
            (\-?\d+(\.\d+)?[\s*,\s*\-?\d+(\.\d+)?]*)
        \s*})

            |

        (?P<left_delimiter>[\[\]])
            \s*
            (?P<left>-Inf|\-?\d+(\.\d+)?)
            \s*,\s*
            (?P<right>\+?Inf|\-?\d+(\.\d+)?)
            \s*
        (?P<right_delimiter>[\[\]])
    )\s*(?P<message>.*?)$/xs
    EOF;

            $standardRules = [];
            foreach ($parts as $part) {
                $part = trim(str_replace('||', '|', $part));

                // try to match an explicit rule, then fallback to the standard ones
                if (preg_match($intervalRegexp, $part, $matches)) {
                    if ($matches[2]) {
                        foreach (explode(',', $matches[3]) as $n) {
                            if ($number == $n) {
                                return strtr($matches['message'], $parameters);
                            }
                        }
                    } else {
                        $leftNumber = '-Inf' === $matches['left'] ? -\INF : (float) $matches['left'];
                        $rightNumber = is_numeric($matches['right']) ? (float) $matches['right'] : \INF;

                        if (('[' === $matches['left_delimiter'] ? $number >= $leftNumber : $number > $leftNumber)
                            && (']' === $matches['right_delimiter'] ? $number <= $rightNumber : $number < $rightNumber)
                        ) {
                            return strtr($matches['message'], $parameters);
                        }
                    }
                } elseif (preg_match('/^\w+\:\s*(.*?)$/', $part, $matches)) {
                    $standardRules[] = $matches[1];
                } else {
                    $standardRules[] = $part;
                }
            }

            $position = $this->getPluralizationRule($number, $locale);

            if (!isset($standardRules[$position])) {
                // when there's exactly one rule given, and that rule is a standard
                // rule, use this rule
                if (1 === \count($parts) && isset($standardRules[0])) {
                    return strtr($standardRules[0], $parameters);
                }

                $message = sprintf('Unable to choose a translation for "%s" with locale "%s" for value "%d". Double check that this translation has the correct plural options (e.g. "There is one apple|There are %%count%% apples").', $id, $locale, $number);

                if (class_exists(InvalidArgumentException::class)) {
                    throw new InvalidArgumentException($message);
                }

                throw new \InvalidArgumentException($message);
            }

            return strtr($standardRules[$position], $parameters);
        }

        /**
         * Returns the plural position to use for the given locale and number.
         *
         * The plural rules are derived from code of the Zend Framework (2010-09-25),
         * which is subject to the new BSD license (http://framework.zend.com/license/new-bsd).
         * Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)
         */
        private function getPluralizationRule(int $number, string $locale): int
        {
            switch ('pt_BR' !== $locale && \strlen($locale) > 3 ? substr($locale, 0, strrpos($locale, '_')) : $locale) {
                case 'af':
                case 'bn':
                case 'bg':
                case 'ca':
                case 'da':
                case 'de':
                case 'el':
                case 'en':
                case 'eo':
                case 'es':
                case 'et':
                case 'eu':
                case 'fa':
                case 'fi':
                case 'fo':
                case 'fur':
                case 'fy':
                case 'gl':
                case 'gu':
                case 'ha':
                case 'he':
                case 'hu':
                case 'is':
                case 'it':
                case 'ku':
                case 'lb':
                case 'ml':
                case 'mn':
                case 'mr':
                case 'nah':
                case 'nb':
                case 'ne':
                case 'nl':
                case 'nn':
                case 'no':
                case 'oc':
                case 'om':
                case 'or':
                case 'pa':
                case 'pap':
                case 'ps':
                case 'pt':
                case 'so':
                case 'sq':
                case 'sv':
                case 'sw':
                case 'ta':
                case 'te':
                case 'tk':
                case 'ur':
                case 'zu':
                    return (1 == $number) ? 0 : 1;

                case 'am':
                case 'bh':
                case 'fil':
                case 'fr':
                case 'gun':
                case 'hi':
                case 'hy':
                case 'ln':
                case 'mg':
                case 'nso':
                case 'pt_BR':
                case 'ti':
                case 'wa':
                    return ((0 == $number) || (1 == $number)) ? 0 : 1;

                case 'be':
                case 'bs':
                case 'hr':
                case 'ru':
                case 'sh':
                case 'sr':
                case 'uk':
                    return ((1 == $number % 10) && (11 != $number % 100)) ? 0 : ((($number % 10 >= 2) && ($number % 10 <= 4) && (($number % 100 < 10) || ($number % 100 >= 20))) ? 1 : 2);

                case 'cs':
                case 'sk':
                    return (1 == $number) ? 0 : ((($number >= 2) && ($number <= 4)) ? 1 : 2);

                case 'ga':
                    return (1 == $number) ? 0 : ((2 == $number) ? 1 : 2);

                case 'lt':
                    return ((1 == $number % 10) && (11 != $number % 100)) ? 0 : ((($number % 10 >= 2) && (($number % 100 < 10) || ($number % 100 >= 20))) ? 1 : 2);

                case 'sl':
                    return (1 == $number % 100) ? 0 : ((2 == $number % 100) ? 1 : (((3 == $number % 100) || (4 == $number % 100)) ? 2 : 3));

                case 'mk':
                    return (1 == $number % 10) ? 0 : 1;

                case 'mt':
                    return (1 == $number) ? 0 : (((0 == $number) || (($number % 100 > 1) && ($number % 100 < 11))) ? 1 : ((($number % 100 > 10) && ($number % 100 < 20)) ? 2 : 3));

                case 'lv':
                    return (0 == $number) ? 0 : (((1 == $number % 10) && (11 != $number % 100)) ? 1 : 2);

                case 'pl':
                    return (1 == $number) ? 0 : ((($number % 10 >= 2) && ($number % 10 <= 4) && (($number % 100 < 12) || ($number % 100 > 14))) ? 1 : 2);

                case 'cy':
                    return (1 == $number) ? 0 : ((2 == $number) ? 1 : (((8 == $number) || (11 == $number)) ? 2 : 3));

                case 'ro':
                    return (1 == $number) ? 0 : (((0 == $number) || (($number % 100 > 0) && ($number % 100 < 20))) ? 1 : 2);

                case 'ar':
                    return (0 == $number) ? 0 : ((1 == $number) ? 1 : ((2 == $number) ? 2 : ((($number % 100 >= 3) && ($number % 100 <= 10)) ? 3 : ((($number % 100 >= 11) && ($number % 100 <= 99)) ? 4 : 5))));

                default:
                    return 0;
            }
        }
    }
  Carbon-vendor-symfony-translation-contracts-composer.json: |
    {
        "name": "symfony/translation-contracts",
        "type": "library",
        "description": "Generic abstractions related to translation",
        "keywords": ["abstractions", "contracts", "decoupling", "interfaces", "interoperability", "standards"],
        "homepage": "https://symfony.com",
        "license": "MIT",
        "authors": [
            {
                "name": "Nicolas Grekas",
                "email": "p@tchwork.com"
            },
            {
                "name": "Symfony Community",
                "homepage": "https://symfony.com/contributors"
            }
        ],
        "require": {
            "php": ">=7.1.3"
        },
        "suggest": {
            "symfony/translation-implementation": ""
        },
        "autoload": {
            "psr-4": { "Symfony\\Contracts\\Translation\\": "" }
        },
        "minimum-stability": "dev",
        "extra": {
            "branch-alias": {
                "dev-master": "1.1-dev"
            },
            "thanks": {
                "name": "symfony/contracts",
                "url": "https://github.com/symfony/contracts"
            }
        }
    }
  assets-style-_navmenu.scss: ".navmenu {\r\n    position: relative;\r\n    display:
    flex;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    height:
    60px;\r\n    & > i {\r\n        display: none;\r\n    }\r\n    &-list {\r\n        display:
    flex;\r\n        align-items: center;\r\n        width: 80%;\r\n        cursor:
    pointer;\r\n        & > i {\r\n            display: none;\r\n        }\r\n        .navmenu-items
    {\r\n            padding: 10px 15px;\r\n            &-link {\r\n                @include
    link();\r\n                color: $black-clr;\r\n            }\r\n        }\r\n
    \       .navmenu-items:hover {\r\n            border-top: 3px solid #000;\r\n
    \       }\r\n        .navmenu-items:hover > a {\r\n            color: $txt-clr1;\r\n
    \       }\r\n        .navmenu-items-dad {\r\n            position: relative;\r\n
    \           padding: 10px 15px;\r\n            &:hover > .navmenu-items-chill
    {\r\n                display: block;\r\n            }\r\n            .navmenu-items-chill
    {\r\n                display: none;\r\n                position: absolute;\r\n
    \               width: 200px;\r\n                top: 100%;\r\n                left:
    0;\r\n                background-color: #fff;\r\n                z-index: 10;\r\n
    \               border-radius: 2px;\r\n                box-shadow: 0 0 3px rgba(0,
    0, 0, 0.5);\r\n                animation: Opacity 0.3s linear;\r\n                .navmenu-item
    {\r\n                    padding: 10px 0px 10px 15px;\r\n                    font-size:
    14px;\r\n                    border-bottom: 1px solid rgba(0, 0, 0, 0.3);\r\n
    \                   &-link {\r\n                        color: $black-clr;\r\n
    \                       @include link();\r\n                        &:hover {\r\n
    \                           color: $txt-clr1;\r\n                        }\r\n
    \                   }\r\n                }\r\n            }\r\n        }\r\n        .navmenu-items-dad:hover
    {\r\n            border-top: 3px solid #000;\r\n        }\r\n        .navmenu-items-dad:hover
    > a {\r\n            color: $txt-clr1;\r\n        }\r\n    }\r\n    &-icon-search
    {\r\n        position: absolute;\r\n        width: 40px;\r\n        height: 40px;\r\n
    \       top: 50%;\r\n        transform: translateY(-50%);\r\n        right: 20%;\r\n
    \       border: none;\r\n        border-radius: 100%;\r\n        background-color:
    #000;\r\n        font-size: 15px;\r\n        color: #fff;\r\n        cursor: pointer;\r\n
    \   }\r\n    &-search {\r\n        position: absolute;\r\n        width: 300px;\r\n
    \       max-height: 45px;\r\n        top: 100%;\r\n        left: 65%;\r\n        transform:
    translateX(-50%);\r\n        display: none;\r\n        padding: 10px 5px;\r\n
    \       border: 1px solid #333;\r\n        border-radius: 25px;\r\n        animation:
    Opacity 0.3s linear;\r\n        background: #fff;\r\n        z-index: 10;\r\n
    \       overflow: hidden;\r\n        .form-search {\r\n            #search {\r\n
    \               padding: 0 10px;\r\n                border: none;\r\n                outline:
    none;\r\n                width: 250px;\r\n            }\r\n            .navmenu-search-icon
    {\r\n                position: absolute;\r\n                top: 50%;\r\n                right:
    0;\r\n                transform: translateY(-50%);\r\n                padding:
    14px;\r\n                border: none;\r\n                background-color: #333;\r\n
    \               border-radius: 0 25px 25px 0;\r\n                cursor: pointer;\r\n
    \               & > i {\r\n                    font-size: 16px;\r\n                    color:
    #fff;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    &-search.show
    {\r\n        display: block;\r\n    }\r\n    &-icon {\r\n        &-list {\r\n
    \           display: flex;\r\n            align-items: center;\r\n            margin-bottom:
    0;\r\n            .navmenu-icon-item {\r\n                padding: 0 6px;\r\n
    \               font-size: 20px;\r\n                .navmenu-icon-link {\r\n                    color:
    $black-clr;\r\n                    &:hover {\r\n                        color:
    $txt-clr1;\r\n                    }\r\n                }\r\n            }\r\n
    \       }\r\n    }\r\n}\r\n.navmenu.sticky {\r\n    position: fixed;\r\n    top:
    0;\r\n    left: 0;\r\n    right: 0;\r\n    background-color: #fff;\r\n    z-index:
    10;\r\n    box-shadow: rgba(0, 0, 0, 0.4) 0px 7px 29px 0px;\r\n}\r\n"
  database-qlbandoannhanh.sql: "-- Không tạo lại user nếu đã có\nCREATE USER IF NOT
    EXISTS 'app_user'@'%' IDENTIFIED BY 'userpass';\n\n-- Gán quyền cho user app_user\nGRANT
    ALL PRIVILEGES ON qlbandoannhanh.* TO 'app_user'@'%' WITH GRANT OPTION;\nFLUSH
    PRIVILEGES;\n\n-- Tạo cơ sở dữ liệu với mã hóa UTF-8 để hỗ trợ tiếng Việt\nCREATE
    DATABASE IF NOT EXISTS qlbandoannhanh \nCHARACTER SET utf8mb4 \nCOLLATE utf8mb4_unicode_ci;\n\n--
    Sử dụng cơ sở dữ liệu\nUSE qlbandoannhanh;\n\n-- Kiểm tra quyền của user (tùy
    chọn, để debug)\nSHOW GRANTS FOR 'app_user'@'%';\n\nCREATE TABLE `tbl_admin` (\n
    \ `id_admin` int(11) NOT NULL,\n  `nameadmin` varchar(200) NOT NULL,\n  `username`
    varchar(100) NOT NULL,\n  `password` varchar(100) NOT NULL,\n  `admin_status`
    int(11) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n--\n--
    Đang đổ dữ liệu cho bảng `tbl_admin`\n--\n\nINSERT INTO `tbl_admin` (`id_admin`,
    `nameadmin`, `username`, `password`, `admin_status`) VALUES\n(1, 'Nguyễn Huy Hoàng',
    'dino', '25f9e794323b453885f5181f1b624d0b', 1),\n(2, 'Thái Văn Hà', 'vanha', '25f9e794323b453885f5181f1b624d0b',
    1),\n(3, 'Đặng Phương Dung', 'pdung', '25f9e794323b453885f5181f1b624d0b', 1);\n\n--
    --------------------------------------------------------\n\n--\n-- Cấu trúc bảng
    cho bảng `tbl_baiviet`\n--\n\nCREATE TABLE `tbl_baiviet` (\n  `id_baiviet` int(11)
    NOT NULL,\n  `tieude` varchar(250) NOT NULL,\n  `img_baiviet` varchar(100) NOT
    NULL,\n  `tomtat` tinytext NOT NULL,\n  `noidung` longtext NOT NULL,\n  `ngayviet`
    date NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n--
    --------------------------------------------------------\n\n--\n-- Cấu trúc bảng
    cho bảng `tbl_cart_details`\n--\n\nCREATE TABLE `tbl_cart_details` (\n  `id_cart_details`
    int(11) NOT NULL,\n  `code_cart` varchar(20) NOT NULL,\n  `id_sp` int(11) NOT
    NULL,\n  `soluongmua` int(11) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
    COLLATE=utf8mb4_unicode_ci;\n\n--\n-- Đang đổ dữ liệu cho bảng `tbl_cart_details`\n--\n\nINSERT
    INTO `tbl_cart_details` (`id_cart_details`, `code_cart`, `id_sp`, `soluongmua`)
    VALUES\n(1, '2366', 1, 1),\n(2, '7877', 2, 1),\n(3, '8851', 3, 1),\n(4, '8851',
    1, 1),\n(5, '3959', 2, 2),\n(6, '3959', 1, 1),\n(7, '6223', 2, 1),\n(8, '6375',
    3, 1),\n(9, '4459', 4, 1),\n(10, '9665', 2, 1),\n(11, '2477', 19, 1),\n(12, '4749',
    9, 1),\n(13, '7138', 1, 1),\n(14, '4515', 1, 1),\n(15, '2520', 1, 1),\n(16, '1610',
    9, 1),\n(17, '7777', 3, 1),\n(18, '59', 4, 1),\n(19, '3011', 2, 1),\n(20, '3011',
    3, 1),\n(21, '3011', 12, 1),\n(22, '4481', 9, 1),\n(23, '4481', 10, 1),\n(24,
    '4481', 11, 1),\n(25, '6933', 20, 1),\n(26, '6933', 23, 1),\n(27, '3809', 4, 1),\n(28,
    '6219', 2, 1),\n(29, '8610', 1, 1),\n(30, '3333', 2, 1),\n(31, '3333', 3, 1),\n(32,
    '3333', 11, 1),\n(33, '1853', 38, 2),\n(34, '1853', 22, 1);\n\n-- --------------------------------------------------------\n\n--\n--
    Cấu trúc bảng cho bảng `tbl_cart_registered`\n--\n\nCREATE TABLE `tbl_cart_registered`
    (\n  `id_cart_registered` int(11) NOT NULL,\n  `id_khachhang` int(11) NOT NULL,\n
    \ `code_cart` varchar(20) NOT NULL,\n  `cart_status` int(11) NOT NULL,\n  `cart_date`
    varchar(50) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n--\n--
    Đang đổ dữ liệu cho bảng `tbl_cart_registered`\n--\n\nINSERT INTO `tbl_cart_registered`
    (`id_cart_registered`, `id_khachhang`, `code_cart`, `cart_status`, `cart_date`)
    VALUES\n(7, 4, '2366', 0, ''),\n(9, 5, '7877', 0, ''),\n(12, 8, '6223', 0, '2021-12-05
    09:53:22'),\n(13, 8, '6375', 0, '2021-12-05 09:53:58'),\n(18, 9, '2477', 0, '2021-12-07
    07:58:44'),\n(19, 9, '4749', 0, '2021-12-07 08:02:32'),\n(20, 9, '7138', 0, '2021-12-07
    08:11:12'),\n(21, 9, '4515', 0, '2021-12-07 08:16:10'),\n(22, 9, '2520', 0, '2021-12-07
    08:17:13'),\n(23, 10, '3011', 0, '2021-12-15'),\n(24, 10, '4481', 0, '2021-12-15'),\n(25,
    10, '6933', 0, '2021-12-15');\n\n-- --------------------------------------------------------\n\n--\n--
    Cấu trúc bảng cho bảng `tbl_cart_unregistered`\n--\n\nCREATE TABLE `tbl_cart_unregistered`
    (\n  `id_cart_unregistered` int(11) NOT NULL,\n  `tenkh` varchar(250) NOT NULL,\n
    \ `diachi` varchar(250) NOT NULL,\n  `sdt` varchar(20) NOT NULL,\n  `email` varchar(250)
    NOT NULL,\n  `noidung` longtext NOT NULL,\n  `code_cart` varchar(10) NOT NULL,\n
    \ `cart_status` int(11) NOT NULL,\n  `cart_date` varchar(50) NOT NULL\n) ENGINE=InnoDB
    DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n--\n-- Đang đổ dữ liệu
    cho bảng `tbl_cart_unregistered`\n--\n\nINSERT INTO `tbl_cart_unregistered` (`id_cart_unregistered`,
    `tenkh`, `diachi`, `sdt`, `email`, `noidung`, `code_cart`, `cart_status`, `cart_date`)
    VALUES\n(5, 'Thái Văn Hà', 'Nghệ An', '01564578978', 'hadz@gmail.com', 'ship nhanh
    nha shop', '3959', 0, ''),\n(6, 'ha', 'HN', '0372216266', 'dino@gmail.com', 'wfhoiwdf',
    '9292', 0, '2021-12-05 09:58:12'),\n(7, 'ha', 'HN', '0372216266', 'dino@gmail.com',
    'wfhoiwdf', '9984', 0, '2021-12-05 09:59:37'),\n(8, 'ha', 'HN', '0372216266',
    'dino@gmail.com', 'wfhoiwdf', '2187', 0, '2021-12-05 09:59:41'),\n(9, 'ha', 'HN',
    '0372216266', 'dino@gmail.com', 'wfhoiwdf', '5968', 0, '2021-12-05 10:00:40'),\n(10,
    'ha', 'HN', '0372216266', 'dino@gmail.com', 'wfhoiwdf', '9150', 0, '2021-12-05
    10:00:43'),\n(11, 'Thái Văn Hà ', 'NA', '0372216266', 'thaivanha739@gmail.com',
    'xcgjgj', '4459', 0, '2021-12-05 10:01:14'),\n(12, 'Thái Văn Hà ', 'NA', '0372216266',
    'thaivanha739@gmail.com', 'xcgjgj', '6524', 0, '2021-12-05 10:04:58'),\n(13, 'Thái
    Văn Hà ', 'DL', '0372216266', 'dino@gmail.com', 'hahahahah', '9665', 0, '2021-12-07
    07:53:29'),\n(14, 'Thái Văn Hà ', 'NA', '0372216266', 'thaivanha739@gmail.com',
    'sioufgbws', '1610', 0, '2021-12-07 08:22:10'),\n(15, 'Thái Văn Hà ', 'NA',
    '0372216266', 'thaivanha739@gmail.com', 'sioufgbws', '9964', 0, '2021-12-07 08:22:39'),\n(16,
    'fsfsdf', 'sdfsdfdsf', 'fsdf', 'sdfsdfdsf', 'sdfsdfdsfsd', '7777', 0, '2021-12-15'),\n(17,
    'Đặng Phương Dung', 'NA', '0213544684', 'pdung@gmail.com', 'ship nhanh nha shop',
    '59', 0, '2021-12-15'),\n(18, 'tesst', 'test', 'test', 'test', 'test\nDòng thứ
    hai\nDòng thứ ba', '3809', 0, '2021-12-15'),\n(19, 'test', 'test', 'test', 'test',
    'ship nhanh nhé shop', '6219', 0, '2021-12-16'),\n(20, 'tesst', 'tesst', 'test',
    'tesst', '', '8610', 0, '2021-12-16'),\n(21, 'Lưu Công Lộc', 'Nam Định', '02464126545',
    'locluu@gmail.com', 'Ship nhanh nhé shop', '3333', 0, '2021-12-18'),\n(22, 'test11',
    'qn', '012424141', 'gj@gmail.com', 'Nhanh cần ăn gấp', '1853', 1, '2024-10-30');\n\n--
    --------------------------------------------------------\n\n--\n-- Cấu trúc bảng
    cho bảng `tbl_comments`\n--\n\nCREATE TABLE `tbl_comments` (\n  `id_cmt` int(11)
    NOT NULL,\n  `name` varchar(250) NOT NULL,\n  `name_email` varchar(250) NOT NULL,\n
    \ `noidung` longtext NOT NULL,\n  `id_sp` int(11) NOT NULL\n) ENGINE=InnoDB DEFAULT
    CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n--\n-- Đang đổ dữ liệu cho bảng
    `tbl_comments`\n--\n\nINSERT INTO `tbl_comments` (`id_cmt`, `name`, `name_email`,
    `noidung`, `id_sp`) VALUES\n(2, 'Dino', 'dino@gmail.com', 'Hàng rất là ngon nha
    Shop. Ship hàng nhanh gọn', 2),\n(3, 'Văn Hà', 'hangu@gmail.com', 'Sản phẩm rất
    tốt', 1),\n(5, 'locdz', 'locdz@gmail.com', 'hàng rất tốt', 2),\n(6, 'binhdz',
    'binhdz@gmail.com', 'hàng ship nhanh', 2),\n(7, 'Hà dz', 'hadz@gmail.com', 'sản
    phẩm rất tốt nha shop <3', 1),\n(11, 'huy', 'huy@gmail.com', 'hàng tuyệt vời',
    1);\n\n-- --------------------------------------------------------\n\n--\n-- Cấu
    trúc bảng cho bảng `tbl_dangky`\n--\n\nCREATE TABLE `tbl_dangky` (\n  `id_khachhang`
    int(11) NOT NULL,\n  `tenkhachhang` varchar(250) NOT NULL,\n  `email` varchar(100)
    NOT NULL,\n  `diachi` varchar(250) NOT NULL,\n  `matkhau` varchar(250) NOT NULL,\n
    \ `dienthoai` varchar(50) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n--\n--
    Đang đổ dữ liệu cho bảng `tbl_dangky`\n--\n\nINSERT INTO `tbl_dangky` (`id_khachhang`,
    `tenkhachhang`, `email`, `diachi`, `matkhau`, `dienthoai`) VALUES\n(3, 'Huy Hoàng',
    'hoang@gmail.com', 'Hải Dương', 'e10adc3949ba59abbe56e057f20f883e', '0867699706'),\n(4,
    'Dino', 'huy43412@gmail.com', 'Hải Dương', 'e10adc3949ba59abbe56e057f20f883e',
    '0867699706'),\n(5, 'Lưu Công Lộc', 'locdz@gmail.com', 'Nam Định', 'e10adc3949ba59abbe56e057f20f883e',
    '0154568789'),\n(7, 'Van ha', 'vanha1@gmail.com', 'NA', 'e10adc3949ba59abbe56e057f20f883e',
    '0372216266'),\n(8, 'ha van', 'vanha2@gmail.com', 'HN', 'e10adc3949ba59abbe56e057f20f883e',
    '0372216266'),\n(9, 'Thái Văn Hà', 'vanha6@gmail.com', 'TS', 'e10adc3949ba59abbe56e057f20f883e',
    '0372216266'),\n(10, 'Đặng Phương Dung', 'pdung@gmail.com', 'NA', 'e10adc3949ba59abbe56e057f20f883e',
    '04542215465'),\n(11, 'test', 'test@gmail.com', 'test', 'e10adc3949ba59abbe56e057f20f883e',
    'test'),\n(12, 'ssss', 'hoang@gmail.com', '123', '202cb962ac59075b964b07152d234b70',
    '1234'),\n(13, 'Nguyễn Vũ Hiệp', 'ad@gmail.com', 'Quảng Ninh', 'e10adc3949ba59abbe56e057f20f883e',
    '0789388656'),\n(14, 'admin', 'admin@gmail.com', 'QN', '21232f297a57a5a743894a0e4a801fc3',
    '195713985'),\n(15, 'thai anh', 'thaianh@gmail.com', 'Ha Noii', 'e10adc3949ba59abbe56e057f20f883e',
    '12323');\n\n-- --------------------------------------------------------\n\n--\n--
    Cấu trúc bảng cho bảng `tbl_danhmuc`\n--\n\nCREATE TABLE `tbl_danhmuc` (\n  `id_danhmuc`
    int(11) NOT NULL,\n  `tendanhmuc` varchar(200) NOT NULL,\n  `thutu` int(10) NOT
    NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n--\n--
    Đang đổ dữ liệu cho bảng `tbl_danhmuc`\n--\n\nINSERT INTO `tbl_danhmuc` (`id_danhmuc`,
    `tendanhmuc`, `thutu`) VALUES\n(1, 'Burger & Sandwiches', 1),\n(2, 'Pizza', 2),\n(3,
    'Fried Chicken & Nuggets', 3),\n(4, 'Drinks & Desserts', 4),\n(5, 'Combo Meal',
    5);\n\n-- --------------------------------------------------------\n\n--\n-- Cấu
    trúc bảng cho bảng `tbl_phanhoi`\n--\n\nCREATE TABLE `tbl_phanhoi` (\n  `id_ph`
    int(11) NOT NULL,\n  `hoten` varchar(200) NOT NULL,\n  `email` varchar(200) NOT
    NULL,\n  `noidung` longtext NOT NULL,\n  `status` int(11) NOT NULL\n) ENGINE=InnoDB
    DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n--\n-- Đang đổ dữ liệu
    cho bảng `tbl_phanhoi`\n--\n\nINSERT INTO `tbl_phanhoi` (`id_ph`, `hoten`, `email`,
    `noidung`, `status`) VALUES\n(2, 'test', 'test@gmail.com', 'test', 0),\n(3, 'test',
    'test@gmail.com', 'test', 0),\n(4, 'test', 'test@gmail.com', 'test', 0),\n(5,
    'hello', 'hello@gmail.com', 'hello', 0),\n(6, 'test', 'test@gmail.com', 'test',
    0),\n(7, 'Hiep', 'a@gmail.com', 'Đồ ăn ngon', 0),\n(8, 'test0001', 'a@gmail.com',
    'do an ngon', 1),\n(9, 'Hiep1111', 'a@gmail.com', 'Ngon ', 1);\n\n-- --------------------------------------------------------\n\n--\n--
    Cấu trúc bảng cho bảng `tbl_sanpham`\n--\n\nCREATE TABLE `tbl_sanpham` (\n  `id_sp`
    int(11) NOT NULL,\n  `tensp` nvarchar(200) NOT NULL,\n  `masp` varchar(50) NOT
    NULL,\n  `giasp` varchar(100) NOT NULL,\n  `gia_sale` varchar(100) NOT NULL,\n
    \ `hinhanh` varchar(100) NOT NULL,\n  `mota` nvarchar(1000) NOT NULL,\n  `tinhtrang`
    int(11) NOT NULL,\n  `id_danhmuc` int(11) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
    COLLATE=utf8mb4_unicode_ci;\n\n--\n-- Đang đổ dữ liệu cho bảng `tbl_sanpham`\n--\n\nINSERT
    INTO `tbl_sanpham` (`id_sp`, `tensp`, `masp`, `giasp`, `gia_sale`, `hinhanh`,
    `mota`, `tinhtrang`, `id_danhmuc`) VALUES\n(1, 'Pulled Pork Sandwich', 'sw01',
    '3000', '2000', '1730278747_sw3.jpg', 'Pulled Pork Sandwich\\\\r\\\\nSandwich
    thịt heo xé nhỏ phủ sốt BBQ ngọt nhẹ, kèm với bắp cải trộn giòn, tạo nên hương
    vị đậm đà, thích hợp cho bữa ăn nhanh giàu protein.', 1, 1),\n(2, 'Pizza Thịt
    Nguội & Dứa', 'pz01', '7000', '0', '1730278684_pizza3.jpg', 'Pizza Thịt Nguội
    & Dứa\\\\r\\\\nPizza nhiệt đới với thịt nguội mặn mà, kết hợp cùng vị ngọt thanh
    của dứa và phô mai mozzarella, đem lại sự hài hòa giữa vị ngọt và mặn rất hấp
    dẫn.', 1, 2),\n(3, 'Veggie Delight Burger', 'bg02', '2500', '2000', '1730278648_pizza5.jpg',
    'Veggie Delight Burger\\\\r\\\\nBurger chay với bánh patty làm từ đậu và rau củ,
    phủ thêm phô mai và rau xanh, thích hợp cho người ăn chay nhưng vẫn đầy hương
    vị.', 1, 2),\n(4, 'Fish Fillet Sandwich', 'sw03', '5000', '3000', '1730278602_sw2.jpg',
    'Fish Fillet Sandwich\\\\r\\\\nMiếng cá chiên giòn với sốt tartar chua ngọt, xà
    lách tươi và phô mai, đem lại cảm giác nhẹ nhàng nhưng vẫn đầy đủ vị ngon từ cá.',
    1, 1),\n(5, 'Chicken Caesar Sandwich', 'sw04', '3000', '0', '1730278559_sw1.jpg',
    'Chicken Caesar Sandwich\\\\r\\\\nBánh mì sandwich gà nướng với rau xà lách giòn
    và sốt Caesar béo ngậy, giúp làm mới khẩu vị với sự kết hợp giữa vị gà nướng và
    vị sốt thanh nhẹ.', 1, 1),\n(7, 'Mushroom Swiss Burger', 'bg05', '3000', '0',
    '1730278507_bg5.jpg', 'Mushroom Swiss Burger\\\\r\\\\nThịt bò nướng kèm nấm xào
    thơm lừng và phô mai Thụy Sĩ, tạo ra một chiếc burger đậm vị, thơm ngậy với chút
    vị ngọt tự nhiên từ nấm.', 1, 1),\n(8, 'BBQ Bacon Burger', 'bg06', '5000', '3000',
    '1730278469_bg4.jpg', 'BBQ Bacon Burger\\\\r\\\\nBánh burger thịt bò nướng sốt
    BBQ, thịt xông khói giòn tan, phô mai cheddar và hành tây caramen, tạo nên sự
    kết hợp giữa vị ngọt, mặn và khói thơm đặc trưng.', 1, 1),\n(9, 'Spicy Chicken
    Burger', 'bg07', '1000', '0', '1730278431_bg3.jpg', 'Spicy Chicken Burger\\\\r\\\\nGà
    rán cay giòn rụm, kết hợp cùng phô mai, rau xà lách và sốt cay đặc biệt, tạo nên
    sự bùng nổ vị giác với độ cay và giòn ngon không thể cưỡng lại.', 1, 1),\n(10,
    'Cheese Lover’s Burger', 'bg08', '400', '0', '1730278387_bg2.jpg', 'Cheese Lover’s
    Burger\\\\r\\\\nBurger phô mai với hai lớp phô mai cheddar tan chảy, thịt bò nướng
    mềm, kèm sốt phô mai béo ngậy, dành riêng cho những ai yêu thích vị phô mai đậm
    đà.', 1, 1),\n(11, 'Classic Beef Burger', 'bg09', '2000', '0', '1730278340_bg1.jpg',
    'Classic Beef Burger\\\\r\\\\nBánh burger bò truyền thống với miếng thịt bò nướng
    thơm lừng, phô mai cheddar, xà lách, cà chua và dưa leo muối, tạo nên vị đậm đà
    và hài hòa trong từng miếng cắn.', 1, 1),\n(12, 'Pizza Thập Cẩm', 'pz03', '3000',
    '0', '1730278264_pizza6.jpg', 'Pizza Thập Cẩm\\\\r\\\\nPizza thập cẩm đầy ắp các
    loại nhân như pepperoni, xúc xích, thịt nguội, ớt chuông, và nấm, giúp bạn tận
    hưởng nhiều hương vị trong cùng một miếng bánh.', 1, 2),\n(13, 'Pizza Gà Nướng
    Teriyaki', 'pz04', '2000', '0', '1730278221_pizza5.jpg', 'Pizza Gà Nướng Teriyaki\\\\r\\\\nGà
    nướng sốt teriyaki phủ trên nền pizza giòn, kết hợp cùng nấm, hành lá và phô mai
    mozzarella, mang đến hương vị Nhật Bản độc đáo và thơm ngon.', 1, 2),\n(14, 'Pizza
    Bò Nướng BBQ', 'pz05', '700', '0', '1730278166_pizza4.jpg', 'Pizza Bò Nướng BBQ\\\\r\\\\nThịt
    bò nướng BBQ đậm vị phủ đều trên nền sốt BBQ, thêm chút hành tây và ớt chuông,
    tạo sự hòa quyện tuyệt vời giữa vị mặn, ngọt và chút cay nồng.', 1, 2),\n(15,
    'Pizza Xúc Xích & Thịt Xông Khói', 'pz06', '700', '400', '1730278123_pizza3.jpg',
    'Pizza Xúc Xích & Thịt Xông Khói\\\\r\\\\nPhần pizza đầy đặn với xúc xích cay,
    thịt xông khói, và hành tây, hòa quyện cùng phô mai mozzarella tan chảy, tạo nên
    hương vị đậm đà và hấp dẫn.', 1, 2),\n(16, 'Pizza Hải Sản', 'pz07', '5000', '0',
    '1730278084_pizza2.jpg', 'Pizza Hải Sản\\\\r\\\\nPizza hải sản đầy đặn với tôm,
    mực, nghêu, kết hợp cùng sốt kem và phô mai mozzarella, đem đến cảm giác tươi
    mới và ngọt ngào của biển cả.', 1, 2),\n(17, 'Pizza Phô Mai Bốn Lớp', 'pz08',
    '3000', '0', '1730278026_pizza1.jpg', 'Pizza Phô Mai Bốn Lớp\\\\r\\\\nPizza với
    bốn loại phô mai béo ngậy (mozzarella, cheddar, parmesan và phô mai xanh) tan
    chảy trên nền đế giòn, tạo nên hương vị đậm đà, thơm phức.', 1, 2),\n(18, 'Cánh
    Gà Rán BBQ', 'gr08', '2000', '0', '1730277855_canhgabbq.jpg', 'Cánh Gà Rán BBQ\\\\r\\\\nCánh
    gà rán phủ sốt BBQ cay nồng và ngọt ngào, kết hợp giữa lớp vỏ giòn tan và sốt
    BBQ đậm vị, là lựa chọn hoàn hảo cho những ai yêu thích vị BBQ đặc trưng.', 1,
    3),\n(19, 'Gà Rán Tẩm Sốt Tỏi', 'gr02', '700', '0', '1730277812_gasottoi.jpg',
    'Gà Rán Tẩm Sốt Tỏi\\\\r\\\\nMiếng gà rán tẩm sốt tỏi đậm đà, thơm nức với hương
    tỏi hòa quyện cùng gia vị mặn ngọt, tạo nên hương vị độc đáo và lạ miệng.', 1,
    3),\n(20, 'Gà Không Xương Tẩm Bột', 'gr03', '700', '0', '1730277748_gatambot.jpg',
    'Gà Không Xương Tẩm Bột\\\\r\\\\nThịt gà không xương được tẩm bột và chiên vàng,
    dễ dàng thưởng thức và phù hợp cho những ai muốn trải nghiệm phần thịt gà mềm
    thơm mà không cần lo về xương.', 1, 3),\n(21, 'Gà Viên Nuggets', 'gv04', '1000',
    '0', '1730277685_gavien.jpg', 'Gà Viên Nuggets\\\\r\\\\nMiếng gà viên nhỏ nhắn,
    giòn rụm bên ngoài và mềm thơm bên trong, dễ ăn và cực kỳ tiện lợi, đặc biệt hấp
    dẫn với trẻ nhỏ.', 1, 3),\n(22, 'Gà Rán Tẩm Mật Ong', 'gr05', '3000', '0', '1730277625_garanmatong.jpg',
    'Gà Rán Tẩm Mật Ong\\\\r\\\\nGà rán tẩm mật ong ngọt dịu, với lớp vỏ giòn và chút
    vị ngọt nhẹ, tạo nên sự kết hợp hoàn hảo giữa mặn và ngọt, thơm lừng mỗi khi cắn.',
    1, 3),\n(23, 'Gà Rán Phô Mai', 'gr06', '1000', '0', '1730277566_garanphomai.jpg',
    'Gà Rán Phô Mai\\\\r\\\\nMiếng gà rán phủ phô mai béo ngậy, hòa quyện vị giòn
    tan của lớp vỏ với vị mặn béo của phô mai tan chảy, tạo cảm giác thơm ngon khó
    cưỡng.', 1, 3),\n(24, 'Gà Rán Cay', 'gr07', '1000', '0', '1730277511_garancay.jpg',
    'Gà Rán Cay\\\\r\\\\nPhần gà rán cay nồng với lớp vỏ phủ bột ớt và các gia vị
    đặc biệt, kích thích vị giác với độ giòn tan cùng vị cay nhẹ từ ngoài vào trong.',
    1, 3),\n(25, 'Gà Rán Truyền Thống', 'gr01', '1000', '0', '1730279602_garan.jpg',
    'Gà Rán Truyền Thống\\\\r\\\\nGà rán giòn rụm với lớp vỏ vàng ruộm, thấm đậm gia
    vị truyền thống, thịt bên trong mềm mọng, đem lại hương vị quen thuộc và hấp dẫn.',
    1, 3),\n(26, 'Bánh Brownie Chocolate', 'apw01', '1000', '0', '1730277382_BrownieChocolate.jpg',
    'Bánh Brownie Chocolate\\\\r\\\\nBánh brownie đặc sánh vị chocolate đậm đà, thêm
    chút hạt óc chó và sốt chocolate, mềm mịn và béo nhẹ, rất hợp khi dùng kèm với
    một ly cà phê.', 1, 4),\n(27, 'Kem Ly Vani & Chocolate', 'apw02', '1000', '0',
    '1730277326_vani.jpg', 'Phần kem hai vị vani và chocolate mát lạnh, kết hợp với
    topping hạt hạnh nhân và chocolate chip, tạo cảm giác ngọt ngào và sảng khoái
    cho ngày hè.', 1, 4),\n(28, 'Nước Ép Cam Tươi', 'apw03', '1000', '0', '1730277278_camtuoi.jpg',
    'Nước Ép Cam Tươi\\\\r\\\\nLy nước ép cam 100% từ cam tươi, cung cấp vitamin C,
    mang vị chua nhẹ và ngọt tự nhiên. Đồ uống này vừa tốt cho sức khỏe lại giải khát
    cực kỳ hiệu quả.', 1, 4),\n(29, 'Sinh Tố Dâu Tây', 'apw04', '1000', '0', '1730277233_dautay.jpg',
    'Sinh tố dâu tươi, ngọt dịu và hơi chua, được xay nhuyễn tạo kết cấu mịn màng,
    kèm chút kem tươi bên trên. Thức uống này vừa giải khát vừa bổ dưỡng.', 1, 4),\n(30,
    'Trà Sữa Trân Châu Đường Đen', 'apw05', '1000', '600', '1730277177_duongden.jpg',
    'Trà Sữa Trân Châu Đường Đen\\\\r\\\\nThức uống trà sữa đậm vị trà, pha cùng trân
    châu mềm dẻo và đường đen ngọt ngào, thích hợp cho những ai yêu thích vị ngọt
    và sự béo nhẹ.', 1, 4),\n(31, 'Nước Chanh Bạc Hà', 'apw06', '2000', '0', '1730277119_trachanhbacha.png',
    'Ly nước chanh bạc hà chua ngọt hài hòa, được pha với chanh tươi và lá bạc hà
    thơm mát, giúp thanh lọc và làm mới vị giác.', 1, 4),\n(32, 'Trà Đào Đá Xay',
    'apw07', '1000', '600', '1730277016_tradao.jpg', 'Thức uống trà đào thơm ngon,
    pha cùng đá xay mát lạnh, điểm thêm vài miếng đào tươi, tạo cảm giác ngọt dịu
    và tươi mát.', 1, 4),\n(33, 'Coca-Cola Đá Lạnh', 'apw08', '400', '100', '1730276928_coca.png',
    'Ly Coca-Cola mát lạnh, sủi bọt, giúp giải khát tức thì với vị ngọt và hương thơm
    đặc trưng. Phù hợp với các món đồ chiên, giúp cân bằng hương vị.\\\\r\\\\n\\\\r\\\\n',
    1, 4),\n(34, 'Combo 5 – Combo Gà Nướng Healthy', 'spk01', '5000', '3000', '1730276653_food5.jpg',
    'Combo 5 – Combo Gà Nướng Healthy\\\\r\\\\n\\\\r\\\\nMón chính: Gà nướng thảo
    mộc tươi với sốt chanh leo.\\\\r\\\\nMón phụ: Rau củ hấp với sốt bơ hoặc khoai
    tây nghiền.\\\\r\\\\nĐồ uống: Nước suối hoặc nước dừa tươi.\\\\r\\\\nTráng miệ',
    1, 5),\n(35, 'Combo 8 – Combo Hải Sản', 'spk02', '3000', '0', '1730276830_food8.jpg',
    'Combo 8 – Combo Hải Sản\\\\r\\\\n\\\\r\\\\nMón chính: Một phần cá tẩm bột chiên
    giòn kèm tôm chiên xù.\\\\r\\\\nMón phụ: Salad tươi với các loại rau xanh và dưa
    chuột, kèm sốt mè rang.\\\\r\\\\nĐồ uống: Nước ngọt hoặc nước chanh d', 1, 5),\n(36,
    'Combo 7 – Combo Wraps & Rolls', 'spk03', '3000', '0', '1730276776_food7.jpg',
    'Combo 7 – Combo Wraps & Rolls\\\\r\\\\n\\\\r\\\\nMón chính: Gói bánh mì wrap
    với nhân gà nướng, rau xanh và sốt Caesar.\\\\r\\\\nMón phụ: Phần khoai lang chiên
    giòn.\\\\r\\\\nĐồ uống: Nước chanh bạc hà hoặc nước ép dưa hấu.\\\\r\\\\nTráng
    miệng: M', 1, 5),\n(37, 'Combo 6 – Combo Pizza & Pasta', 'spk04', '3000', '0',
    '1730276739_food6.jpg', 'Combo 6 – Combo Pizza & Pasta\\\\r\\\\n\\\\r\\\\nMón
    chính: Một phần pizza cá nhân (có thể chọn vị bò, hải sản hoặc rau củ).\\\\r\\\\nMón
    phụ: Mỳ Ý sốt cà chua với phô mai parmesan bào nhuyễn.\\\\r\\\\nĐồ uống: Nước
    ngọt hoặc trà đ', 1, 5),\n(38, 'Combo 4 – Combo Burger Deluxe', 'spk05', '2000',
    '1000', '1730276572_food4.jpg', 'Combo 4 – Combo Burger Deluxe\\\\r\\\\n\\\\r\\\\nMón
    chính: Burger bò đặc biệt với thịt bò nướng than, thêm phô mai cheddar, hành tây
    caramen, và sốt BBQ.\\\\r\\\\nMón phụ: Phần khoai tây chiên curly (khoai chiên
    xoắn).\\\\r\\\\nĐồ uống: Sinh tố', 1, 5),\n(39, 'Combo Gà Cay Khoai Lang', 'spk06',
    '2000', '0', '1730276454_food3.jpg', 'Combo 3 là phần ăn đa dạng và đầy đủ cho
    một bữa nhanh, bao gồm:\\\\r\\\\n\\\\r\\\\nMón chính: 3 miếng gà rán giòn tan
    với lớp vỏ vàng ruộm và thịt gà mềm bên trong.\\\\r\\\\nMón phụ: Khoai tây chiên
    và một phần salad tươi v', 1, 5),\n(40, 'Combo Food 2', 'spk07', '3000', '0',
    '1730276271_food2.jpg', 'Combo 2 là một phần ăn nhanh tiện lợi, thường bao gồm
    các món cơ bản và phổ biến như:\\\\r\\\\n\\\\r\\\\nMón chính: Một burger bò hoặc
    gà với phô mai, xà lách, cà chua và sốt đặc trưng.\\\\r\\\\nMón phụ: Khoai tây
    chiên giòn, ', 1, 5),\n(41, 'Combo FastFood 1', 'spk08', '3000', '1000', '1730276282_food1.jpg',
    'Combo 1 là một phần ăn nhanh tiện lợi, thường bao gồm các món cơ bản và phổ biến
    như:\\\\r\\\\n\\\\r\\\\nMón chính: Một burger bò hoặc gà với phô mai, xà lách,
    cà chua và sốt đặc trưng.\\\\r\\\\nMón phụ: Khoai tây chiên giòn, ', 1, 5);\n\n--
    --------------------------------------------------------\n\n--\n-- Cấu trúc bảng
    cho bảng `tbl_thongke`\n--\n\nCREATE TABLE `tbl_thongke` (\n  `id` int(11) NOT
    NULL,\n  `ngaydat` varchar(30) NOT NULL,\n  `donhang` int(11) NOT NULL,\n  `doanhthu`
    varchar(100) NOT NULL,\n  `soluongban` int(11) NOT NULL\n) ENGINE=InnoDB DEFAULT
    CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n\n--\n-- Đang đổ dữ liệu cho bảng
    `tbl_thongke`\n--\n\nINSERT INTO `tbl_thongke` (`id`, `ngaydat`, `donhang`, `doanhthu`,
    `soluongban`) VALUES\n(2, '2024-11-06', 30, '2000', 30),\n(4, '2024-11-06', 9,
    '5000', 3),\n(6, '2024-11-06', 6, '25100', 11),\n(7, '2024-11-06', 2, '9000',
    2);\n\n--\n-- Chỉ mục cho các bảng đã đổ\n--\n\n--\n-- Chỉ mục cho bảng `tbl_admin`\n--\nALTER
    TABLE `tbl_admin`\n  ADD PRIMARY KEY (`id_admin`);\n\n--\n-- Chỉ mục cho bảng
    `tbl_baiviet`\n--\nALTER TABLE `tbl_baiviet`\n  ADD PRIMARY KEY (`id_baiviet`);\n\n--\n--
    Chỉ mục cho bảng `tbl_cart_details`\n--\nALTER TABLE `tbl_cart_details`\n  ADD
    PRIMARY KEY (`id_cart_details`),\n  ADD KEY `id_sp` (`id_sp`);\n\n--\n-- Chỉ mục
    cho bảng `tbl_cart_registered`\n--\nALTER TABLE `tbl_cart_registered`\n  ADD PRIMARY
    KEY (`id_cart_registered`),\n  ADD KEY `id_khachhang` (`id_khachhang`);\n\n--\n--
    Chỉ mục cho bảng `tbl_cart_unregistered`\n--\nALTER TABLE `tbl_cart_unregistered`\n
    \ ADD PRIMARY KEY (`id_cart_unregistered`);\n\n--\n-- Chỉ mục cho bảng `tbl_comments`\n--\nALTER
    TABLE `tbl_comments`\n  ADD PRIMARY KEY (`id_cmt`),\n  ADD KEY `id_sp` (`id_sp`);\n\n--\n--
    Chỉ mục cho bảng `tbl_dangky`\n--\nALTER TABLE `tbl_dangky`\n  ADD PRIMARY KEY
    (`id_khachhang`);\n\n--\n-- Chỉ mục cho bảng `tbl_danhmuc`\n--\nALTER TABLE `tbl_danhmuc`\n
    \ ADD PRIMARY KEY (`id_danhmuc`);\n\n--\n-- Chỉ mục cho bảng `tbl_phanhoi`\n--\nALTER
    TABLE `tbl_phanhoi`\n  ADD PRIMARY KEY (`id_ph`);\n\n--\n-- Chỉ mục cho bảng `tbl_sanpham`\n--\nALTER
    TABLE `tbl_sanpham`\n  ADD PRIMARY KEY (`id_sp`),\n  ADD KEY `id_danhmuc` (`id_danhmuc`);\n\n--\n--
    Chỉ mục cho bảng `tbl_thongke`\n--\nALTER TABLE `tbl_thongke`\n  ADD PRIMARY KEY
    (`id`);\n\n--\n-- AUTO_INCREMENT cho các bảng đã đổ\n--\n\n--\n-- AUTO_INCREMENT
    cho bảng `tbl_admin`\n--\nALTER TABLE `tbl_admin`\n  MODIFY `id_admin` int(11)
    NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;\n\n--\n-- AUTO_INCREMENT cho bảng `tbl_baiviet`\n--\nALTER
    TABLE `tbl_baiviet`\n  MODIFY `id_baiviet` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;\n\n--\n--
    AUTO_INCREMENT cho bảng `tbl_cart_details`\n--\nALTER TABLE `tbl_cart_details`\n
    \ MODIFY `id_cart_details` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=35;\n\n--\n--
    AUTO_INCREMENT cho bảng `tbl_cart_registered`\n--\nALTER TABLE `tbl_cart_registered`\n
    \ MODIFY `id_cart_registered` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=33;\n\n--\n--
    AUTO_INCREMENT cho bảng `tbl_cart_unregistered`\n--\nALTER TABLE `tbl_cart_unregistered`\n
    \ MODIFY `id_cart_unregistered` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=23;\n\n--\n--
    AUTO_INCREMENT cho bảng `tbl_comments`\n--\nALTER TABLE `tbl_comments`\n  MODIFY
    `id_cmt` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;\n\n--\n-- AUTO_INCREMENT
    cho bảng `tbl_dangky`\n--\nALTER TABLE `tbl_dangky`\n  MODIFY `id_khachhang` int(11)
    NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=16;\n\n--\n-- AUTO_INCREMENT cho bảng
    `tbl_danhmuc`\n--\nALTER TABLE `tbl_danhmuc`\n  MODIFY `id_danhmuc` int(11) NOT
    NULL AUTO_INCREMENT, AUTO_INCREMENT=10;\n\n--\n-- AUTO_INCREMENT cho bảng `tbl_phanhoi`\n--\nALTER
    TABLE `tbl_phanhoi`\n  MODIFY `id_ph` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;\n\n--\n--
    AUTO_INCREMENT cho bảng `tbl_sanpham`\n--\nALTER TABLE `tbl_sanpham`\n  MODIFY
    `id_sp` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=43;\n\n--\n-- AUTO_INCREMENT
    cho bảng `tbl_thongke`\n--\nALTER TABLE `tbl_thongke`\n  MODIFY `id` int(11) NOT
    NULL AUTO_INCREMENT, AUTO_INCREMENT=9;\n\n--\n-- Các ràng buộc cho các bảng đã
    đổ\n--\n\n--\n-- Các ràng buộc cho bảng `tbl_cart_details`\n--\nALTER TABLE `tbl_cart_details`\n
    \ ADD CONSTRAINT `tbl_cart_details_ibfk_1` FOREIGN KEY (`id_sp`) REFERENCES `tbl_sanpham`
    (`id_sp`) ON DELETE NO ACTION ON UPDATE NO ACTION;\n\n--\n-- Các ràng buộc cho
    bảng `tbl_cart_registered`\n--\nALTER TABLE `tbl_cart_registered`\n  ADD CONSTRAINT
    `tbl_cart_registered_ibfk_1` FOREIGN KEY (`id_khachhang`) REFERENCES `tbl_dangky`
    (`id_khachhang`) ON DELETE NO ACTION ON UPDATE NO ACTION;\n\n--\n-- Các ràng buộc
    cho bảng `tbl_comments`\n--\nALTER TABLE `tbl_comments`\n  ADD CONSTRAINT `tbl_comments_ibfk_1`
    FOREIGN KEY (`id_sp`) REFERENCES `tbl_sanpham` (`id_sp`) ON DELETE NO ACTION ON
    UPDATE NO ACTION;\n\n--\n-- Các ràng buộc cho bảng `tbl_sanpham`\n--\nALTER TABLE
    `tbl_sanpham`\n  ADD CONSTRAINT `tbl_sanpham_ibfk_1` FOREIGN KEY (`id_danhmuc`)
    REFERENCES `tbl_danhmuc` (`id_danhmuc`) ON DELETE NO ACTION ON UPDATE NO ACTION;\nCOMMIT;\n\n/*!40101
    SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;\n/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS
    */;\n/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;\n"
  sign-up.php: "<?php\r\nob_start();\r\nsession_start();\r\ninclude(\"admin/config/config.php\");\r\n\r\nif
    (isset($_POST['dangky'])) {\r\n    $tenkhachhang = $_POST['hovaten'];\r\n    $email
    = $_POST['email'];\r\n    $dienthoai = $_POST['sodienthoai'];\r\n    $diachi =
    $_POST['diachi'];\r\n    $matkhau = md5($_POST['matkhau']);\r\n    $nhaplaimatkhau
    = md5($_POST['nhaplaimatkhau']);\r\n\r\n    if ($matkhau == $nhaplaimatkhau) {\r\n
    \       $sql_dangky = mysqli_query($mysqli, \"INSERT INTO tbl_dangky(tenkhachhang,email,diachi,matkhau,dienthoai)
    VALUES ('$tenkhachhang','$email','$diachi','$matkhau','$dienthoai')\");\r\n        if
    ($sql_dangky) {\r\n            $_SESSION['dangky'] = $tenkhachhang;\r\n            $_SESSION['id_khachhang']
    = mysqli_insert_id($mysqli);\r\n            header(\"Location:index.php\");\r\n
    \       }\r\n    } else {\r\n        echo \"<script>alert('Mật khẩu nhập lại không
    khớp. Vui lòng thử lại.');</script>\";\r\n    }\r\n}\r\n?>\r\n<!DOCTYPE html>\r\n<html
    lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\"
    content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width,
    initial-scale=1.0\">\r\n    <title>Đăng ký</title>\r\n    <link rel=\"stylesheet\"
    href=\"./assets/style/base/reset.css\">\r\n    <link rel=\"stylesheet\" href=\"./assets/style/sign-up.css\">\r\n</head>\r\n\r\n<body>\r\n
    \   <form action=\"\" method=\"POST\">\r\n        <div class=\"container_contact\">\r\n
    \           <div class=\"contact-box\">\r\n                <div class=\"left\"></div>\r\n
    \               <div class=\"right\">\r\n                    <h2>Đăng ký</h2>\r\n
    \                   <input type=\"text\" class=\"field\" name=\"hovaten\" placeholder=\"Họ
    và tên\" required>\r\n                    <input type=\"email\" class=\"field\"
    name=\"email\" placeholder=\"Email\" required>\r\n                    <input type=\"text\"
    class=\"field\" name=\"sodienthoai\" placeholder=\"Số điện thoại\" required>\r\n
    \                   <input type=\"text\" class=\"field\" name=\"diachi\" placeholder=\"Địa
    chỉ\" required>\r\n                    <input type=\"password\" class=\"field\"
    name=\"matkhau\" placeholder=\"Mật khẩu\" required>\r\n                    <input
    type=\"password\" class=\"field\" name=\"nhaplaimatkhau\" placeholder=\"Nhập lại
    mật khẩu\" required>\r\n                    <input type=\"submit\" name=\"dangky\"
    value=\"Đăng ký\" class=\"btn js-btn-dk\"></input>\r\n                    <p>\r\n
    \                       Bạn đã có tài khoản. <a href=\"./sign-in.php\">Đăng nhập</a>\r\n
    \                   </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n
    \   </form>\r\n</body>\r\n\r\n</html>\r\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: php-code-content-66
