apiVersion: v1
data:
  uploads-Carbon-src-Carbon-Lang-ar_IL.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return array_replace_recursive(require __DIR__.'/ar.php', [
    ]);
  uploads-Carbon-src-Carbon-Lang-ar_MR.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return array_replace_recursive(require __DIR__.'/ar.php', [
    ]);
  uploads-Carbon-src-Carbon-Lang-ar_QA.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    /*
     * Authors:
     * - IBM Globalization Center of Competency, Yamato Software Laboratory    bug-glibc-locales@gnu.org
     */
    return array_replace_recursive(require __DIR__.'/ar.php', [
        'formats' => [
            'L' => 'DD MMM, YYYY',
        ],
        'months' => ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'],
        'months_short' => ['ينا', 'فبر', 'مار', 'أبر', 'ماي', 'يون', 'يول', 'أغس', 'سبت', 'أكت', 'نوف', 'ديس'],
        'weekdays' => ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'],
        'weekdays_short' => ['ح', 'ن', 'ث', 'ر', 'خ', 'ج', 'س'],
        'weekdays_min' => ['ح', 'ن', 'ث', 'ر', 'خ', 'ج', 'س'],
        'first_day_of_week' => 6,
        'day_of_first_week_of_year' => 1,
    ]);
  uploads-Carbon-src-Carbon-Lang-cmn_TW.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    /*
     * Authors:
     * - bug-glibc-locales@gnu.org
     */
    return array_replace_recursive(require __DIR__.'/en.php', [
        'formats' => [
            'L' => 'YYYY年MM月DD號',
        ],
        'months' => ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
        'months_short' => [' 1月', ' 2月', ' 3月', ' 4月', ' 5月', ' 6月', ' 7月', ' 8月', ' 9月', '10月', '11月', '12月'],
        'weekdays' => ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],
        'weekdays_short' => ['日', '一', '二', '三', '四', '五', '六'],
        'weekdays_min' => ['日', '一', '二', '三', '四', '五', '六'],
        'meridiem' => ['上午', '下午'],

        'year' => ':count 年',
        'y' => ':count 年',
        'a_year' => ':count 年',

        'month' => ':count 月',
        'm' => ':count 月',
        'a_month' => ':count 月',

        'week' => ':count 周',
        'w' => ':count 周',
        'a_week' => ':count 周',

        'day' => ':count 白天',
        'd' => ':count 白天',
        'a_day' => ':count 白天',

        'hour' => ':count 小时',
        'h' => ':count 小时',
        'a_hour' => ':count 小时',

        'minute' => ':count 分钟',
        'min' => ':count 分钟',
        'a_minute' => ':count 分钟',

        'second' => ':count 秒',
        's' => ':count 秒',
        'a_second' => ':count 秒',
    ]);
  uploads-Carbon-src-Carbon-Lang-doi_IN.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    /*
     * Authors:
     * - Red Hat Pune    libc-alpha@sourceware.org
     */
    return array_replace_recursive(require __DIR__.'/en.php', [
        'formats' => [
            'L' => 'D/M/YY',
        ],
        'months' => ['जनवरी', 'फरवरी', 'मार्च', 'एप्रैल', 'मेई', 'जून', 'जूलै', 'अगस्त', 'सितंबर', 'अक्तूबर', 'नवंबर', 'दिसंबर'],
        'months_short' => ['जनवरी', 'फरवरी', 'मार्च', 'एप्रैल', 'मेई', 'जून', 'जूलै', 'अगस्त', 'सितंबर', 'अक्तूबर', 'नवंबर', 'दिसंबर'],
        'weekdays' => ['ऐतबार', 'सोमबार', 'मंगलबर', 'बुधबार', 'बीरबार', 'शुक्करबार', 'श्नीचरबार'],
        'weekdays_short' => ['ऐत', 'सोम', 'मंगल', 'बुध', 'बीर', 'शुक्कर', 'श्नीचर'],
        'weekdays_min' => ['ऐत', 'सोम', 'मंगल', 'बुध', 'बीर', 'शुक्कर', 'श्नीचर'],
        'day_of_first_week_of_year' => 1,
        'meridiem' => ['सञं', 'सबेर'],

        'second' => ':count सङार', // less reliable
        's' => ':count सङार', // less reliable
        'a_second' => ':count सङार', // less reliable
    ]);
  uploads-Carbon-src-Carbon-Lang-ee.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return array_replace_recursive(require __DIR__.'/en.php', [
        'meridiem' => ['ŋ', 'ɣ'],
        'weekdays' => ['kɔsiɖa', 'dzoɖa', 'blaɖa', 'kuɖa', 'yawoɖa', 'fiɖa', 'memleɖa'],
        'weekdays_short' => ['kɔs', 'dzo', 'bla', 'kuɖ', 'yaw', 'fiɖ', 'mem'],
        'weekdays_min' => ['kɔs', 'dzo', 'bla', 'kuɖ', 'yaw', 'fiɖ', 'mem'],
        'months' => ['dzove', 'dzodze', 'tedoxe', 'afɔfĩe', 'dama', 'masa', 'siamlɔm', 'deasiamime', 'anyɔnyɔ', 'kele', 'adeɛmekpɔxe', 'dzome'],
        'months_short' => ['dzv', 'dzd', 'ted', 'afɔ', 'dam', 'mas', 'sia', 'dea', 'any', 'kel', 'ade', 'dzm'],
        'first_day_of_week' => 1,
        'formats' => [
            'LT' => 'a [ga] h:mm',
            'LTS' => 'a [ga] h:mm:ss',
            'L' => 'M/D/YYYY',
            'LL' => 'MMM D [lia], YYYY',
            'LLL' => 'a [ga] h:mm MMMM D [lia] YYYY',
            'LLLL' => 'a [ga] h:mm dddd, MMMM D [lia] YYYY',
        ],

        'year' => 'ƒe :count',
        'y' => 'ƒe :count',
        'a_year' => 'ƒe :count',

        'month' => 'ɣleti :count',
        'm' => 'ɣleti :count',
        'a_month' => 'ɣleti :count',

        'week' => 'kwasiɖa :count',
        'w' => 'kwasiɖa :count',
        'a_week' => 'kwasiɖa :count',

        'day' => 'ŋkeke :count',
        'd' => 'ŋkeke :count',
        'a_day' => 'ŋkeke :count',

        'hour' => 'gaƒoƒo :count',
        'h' => 'gaƒoƒo :count',
        'a_hour' => 'gaƒoƒo :count',

        'minute' => 'miniti :count', // less reliable
        'min' => 'miniti :count', // less reliable
        'a_minute' => 'miniti :count', // less reliable

        'second' => 'sɛkɛnd :count', // less reliable
        's' => 'sɛkɛnd :count', // less reliable
        'a_second' => 'sɛkɛnd :count', // less reliable
    ]);
  uploads-Carbon-src-Carbon-Lang-en_TC.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return array_replace_recursive(require __DIR__.'/en.php', [
        'first_day_of_week' => 1,
    ]);
  uploads-Carbon-src-Carbon-Lang-es_GQ.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return array_replace_recursive(require __DIR__.'/es.php', [
        'first_day_of_week' => 1,
    ]);
  uploads-Carbon-src-Carbon-Lang-et.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    /*
     * Authors:
     * - Philippe Vaucher
     * - Andres Ivanov
     * - Tsutomu Kuroda
     * - tjku
     * - Max Melentiev
     * - Juanito Fatas
     * - RM87
     * - Akira Matsuda
     * - Christopher Dell
     * - Enrique Vidal
     * - Simone Carletti
     * - Aaron Patterson
     * - Esko Lehtme
     * - Mart Karu
     * - Nicolás Hock Isaza
     * - Kevin Valdek
     * - Zahhar Kirillov
     * - João Magalhães
     * - Ingmar
     * - Illimar Tambek
     * - Mihkel
     */
    return [
        'year' => ':count aasta|:count aastat',
        'y' => ':count a',
        'month' => ':count kuu|:count kuud',
        'm' => ':count k',
        'week' => ':count nädal|:count nädalat',
        'w' => ':count näd',
        'day' => ':count päev|:count päeva',
        'd' => ':count p',
        'hour' => ':count tund|:count tundi',
        'h' => ':count t',
        'minute' => ':count minut|:count minutit',
        'min' => ':count min',
        'second' => ':count sekund|:count sekundit',
        's' => ':count s',
        'ago' => ':time tagasi',
        'from_now' => ':time pärast',
        'after' => ':time pärast',
        'before' => ':time enne',
        'year_from_now' => ':count aasta',
        'month_from_now' => ':count kuu',
        'week_from_now' => ':count nädala',
        'day_from_now' => ':count päeva',
        'hour_from_now' => ':count tunni',
        'minute_from_now' => ':count minuti',
        'second_from_now' => ':count sekundi',
        'first_day_of_week' => 1,
        'day_of_first_week_of_year' => 4,
        'diff_now' => 'nüüd',
        'diff_today' => 'täna',
        'diff_yesterday' => 'eile',
        'diff_tomorrow' => 'homme',
        'diff_before_yesterday' => 'üleeile',
        'diff_after_tomorrow' => 'ülehomme',
        'formats' => [
            'LT' => 'HH:mm',
            'LTS' => 'HH:mm:ss',
            'L' => 'DD.MM.YYYY',
            'LL' => 'D. MMMM YYYY',
            'LLL' => 'D. MMMM YYYY HH:mm',
            'LLLL' => 'dddd, D. MMMM YYYY HH:mm',
        ],
        'calendar' => [
            'sameDay' => '[täna] LT',
            'nextDay' => '[homme] LT',
            'lastDay' => '[eile] LT',
            'nextWeek' => 'dddd LT',
            'lastWeek' => '[eelmine] dddd LT',
            'sameElse' => 'L',
        ],
        'months' => ['jaanuar', 'veebruar', 'märts', 'aprill', 'mai', 'juuni', 'juuli', 'august', 'september', 'oktoober', 'november', 'detsember'],
        'months_short' => ['jaan', 'veebr', 'märts', 'apr', 'mai', 'juuni', 'juuli', 'aug', 'sept', 'okt', 'nov', 'dets'],
        'weekdays' => ['pühapäev', 'esmaspäev', 'teisipäev', 'kolmapäev', 'neljapäev', 'reede', 'laupäev'],
        'weekdays_short' => ['P', 'E', 'T', 'K', 'N', 'R', 'L'],
        'weekdays_min' => ['P', 'E', 'T', 'K', 'N', 'R', 'L'],
        'list' => [', ', ' ja '],
        'meridiem' => ['enne lõunat', 'pärast lõunat'],
    ];
  uploads-Carbon-src-Carbon-Lang-fr_MF.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return require __DIR__.'/fr.php';
  uploads-Carbon-src-Carbon-Lang-fr_MR.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return array_replace_recursive(require __DIR__.'/fr.php', [
        'formats' => [
            'LT' => 'h:mm a',
            'LTS' => 'h:mm:ss a',
            'L' => 'DD/MM/YYYY',
            'LL' => 'D MMM YYYY',
            'LLL' => 'D MMMM YYYY h:mm a',
            'LLLL' => 'dddd D MMMM YYYY h:mm a',
        ],
    ]);
  uploads-Carbon-src-Carbon-Lang-fr_TG.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return require __DIR__.'/fr.php';
  uploads-Carbon-src-Carbon-Lang-ha_NG.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return require __DIR__.'/ha.php';
  uploads-Carbon-src-Carbon-Lang-ht.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    /*
     * Unknown default region, use the first alphabetically.
     */
    return require __DIR__.'/ht_HT.php';
  uploads-Carbon-src-Carbon-Lang-ne_NP.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return require __DIR__.'/ne.php';
  uploads-Carbon-src-Carbon-Lang-nl_BQ.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return require __DIR__.'/nl.php';
  uploads-Carbon-src-Carbon-Lang-rwk.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return array_replace_recursive(require __DIR__.'/en.php', [
        'meridiem' => ['utuko', 'kyiukonyi'],
        'weekdays' => ['Jumapilyi', 'Jumatatuu', 'Jumanne', 'Jumatanu', 'Alhamisi', 'Ijumaa', 'Jumamosi'],
        'weekdays_short' => ['Jpi', 'Jtt', 'Jnn', 'Jtn', 'Alh', 'Iju', 'Jmo'],
        'weekdays_min' => ['Jpi', 'Jtt', 'Jnn', 'Jtn', 'Alh', 'Iju', 'Jmo'],
        'months' => ['Januari', 'Februari', 'Machi', 'Aprilyi', 'Mei', 'Junyi', 'Julyai', 'Agusti', 'Septemba', 'Oktoba', 'Novemba', 'Desemba'],
        'months_short' => ['Jan', 'Feb', 'Mac', 'Apr', 'Mei', 'Jun', 'Jul', 'Ago', 'Sep', 'Okt', 'Nov', 'Des'],
        'first_day_of_week' => 1,
        'formats' => [
            'LT' => 'HH:mm',
            'LTS' => 'HH:mm:ss',
            'L' => 'DD/MM/YYYY',
            'LL' => 'D MMM YYYY',
            'LLL' => 'D MMMM YYYY HH:mm',
            'LLLL' => 'dddd, D MMMM YYYY HH:mm',
        ],
    ]);
  uploads-Carbon-src-Carbon-Lang-sd_IN-devanagari.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    /*
     * Authors:
     * - Red Hat, Pune    bug-glibc-locales@gnu.org
     */
    return array_replace_recursive(require __DIR__.'/sd.php', [
        'formats' => [
            'L' => 'D/M/YY',
        ],
        'months' => ['जनवरी', 'फबरवरी', 'मार्चि', 'अप्रेल', 'मे', 'जूनि', 'जूलाइ', 'आगस्टु', 'सेप्टेंबरू', 'आक्टूबरू', 'नवंबरू', 'ॾिसंबरू'],
        'months_short' => ['जनवरी', 'फबरवरी', 'मार्चि', 'अप्रेल', 'मे', 'जूनि', 'जूलाइ', 'आगस्टु', 'सेप्टेंबरू', 'आक्टूबरू', 'नवंबरू', 'ॾिसंबरू'],
        'weekdays' => ['आर्तवारू', 'सूमरू', 'मंगलू', 'ॿुधरू', 'विस्पति', 'जुमो', 'छंछस'],
        'weekdays_short' => ['आर्तवारू', 'सूमरू', 'मंगलू', 'ॿुधरू', 'विस्पति', 'जुमो', 'छंछस'],
        'weekdays_min' => ['आर्तवारू', 'सूमरू', 'मंगलू', 'ॿुधरू', 'विस्पति', 'जुमो', 'छंछस'],
        'day_of_first_week_of_year' => 1,
        'meridiem' => ['म.पू.', 'म.नं.'],
    ]);
  uploads-Carbon-src-Carbon-Lang-seh.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return array_replace_recursive(require __DIR__.'/en.php', [
        'weekdays' => ['Dimingu', 'Chiposi', 'Chipiri', 'Chitatu', 'Chinai', 'Chishanu', 'Sabudu'],
        'weekdays_short' => ['Dim', 'Pos', 'Pir', 'Tat', 'Nai', 'Sha', 'Sab'],
        'weekdays_min' => ['Dim', 'Pos', 'Pir', 'Tat', 'Nai', 'Sha', 'Sab'],
        'months' => ['Janeiro', 'Fevreiro', 'Marco', 'Abril', 'Maio', 'Junho', 'Julho', 'Augusto', 'Setembro', 'Otubro', 'Novembro', 'Decembro'],
        'months_short' => ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Aug', 'Set', 'Otu', 'Nov', 'Dec'],
        'formats' => [
            'LT' => 'HH:mm',
            'LTS' => 'HH:mm:ss',
            'L' => 'D/M/YYYY',
            'LL' => 'd [de] MMM [de] YYYY',
            'LLL' => 'd [de] MMMM [de] YYYY HH:mm',
            'LLLL' => 'dddd, d [de] MMMM [de] YYYY HH:mm',
        ],
    ]);
  uploads-Carbon-src-Carbon-Lang-sh.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    // @codeCoverageIgnoreStart
    use Symfony\Component\Translation\PluralizationRules;

    if (class_exists('Symfony\\Component\\Translation\\PluralizationRules')) {
        PluralizationRules::set(function ($number) {
            return (($number % 10 == 1) && ($number % 100 != 11)) ? 0 : ((($number % 10 >= 2) && ($number % 10 <= 4) && (($number % 100 < 10) || ($number % 100 >= 20))) ? 1 : 2);
        }, 'sh');
    }
    // @codeCoverageIgnoreEnd

    /*
     * Authors:
     * - Томица Кораћ
     * - Enrique Vidal
     * - Christopher Dell
     * - dmilisic
     * - danijel
     * - Miroslav Matkovic (mikki021)
     */
    return [
        'diff_now' => 'sada',
        'diff_yesterday' => 'juče',
        'diff_tomorrow' => 'sutra',
        'formats' => [
            'LT' => 'HH:mm',
            'LTS' => 'HH:mm:ss',
            'L' => 'DD/MM/YYYY',
            'LL' => 'MMMM D, YYYY',
            'LLL' => 'DD MMM HH:mm',
            'LLLL' => 'MMMM DD, YYYY HH:mm',
        ],
        'year' => ':count godina|:count godine|:count godina',
        'y' => ':count g.',
        'month' => ':count mesec|:count meseca|:count meseci',
        'm' => ':count m.',
        'week' => ':count nedelja|:count nedelje|:count nedelja',
        'w' => ':count n.',
        'day' => ':count dan|:count dana|:count dana',
        'd' => ':count d.',
        'hour' => ':count sat|:count sata|:count sati',
        'h' => ':count č.',
        'minute' => ':count minut|:count minuta|:count minuta',
        'min' => ':count min.',
        'second' => ':count sekund|:count sekunde|:count sekundi',
        's' => ':count s.',
        'ago' => 'pre :time',
        'from_now' => 'za :time',
        'after' => 'nakon :time',
        'before' => ':time raniјe',
        'weekdays' => ['Nedelja', 'Ponedeljak', 'Utorak', 'Sreda', 'Četvrtak', 'Petak', 'Subota'],
        'weekdays_short' => ['Ned', 'Pon', 'Uto', 'Sre', 'Čet', 'Pet', 'Sub'],
        'weekdays_min' => ['Ned', 'Pon', 'Uto', 'Sre', 'Čet', 'Pet', 'Sub'],
        'months' => ['Januar', 'Februar', 'Mart', 'April', 'Maj', 'Jun', 'Jul', 'Avgust', 'Septembar', 'Oktobar', 'Novembar', 'Decembar'],
        'months_short' => ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Avg', 'Sep', 'Okt', 'Nov', 'Dec'],
        'list' => [', ', ' i '],
        'meridiem' => ['pre podne', 'po podne'],
    ];
  uploads-Carbon-src-Carbon-Lang-shi.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return array_replace_recursive(require __DIR__.'/en.php', [
        'meridiem' => ['ⵜⵉⴼⴰⵡⵜ', 'ⵜⴰⴷⴳⴳⵯⴰⵜ'],
        'weekdays' => ['ⴰⵙⴰⵎⴰⵙ', 'ⴰⵢⵏⴰⵙ', 'ⴰⵙⵉⵏⴰⵙ', 'ⴰⴽⵕⴰⵙ', 'ⴰⴽⵡⴰⵙ', 'ⵙⵉⵎⵡⴰⵙ', 'ⴰⵙⵉⴹⵢⴰⵙ'],
        'weekdays_short' => ['ⴰⵙⴰ', 'ⴰⵢⵏ', 'ⴰⵙⵉ', 'ⴰⴽⵕ', 'ⴰⴽⵡ', 'ⴰⵙⵉⵎ', 'ⴰⵙⵉⴹ'],
        'weekdays_min' => ['ⴰⵙⴰ', 'ⴰⵢⵏ', 'ⴰⵙⵉ', 'ⴰⴽⵕ', 'ⴰⴽⵡ', 'ⴰⵙⵉⵎ', 'ⴰⵙⵉⴹ'],
        'months' => ['ⵉⵏⵏⴰⵢⵔ', 'ⴱⵕⴰⵢⵕ', 'ⵎⴰⵕⵚ', 'ⵉⴱⵔⵉⵔ', 'ⵎⴰⵢⵢⵓ', 'ⵢⵓⵏⵢⵓ', 'ⵢⵓⵍⵢⵓⵣ', 'ⵖⵓⵛⵜ', 'ⵛⵓⵜⴰⵏⴱⵉⵔ', 'ⴽⵜⵓⴱⵔ', 'ⵏⵓⵡⴰⵏⴱⵉⵔ', 'ⴷⵓⵊⴰⵏⴱⵉⵔ'],
        'months_short' => ['ⵉⵏⵏ', 'ⴱⵕⴰ', 'ⵎⴰⵕ', 'ⵉⴱⵔ', 'ⵎⴰⵢ', 'ⵢⵓⵏ', 'ⵢⵓⵍ', 'ⵖⵓⵛ', 'ⵛⵓⵜ', 'ⴽⵜⵓ', 'ⵏⵓⵡ', 'ⴷⵓⵊ'],
        'first_day_of_week' => 6,
        'weekend' => [5, 6],
        'formats' => [
            'LT' => 'HH:mm',
            'LTS' => 'HH:mm:ss',
            'L' => 'D/M/YYYY',
            'LL' => 'D MMM, YYYY',
            'LLL' => 'D MMMM YYYY HH:mm',
            'LLLL' => 'dddd D MMMM YYYY HH:mm',
        ],

        'year' => ':count aseggwas',
        'y' => ':count aseggwas',
        'a_year' => ':count aseggwas',

        'month' => ':count ayyur',
        'm' => ':count ayyur',
        'a_month' => ':count ayyur',

        'week' => ':count imalass',
        'w' => ':count imalass',
        'a_week' => ':count imalass',

        'day' => ':count ass',
        'd' => ':count ass',
        'a_day' => ':count ass',

        'hour' => ':count urɣ', // less reliable
        'h' => ':count urɣ', // less reliable
        'a_hour' => ':count urɣ', // less reliable

        'minute' => ':count ⴰⵎⵥⵉ', // less reliable
        'min' => ':count ⴰⵎⵥⵉ', // less reliable
        'a_minute' => ':count ⴰⵎⵥⵉ', // less reliable

        'second' => ':count sin', // less reliable
        's' => ':count sin', // less reliable
        'a_second' => ':count sin', // less reliable
    ]);
  uploads-Carbon-src-Carbon-Lang-sl.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    /*
     * Authors:
     * - Philippe Vaucher
     * - Tsutomu Kuroda
     * - tjku
     * - Max Melentiev
     * - Juanito Fatas
     * - Akira Matsuda
     * - Christopher Dell
     * - Enrique Vidal
     * - Simone Carletti
     * - Aaron Patterson
     * - Nicolás Hock Isaza
     * - Miha Rebernik
     * - Gal Jakič (morpheus7CS)
     * - Glavić
     * - Anže Časar
     * - Lovro Tramšek (Lovro1107)
     * - burut13
     */

    use Carbon\CarbonInterface;

    return [
        'year' => ':count leto|:count leti|:count leta|:count let',
        'y' => ':count leto|:count leti|:count leta|:count let',
        'month' => ':count mesec|:count meseca|:count mesece|:count mesecev',
        'm' => ':count mes.',
        'week' => ':count teden|:count tedna|:count tedne|:count tednov',
        'w' => ':count ted.',
        'day' => ':count dan|:count dni|:count dni|:count dni',
        'd' => ':count dan|:count dni|:count dni|:count dni',
        'hour' => ':count ura|:count uri|:count ure|:count ur',
        'h' => ':count h',
        'minute' => ':count minuta|:count minuti|:count minute|:count minut',
        'min' => ':count min.',
        'second' => ':count sekunda|:count sekundi|:count sekunde|:count sekund',
        'a_second' => '{1}nekaj sekund|:count sekunda|:count sekundi|:count sekunde|:count sekund',
        's' => ':count s',

        'year_ago' => ':count letom|:count leti|:count leti|:count leti',
        'y_ago' => ':count letom|:count leti|:count leti|:count leti',
        'month_ago' => ':count mesecem|:count meseci|:count meseci|:count meseci',
        'week_ago' => ':count tednom|:count tednoma|:count tedni|:count tedni',
        'day_ago' => ':count dnem|:count dnevoma|:count dnevi|:count dnevi',
        'd_ago' => ':count dnem|:count dnevoma|:count dnevi|:count dnevi',
        'hour_ago' => ':count uro|:count urama|:count urami|:count urami',
        'minute_ago' => ':count minuto|:count minutama|:count minutami|:count minutami',
        'second_ago' => ':count sekundo|:count sekundama|:count sekundami|:count sekundami',

        'day_from_now' => ':count dan|:count dneva|:count dni|:count dni',
        'd_from_now' => ':count dan|:count dneva|:count dni|:count dni',
        'hour_from_now' => ':count uro|:count uri|:count ure|:count ur',
        'minute_from_now' => ':count minuto|:count minuti|:count minute|:count minut',
        'second_from_now' => ':count sekundo|:count sekundi|:count sekunde|:count sekund',

        'ago' => 'pred :time',
        'from_now' => 'čez :time',
        'after' => ':time kasneje',
        'before' => ':time prej',

        'diff_now' => 'ravnokar',
        'diff_today' => 'danes',
        'diff_today_regexp' => 'danes(?:\\s+ob)?',
        'diff_yesterday' => 'včeraj',
        'diff_yesterday_regexp' => 'včeraj(?:\\s+ob)?',
        'diff_tomorrow' => 'jutri',
        'diff_tomorrow_regexp' => 'jutri(?:\\s+ob)?',
        'diff_before_yesterday' => 'predvčerajšnjim',
        'diff_after_tomorrow' => 'pojutrišnjem',

        'first_day_of_week' => 1,
        'day_of_first_week_of_year' => 1,

        'period_start_date' => 'od :date',
        'period_end_date' => 'do :date',

        'formats' => [
            'LT' => 'H:mm',
            'LTS' => 'H:mm:ss',
            'L' => 'DD.MM.YYYY',
            'LL' => 'D. MMMM YYYY',
            'LLL' => 'D. MMMM YYYY H:mm',
            'LLLL' => 'dddd, D. MMMM YYYY H:mm',
        ],
        'calendar' => [
            'sameDay' => '[danes ob] LT',
            'nextDay' => '[jutri ob] LT',
            'nextWeek' => 'dddd [ob] LT',
            'lastDay' => '[včeraj ob] LT',
            'lastWeek' => function (CarbonInterface $date) {
                switch ($date->dayOfWeek) {
                    case 0:
                        return '[preteklo] [nedeljo] [ob] LT';
                    case 1:
                        return '[pretekli] [ponedeljek] [ob] LT';
                    case 2:
                        return '[pretekli] [torek] [ob] LT';
                    case 3:
                        return '[preteklo] [sredo] [ob] LT';
                    case 4:
                        return '[pretekli] [četrtek] [ob] LT';
                    case 5:
                        return '[pretekli] [petek] [ob] LT';
                    case 6:
                        return '[preteklo] [soboto] [ob] LT';
                }
            },
            'sameElse' => 'L',
        ],
        'months' => ['januar', 'februar', 'marec', 'april', 'maj', 'junij', 'julij', 'avgust', 'september', 'oktober', 'november', 'december'],
        'months_short' => ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'avg', 'sep', 'okt', 'nov', 'dec'],
        'weekdays' => ['nedelja', 'ponedeljek', 'torek', 'sreda', 'četrtek', 'petek', 'sobota'],
        'weekdays_short' => ['ned', 'pon', 'tor', 'sre', 'čet', 'pet', 'sob'],
        'weekdays_min' => ['ne', 'po', 'to', 'sr', 'če', 'pe', 'so'],
        'list' => [', ', ' in '],
        'meridiem' => ['dopoldan', 'popoldan'],
    ];
  uploads-Carbon-src-Carbon-Lang-sr_Cyrl_BA.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return array_replace_recursive(require __DIR__.'/sr_Cyrl.php', [
        'formats' => [
            'LT' => 'HH:mm',
            'LTS' => 'HH:mm:ss',
            'L' => 'D.M.yy.',
            'LL' => 'DD.MM.YYYY.',
            'LLL' => 'DD. MMMM YYYY. HH:mm',
            'LLLL' => 'dddd, DD. MMMM YYYY. HH:mm',
        ],
        'weekdays' => ['недјеља', 'понедељак', 'уторак', 'сриједа', 'четвртак', 'петак', 'субота'],
        'weekdays_short' => ['нед.', 'пон.', 'ут.', 'ср.', 'чет.', 'пет.', 'суб.'],
    ]);
  uploads-Carbon-src-Carbon-Lang-sv_FI.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return require __DIR__.'/sv.php';
  uploads-Carbon-src-Carbon-Lang-tn.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    /*
     * Unknown default region, use the first alphabetically.
     */
    return require __DIR__.'/tn_ZA.php';
  uploads-Carbon-src-Carbon-Lang-tpi_PG.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    /*
     * Authors:
     * - Samsung Electronics Co., Ltd.    akhilesh.k@samsung.com
     */
    return array_replace_recursive(require __DIR__.'/en.php', [
        'formats' => [
            'L' => 'DD/MM/YYYY',
        ],
        'months' => ['Janueri', 'Februeri', 'Mas', 'Epril', 'Me', 'Jun', 'Julai', 'Ogas', 'Septemba', 'Oktoba', 'Novemba', 'Desemba'],
        'months_short' => ['Jan', 'Feb', 'Mas', 'Epr', 'Me', 'Jun', 'Jul', 'Oga', 'Sep', 'Okt', 'Nov', 'Des'],
        'weekdays' => ['Sande', 'Mande', 'Tunde', 'Trinde', 'Fonde', 'Fraide', 'Sarere'],
        'weekdays_short' => ['San', 'Man', 'Tun', 'Tri', 'Fon', 'Fra', 'Sar'],
        'weekdays_min' => ['San', 'Man', 'Tun', 'Tri', 'Fon', 'Fra', 'Sar'],
        'day_of_first_week_of_year' => 1,
        'meridiem' => ['biknait', 'apinun'],

        'year' => 'yia :count',
        'y' => 'yia :count',
        'a_year' => 'yia :count',

        'month' => ':count mun',
        'm' => ':count mun',
        'a_month' => ':count mun',

        'week' => ':count wik',
        'w' => ':count wik',
        'a_week' => ':count wik',

        'day' => ':count de',
        'd' => ':count de',
        'a_day' => ':count de',

        'hour' => ':count aua',
        'h' => ':count aua',
        'a_hour' => ':count aua',

        'minute' => ':count minit',
        'min' => ':count minit',
        'a_minute' => ':count minit',

        'second' => ':count namba tu',
        's' => ':count namba tu',
        'a_second' => ':count namba tu',
    ]);
  uploads-Carbon-src-Carbon-Lang-wo_SN.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    /*
     * Authors:
     * - The Debian Project Christian Perrier bubulle@debian.org
     */
    return [
        'formats' => [
            'LT' => 'HH:mm',
            'LTS' => 'HH:mm:ss',
            'L' => 'DD.MM.YYYY',
            'LL' => 'MMMM DD, YYYY',
            'LLL' => 'DD MMM HH:mm',
            'LLLL' => 'MMMM DD, YYYY HH:mm',
        ],
        'months' => ['sanwiy\'e', 'feebriy\'e', 'mars', 'awril', 'me', 'suwen', 'sulet', 'uut', 'septaambar', 'oktoobar', 'nowaambar', 'desaambar'],
        'months_short' => ['san', 'fee', 'mar', 'awr', 'me ', 'suw', 'sul', 'uut', 'sep', 'okt', 'now', 'des'],
        'weekdays' => ['dib\'eer', 'altine', 'talaata', 'allarba', 'alxames', 'ajjuma', 'gaawu'],
        'weekdays_short' => ['dib', 'alt', 'tal', 'all', 'alx', 'ajj', 'gaa'],
        'weekdays_min' => ['dib', 'alt', 'tal', 'all', 'alx', 'ajj', 'gaa'],
        'first_day_of_week' => 1,
        'day_of_first_week_of_year' => 1,
        'year' => ':count at',
        'month' => ':count wèr',
        'week' => ':count ayubés',
        'day' => ':count bés',
        'hour' => ':count waxtu',
        'minute' => ':count simili',
        'second' => ':count saa',
    ];
  uploads-Carbon-src-Carbon-Lang-zh_Hant_MO.php: |
    <?php

    /**
     * This file is part of the Carbon package.
     *
     * (c) Brian Nesbitt <brian@nesbot.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    return require __DIR__.'/zh_Hant.php';
  uploads-Carbon-vendor-symfony-polyfill-mbstring-LICENSE: |
    Copyright (c) 2015-2019 Fabien Potencier

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished
    to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
  uploads-Carbon-vendor-symfony-polyfill-mbstring-Mbstring.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Polyfill\Mbstring;

    /**
     * Partial mbstring implementation in PHP, iconv based, UTF-8 centric.
     *
     * Implemented:
     * - mb_chr                  - Returns a specific character from its Unicode code point
     * - mb_convert_encoding     - Convert character encoding
     * - mb_convert_variables    - Convert character code in variable(s)
     * - mb_decode_mimeheader    - Decode string in MIME header field
     * - mb_encode_mimeheader    - Encode string for MIME header XXX NATIVE IMPLEMENTATION IS REALLY BUGGED
     * - mb_decode_numericentity - Decode HTML numeric string reference to character
     * - mb_encode_numericentity - Encode character to HTML numeric string reference
     * - mb_convert_case         - Perform case folding on a string
     * - mb_detect_encoding      - Detect character encoding
     * - mb_get_info             - Get internal settings of mbstring
     * - mb_http_input           - Detect HTTP input character encoding
     * - mb_http_output          - Set/Get HTTP output character encoding
     * - mb_internal_encoding    - Set/Get internal character encoding
     * - mb_list_encodings       - Returns an array of all supported encodings
     * - mb_ord                  - Returns the Unicode code point of a character
     * - mb_output_handler       - Callback function converts character encoding in output buffer
     * - mb_scrub                - Replaces ill-formed byte sequences with substitute characters
     * - mb_strlen               - Get string length
     * - mb_strpos               - Find position of first occurrence of string in a string
     * - mb_strrpos              - Find position of last occurrence of a string in a string
     * - mb_str_split            - Convert a string to an array
     * - mb_strtolower           - Make a string lowercase
     * - mb_strtoupper           - Make a string uppercase
     * - mb_substitute_character - Set/Get substitution character
     * - mb_substr               - Get part of string
     * - mb_stripos              - Finds position of first occurrence of a string within another, case insensitive
     * - mb_stristr              - Finds first occurrence of a string within another, case insensitive
     * - mb_strrchr              - Finds the last occurrence of a character in a string within another
     * - mb_strrichr             - Finds the last occurrence of a character in a string within another, case insensitive
     * - mb_strripos             - Finds position of last occurrence of a string within another, case insensitive
     * - mb_strstr               - Finds first occurrence of a string within another
     * - mb_strwidth             - Return width of string
     * - mb_substr_count         - Count the number of substring occurrences
     *
     * Not implemented:
     * - mb_convert_kana         - Convert "kana" one from another ("zen-kaku", "han-kaku" and more)
     * - mb_ereg_*               - Regular expression with multibyte support
     * - mb_parse_str            - Parse GET/POST/COOKIE data and set global variable
     * - mb_preferred_mime_name  - Get MIME charset string
     * - mb_regex_encoding       - Returns current encoding for multibyte regex as string
     * - mb_regex_set_options    - Set/Get the default options for mbregex functions
     * - mb_send_mail            - Send encoded mail
     * - mb_split                - Split multibyte string using regular expression
     * - mb_strcut               - Get part of string
     * - mb_strimwidth           - Get truncated string with specified width
     *
     * @author Nicolas Grekas <p@tchwork.com>
     *
     * @internal
     */
    final class Mbstring
    {
        public const MB_CASE_FOLD = \PHP_INT_MAX;

        private const CASE_FOLD = [
            ['µ', 'ſ', "\xCD\x85", 'ς', "\xCF\x90", "\xCF\x91", "\xCF\x95", "\xCF\x96", "\xCF\xB0", "\xCF\xB1", "\xCF\xB5", "\xE1\xBA\x9B", "\xE1\xBE\xBE"],
            ['μ', 's', 'ι',        'σ', 'β',        'θ',        'φ',        'π',        'κ',        'ρ',        'ε',        "\xE1\xB9\xA1", 'ι'],
        ];

        private static $encodingList = ['ASCII', 'UTF-8'];
        private static $language = 'neutral';
        private static $internalEncoding = 'UTF-8';

        public static function mb_convert_encoding($s, $toEncoding, $fromEncoding = null)
        {
            if (\is_array($fromEncoding) || false !== strpos($fromEncoding, ',')) {
                $fromEncoding = self::mb_detect_encoding($s, $fromEncoding);
            } else {
                $fromEncoding = self::getEncoding($fromEncoding);
            }

            $toEncoding = self::getEncoding($toEncoding);

            if ('BASE64' === $fromEncoding) {
                $s = base64_decode($s);
                $fromEncoding = $toEncoding;
            }

            if ('BASE64' === $toEncoding) {
                return base64_encode($s);
            }

            if ('HTML-ENTITIES' === $toEncoding || 'HTML' === $toEncoding) {
                if ('HTML-ENTITIES' === $fromEncoding || 'HTML' === $fromEncoding) {
                    $fromEncoding = 'Windows-1252';
                }
                if ('UTF-8' !== $fromEncoding) {
                    $s = \iconv($fromEncoding, 'UTF-8//IGNORE', $s);
                }

                return preg_replace_callback('/[\x80-\xFF]+/', [__CLASS__, 'html_encoding_callback'], $s);
            }

            if ('HTML-ENTITIES' === $fromEncoding) {
                $s = html_entity_decode($s, \ENT_COMPAT, 'UTF-8');
                $fromEncoding = 'UTF-8';
            }

            return \iconv($fromEncoding, $toEncoding.'//IGNORE', $s);
        }

        public static function mb_convert_variables($toEncoding, $fromEncoding, &...$vars)
        {
            $ok = true;
            array_walk_recursive($vars, function (&$v) use (&$ok, $toEncoding, $fromEncoding) {
                if (false === $v = self::mb_convert_encoding($v, $toEncoding, $fromEncoding)) {
                    $ok = false;
                }
            });

            return $ok ? $fromEncoding : false;
        }

        public static function mb_decode_mimeheader($s)
        {
            return \iconv_mime_decode($s, 2, self::$internalEncoding);
        }

        public static function mb_encode_mimeheader($s, $charset = null, $transferEncoding = null, $linefeed = null, $indent = null)
        {
            trigger_error('mb_encode_mimeheader() is bugged. Please use iconv_mime_encode() instead', \E_USER_WARNING);
        }

        public static function mb_decode_numericentity($s, $convmap, $encoding = null)
        {
            if (null !== $s && !is_scalar($s) && !(\is_object($s) && method_exists($s, '__toString'))) {
                trigger_error('mb_decode_numericentity() expects parameter 1 to be string, '.\gettype($s).' given', \E_USER_WARNING);

                return null;
            }

            if (!\is_array($convmap) || (80000 > \PHP_VERSION_ID && !$convmap)) {
                return false;
            }

            if (null !== $encoding && !is_scalar($encoding)) {
                trigger_error('mb_decode_numericentity() expects parameter 3 to be string, '.\gettype($s).' given', \E_USER_WARNING);

                return '';  // Instead of null (cf. mb_encode_numericentity).
            }

            $s = (string) $s;
            if ('' === $s) {
                return '';
            }

            $encoding = self::getEncoding($encoding);

            if ('UTF-8' === $encoding) {
                $encoding = null;
                if (!preg_match('//u', $s)) {
                    $s = @\iconv('UTF-8', 'UTF-8//IGNORE', $s);
                }
            } else {
                $s = \iconv($encoding, 'UTF-8//IGNORE', $s);
            }

            $cnt = floor(\count($convmap) / 4) * 4;

            for ($i = 0; $i < $cnt; $i += 4) {
                // collector_decode_htmlnumericentity ignores $convmap[$i + 3]
                $convmap[$i] += $convmap[$i + 2];
                $convmap[$i + 1] += $convmap[$i + 2];
            }

            $s = preg_replace_callback('/&#(?:0*([0-9]+)|x0*([0-9a-fA-F]+))(?!&);?/', function (array $m) use ($cnt, $convmap) {
                $c = isset($m[2]) ? (int) hexdec($m[2]) : $m[1];
                for ($i = 0; $i < $cnt; $i += 4) {
                    if ($c >= $convmap[$i] && $c <= $convmap[$i + 1]) {
                        return self::mb_chr($c - $convmap[$i + 2]);
                    }
                }

                return $m[0];
            }, $s);

            if (null === $encoding) {
                return $s;
            }

            return \iconv('UTF-8', $encoding.'//IGNORE', $s);
        }

        public static function mb_encode_numericentity($s, $convmap, $encoding = null, $is_hex = false)
        {
            if (null !== $s && !is_scalar($s) && !(\is_object($s) && method_exists($s, '__toString'))) {
                trigger_error('mb_encode_numericentity() expects parameter 1 to be string, '.\gettype($s).' given', \E_USER_WARNING);

                return null;
            }

            if (!\is_array($convmap) || (80000 > \PHP_VERSION_ID && !$convmap)) {
                return false;
            }

            if (null !== $encoding && !is_scalar($encoding)) {
                trigger_error('mb_encode_numericentity() expects parameter 3 to be string, '.\gettype($s).' given', \E_USER_WARNING);

                return null;  // Instead of '' (cf. mb_decode_numericentity).
            }

            if (null !== $is_hex && !is_scalar($is_hex)) {
                trigger_error('mb_encode_numericentity() expects parameter 4 to be boolean, '.\gettype($s).' given', \E_USER_WARNING);

                return null;
            }

            $s = (string) $s;
            if ('' === $s) {
                return '';
            }

            $encoding = self::getEncoding($encoding);

            if ('UTF-8' === $encoding) {
                $encoding = null;
                if (!preg_match('//u', $s)) {
                    $s = @\iconv('UTF-8', 'UTF-8//IGNORE', $s);
                }
            } else {
                $s = \iconv($encoding, 'UTF-8//IGNORE', $s);
            }

            static $ulenMask = ["\xC0" => 2, "\xD0" => 2, "\xE0" => 3, "\xF0" => 4];

            $cnt = floor(\count($convmap) / 4) * 4;
            $i = 0;
            $len = \strlen($s);
            $result = '';

            while ($i < $len) {
                $ulen = $s[$i] < "\x80" ? 1 : $ulenMask[$s[$i] & "\xF0"];
                $uchr = substr($s, $i, $ulen);
                $i += $ulen;
                $c = self::mb_ord($uchr);

                for ($j = 0; $j < $cnt; $j += 4) {
                    if ($c >= $convmap[$j] && $c <= $convmap[$j + 1]) {
                        $cOffset = ($c + $convmap[$j + 2]) & $convmap[$j + 3];
                        $result .= $is_hex ? sprintf('&#x%X;', $cOffset) : '&#'.$cOffset.';';
                        continue 2;
                    }
                }
                $result .= $uchr;
            }

            if (null === $encoding) {
                return $result;
            }

            return \iconv('UTF-8', $encoding.'//IGNORE', $result);
        }

        public static function mb_convert_case($s, $mode, $encoding = null)
        {
            $s = (string) $s;
            if ('' === $s) {
                return '';
            }

            $encoding = self::getEncoding($encoding);

            if ('UTF-8' === $encoding) {
                $encoding = null;
                if (!preg_match('//u', $s)) {
                    $s = @\iconv('UTF-8', 'UTF-8//IGNORE', $s);
                }
            } else {
                $s = \iconv($encoding, 'UTF-8//IGNORE', $s);
            }

            if (\MB_CASE_TITLE == $mode) {
                static $titleRegexp = null;
                if (null === $titleRegexp) {
                    $titleRegexp = self::getData('titleCaseRegexp');
                }
                $s = preg_replace_callback($titleRegexp, [__CLASS__, 'title_case'], $s);
            } else {
                if (\MB_CASE_UPPER == $mode) {
                    static $upper = null;
                    if (null === $upper) {
                        $upper = self::getData('upperCase');
                    }
                    $map = $upper;
                } else {
                    if (self::MB_CASE_FOLD === $mode) {
                        $s = str_replace(self::CASE_FOLD[0], self::CASE_FOLD[1], $s);
                    }

                    static $lower = null;
                    if (null === $lower) {
                        $lower = self::getData('lowerCase');
                    }
                    $map = $lower;
                }

                static $ulenMask = ["\xC0" => 2, "\xD0" => 2, "\xE0" => 3, "\xF0" => 4];

                $i = 0;
                $len = \strlen($s);

                while ($i < $len) {
                    $ulen = $s[$i] < "\x80" ? 1 : $ulenMask[$s[$i] & "\xF0"];
                    $uchr = substr($s, $i, $ulen);
                    $i += $ulen;

                    if (isset($map[$uchr])) {
                        $uchr = $map[$uchr];
                        $nlen = \strlen($uchr);

                        if ($nlen == $ulen) {
                            $nlen = $i;
                            do {
                                $s[--$nlen] = $uchr[--$ulen];
                            } while ($ulen);
                        } else {
                            $s = substr_replace($s, $uchr, $i - $ulen, $ulen);
                            $len += $nlen - $ulen;
                            $i += $nlen - $ulen;
                        }
                    }
                }
            }

            if (null === $encoding) {
                return $s;
            }

            return \iconv('UTF-8', $encoding.'//IGNORE', $s);
        }

        public static function mb_internal_encoding($encoding = null)
        {
            if (null === $encoding) {
                return self::$internalEncoding;
            }

            $normalizedEncoding = self::getEncoding($encoding);

            if ('UTF-8' === $normalizedEncoding || false !== @\iconv($normalizedEncoding, $normalizedEncoding, ' ')) {
                self::$internalEncoding = $normalizedEncoding;

                return true;
            }

            if (80000 > \PHP_VERSION_ID) {
                return false;
            }

            throw new \ValueError(sprintf('Argument #1 ($encoding) must be a valid encoding, "%s" given', $encoding));
        }

        public static function mb_language($lang = null)
        {
            if (null === $lang) {
                return self::$language;
            }

            switch ($normalizedLang = strtolower($lang)) {
                case 'uni':
                case 'neutral':
                    self::$language = $normalizedLang;

                    return true;
            }

            if (80000 > \PHP_VERSION_ID) {
                return false;
            }

            throw new \ValueError(sprintf('Argument #1 ($language) must be a valid language, "%s" given', $lang));
        }

        public static function mb_list_encodings()
        {
            return ['UTF-8'];
        }

        public static function mb_encoding_aliases($encoding)
        {
            switch (strtoupper($encoding)) {
                case 'UTF8':
                case 'UTF-8':
                    return ['utf8'];
            }

            return false;
        }

        public static function mb_check_encoding($var = null, $encoding = null)
        {
            if (null === $encoding) {
                if (null === $var) {
                    return false;
                }
                $encoding = self::$internalEncoding;
            }

            return self::mb_detect_encoding($var, [$encoding]) || false !== @\iconv($encoding, $encoding, $var);
        }

        public static function mb_detect_encoding($str, $encodingList = null, $strict = false)
        {
            if (null === $encodingList) {
                $encodingList = self::$encodingList;
            } else {
                if (!\is_array($encodingList)) {
                    $encodingList = array_map('trim', explode(',', $encodingList));
                }
                $encodingList = array_map('strtoupper', $encodingList);
            }

            foreach ($encodingList as $enc) {
                switch ($enc) {
                    case 'ASCII':
                        if (!preg_match('/[\x80-\xFF]/', $str)) {
                            return $enc;
                        }
                        break;

                    case 'UTF8':
                    case 'UTF-8':
                        if (preg_match('//u', $str)) {
                            return 'UTF-8';
                        }
                        break;

                    default:
                        if (0 === strncmp($enc, 'ISO-8859-', 9)) {
                            return $enc;
                        }
                }
            }

            return false;
        }

        public static function mb_detect_order($encodingList = null)
        {
            if (null === $encodingList) {
                return self::$encodingList;
            }

            if (!\is_array($encodingList)) {
                $encodingList = array_map('trim', explode(',', $encodingList));
            }
            $encodingList = array_map('strtoupper', $encodingList);

            foreach ($encodingList as $enc) {
                switch ($enc) {
                    default:
                        if (strncmp($enc, 'ISO-8859-', 9)) {
                            return false;
                        }
                        // no break
                    case 'ASCII':
                    case 'UTF8':
                    case 'UTF-8':
                }
            }

            self::$encodingList = $encodingList;

            return true;
        }

        public static function mb_strlen($s, $encoding = null)
        {
            $encoding = self::getEncoding($encoding);
            if ('CP850' === $encoding || 'ASCII' === $encoding) {
                return \strlen($s);
            }

            return @\iconv_strlen($s, $encoding);
        }

        public static function mb_strpos($haystack, $needle, $offset = 0, $encoding = null)
        {
            $encoding = self::getEncoding($encoding);
            if ('CP850' === $encoding || 'ASCII' === $encoding) {
                return strpos($haystack, $needle, $offset);
            }

            $needle = (string) $needle;
            if ('' === $needle) {
                if (80000 > \PHP_VERSION_ID) {
                    trigger_error(__METHOD__.': Empty delimiter', \E_USER_WARNING);

                    return false;
                }

                return 0;
            }

            return \iconv_strpos($haystack, $needle, $offset, $encoding);
        }

        public static function mb_strrpos($haystack, $needle, $offset = 0, $encoding = null)
        {
            $encoding = self::getEncoding($encoding);
            if ('CP850' === $encoding || 'ASCII' === $encoding) {
                return strrpos($haystack, $needle, $offset);
            }

            if ($offset != (int) $offset) {
                $offset = 0;
            } elseif ($offset = (int) $offset) {
                if ($offset < 0) {
                    if (0 > $offset += self::mb_strlen($needle)) {
                        $haystack = self::mb_substr($haystack, 0, $offset, $encoding);
                    }
                    $offset = 0;
                } else {
                    $haystack = self::mb_substr($haystack, $offset, 2147483647, $encoding);
                }
            }

            $pos = '' !== $needle || 80000 > \PHP_VERSION_ID
                ? \iconv_strrpos($haystack, $needle, $encoding)
                : self::mb_strlen($haystack, $encoding);

            return false !== $pos ? $offset + $pos : false;
        }

        public static function mb_str_split($string, $split_length = 1, $encoding = null)
        {
            if (null !== $string && !is_scalar($string) && !(\is_object($string) && method_exists($string, '__toString'))) {
                trigger_error('mb_str_split() expects parameter 1 to be string, '.\gettype($string).' given', \E_USER_WARNING);

                return null;
            }

            if (1 > $split_length = (int) $split_length) {
                if (80000 > \PHP_VERSION_ID) {
                    trigger_error('The length of each segment must be greater than zero', \E_USER_WARNING);
                    return false;
                }

                throw new \ValueError('Argument #2 ($length) must be greater than 0');
            }

            if (null === $encoding) {
                $encoding = mb_internal_encoding();
            }

            if ('UTF-8' === $encoding = self::getEncoding($encoding)) {
                $rx = '/(';
                while (65535 < $split_length) {
                    $rx .= '.{65535}';
                    $split_length -= 65535;
                }
                $rx .= '.{'.$split_length.'})/us';

                return preg_split($rx, $string, null, \PREG_SPLIT_DELIM_CAPTURE | \PREG_SPLIT_NO_EMPTY);
            }

            $result = [];
            $length = mb_strlen($string, $encoding);

            for ($i = 0; $i < $length; $i += $split_length) {
                $result[] = mb_substr($string, $i, $split_length, $encoding);
            }

            return $result;
        }

        public static function mb_strtolower($s, $encoding = null)
        {
            return self::mb_convert_case($s, \MB_CASE_LOWER, $encoding);
        }

        public static function mb_strtoupper($s, $encoding = null)
        {
            return self::mb_convert_case($s, \MB_CASE_UPPER, $encoding);
        }

        public static function mb_substitute_character($c = null)
        {
            if (null === $c) {
                return 'none';
            }
            if (0 === strcasecmp($c, 'none')) {
                return true;
            }
            if (80000 > \PHP_VERSION_ID) {
                return false;
            }

            throw new \ValueError('Argument #1 ($substitute_character) must be "none", "long", "entity" or a valid codepoint');
        }

        public static function mb_substr($s, $start, $length = null, $encoding = null)
        {
            $encoding = self::getEncoding($encoding);
            if ('CP850' === $encoding || 'ASCII' === $encoding) {
                return (string) substr($s, $start, null === $length ? 2147483647 : $length);
            }

            if ($start < 0) {
                $start = \iconv_strlen($s, $encoding) + $start;
                if ($start < 0) {
                    $start = 0;
                }
            }

            if (null === $length) {
                $length = 2147483647;
            } elseif ($length < 0) {
                $length = \iconv_strlen($s, $encoding) + $length - $start;
                if ($length < 0) {
                    return '';
                }
            }

            return (string) \iconv_substr($s, $start, $length, $encoding);
        }

        public static function mb_stripos($haystack, $needle, $offset = 0, $encoding = null)
        {
            $haystack = self::mb_convert_case($haystack, self::MB_CASE_FOLD, $encoding);
            $needle = self::mb_convert_case($needle, self::MB_CASE_FOLD, $encoding);

            return self::mb_strpos($haystack, $needle, $offset, $encoding);
        }

        public static function mb_stristr($haystack, $needle, $part = false, $encoding = null)
        {
            $pos = self::mb_stripos($haystack, $needle, 0, $encoding);

            return self::getSubpart($pos, $part, $haystack, $encoding);
        }

        public static function mb_strrchr($haystack, $needle, $part = false, $encoding = null)
        {
            $encoding = self::getEncoding($encoding);
            if ('CP850' === $encoding || 'ASCII' === $encoding) {
                $pos = strrpos($haystack, $needle);
            } else {
                $needle = self::mb_substr($needle, 0, 1, $encoding);
                $pos = \iconv_strrpos($haystack, $needle, $encoding);
            }

            return self::getSubpart($pos, $part, $haystack, $encoding);
        }

        public static function mb_strrichr($haystack, $needle, $part = false, $encoding = null)
        {
            $needle = self::mb_substr($needle, 0, 1, $encoding);
            $pos = self::mb_strripos($haystack, $needle, $encoding);

            return self::getSubpart($pos, $part, $haystack, $encoding);
        }

        public static function mb_strripos($haystack, $needle, $offset = 0, $encoding = null)
        {
            $haystack = self::mb_convert_case($haystack, self::MB_CASE_FOLD, $encoding);
            $needle = self::mb_convert_case($needle, self::MB_CASE_FOLD, $encoding);

            return self::mb_strrpos($haystack, $needle, $offset, $encoding);
        }

        public static function mb_strstr($haystack, $needle, $part = false, $encoding = null)
        {
            $pos = strpos($haystack, $needle);
            if (false === $pos) {
                return false;
            }
            if ($part) {
                return substr($haystack, 0, $pos);
            }

            return substr($haystack, $pos);
        }

        public static function mb_get_info($type = 'all')
        {
            $info = [
                'internal_encoding' => self::$internalEncoding,
                'http_output' => 'pass',
                'http_output_conv_mimetypes' => '^(text/|application/xhtml\+xml)',
                'func_overload' => 0,
                'func_overload_list' => 'no overload',
                'mail_charset' => 'UTF-8',
                'mail_header_encoding' => 'BASE64',
                'mail_body_encoding' => 'BASE64',
                'illegal_chars' => 0,
                'encoding_translation' => 'Off',
                'language' => self::$language,
                'detect_order' => self::$encodingList,
                'substitute_character' => 'none',
                'strict_detection' => 'Off',
            ];

            if ('all' === $type) {
                return $info;
            }
            if (isset($info[$type])) {
                return $info[$type];
            }

            return false;
        }

        public static function mb_http_input($type = '')
        {
            return false;
        }

        public static function mb_http_output($encoding = null)
        {
            return null !== $encoding ? 'pass' === $encoding : 'pass';
        }

        public static function mb_strwidth($s, $encoding = null)
        {
            $encoding = self::getEncoding($encoding);

            if ('UTF-8' !== $encoding) {
                $s = \iconv($encoding, 'UTF-8//IGNORE', $s);
            }

            $s = preg_replace('/[\x{1100}-\x{115F}\x{2329}\x{232A}\x{2E80}-\x{303E}\x{3040}-\x{A4CF}\x{AC00}-\x{D7A3}\x{F900}-\x{FAFF}\x{FE10}-\x{FE19}\x{FE30}-\x{FE6F}\x{FF00}-\x{FF60}\x{FFE0}-\x{FFE6}\x{20000}-\x{2FFFD}\x{30000}-\x{3FFFD}]/u', '', $s, -1, $wide);

            return ($wide << 1) + \iconv_strlen($s, 'UTF-8');
        }

        public static function mb_substr_count($haystack, $needle, $encoding = null)
        {
            return substr_count($haystack, $needle);
        }

        public static function mb_output_handler($contents, $status)
        {
            return $contents;
        }

        public static function mb_chr($code, $encoding = null)
        {
            if (0x80 > $code %= 0x200000) {
                $s = \chr($code);
            } elseif (0x800 > $code) {
                $s = \chr(0xC0 | $code >> 6).\chr(0x80 | $code & 0x3F);
            } elseif (0x10000 > $code) {
                $s = \chr(0xE0 | $code >> 12).\chr(0x80 | $code >> 6 & 0x3F).\chr(0x80 | $code & 0x3F);
            } else {
                $s = \chr(0xF0 | $code >> 18).\chr(0x80 | $code >> 12 & 0x3F).\chr(0x80 | $code >> 6 & 0x3F).\chr(0x80 | $code & 0x3F);
            }

            if ('UTF-8' !== $encoding = self::getEncoding($encoding)) {
                $s = mb_convert_encoding($s, $encoding, 'UTF-8');
            }

            return $s;
        }

        public static function mb_ord($s, $encoding = null)
        {
            if ('UTF-8' !== $encoding = self::getEncoding($encoding)) {
                $s = mb_convert_encoding($s, 'UTF-8', $encoding);
            }

            if (1 === \strlen($s)) {
                return \ord($s);
            }

            $code = ($s = unpack('C*', substr($s, 0, 4))) ? $s[1] : 0;
            if (0xF0 <= $code) {
                return (($code - 0xF0) << 18) + (($s[2] - 0x80) << 12) + (($s[3] - 0x80) << 6) + $s[4] - 0x80;
            }
            if (0xE0 <= $code) {
                return (($code - 0xE0) << 12) + (($s[2] - 0x80) << 6) + $s[3] - 0x80;
            }
            if (0xC0 <= $code) {
                return (($code - 0xC0) << 6) + $s[2] - 0x80;
            }

            return $code;
        }

        private static function getSubpart($pos, $part, $haystack, $encoding)
        {
            if (false === $pos) {
                return false;
            }
            if ($part) {
                return self::mb_substr($haystack, 0, $pos, $encoding);
            }

            return self::mb_substr($haystack, $pos, null, $encoding);
        }

        private static function html_encoding_callback(array $m)
        {
            $i = 1;
            $entities = '';
            $m = unpack('C*', htmlentities($m[0], \ENT_COMPAT, 'UTF-8'));

            while (isset($m[$i])) {
                if (0x80 > $m[$i]) {
                    $entities .= \chr($m[$i++]);
                    continue;
                }
                if (0xF0 <= $m[$i]) {
                    $c = (($m[$i++] - 0xF0) << 18) + (($m[$i++] - 0x80) << 12) + (($m[$i++] - 0x80) << 6) + $m[$i++] - 0x80;
                } elseif (0xE0 <= $m[$i]) {
                    $c = (($m[$i++] - 0xE0) << 12) + (($m[$i++] - 0x80) << 6) + $m[$i++] - 0x80;
                } else {
                    $c = (($m[$i++] - 0xC0) << 6) + $m[$i++] - 0x80;
                }

                $entities .= '&#'.$c.';';
            }

            return $entities;
        }

        private static function title_case(array $s)
        {
            return self::mb_convert_case($s[1], \MB_CASE_UPPER, 'UTF-8').self::mb_convert_case($s[2], \MB_CASE_LOWER, 'UTF-8');
        }

        private static function getData($file)
        {
            if (file_exists($file = __DIR__.'/Resources/unidata/'.$file.'.php')) {
                return require $file;
            }

            return false;
        }

        private static function getEncoding($encoding)
        {
            if (null === $encoding) {
                return self::$internalEncoding;
            }

            if ('UTF-8' === $encoding) {
                return 'UTF-8';
            }

            $encoding = strtoupper($encoding);

            if ('8BIT' === $encoding || 'BINARY' === $encoding) {
                return 'CP850';
            }

            if ('UTF8' === $encoding) {
                return 'UTF-8';
            }

            return $encoding;
        }
    }
  uploads-Carbon-vendor-symfony-polyfill-mbstring-README.md: |
    Symfony Polyfill / Mbstring
    ===========================

    This component provides a partial, native PHP implementation for the
    [Mbstring](https://php.net/mbstring) extension.

    More information can be found in the
    [main Polyfill README](https://github.com/symfony/polyfill/blob/master/README.md).

    License
    =======

    This library is released under the [MIT license](LICENSE).
  uploads-Carbon-vendor-symfony-polyfill-mbstring-Resources-unidata-lowerCase.php: "<?php\n\nreturn
    array (\n  'A' => 'a',\n  'B' => 'b',\n  'C' => 'c',\n  'D' => 'd',\n  'E' =>
    'e',\n  'F' => 'f',\n  'G' => 'g',\n  'H' => 'h',\n  'I' => 'i',\n  'J' => 'j',\n
    \ 'K' => 'k',\n  'L' => 'l',\n  'M' => 'm',\n  'N' => 'n',\n  'O' => 'o',\n  'P'
    => 'p',\n  'Q' => 'q',\n  'R' => 'r',\n  'S' => 's',\n  'T' => 't',\n  'U' =>
    'u',\n  'V' => 'v',\n  'W' => 'w',\n  'X' => 'x',\n  'Y' => 'y',\n  'Z' => 'z',\n
    \ 'À' => 'à',\n  'Á' => 'á',\n  'Â' => 'â',\n  'Ã' => 'ã',\n  'Ä' => 'ä',\n  'Å'
    => 'å',\n  'Æ' => 'æ',\n  'Ç' => 'ç',\n  'È' => 'è',\n  'É' => 'é',\n  'Ê' =>
    'ê',\n  'Ë' => 'ë',\n  'Ì' => 'ì',\n  'Í' => 'í',\n  'Î' => 'î',\n  'Ï' => 'ï',\n
    \ 'Ð' => 'ð',\n  'Ñ' => 'ñ',\n  'Ò' => 'ò',\n  'Ó' => 'ó',\n  'Ô' => 'ô',\n  'Õ'
    => 'õ',\n  'Ö' => 'ö',\n  'Ø' => 'ø',\n  'Ù' => 'ù',\n  'Ú' => 'ú',\n  'Û' =>
    'û',\n  'Ü' => 'ü',\n  'Ý' => 'ý',\n  'Þ' => 'þ',\n  'Ā' => 'ā',\n  'Ă' => 'ă',\n
    \ 'Ą' => 'ą',\n  'Ć' => 'ć',\n  'Ĉ' => 'ĉ',\n  'Ċ' => 'ċ',\n  'Č' => 'č',\n  'Ď'
    => 'ď',\n  'Đ' => 'đ',\n  'Ē' => 'ē',\n  'Ĕ' => 'ĕ',\n  'Ė' => 'ė',\n  'Ę' =>
    'ę',\n  'Ě' => 'ě',\n  'Ĝ' => 'ĝ',\n  'Ğ' => 'ğ',\n  'Ġ' => 'ġ',\n  'Ģ' => 'ģ',\n
    \ 'Ĥ' => 'ĥ',\n  'Ħ' => 'ħ',\n  'Ĩ' => 'ĩ',\n  'Ī' => 'ī',\n  'Ĭ' => 'ĭ',\n  'Į'
    => 'į',\n  'İ' => 'i̇',\n  'Ĳ' => 'ĳ',\n  'Ĵ' => 'ĵ',\n  'Ķ' => 'ķ',\n  'Ĺ' =>
    'ĺ',\n  'Ļ' => 'ļ',\n  'Ľ' => 'ľ',\n  'Ŀ' => 'ŀ',\n  'Ł' => 'ł',\n  'Ń' => 'ń',\n
    \ 'Ņ' => 'ņ',\n  'Ň' => 'ň',\n  'Ŋ' => 'ŋ',\n  'Ō' => 'ō',\n  'Ŏ' => 'ŏ',\n  'Ő'
    => 'ő',\n  'Œ' => 'œ',\n  'Ŕ' => 'ŕ',\n  'Ŗ' => 'ŗ',\n  'Ř' => 'ř',\n  'Ś' =>
    'ś',\n  'Ŝ' => 'ŝ',\n  'Ş' => 'ş',\n  'Š' => 'š',\n  'Ţ' => 'ţ',\n  'Ť' => 'ť',\n
    \ 'Ŧ' => 'ŧ',\n  'Ũ' => 'ũ',\n  'Ū' => 'ū',\n  'Ŭ' => 'ŭ',\n  'Ů' => 'ů',\n  'Ű'
    => 'ű',\n  'Ų' => 'ų',\n  'Ŵ' => 'ŵ',\n  'Ŷ' => 'ŷ',\n  'Ÿ' => 'ÿ',\n  'Ź' =>
    'ź',\n  'Ż' => 'ż',\n  'Ž' => 'ž',\n  'Ɓ' => 'ɓ',\n  'Ƃ' => 'ƃ',\n  'Ƅ' => 'ƅ',\n
    \ 'Ɔ' => 'ɔ',\n  'Ƈ' => 'ƈ',\n  'Ɖ' => 'ɖ',\n  'Ɗ' => 'ɗ',\n  'Ƌ' => 'ƌ',\n  'Ǝ'
    => 'ǝ',\n  'Ə' => 'ə',\n  'Ɛ' => 'ɛ',\n  'Ƒ' => 'ƒ',\n  'Ɠ' => 'ɠ',\n  'Ɣ' =>
    'ɣ',\n  'Ɩ' => 'ɩ',\n  'Ɨ' => 'ɨ',\n  'Ƙ' => 'ƙ',\n  'Ɯ' => 'ɯ',\n  'Ɲ' => 'ɲ',\n
    \ 'Ɵ' => 'ɵ',\n  'Ơ' => 'ơ',\n  'Ƣ' => 'ƣ',\n  'Ƥ' => 'ƥ',\n  'Ʀ' => 'ʀ',\n  'Ƨ'
    => 'ƨ',\n  'Ʃ' => 'ʃ',\n  'Ƭ' => 'ƭ',\n  'Ʈ' => 'ʈ',\n  'Ư' => 'ư',\n  'Ʊ' =>
    'ʊ',\n  'Ʋ' => 'ʋ',\n  'Ƴ' => 'ƴ',\n  'Ƶ' => 'ƶ',\n  'Ʒ' => 'ʒ',\n  'Ƹ' => 'ƹ',\n
    \ 'Ƽ' => 'ƽ',\n  'Ǆ' => 'ǆ',\n  'ǅ' => 'ǆ',\n  'Ǉ' => 'ǉ',\n  'ǈ' => 'ǉ',\n  'Ǌ'
    => 'ǌ',\n  'ǋ' => 'ǌ',\n  'Ǎ' => 'ǎ',\n  'Ǐ' => 'ǐ',\n  'Ǒ' => 'ǒ',\n  'Ǔ' =>
    'ǔ',\n  'Ǖ' => 'ǖ',\n  'Ǘ' => 'ǘ',\n  'Ǚ' => 'ǚ',\n  'Ǜ' => 'ǜ',\n  'Ǟ' => 'ǟ',\n
    \ 'Ǡ' => 'ǡ',\n  'Ǣ' => 'ǣ',\n  'Ǥ' => 'ǥ',\n  'Ǧ' => 'ǧ',\n  'Ǩ' => 'ǩ',\n  'Ǫ'
    => 'ǫ',\n  'Ǭ' => 'ǭ',\n  'Ǯ' => 'ǯ',\n  'Ǳ' => 'ǳ',\n  'ǲ' => 'ǳ',\n  'Ǵ' =>
    'ǵ',\n  'Ƕ' => 'ƕ',\n  'Ƿ' => 'ƿ',\n  'Ǹ' => 'ǹ',\n  'Ǻ' => 'ǻ',\n  'Ǽ' => 'ǽ',\n
    \ 'Ǿ' => 'ǿ',\n  'Ȁ' => 'ȁ',\n  'Ȃ' => 'ȃ',\n  'Ȅ' => 'ȅ',\n  'Ȇ' => 'ȇ',\n  'Ȉ'
    => 'ȉ',\n  'Ȋ' => 'ȋ',\n  'Ȍ' => 'ȍ',\n  'Ȏ' => 'ȏ',\n  'Ȑ' => 'ȑ',\n  'Ȓ' =>
    'ȓ',\n  'Ȕ' => 'ȕ',\n  'Ȗ' => 'ȗ',\n  'Ș' => 'ș',\n  'Ț' => 'ț',\n  'Ȝ' => 'ȝ',\n
    \ 'Ȟ' => 'ȟ',\n  'Ƞ' => 'ƞ',\n  'Ȣ' => 'ȣ',\n  'Ȥ' => 'ȥ',\n  'Ȧ' => 'ȧ',\n  'Ȩ'
    => 'ȩ',\n  'Ȫ' => 'ȫ',\n  'Ȭ' => 'ȭ',\n  'Ȯ' => 'ȯ',\n  'Ȱ' => 'ȱ',\n  'Ȳ' =>
    'ȳ',\n  'Ⱥ' => 'ⱥ',\n  'Ȼ' => 'ȼ',\n  'Ƚ' => 'ƚ',\n  'Ⱦ' => 'ⱦ',\n  'Ɂ' => 'ɂ',\n
    \ 'Ƀ' => 'ƀ',\n  'Ʉ' => 'ʉ',\n  'Ʌ' => 'ʌ',\n  'Ɇ' => 'ɇ',\n  'Ɉ' => 'ɉ',\n  'Ɋ'
    => 'ɋ',\n  'Ɍ' => 'ɍ',\n  'Ɏ' => 'ɏ',\n  'Ͱ' => 'ͱ',\n  'Ͳ' => 'ͳ',\n  'Ͷ' =>
    'ͷ',\n  'Ϳ' => 'ϳ',\n  'Ά' => 'ά',\n  'Έ' => 'έ',\n  'Ή' => 'ή',\n  'Ί' => 'ί',\n
    \ 'Ό' => 'ό',\n  'Ύ' => 'ύ',\n  'Ώ' => 'ώ',\n  'Α' => 'α',\n  'Β' => 'β',\n  'Γ'
    => 'γ',\n  'Δ' => 'δ',\n  'Ε' => 'ε',\n  'Ζ' => 'ζ',\n  'Η' => 'η',\n  'Θ' =>
    'θ',\n  'Ι' => 'ι',\n  'Κ' => 'κ',\n  'Λ' => 'λ',\n  'Μ' => 'μ',\n  'Ν' => 'ν',\n
    \ 'Ξ' => 'ξ',\n  'Ο' => 'ο',\n  'Π' => 'π',\n  'Ρ' => 'ρ',\n  'Σ' => 'σ',\n  'Τ'
    => 'τ',\n  'Υ' => 'υ',\n  'Φ' => 'φ',\n  'Χ' => 'χ',\n  'Ψ' => 'ψ',\n  'Ω' =>
    'ω',\n  'Ϊ' => 'ϊ',\n  'Ϋ' => 'ϋ',\n  'Ϗ' => 'ϗ',\n  'Ϙ' => 'ϙ',\n  'Ϛ' => 'ϛ',\n
    \ 'Ϝ' => 'ϝ',\n  'Ϟ' => 'ϟ',\n  'Ϡ' => 'ϡ',\n  'Ϣ' => 'ϣ',\n  'Ϥ' => 'ϥ',\n  'Ϧ'
    => 'ϧ',\n  'Ϩ' => 'ϩ',\n  'Ϫ' => 'ϫ',\n  'Ϭ' => 'ϭ',\n  'Ϯ' => 'ϯ',\n  'ϴ' =>
    'θ',\n  'Ϸ' => 'ϸ',\n  'Ϲ' => 'ϲ',\n  'Ϻ' => 'ϻ',\n  'Ͻ' => 'ͻ',\n  'Ͼ' => 'ͼ',\n
    \ 'Ͽ' => 'ͽ',\n  'Ѐ' => 'ѐ',\n  'Ё' => 'ё',\n  'Ђ' => 'ђ',\n  'Ѓ' => 'ѓ',\n  'Є'
    => 'є',\n  'Ѕ' => 'ѕ',\n  'І' => 'і',\n  'Ї' => 'ї',\n  'Ј' => 'ј',\n  'Љ' =>
    'љ',\n  'Њ' => 'њ',\n  'Ћ' => 'ћ',\n  'Ќ' => 'ќ',\n  'Ѝ' => 'ѝ',\n  'Ў' => 'ў',\n
    \ 'Џ' => 'џ',\n  'А' => 'а',\n  'Б' => 'б',\n  'В' => 'в',\n  'Г' => 'г',\n  'Д'
    => 'д',\n  'Е' => 'е',\n  'Ж' => 'ж',\n  'З' => 'з',\n  'И' => 'и',\n  'Й' =>
    'й',\n  'К' => 'к',\n  'Л' => 'л',\n  'М' => 'м',\n  'Н' => 'н',\n  'О' => 'о',\n
    \ 'П' => 'п',\n  'Р' => 'р',\n  'С' => 'с',\n  'Т' => 'т',\n  'У' => 'у',\n  'Ф'
    => 'ф',\n  'Х' => 'х',\n  'Ц' => 'ц',\n  'Ч' => 'ч',\n  'Ш' => 'ш',\n  'Щ' =>
    'щ',\n  'Ъ' => 'ъ',\n  'Ы' => 'ы',\n  'Ь' => 'ь',\n  'Э' => 'э',\n  'Ю' => 'ю',\n
    \ 'Я' => 'я',\n  'Ѡ' => 'ѡ',\n  'Ѣ' => 'ѣ',\n  'Ѥ' => 'ѥ',\n  'Ѧ' => 'ѧ',\n  'Ѩ'
    => 'ѩ',\n  'Ѫ' => 'ѫ',\n  'Ѭ' => 'ѭ',\n  'Ѯ' => 'ѯ',\n  'Ѱ' => 'ѱ',\n  'Ѳ' =>
    'ѳ',\n  'Ѵ' => 'ѵ',\n  'Ѷ' => 'ѷ',\n  'Ѹ' => 'ѹ',\n  'Ѻ' => 'ѻ',\n  'Ѽ' => 'ѽ',\n
    \ 'Ѿ' => 'ѿ',\n  'Ҁ' => 'ҁ',\n  'Ҋ' => 'ҋ',\n  'Ҍ' => 'ҍ',\n  'Ҏ' => 'ҏ',\n  'Ґ'
    => 'ґ',\n  'Ғ' => 'ғ',\n  'Ҕ' => 'ҕ',\n  'Җ' => 'җ',\n  'Ҙ' => 'ҙ',\n  'Қ' =>
    'қ',\n  'Ҝ' => 'ҝ',\n  'Ҟ' => 'ҟ',\n  'Ҡ' => 'ҡ',\n  'Ң' => 'ң',\n  'Ҥ' => 'ҥ',\n
    \ 'Ҧ' => 'ҧ',\n  'Ҩ' => 'ҩ',\n  'Ҫ' => 'ҫ',\n  'Ҭ' => 'ҭ',\n  'Ү' => 'ү',\n  'Ұ'
    => 'ұ',\n  'Ҳ' => 'ҳ',\n  'Ҵ' => 'ҵ',\n  'Ҷ' => 'ҷ',\n  'Ҹ' => 'ҹ',\n  'Һ' =>
    'һ',\n  'Ҽ' => 'ҽ',\n  'Ҿ' => 'ҿ',\n  'Ӏ' => 'ӏ',\n  'Ӂ' => 'ӂ',\n  'Ӄ' => 'ӄ',\n
    \ 'Ӆ' => 'ӆ',\n  'Ӈ' => 'ӈ',\n  'Ӊ' => 'ӊ',\n  'Ӌ' => 'ӌ',\n  'Ӎ' => 'ӎ',\n  'Ӑ'
    => 'ӑ',\n  'Ӓ' => 'ӓ',\n  'Ӕ' => 'ӕ',\n  'Ӗ' => 'ӗ',\n  'Ә' => 'ә',\n  'Ӛ' =>
    'ӛ',\n  'Ӝ' => 'ӝ',\n  'Ӟ' => 'ӟ',\n  'Ӡ' => 'ӡ',\n  'Ӣ' => 'ӣ',\n  'Ӥ' => 'ӥ',\n
    \ 'Ӧ' => 'ӧ',\n  'Ө' => 'ө',\n  'Ӫ' => 'ӫ',\n  'Ӭ' => 'ӭ',\n  'Ӯ' => 'ӯ',\n  'Ӱ'
    => 'ӱ',\n  'Ӳ' => 'ӳ',\n  'Ӵ' => 'ӵ',\n  'Ӷ' => 'ӷ',\n  'Ӹ' => 'ӹ',\n  'Ӻ' =>
    'ӻ',\n  'Ӽ' => 'ӽ',\n  'Ӿ' => 'ӿ',\n  'Ԁ' => 'ԁ',\n  'Ԃ' => 'ԃ',\n  'Ԅ' => 'ԅ',\n
    \ 'Ԇ' => 'ԇ',\n  'Ԉ' => 'ԉ',\n  'Ԋ' => 'ԋ',\n  'Ԍ' => 'ԍ',\n  'Ԏ' => 'ԏ',\n  'Ԑ'
    => 'ԑ',\n  'Ԓ' => 'ԓ',\n  'Ԕ' => 'ԕ',\n  'Ԗ' => 'ԗ',\n  'Ԙ' => 'ԙ',\n  'Ԛ' =>
    'ԛ',\n  'Ԝ' => 'ԝ',\n  'Ԟ' => 'ԟ',\n  'Ԡ' => 'ԡ',\n  'Ԣ' => 'ԣ',\n  'Ԥ' => 'ԥ',\n
    \ 'Ԧ' => 'ԧ',\n  'Ԩ' => 'ԩ',\n  'Ԫ' => 'ԫ',\n  'Ԭ' => 'ԭ',\n  'Ԯ' => 'ԯ',\n  'Ա'
    => 'ա',\n  'Բ' => 'բ',\n  'Գ' => 'գ',\n  'Դ' => 'դ',\n  'Ե' => 'ե',\n  'Զ' =>
    'զ',\n  'Է' => 'է',\n  'Ը' => 'ը',\n  'Թ' => 'թ',\n  'Ժ' => 'ժ',\n  'Ի' => 'ի',\n
    \ 'Լ' => 'լ',\n  'Խ' => 'խ',\n  'Ծ' => 'ծ',\n  'Կ' => 'կ',\n  'Հ' => 'հ',\n  'Ձ'
    => 'ձ',\n  'Ղ' => 'ղ',\n  'Ճ' => 'ճ',\n  'Մ' => 'մ',\n  'Յ' => 'յ',\n  'Ն' =>
    'ն',\n  'Շ' => 'շ',\n  'Ո' => 'ո',\n  'Չ' => 'չ',\n  'Պ' => 'պ',\n  'Ջ' => 'ջ',\n
    \ 'Ռ' => 'ռ',\n  'Ս' => 'ս',\n  'Վ' => 'վ',\n  'Տ' => 'տ',\n  'Ր' => 'ր',\n  'Ց'
    => 'ց',\n  'Ւ' => 'ւ',\n  'Փ' => 'փ',\n  'Ք' => 'ք',\n  'Օ' => 'օ',\n  'Ֆ' =>
    'ֆ',\n  'Ⴀ' => 'ⴀ',\n  'Ⴁ' => 'ⴁ',\n  'Ⴂ' => 'ⴂ',\n  'Ⴃ' => 'ⴃ',\n  'Ⴄ' => 'ⴄ',\n
    \ 'Ⴅ' => 'ⴅ',\n  'Ⴆ' => 'ⴆ',\n  'Ⴇ' => 'ⴇ',\n  'Ⴈ' => 'ⴈ',\n  'Ⴉ' => 'ⴉ',\n  'Ⴊ'
    => 'ⴊ',\n  'Ⴋ' => 'ⴋ',\n  'Ⴌ' => 'ⴌ',\n  'Ⴍ' => 'ⴍ',\n  'Ⴎ' => 'ⴎ',\n  'Ⴏ' =>
    'ⴏ',\n  'Ⴐ' => 'ⴐ',\n  'Ⴑ' => 'ⴑ',\n  'Ⴒ' => 'ⴒ',\n  'Ⴓ' => 'ⴓ',\n  'Ⴔ' => 'ⴔ',\n
    \ 'Ⴕ' => 'ⴕ',\n  'Ⴖ' => 'ⴖ',\n  'Ⴗ' => 'ⴗ',\n  'Ⴘ' => 'ⴘ',\n  'Ⴙ' => 'ⴙ',\n  'Ⴚ'
    => 'ⴚ',\n  'Ⴛ' => 'ⴛ',\n  'Ⴜ' => 'ⴜ',\n  'Ⴝ' => 'ⴝ',\n  'Ⴞ' => 'ⴞ',\n  'Ⴟ' =>
    'ⴟ',\n  'Ⴠ' => 'ⴠ',\n  'Ⴡ' => 'ⴡ',\n  'Ⴢ' => 'ⴢ',\n  'Ⴣ' => 'ⴣ',\n  'Ⴤ' => 'ⴤ',\n
    \ 'Ⴥ' => 'ⴥ',\n  'Ⴧ' => 'ⴧ',\n  'Ⴭ' => 'ⴭ',\n  'Ꭰ' => 'ꭰ',\n  'Ꭱ' => 'ꭱ',\n  'Ꭲ'
    => 'ꭲ',\n  'Ꭳ' => 'ꭳ',\n  'Ꭴ' => 'ꭴ',\n  'Ꭵ' => 'ꭵ',\n  'Ꭶ' => 'ꭶ',\n  'Ꭷ' =>
    'ꭷ',\n  'Ꭸ' => 'ꭸ',\n  'Ꭹ' => 'ꭹ',\n  'Ꭺ' => 'ꭺ',\n  'Ꭻ' => 'ꭻ',\n  'Ꭼ' => 'ꭼ',\n
    \ 'Ꭽ' => 'ꭽ',\n  'Ꭾ' => 'ꭾ',\n  'Ꭿ' => 'ꭿ',\n  'Ꮀ' => 'ꮀ',\n  'Ꮁ' => 'ꮁ',\n  'Ꮂ'
    => 'ꮂ',\n  'Ꮃ' => 'ꮃ',\n  'Ꮄ' => 'ꮄ',\n  'Ꮅ' => 'ꮅ',\n  'Ꮆ' => 'ꮆ',\n  'Ꮇ' =>
    'ꮇ',\n  'Ꮈ' => 'ꮈ',\n  'Ꮉ' => 'ꮉ',\n  'Ꮊ' => 'ꮊ',\n  'Ꮋ' => 'ꮋ',\n  'Ꮌ' => 'ꮌ',\n
    \ 'Ꮍ' => 'ꮍ',\n  'Ꮎ' => 'ꮎ',\n  'Ꮏ' => 'ꮏ',\n  'Ꮐ' => 'ꮐ',\n  'Ꮑ' => 'ꮑ',\n  'Ꮒ'
    => 'ꮒ',\n  'Ꮓ' => 'ꮓ',\n  'Ꮔ' => 'ꮔ',\n  'Ꮕ' => 'ꮕ',\n  'Ꮖ' => 'ꮖ',\n  'Ꮗ' =>
    'ꮗ',\n  'Ꮘ' => 'ꮘ',\n  'Ꮙ' => 'ꮙ',\n  'Ꮚ' => 'ꮚ',\n  'Ꮛ' => 'ꮛ',\n  'Ꮜ' => 'ꮜ',\n
    \ 'Ꮝ' => 'ꮝ',\n  'Ꮞ' => 'ꮞ',\n  'Ꮟ' => 'ꮟ',\n  'Ꮠ' => 'ꮠ',\n  'Ꮡ' => 'ꮡ',\n  'Ꮢ'
    => 'ꮢ',\n  'Ꮣ' => 'ꮣ',\n  'Ꮤ' => 'ꮤ',\n  'Ꮥ' => 'ꮥ',\n  'Ꮦ' => 'ꮦ',\n  'Ꮧ' =>
    'ꮧ',\n  'Ꮨ' => 'ꮨ',\n  'Ꮩ' => 'ꮩ',\n  'Ꮪ' => 'ꮪ',\n  'Ꮫ' => 'ꮫ',\n  'Ꮬ' => 'ꮬ',\n
    \ 'Ꮭ' => 'ꮭ',\n  'Ꮮ' => 'ꮮ',\n  'Ꮯ' => 'ꮯ',\n  'Ꮰ' => 'ꮰ',\n  'Ꮱ' => 'ꮱ',\n  'Ꮲ'
    => 'ꮲ',\n  'Ꮳ' => 'ꮳ',\n  'Ꮴ' => 'ꮴ',\n  'Ꮵ' => 'ꮵ',\n  'Ꮶ' => 'ꮶ',\n  'Ꮷ' =>
    'ꮷ',\n  'Ꮸ' => 'ꮸ',\n  'Ꮹ' => 'ꮹ',\n  'Ꮺ' => 'ꮺ',\n  'Ꮻ' => 'ꮻ',\n  'Ꮼ' => 'ꮼ',\n
    \ 'Ꮽ' => 'ꮽ',\n  'Ꮾ' => 'ꮾ',\n  'Ꮿ' => 'ꮿ',\n  'Ᏸ' => 'ᏸ',\n  'Ᏹ' => 'ᏹ',\n  'Ᏺ'
    => 'ᏺ',\n  'Ᏻ' => 'ᏻ',\n  'Ᏼ' => 'ᏼ',\n  'Ᏽ' => 'ᏽ',\n  'Ა' => 'ა',\n  'Ბ' =>
    'ბ',\n  'Გ' => 'გ',\n  'Დ' => 'დ',\n  'Ე' => 'ე',\n  'Ვ' => 'ვ',\n  'Ზ' => 'ზ',\n
    \ 'Თ' => 'თ',\n  'Ი' => 'ი',\n  'Კ' => 'კ',\n  'Ლ' => 'ლ',\n  'Მ' => 'მ',\n  'Ნ'
    => 'ნ',\n  'Ო' => 'ო',\n  'Პ' => 'პ',\n  'Ჟ' => 'ჟ',\n  'Რ' => 'რ',\n  'Ს' =>
    'ს',\n  'Ტ' => 'ტ',\n  'Უ' => 'უ',\n  'Ფ' => 'ფ',\n  'Ქ' => 'ქ',\n  'Ღ' => 'ღ',\n
    \ 'Ყ' => 'ყ',\n  'Შ' => 'შ',\n  'Ჩ' => 'ჩ',\n  'Ც' => 'ც',\n  'Ძ' => 'ძ',\n  'Წ'
    => 'წ',\n  'Ჭ' => 'ჭ',\n  'Ხ' => 'ხ',\n  'Ჯ' => 'ჯ',\n  'Ჰ' => 'ჰ',\n  'Ჱ' =>
    'ჱ',\n  'Ჲ' => 'ჲ',\n  'Ჳ' => 'ჳ',\n  'Ჴ' => 'ჴ',\n  'Ჵ' => 'ჵ',\n  'Ჶ' => 'ჶ',\n
    \ 'Ჷ' => 'ჷ',\n  'Ჸ' => 'ჸ',\n  'Ჹ' => 'ჹ',\n  'Ჺ' => 'ჺ',\n  'Ჽ' => 'ჽ',\n  'Ჾ'
    => 'ჾ',\n  'Ჿ' => 'ჿ',\n  'Ḁ' => 'ḁ',\n  'Ḃ' => 'ḃ',\n  'Ḅ' => 'ḅ',\n  'Ḇ' =>
    'ḇ',\n  'Ḉ' => 'ḉ',\n  'Ḋ' => 'ḋ',\n  'Ḍ' => 'ḍ',\n  'Ḏ' => 'ḏ',\n  'Ḑ' => 'ḑ',\n
    \ 'Ḓ' => 'ḓ',\n  'Ḕ' => 'ḕ',\n  'Ḗ' => 'ḗ',\n  'Ḙ' => 'ḙ',\n  'Ḛ' => 'ḛ',\n  'Ḝ'
    => 'ḝ',\n  'Ḟ' => 'ḟ',\n  'Ḡ' => 'ḡ',\n  'Ḣ' => 'ḣ',\n  'Ḥ' => 'ḥ',\n  'Ḧ' =>
    'ḧ',\n  'Ḩ' => 'ḩ',\n  'Ḫ' => 'ḫ',\n  'Ḭ' => 'ḭ',\n  'Ḯ' => 'ḯ',\n  'Ḱ' => 'ḱ',\n
    \ 'Ḳ' => 'ḳ',\n  'Ḵ' => 'ḵ',\n  'Ḷ' => 'ḷ',\n  'Ḹ' => 'ḹ',\n  'Ḻ' => 'ḻ',\n  'Ḽ'
    => 'ḽ',\n  'Ḿ' => 'ḿ',\n  'Ṁ' => 'ṁ',\n  'Ṃ' => 'ṃ',\n  'Ṅ' => 'ṅ',\n  'Ṇ' =>
    'ṇ',\n  'Ṉ' => 'ṉ',\n  'Ṋ' => 'ṋ',\n  'Ṍ' => 'ṍ',\n  'Ṏ' => 'ṏ',\n  'Ṑ' => 'ṑ',\n
    \ 'Ṓ' => 'ṓ',\n  'Ṕ' => 'ṕ',\n  'Ṗ' => 'ṗ',\n  'Ṙ' => 'ṙ',\n  'Ṛ' => 'ṛ',\n  'Ṝ'
    => 'ṝ',\n  'Ṟ' => 'ṟ',\n  'Ṡ' => 'ṡ',\n  'Ṣ' => 'ṣ',\n  'Ṥ' => 'ṥ',\n  'Ṧ' =>
    'ṧ',\n  'Ṩ' => 'ṩ',\n  'Ṫ' => 'ṫ',\n  'Ṭ' => 'ṭ',\n  'Ṯ' => 'ṯ',\n  'Ṱ' => 'ṱ',\n
    \ 'Ṳ' => 'ṳ',\n  'Ṵ' => 'ṵ',\n  'Ṷ' => 'ṷ',\n  'Ṹ' => 'ṹ',\n  'Ṻ' => 'ṻ',\n  'Ṽ'
    => 'ṽ',\n  'Ṿ' => 'ṿ',\n  'Ẁ' => 'ẁ',\n  'Ẃ' => 'ẃ',\n  'Ẅ' => 'ẅ',\n  'Ẇ' =>
    'ẇ',\n  'Ẉ' => 'ẉ',\n  'Ẋ' => 'ẋ',\n  'Ẍ' => 'ẍ',\n  'Ẏ' => 'ẏ',\n  'Ẑ' => 'ẑ',\n
    \ 'Ẓ' => 'ẓ',\n  'Ẕ' => 'ẕ',\n  'ẞ' => 'ß',\n  'Ạ' => 'ạ',\n  'Ả' => 'ả',\n  'Ấ'
    => 'ấ',\n  'Ầ' => 'ầ',\n  'Ẩ' => 'ẩ',\n  'Ẫ' => 'ẫ',\n  'Ậ' => 'ậ',\n  'Ắ' =>
    'ắ',\n  'Ằ' => 'ằ',\n  'Ẳ' => 'ẳ',\n  'Ẵ' => 'ẵ',\n  'Ặ' => 'ặ',\n  'Ẹ' => 'ẹ',\n
    \ 'Ẻ' => 'ẻ',\n  'Ẽ' => 'ẽ',\n  'Ế' => 'ế',\n  'Ề' => 'ề',\n  'Ể' => 'ể',\n  'Ễ'
    => 'ễ',\n  'Ệ' => 'ệ',\n  'Ỉ' => 'ỉ',\n  'Ị' => 'ị',\n  'Ọ' => 'ọ',\n  'Ỏ' =>
    'ỏ',\n  'Ố' => 'ố',\n  'Ồ' => 'ồ',\n  'Ổ' => 'ổ',\n  'Ỗ' => 'ỗ',\n  'Ộ' => 'ộ',\n
    \ 'Ớ' => 'ớ',\n  'Ờ' => 'ờ',\n  'Ở' => 'ở',\n  'Ỡ' => 'ỡ',\n  'Ợ' => 'ợ',\n  'Ụ'
    => 'ụ',\n  'Ủ' => 'ủ',\n  'Ứ' => 'ứ',\n  'Ừ' => 'ừ',\n  'Ử' => 'ử',\n  'Ữ' =>
    'ữ',\n  'Ự' => 'ự',\n  'Ỳ' => 'ỳ',\n  'Ỵ' => 'ỵ',\n  'Ỷ' => 'ỷ',\n  'Ỹ' => 'ỹ',\n
    \ 'Ỻ' => 'ỻ',\n  'Ỽ' => 'ỽ',\n  'Ỿ' => 'ỿ',\n  'Ἀ' => 'ἀ',\n  'Ἁ' => 'ἁ',\n  'Ἂ'
    => 'ἂ',\n  'Ἃ' => 'ἃ',\n  'Ἄ' => 'ἄ',\n  'Ἅ' => 'ἅ',\n  'Ἆ' => 'ἆ',\n  'Ἇ' =>
    'ἇ',\n  'Ἐ' => 'ἐ',\n  'Ἑ' => 'ἑ',\n  'Ἒ' => 'ἒ',\n  'Ἓ' => 'ἓ',\n  'Ἔ' => 'ἔ',\n
    \ 'Ἕ' => 'ἕ',\n  'Ἠ' => 'ἠ',\n  'Ἡ' => 'ἡ',\n  'Ἢ' => 'ἢ',\n  'Ἣ' => 'ἣ',\n  'Ἤ'
    => 'ἤ',\n  'Ἥ' => 'ἥ',\n  'Ἦ' => 'ἦ',\n  'Ἧ' => 'ἧ',\n  'Ἰ' => 'ἰ',\n  'Ἱ' =>
    'ἱ',\n  'Ἲ' => 'ἲ',\n  'Ἳ' => 'ἳ',\n  'Ἴ' => 'ἴ',\n  'Ἵ' => 'ἵ',\n  'Ἶ' => 'ἶ',\n
    \ 'Ἷ' => 'ἷ',\n  'Ὀ' => 'ὀ',\n  'Ὁ' => 'ὁ',\n  'Ὂ' => 'ὂ',\n  'Ὃ' => 'ὃ',\n  'Ὄ'
    => 'ὄ',\n  'Ὅ' => 'ὅ',\n  'Ὑ' => 'ὑ',\n  'Ὓ' => 'ὓ',\n  'Ὕ' => 'ὕ',\n  'Ὗ' =>
    'ὗ',\n  'Ὠ' => 'ὠ',\n  'Ὡ' => 'ὡ',\n  'Ὢ' => 'ὢ',\n  'Ὣ' => 'ὣ',\n  'Ὤ' => 'ὤ',\n
    \ 'Ὥ' => 'ὥ',\n  'Ὦ' => 'ὦ',\n  'Ὧ' => 'ὧ',\n  'ᾈ' => 'ᾀ',\n  'ᾉ' => 'ᾁ',\n  'ᾊ'
    => 'ᾂ',\n  'ᾋ' => 'ᾃ',\n  'ᾌ' => 'ᾄ',\n  'ᾍ' => 'ᾅ',\n  'ᾎ' => 'ᾆ',\n  'ᾏ' =>
    'ᾇ',\n  'ᾘ' => 'ᾐ',\n  'ᾙ' => 'ᾑ',\n  'ᾚ' => 'ᾒ',\n  'ᾛ' => 'ᾓ',\n  'ᾜ' => 'ᾔ',\n
    \ 'ᾝ' => 'ᾕ',\n  'ᾞ' => 'ᾖ',\n  'ᾟ' => 'ᾗ',\n  'ᾨ' => 'ᾠ',\n  'ᾩ' => 'ᾡ',\n  'ᾪ'
    => 'ᾢ',\n  'ᾫ' => 'ᾣ',\n  'ᾬ' => 'ᾤ',\n  'ᾭ' => 'ᾥ',\n  'ᾮ' => 'ᾦ',\n  'ᾯ' =>
    'ᾧ',\n  'Ᾰ' => 'ᾰ',\n  'Ᾱ' => 'ᾱ',\n  'Ὰ' => 'ὰ',\n  'Ά' => 'ά',\n  'ᾼ' => 'ᾳ',\n
    \ 'Ὲ' => 'ὲ',\n  'Έ' => 'έ',\n  'Ὴ' => 'ὴ',\n  'Ή' => 'ή',\n  'ῌ' => 'ῃ',\n  'Ῐ'
    => 'ῐ',\n  'Ῑ' => 'ῑ',\n  'Ὶ' => 'ὶ',\n  'Ί' => 'ί',\n  'Ῠ' => 'ῠ',\n  'Ῡ' =>
    'ῡ',\n  'Ὺ' => 'ὺ',\n  'Ύ' => 'ύ',\n  'Ῥ' => 'ῥ',\n  'Ὸ' => 'ὸ',\n  'Ό' => 'ό',\n
    \ 'Ὼ' => 'ὼ',\n  'Ώ' => 'ώ',\n  'ῼ' => 'ῳ',\n  'Ω' => 'ω',\n  'K' => 'k',\n  'Å'
    => 'å',\n  'Ⅎ' => 'ⅎ',\n  'Ⅰ' => 'ⅰ',\n  'Ⅱ' => 'ⅱ',\n  'Ⅲ' => 'ⅲ',\n  'Ⅳ' =>
    'ⅳ',\n  'Ⅴ' => 'ⅴ',\n  'Ⅵ' => 'ⅵ',\n  'Ⅶ' => 'ⅶ',\n  'Ⅷ' => 'ⅷ',\n  'Ⅸ' => 'ⅸ',\n
    \ 'Ⅹ' => 'ⅹ',\n  'Ⅺ' => 'ⅺ',\n  'Ⅻ' => 'ⅻ',\n  'Ⅼ' => 'ⅼ',\n  'Ⅽ' => 'ⅽ',\n  'Ⅾ'
    => 'ⅾ',\n  'Ⅿ' => 'ⅿ',\n  'Ↄ' => 'ↄ',\n  'Ⓐ' => 'ⓐ',\n  'Ⓑ' => 'ⓑ',\n  'Ⓒ' =>
    'ⓒ',\n  'Ⓓ' => 'ⓓ',\n  'Ⓔ' => 'ⓔ',\n  'Ⓕ' => 'ⓕ',\n  'Ⓖ' => 'ⓖ',\n  'Ⓗ' => 'ⓗ',\n
    \ 'Ⓘ' => 'ⓘ',\n  'Ⓙ' => 'ⓙ',\n  'Ⓚ' => 'ⓚ',\n  'Ⓛ' => 'ⓛ',\n  'Ⓜ' => 'ⓜ',\n  'Ⓝ'
    => 'ⓝ',\n  'Ⓞ' => 'ⓞ',\n  'Ⓟ' => 'ⓟ',\n  'Ⓠ' => 'ⓠ',\n  'Ⓡ' => 'ⓡ',\n  'Ⓢ' =>
    'ⓢ',\n  'Ⓣ' => 'ⓣ',\n  'Ⓤ' => 'ⓤ',\n  'Ⓥ' => 'ⓥ',\n  'Ⓦ' => 'ⓦ',\n  'Ⓧ' => 'ⓧ',\n
    \ 'Ⓨ' => 'ⓨ',\n  'Ⓩ' => 'ⓩ',\n  'Ⰰ' => 'ⰰ',\n  'Ⰱ' => 'ⰱ',\n  'Ⰲ' => 'ⰲ',\n  'Ⰳ'
    => 'ⰳ',\n  'Ⰴ' => 'ⰴ',\n  'Ⰵ' => 'ⰵ',\n  'Ⰶ' => 'ⰶ',\n  'Ⰷ' => 'ⰷ',\n  'Ⰸ' =>
    'ⰸ',\n  'Ⰹ' => 'ⰹ',\n  'Ⰺ' => 'ⰺ',\n  'Ⰻ' => 'ⰻ',\n  'Ⰼ' => 'ⰼ',\n  'Ⰽ' => 'ⰽ',\n
    \ 'Ⰾ' => 'ⰾ',\n  'Ⰿ' => 'ⰿ',\n  'Ⱀ' => 'ⱀ',\n  'Ⱁ' => 'ⱁ',\n  'Ⱂ' => 'ⱂ',\n  'Ⱃ'
    => 'ⱃ',\n  'Ⱄ' => 'ⱄ',\n  'Ⱅ' => 'ⱅ',\n  'Ⱆ' => 'ⱆ',\n  'Ⱇ' => 'ⱇ',\n  'Ⱈ' =>
    'ⱈ',\n  'Ⱉ' => 'ⱉ',\n  'Ⱊ' => 'ⱊ',\n  'Ⱋ' => 'ⱋ',\n  'Ⱌ' => 'ⱌ',\n  'Ⱍ' => 'ⱍ',\n
    \ 'Ⱎ' => 'ⱎ',\n  'Ⱏ' => 'ⱏ',\n  'Ⱐ' => 'ⱐ',\n  'Ⱑ' => 'ⱑ',\n  'Ⱒ' => 'ⱒ',\n  'Ⱓ'
    => 'ⱓ',\n  'Ⱔ' => 'ⱔ',\n  'Ⱕ' => 'ⱕ',\n  'Ⱖ' => 'ⱖ',\n  'Ⱗ' => 'ⱗ',\n  'Ⱘ' =>
    'ⱘ',\n  'Ⱙ' => 'ⱙ',\n  'Ⱚ' => 'ⱚ',\n  'Ⱛ' => 'ⱛ',\n  'Ⱜ' => 'ⱜ',\n  'Ⱝ' => 'ⱝ',\n
    \ 'Ⱞ' => 'ⱞ',\n  'Ⱡ' => 'ⱡ',\n  'Ɫ' => 'ɫ',\n  'Ᵽ' => 'ᵽ',\n  'Ɽ' => 'ɽ',\n  'Ⱨ'
    => 'ⱨ',\n  'Ⱪ' => 'ⱪ',\n  'Ⱬ' => 'ⱬ',\n  'Ɑ' => 'ɑ',\n  'Ɱ' => 'ɱ',\n  'Ɐ' =>
    'ɐ',\n  'Ɒ' => 'ɒ',\n  'Ⱳ' => 'ⱳ',\n  'Ⱶ' => 'ⱶ',\n  'Ȿ' => 'ȿ',\n  'Ɀ' => 'ɀ',\n
    \ 'Ⲁ' => 'ⲁ',\n  'Ⲃ' => 'ⲃ',\n  'Ⲅ' => 'ⲅ',\n  'Ⲇ' => 'ⲇ',\n  'Ⲉ' => 'ⲉ',\n  'Ⲋ'
    => 'ⲋ',\n  'Ⲍ' => 'ⲍ',\n  'Ⲏ' => 'ⲏ',\n  'Ⲑ' => 'ⲑ',\n  'Ⲓ' => 'ⲓ',\n  'Ⲕ' =>
    'ⲕ',\n  'Ⲗ' => 'ⲗ',\n  'Ⲙ' => 'ⲙ',\n  'Ⲛ' => 'ⲛ',\n  'Ⲝ' => 'ⲝ',\n  'Ⲟ' => 'ⲟ',\n
    \ 'Ⲡ' => 'ⲡ',\n  'Ⲣ' => 'ⲣ',\n  'Ⲥ' => 'ⲥ',\n  'Ⲧ' => 'ⲧ',\n  'Ⲩ' => 'ⲩ',\n  'Ⲫ'
    => 'ⲫ',\n  'Ⲭ' => 'ⲭ',\n  'Ⲯ' => 'ⲯ',\n  'Ⲱ' => 'ⲱ',\n  'Ⲳ' => 'ⲳ',\n  'Ⲵ' =>
    'ⲵ',\n  'Ⲷ' => 'ⲷ',\n  'Ⲹ' => 'ⲹ',\n  'Ⲻ' => 'ⲻ',\n  'Ⲽ' => 'ⲽ',\n  'Ⲿ' => 'ⲿ',\n
    \ 'Ⳁ' => 'ⳁ',\n  'Ⳃ' => 'ⳃ',\n  'Ⳅ' => 'ⳅ',\n  'Ⳇ' => 'ⳇ',\n  'Ⳉ' => 'ⳉ',\n  'Ⳋ'
    => 'ⳋ',\n  'Ⳍ' => 'ⳍ',\n  'Ⳏ' => 'ⳏ',\n  'Ⳑ' => 'ⳑ',\n  'Ⳓ' => 'ⳓ',\n  'Ⳕ' =>
    'ⳕ',\n  'Ⳗ' => 'ⳗ',\n  'Ⳙ' => 'ⳙ',\n  'Ⳛ' => 'ⳛ',\n  'Ⳝ' => 'ⳝ',\n  'Ⳟ' => 'ⳟ',\n
    \ 'Ⳡ' => 'ⳡ',\n  'Ⳣ' => 'ⳣ',\n  'Ⳬ' => 'ⳬ',\n  'Ⳮ' => 'ⳮ',\n  'Ⳳ' => 'ⳳ',\n  'Ꙁ'
    => 'ꙁ',\n  'Ꙃ' => 'ꙃ',\n  'Ꙅ' => 'ꙅ',\n  'Ꙇ' => 'ꙇ',\n  'Ꙉ' => 'ꙉ',\n  'Ꙋ' =>
    'ꙋ',\n  'Ꙍ' => 'ꙍ',\n  'Ꙏ' => 'ꙏ',\n  'Ꙑ' => 'ꙑ',\n  'Ꙓ' => 'ꙓ',\n  'Ꙕ' => 'ꙕ',\n
    \ 'Ꙗ' => 'ꙗ',\n  'Ꙙ' => 'ꙙ',\n  'Ꙛ' => 'ꙛ',\n  'Ꙝ' => 'ꙝ',\n  'Ꙟ' => 'ꙟ',\n  'Ꙡ'
    => 'ꙡ',\n  'Ꙣ' => 'ꙣ',\n  'Ꙥ' => 'ꙥ',\n  'Ꙧ' => 'ꙧ',\n  'Ꙩ' => 'ꙩ',\n  'Ꙫ' =>
    'ꙫ',\n  'Ꙭ' => 'ꙭ',\n  'Ꚁ' => 'ꚁ',\n  'Ꚃ' => 'ꚃ',\n  'Ꚅ' => 'ꚅ',\n  'Ꚇ' => 'ꚇ',\n
    \ 'Ꚉ' => 'ꚉ',\n  'Ꚋ' => 'ꚋ',\n  'Ꚍ' => 'ꚍ',\n  'Ꚏ' => 'ꚏ',\n  'Ꚑ' => 'ꚑ',\n  'Ꚓ'
    => 'ꚓ',\n  'Ꚕ' => 'ꚕ',\n  'Ꚗ' => 'ꚗ',\n  'Ꚙ' => 'ꚙ',\n  'Ꚛ' => 'ꚛ',\n  'Ꜣ' =>
    'ꜣ',\n  'Ꜥ' => 'ꜥ',\n  'Ꜧ' => 'ꜧ',\n  'Ꜩ' => 'ꜩ',\n  'Ꜫ' => 'ꜫ',\n  'Ꜭ' => 'ꜭ',\n
    \ 'Ꜯ' => 'ꜯ',\n  'Ꜳ' => 'ꜳ',\n  'Ꜵ' => 'ꜵ',\n  'Ꜷ' => 'ꜷ',\n  'Ꜹ' => 'ꜹ',\n  'Ꜻ'
    => 'ꜻ',\n  'Ꜽ' => 'ꜽ',\n  'Ꜿ' => 'ꜿ',\n  'Ꝁ' => 'ꝁ',\n  'Ꝃ' => 'ꝃ',\n  'Ꝅ' =>
    'ꝅ',\n  'Ꝇ' => 'ꝇ',\n  'Ꝉ' => 'ꝉ',\n  'Ꝋ' => 'ꝋ',\n  'Ꝍ' => 'ꝍ',\n  'Ꝏ' => 'ꝏ',\n
    \ 'Ꝑ' => 'ꝑ',\n  'Ꝓ' => 'ꝓ',\n  'Ꝕ' => 'ꝕ',\n  'Ꝗ' => 'ꝗ',\n  'Ꝙ' => 'ꝙ',\n  'Ꝛ'
    => 'ꝛ',\n  'Ꝝ' => 'ꝝ',\n  'Ꝟ' => 'ꝟ',\n  'Ꝡ' => 'ꝡ',\n  'Ꝣ' => 'ꝣ',\n  'Ꝥ' =>
    'ꝥ',\n  'Ꝧ' => 'ꝧ',\n  'Ꝩ' => 'ꝩ',\n  'Ꝫ' => 'ꝫ',\n  'Ꝭ' => 'ꝭ',\n  'Ꝯ' => 'ꝯ',\n
    \ 'Ꝺ' => 'ꝺ',\n  'Ꝼ' => 'ꝼ',\n  'Ᵹ' => 'ᵹ',\n  'Ꝿ' => 'ꝿ',\n  'Ꞁ' => 'ꞁ',\n  'Ꞃ'
    => 'ꞃ',\n  'Ꞅ' => 'ꞅ',\n  'Ꞇ' => 'ꞇ',\n  'Ꞌ' => 'ꞌ',\n  'Ɥ' => 'ɥ',\n  'Ꞑ' =>
    'ꞑ',\n  'Ꞓ' => 'ꞓ',\n  'Ꞗ' => 'ꞗ',\n  'Ꞙ' => 'ꞙ',\n  'Ꞛ' => 'ꞛ',\n  'Ꞝ' => 'ꞝ',\n
    \ 'Ꞟ' => 'ꞟ',\n  'Ꞡ' => 'ꞡ',\n  'Ꞣ' => 'ꞣ',\n  'Ꞥ' => 'ꞥ',\n  'Ꞧ' => 'ꞧ',\n  'Ꞩ'
    => 'ꞩ',\n  'Ɦ' => 'ɦ',\n  'Ɜ' => 'ɜ',\n  'Ɡ' => 'ɡ',\n  'Ɬ' => 'ɬ',\n  'Ɪ' =>
    'ɪ',\n  'Ʞ' => 'ʞ',\n  'Ʇ' => 'ʇ',\n  'Ʝ' => 'ʝ',\n  'Ꭓ' => 'ꭓ',\n  'Ꞵ' => 'ꞵ',\n
    \ 'Ꞷ' => 'ꞷ',\n  'Ꞹ' => 'ꞹ',\n  'Ꞻ' => 'ꞻ',\n  'Ꞽ' => 'ꞽ',\n  'Ꞿ' => 'ꞿ',\n  'Ꟃ'
    => 'ꟃ',\n  'Ꞔ' => 'ꞔ',\n  'Ʂ' => 'ʂ',\n  'Ᶎ' => 'ᶎ',\n  'Ꟈ' => 'ꟈ',\n  'Ꟊ' =>
    'ꟊ',\n  'Ꟶ' => 'ꟶ',\n  'Ａ' => 'ａ',\n  'Ｂ' => 'ｂ',\n  'Ｃ' => 'ｃ',\n  'Ｄ' => 'ｄ',\n
    \ 'Ｅ' => 'ｅ',\n  'Ｆ' => 'ｆ',\n  'Ｇ' => 'ｇ',\n  'Ｈ' => 'ｈ',\n  'Ｉ' => 'ｉ',\n  'Ｊ'
    => 'ｊ',\n  'Ｋ' => 'ｋ',\n  'Ｌ' => 'ｌ',\n  'Ｍ' => 'ｍ',\n  'Ｎ' => 'ｎ',\n  'Ｏ' =>
    'ｏ',\n  'Ｐ' => 'ｐ',\n  'Ｑ' => 'ｑ',\n  'Ｒ' => 'ｒ',\n  'Ｓ' => 'ｓ',\n  'Ｔ' => 'ｔ',\n
    \ 'Ｕ' => 'ｕ',\n  'Ｖ' => 'ｖ',\n  'Ｗ' => 'ｗ',\n  'Ｘ' => 'ｘ',\n  'Ｙ' => 'ｙ',\n  'Ｚ'
    => 'ｚ',\n  '\U00010400' => '\U00010428',\n  '\U00010401' => '\U00010429',\n  '\U00010402'
    => '\U0001042A',\n  '\U00010403' => '\U0001042B',\n  '\U00010404' => '\U0001042C',\n
    \ '\U00010405' => '\U0001042D',\n  '\U00010406' => '\U0001042E',\n  '\U00010407'
    => '\U0001042F',\n  '\U00010408' => '\U00010430',\n  '\U00010409' => '\U00010431',\n
    \ '\U0001040A' => '\U00010432',\n  '\U0001040B' => '\U00010433',\n  '\U0001040C'
    => '\U00010434',\n  '\U0001040D' => '\U00010435',\n  '\U0001040E' => '\U00010436',\n
    \ '\U0001040F' => '\U00010437',\n  '\U00010410' => '\U00010438',\n  '\U00010411'
    => '\U00010439',\n  '\U00010412' => '\U0001043A',\n  '\U00010413' => '\U0001043B',\n
    \ '\U00010414' => '\U0001043C',\n  '\U00010415' => '\U0001043D',\n  '\U00010416'
    => '\U0001043E',\n  '\U00010417' => '\U0001043F',\n  '\U00010418' => '\U00010440',\n
    \ '\U00010419' => '\U00010441',\n  '\U0001041A' => '\U00010442',\n  '\U0001041B'
    => '\U00010443',\n  '\U0001041C' => '\U00010444',\n  '\U0001041D' => '\U00010445',\n
    \ '\U0001041E' => '\U00010446',\n  '\U0001041F' => '\U00010447',\n  '\U00010420'
    => '\U00010448',\n  '\U00010421' => '\U00010449',\n  '\U00010422' => '\U0001044A',\n
    \ '\U00010423' => '\U0001044B',\n  '\U00010424' => '\U0001044C',\n  '\U00010425'
    => '\U0001044D',\n  '\U00010426' => '\U0001044E',\n  '\U00010427' => '\U0001044F',\n
    \ '\U000104B0' => '\U000104D8',\n  '\U000104B1' => '\U000104D9',\n  '\U000104B2'
    => '\U000104DA',\n  '\U000104B3' => '\U000104DB',\n  '\U000104B4' => '\U000104DC',\n
    \ '\U000104B5' => '\U000104DD',\n  '\U000104B6' => '\U000104DE',\n  '\U000104B7'
    => '\U000104DF',\n  '\U000104B8' => '\U000104E0',\n  '\U000104B9' => '\U000104E1',\n
    \ '\U000104BA' => '\U000104E2',\n  '\U000104BB' => '\U000104E3',\n  '\U000104BC'
    => '\U000104E4',\n  '\U000104BD' => '\U000104E5',\n  '\U000104BE' => '\U000104E6',\n
    \ '\U000104BF' => '\U000104E7',\n  '\U000104C0' => '\U000104E8',\n  '\U000104C1'
    => '\U000104E9',\n  '\U000104C2' => '\U000104EA',\n  '\U000104C3' => '\U000104EB',\n
    \ '\U000104C4' => '\U000104EC',\n  '\U000104C5' => '\U000104ED',\n  '\U000104C6'
    => '\U000104EE',\n  '\U000104C7' => '\U000104EF',\n  '\U000104C8' => '\U000104F0',\n
    \ '\U000104C9' => '\U000104F1',\n  '\U000104CA' => '\U000104F2',\n  '\U000104CB'
    => '\U000104F3',\n  '\U000104CC' => '\U000104F4',\n  '\U000104CD' => '\U000104F5',\n
    \ '\U000104CE' => '\U000104F6',\n  '\U000104CF' => '\U000104F7',\n  '\U000104D0'
    => '\U000104F8',\n  '\U000104D1' => '\U000104F9',\n  '\U000104D2' => '\U000104FA',\n
    \ '\U000104D3' => '\U000104FB',\n  '\U00010C80' => '\U00010CC0',\n  '\U00010C81'
    => '\U00010CC1',\n  '\U00010C82' => '\U00010CC2',\n  '\U00010C83' => '\U00010CC3',\n
    \ '\U00010C84' => '\U00010CC4',\n  '\U00010C85' => '\U00010CC5',\n  '\U00010C86'
    => '\U00010CC6',\n  '\U00010C87' => '\U00010CC7',\n  '\U00010C88' => '\U00010CC8',\n
    \ '\U00010C89' => '\U00010CC9',\n  '\U00010C8A' => '\U00010CCA',\n  '\U00010C8B'
    => '\U00010CCB',\n  '\U00010C8C' => '\U00010CCC',\n  '\U00010C8D' => '\U00010CCD',\n
    \ '\U00010C8E' => '\U00010CCE',\n  '\U00010C8F' => '\U00010CCF',\n  '\U00010C90'
    => '\U00010CD0',\n  '\U00010C91' => '\U00010CD1',\n  '\U00010C92' => '\U00010CD2',\n
    \ '\U00010C93' => '\U00010CD3',\n  '\U00010C94' => '\U00010CD4',\n  '\U00010C95'
    => '\U00010CD5',\n  '\U00010C96' => '\U00010CD6',\n  '\U00010C97' => '\U00010CD7',\n
    \ '\U00010C98' => '\U00010CD8',\n  '\U00010C99' => '\U00010CD9',\n  '\U00010C9A'
    => '\U00010CDA',\n  '\U00010C9B' => '\U00010CDB',\n  '\U00010C9C' => '\U00010CDC',\n
    \ '\U00010C9D' => '\U00010CDD',\n  '\U00010C9E' => '\U00010CDE',\n  '\U00010C9F'
    => '\U00010CDF',\n  '\U00010CA0' => '\U00010CE0',\n  '\U00010CA1' => '\U00010CE1',\n
    \ '\U00010CA2' => '\U00010CE2',\n  '\U00010CA3' => '\U00010CE3',\n  '\U00010CA4'
    => '\U00010CE4',\n  '\U00010CA5' => '\U00010CE5',\n  '\U00010CA6' => '\U00010CE6',\n
    \ '\U00010CA7' => '\U00010CE7',\n  '\U00010CA8' => '\U00010CE8',\n  '\U00010CA9'
    => '\U00010CE9',\n  '\U00010CAA' => '\U00010CEA',\n  '\U00010CAB' => '\U00010CEB',\n
    \ '\U00010CAC' => '\U00010CEC',\n  '\U00010CAD' => '\U00010CED',\n  '\U00010CAE'
    => '\U00010CEE',\n  '\U00010CAF' => '\U00010CEF',\n  '\U00010CB0' => '\U00010CF0',\n
    \ '\U00010CB1' => '\U00010CF1',\n  '\U00010CB2' => '\U00010CF2',\n  '\U000118A0'
    => '\U000118C0',\n  '\U000118A1' => '\U000118C1',\n  '\U000118A2' => '\U000118C2',\n
    \ '\U000118A3' => '\U000118C3',\n  '\U000118A4' => '\U000118C4',\n  '\U000118A5'
    => '\U000118C5',\n  '\U000118A6' => '\U000118C6',\n  '\U000118A7' => '\U000118C7',\n
    \ '\U000118A8' => '\U000118C8',\n  '\U000118A9' => '\U000118C9',\n  '\U000118AA'
    => '\U000118CA',\n  '\U000118AB' => '\U000118CB',\n  '\U000118AC' => '\U000118CC',\n
    \ '\U000118AD' => '\U000118CD',\n  '\U000118AE' => '\U000118CE',\n  '\U000118AF'
    => '\U000118CF',\n  '\U000118B0' => '\U000118D0',\n  '\U000118B1' => '\U000118D1',\n
    \ '\U000118B2' => '\U000118D2',\n  '\U000118B3' => '\U000118D3',\n  '\U000118B4'
    => '\U000118D4',\n  '\U000118B5' => '\U000118D5',\n  '\U000118B6' => '\U000118D6',\n
    \ '\U000118B7' => '\U000118D7',\n  '\U000118B8' => '\U000118D8',\n  '\U000118B9'
    => '\U000118D9',\n  '\U000118BA' => '\U000118DA',\n  '\U000118BB' => '\U000118DB',\n
    \ '\U000118BC' => '\U000118DC',\n  '\U000118BD' => '\U000118DD',\n  '\U000118BE'
    => '\U000118DE',\n  '\U000118BF' => '\U000118DF',\n  '\U00016E40' => '\U00016E60',\n
    \ '\U00016E41' => '\U00016E61',\n  '\U00016E42' => '\U00016E62',\n  '\U00016E43'
    => '\U00016E63',\n  '\U00016E44' => '\U00016E64',\n  '\U00016E45' => '\U00016E65',\n
    \ '\U00016E46' => '\U00016E66',\n  '\U00016E47' => '\U00016E67',\n  '\U00016E48'
    => '\U00016E68',\n  '\U00016E49' => '\U00016E69',\n  '\U00016E4A' => '\U00016E6A',\n
    \ '\U00016E4B' => '\U00016E6B',\n  '\U00016E4C' => '\U00016E6C',\n  '\U00016E4D'
    => '\U00016E6D',\n  '\U00016E4E' => '\U00016E6E',\n  '\U00016E4F' => '\U00016E6F',\n
    \ '\U00016E50' => '\U00016E70',\n  '\U00016E51' => '\U00016E71',\n  '\U00016E52'
    => '\U00016E72',\n  '\U00016E53' => '\U00016E73',\n  '\U00016E54' => '\U00016E74',\n
    \ '\U00016E55' => '\U00016E75',\n  '\U00016E56' => '\U00016E76',\n  '\U00016E57'
    => '\U00016E77',\n  '\U00016E58' => '\U00016E78',\n  '\U00016E59' => '\U00016E79',\n
    \ '\U00016E5A' => '\U00016E7A',\n  '\U00016E5B' => '\U00016E7B',\n  '\U00016E5C'
    => '\U00016E7C',\n  '\U00016E5D' => '\U00016E7D',\n  '\U00016E5E' => '\U00016E7E',\n
    \ '\U00016E5F' => '\U00016E7F',\n  '\U0001E900' => '\U0001E922',\n  '\U0001E901'
    => '\U0001E923',\n  '\U0001E902' => '\U0001E924',\n  '\U0001E903' => '\U0001E925',\n
    \ '\U0001E904' => '\U0001E926',\n  '\U0001E905' => '\U0001E927',\n  '\U0001E906'
    => '\U0001E928',\n  '\U0001E907' => '\U0001E929',\n  '\U0001E908' => '\U0001E92A',\n
    \ '\U0001E909' => '\U0001E92B',\n  '\U0001E90A' => '\U0001E92C',\n  '\U0001E90B'
    => '\U0001E92D',\n  '\U0001E90C' => '\U0001E92E',\n  '\U0001E90D' => '\U0001E92F',\n
    \ '\U0001E90E' => '\U0001E930',\n  '\U0001E90F' => '\U0001E931',\n  '\U0001E910'
    => '\U0001E932',\n  '\U0001E911' => '\U0001E933',\n  '\U0001E912' => '\U0001E934',\n
    \ '\U0001E913' => '\U0001E935',\n  '\U0001E914' => '\U0001E936',\n  '\U0001E915'
    => '\U0001E937',\n  '\U0001E916' => '\U0001E938',\n  '\U0001E917' => '\U0001E939',\n
    \ '\U0001E918' => '\U0001E93A',\n  '\U0001E919' => '\U0001E93B',\n  '\U0001E91A'
    => '\U0001E93C',\n  '\U0001E91B' => '\U0001E93D',\n  '\U0001E91C' => '\U0001E93E',\n
    \ '\U0001E91D' => '\U0001E93F',\n  '\U0001E91E' => '\U0001E940',\n  '\U0001E91F'
    => '\U0001E941',\n  '\U0001E920' => '\U0001E942',\n  '\U0001E921' => '\U0001E943',\n);\n"
  uploads-Carbon-vendor-symfony-polyfill-mbstring-Resources-unidata-titleCaseRegexp.php: |
    <?php

    // from Case_Ignorable in https://unicode.org/Public/UNIDATA/DerivedCoreProperties.txt

    return '/(?<![\x{0027}\x{002E}\x{003A}\x{005E}\x{0060}\x{00A8}\x{00AD}\x{00AF}\x{00B4}\x{00B7}\x{00B8}\x{02B0}-\x{02C1}\x{02C2}-\x{02C5}\x{02C6}-\x{02D1}\x{02D2}-\x{02DF}\x{02E0}-\x{02E4}\x{02E5}-\x{02EB}\x{02EC}\x{02ED}\x{02EE}\x{02EF}-\x{02FF}\x{0300}-\x{036F}\x{0374}\x{0375}\x{037A}\x{0384}-\x{0385}\x{0387}\x{0483}-\x{0487}\x{0488}-\x{0489}\x{0559}\x{0591}-\x{05BD}\x{05BF}\x{05C1}-\x{05C2}\x{05C4}-\x{05C5}\x{05C7}\x{05F4}\x{0600}-\x{0605}\x{0610}-\x{061A}\x{061C}\x{0640}\x{064B}-\x{065F}\x{0670}\x{06D6}-\x{06DC}\x{06DD}\x{06DF}-\x{06E4}\x{06E5}-\x{06E6}\x{06E7}-\x{06E8}\x{06EA}-\x{06ED}\x{070F}\x{0711}\x{0730}-\x{074A}\x{07A6}-\x{07B0}\x{07EB}-\x{07F3}\x{07F4}-\x{07F5}\x{07FA}\x{07FD}\x{0816}-\x{0819}\x{081A}\x{081B}-\x{0823}\x{0824}\x{0825}-\x{0827}\x{0828}\x{0829}-\x{082D}\x{0859}-\x{085B}\x{08D3}-\x{08E1}\x{08E2}\x{08E3}-\x{0902}\x{093A}\x{093C}\x{0941}-\x{0948}\x{094D}\x{0951}-\x{0957}\x{0962}-\x{0963}\x{0971}\x{0981}\x{09BC}\x{09C1}-\x{09C4}\x{09CD}\x{09E2}-\x{09E3}\x{09FE}\x{0A01}-\x{0A02}\x{0A3C}\x{0A41}-\x{0A42}\x{0A47}-\x{0A48}\x{0A4B}-\x{0A4D}\x{0A51}\x{0A70}-\x{0A71}\x{0A75}\x{0A81}-\x{0A82}\x{0ABC}\x{0AC1}-\x{0AC5}\x{0AC7}-\x{0AC8}\x{0ACD}\x{0AE2}-\x{0AE3}\x{0AFA}-\x{0AFF}\x{0B01}\x{0B3C}\x{0B3F}\x{0B41}-\x{0B44}\x{0B4D}\x{0B56}\x{0B62}-\x{0B63}\x{0B82}\x{0BC0}\x{0BCD}\x{0C00}\x{0C04}\x{0C3E}-\x{0C40}\x{0C46}-\x{0C48}\x{0C4A}-\x{0C4D}\x{0C55}-\x{0C56}\x{0C62}-\x{0C63}\x{0C81}\x{0CBC}\x{0CBF}\x{0CC6}\x{0CCC}-\x{0CCD}\x{0CE2}-\x{0CE3}\x{0D00}-\x{0D01}\x{0D3B}-\x{0D3C}\x{0D41}-\x{0D44}\x{0D4D}\x{0D62}-\x{0D63}\x{0DCA}\x{0DD2}-\x{0DD4}\x{0DD6}\x{0E31}\x{0E34}-\x{0E3A}\x{0E46}\x{0E47}-\x{0E4E}\x{0EB1}\x{0EB4}-\x{0EB9}\x{0EBB}-\x{0EBC}\x{0EC6}\x{0EC8}-\x{0ECD}\x{0F18}-\x{0F19}\x{0F35}\x{0F37}\x{0F39}\x{0F71}-\x{0F7E}\x{0F80}-\x{0F84}\x{0F86}-\x{0F87}\x{0F8D}-\x{0F97}\x{0F99}-\x{0FBC}\x{0FC6}\x{102D}-\x{1030}\x{1032}-\x{1037}\x{1039}-\x{103A}\x{103D}-\x{103E}\x{1058}-\x{1059}\x{105E}-\x{1060}\x{1071}-\x{1074}\x{1082}\x{1085}-\x{1086}\x{108D}\x{109D}\x{10FC}\x{135D}-\x{135F}\x{1712}-\x{1714}\x{1732}-\x{1734}\x{1752}-\x{1753}\x{1772}-\x{1773}\x{17B4}-\x{17B5}\x{17B7}-\x{17BD}\x{17C6}\x{17C9}-\x{17D3}\x{17D7}\x{17DD}\x{180B}-\x{180D}\x{180E}\x{1843}\x{1885}-\x{1886}\x{18A9}\x{1920}-\x{1922}\x{1927}-\x{1928}\x{1932}\x{1939}-\x{193B}\x{1A17}-\x{1A18}\x{1A1B}\x{1A56}\x{1A58}-\x{1A5E}\x{1A60}\x{1A62}\x{1A65}-\x{1A6C}\x{1A73}-\x{1A7C}\x{1A7F}\x{1AA7}\x{1AB0}-\x{1ABD}\x{1ABE}\x{1B00}-\x{1B03}\x{1B34}\x{1B36}-\x{1B3A}\x{1B3C}\x{1B42}\x{1B6B}-\x{1B73}\x{1B80}-\x{1B81}\x{1BA2}-\x{1BA5}\x{1BA8}-\x{1BA9}\x{1BAB}-\x{1BAD}\x{1BE6}\x{1BE8}-\x{1BE9}\x{1BED}\x{1BEF}-\x{1BF1}\x{1C2C}-\x{1C33}\x{1C36}-\x{1C37}\x{1C78}-\x{1C7D}\x{1CD0}-\x{1CD2}\x{1CD4}-\x{1CE0}\x{1CE2}-\x{1CE8}\x{1CED}\x{1CF4}\x{1CF8}-\x{1CF9}\x{1D2C}-\x{1D6A}\x{1D78}\x{1D9B}-\x{1DBF}\x{1DC0}-\x{1DF9}\x{1DFB}-\x{1DFF}\x{1FBD}\x{1FBF}-\x{1FC1}\x{1FCD}-\x{1FCF}\x{1FDD}-\x{1FDF}\x{1FED}-\x{1FEF}\x{1FFD}-\x{1FFE}\x{200B}-\x{200F}\x{2018}\x{2019}\x{2024}\x{2027}\x{202A}-\x{202E}\x{2060}-\x{2064}\x{2066}-\x{206F}\x{2071}\x{207F}\x{2090}-\x{209C}\x{20D0}-\x{20DC}\x{20DD}-\x{20E0}\x{20E1}\x{20E2}-\x{20E4}\x{20E5}-\x{20F0}\x{2C7C}-\x{2C7D}\x{2CEF}-\x{2CF1}\x{2D6F}\x{2D7F}\x{2DE0}-\x{2DFF}\x{2E2F}\x{3005}\x{302A}-\x{302D}\x{3031}-\x{3035}\x{303B}\x{3099}-\x{309A}\x{309B}-\x{309C}\x{309D}-\x{309E}\x{30FC}-\x{30FE}\x{A015}\x{A4F8}-\x{A4FD}\x{A60C}\x{A66F}\x{A670}-\x{A672}\x{A674}-\x{A67D}\x{A67F}\x{A69C}-\x{A69D}\x{A69E}-\x{A69F}\x{A6F0}-\x{A6F1}\x{A700}-\x{A716}\x{A717}-\x{A71F}\x{A720}-\x{A721}\x{A770}\x{A788}\x{A789}-\x{A78A}\x{A7F8}-\x{A7F9}\x{A802}\x{A806}\x{A80B}\x{A825}-\x{A826}\x{A8C4}-\x{A8C5}\x{A8E0}-\x{A8F1}\x{A8FF}\x{A926}-\x{A92D}\x{A947}-\x{A951}\x{A980}-\x{A982}\x{A9B3}\x{A9B6}-\x{A9B9}\x{A9BC}\x{A9CF}\x{A9E5}\x{A9E6}\x{AA29}-\x{AA2E}\x{AA31}-\x{AA32}\x{AA35}-\x{AA36}\x{AA43}\x{AA4C}\x{AA70}\x{AA7C}\x{AAB0}\x{AAB2}-\x{AAB4}\x{AAB7}-\x{AAB8}\x{AABE}-\x{AABF}\x{AAC1}\x{AADD}\x{AAEC}-\x{AAED}\x{AAF3}-\x{AAF4}\x{AAF6}\x{AB5B}\x{AB5C}-\x{AB5F}\x{ABE5}\x{ABE8}\x{ABED}\x{FB1E}\x{FBB2}-\x{FBC1}\x{FE00}-\x{FE0F}\x{FE13}\x{FE20}-\x{FE2F}\x{FE52}\x{FE55}\x{FEFF}\x{FF07}\x{FF0E}\x{FF1A}\x{FF3E}\x{FF40}\x{FF70}\x{FF9E}-\x{FF9F}\x{FFE3}\x{FFF9}-\x{FFFB}\x{101FD}\x{102E0}\x{10376}-\x{1037A}\x{10A01}-\x{10A03}\x{10A05}-\x{10A06}\x{10A0C}-\x{10A0F}\x{10A38}-\x{10A3A}\x{10A3F}\x{10AE5}-\x{10AE6}\x{10D24}-\x{10D27}\x{10F46}-\x{10F50}\x{11001}\x{11038}-\x{11046}\x{1107F}-\x{11081}\x{110B3}-\x{110B6}\x{110B9}-\x{110BA}\x{110BD}\x{110CD}\x{11100}-\x{11102}\x{11127}-\x{1112B}\x{1112D}-\x{11134}\x{11173}\x{11180}-\x{11181}\x{111B6}-\x{111BE}\x{111C9}-\x{111CC}\x{1122F}-\x{11231}\x{11234}\x{11236}-\x{11237}\x{1123E}\x{112DF}\x{112E3}-\x{112EA}\x{11300}-\x{11301}\x{1133B}-\x{1133C}\x{11340}\x{11366}-\x{1136C}\x{11370}-\x{11374}\x{11438}-\x{1143F}\x{11442}-\x{11444}\x{11446}\x{1145E}\x{114B3}-\x{114B8}\x{114BA}\x{114BF}-\x{114C0}\x{114C2}-\x{114C3}\x{115B2}-\x{115B5}\x{115BC}-\x{115BD}\x{115BF}-\x{115C0}\x{115DC}-\x{115DD}\x{11633}-\x{1163A}\x{1163D}\x{1163F}-\x{11640}\x{116AB}\x{116AD}\x{116B0}-\x{116B5}\x{116B7}\x{1171D}-\x{1171F}\x{11722}-\x{11725}\x{11727}-\x{1172B}\x{1182F}-\x{11837}\x{11839}-\x{1183A}\x{11A01}-\x{11A0A}\x{11A33}-\x{11A38}\x{11A3B}-\x{11A3E}\x{11A47}\x{11A51}-\x{11A56}\x{11A59}-\x{11A5B}\x{11A8A}-\x{11A96}\x{11A98}-\x{11A99}\x{11C30}-\x{11C36}\x{11C38}-\x{11C3D}\x{11C3F}\x{11C92}-\x{11CA7}\x{11CAA}-\x{11CB0}\x{11CB2}-\x{11CB3}\x{11CB5}-\x{11CB6}\x{11D31}-\x{11D36}\x{11D3A}\x{11D3C}-\x{11D3D}\x{11D3F}-\x{11D45}\x{11D47}\x{11D90}-\x{11D91}\x{11D95}\x{11D97}\x{11EF3}-\x{11EF4}\x{16AF0}-\x{16AF4}\x{16B30}-\x{16B36}\x{16B40}-\x{16B43}\x{16F8F}-\x{16F92}\x{16F93}-\x{16F9F}\x{16FE0}-\x{16FE1}\x{1BC9D}-\x{1BC9E}\x{1BCA0}-\x{1BCA3}\x{1D167}-\x{1D169}\x{1D173}-\x{1D17A}\x{1D17B}-\x{1D182}\x{1D185}-\x{1D18B}\x{1D1AA}-\x{1D1AD}\x{1D242}-\x{1D244}\x{1DA00}-\x{1DA36}\x{1DA3B}-\x{1DA6C}\x{1DA75}\x{1DA84}\x{1DA9B}-\x{1DA9F}\x{1DAA1}-\x{1DAAF}\x{1E000}-\x{1E006}\x{1E008}-\x{1E018}\x{1E01B}-\x{1E021}\x{1E023}-\x{1E024}\x{1E026}-\x{1E02A}\x{1E8D0}-\x{1E8D6}\x{1E944}-\x{1E94A}\x{1F3FB}-\x{1F3FF}\x{E0001}\x{E0020}-\x{E007F}\x{E0100}-\x{E01EF}])(\pL)(\pL*+)/u';
  uploads-Carbon-vendor-symfony-polyfill-mbstring-Resources-unidata-upperCase.php: "<?php\n\nreturn
    array (\n  'a' => 'A',\n  'b' => 'B',\n  'c' => 'C',\n  'd' => 'D',\n  'e' =>
    'E',\n  'f' => 'F',\n  'g' => 'G',\n  'h' => 'H',\n  'i' => 'I',\n  'j' => 'J',\n
    \ 'k' => 'K',\n  'l' => 'L',\n  'm' => 'M',\n  'n' => 'N',\n  'o' => 'O',\n  'p'
    => 'P',\n  'q' => 'Q',\n  'r' => 'R',\n  's' => 'S',\n  't' => 'T',\n  'u' =>
    'U',\n  'v' => 'V',\n  'w' => 'W',\n  'x' => 'X',\n  'y' => 'Y',\n  'z' => 'Z',\n
    \ 'µ' => 'Μ',\n  'à' => 'À',\n  'á' => 'Á',\n  'â' => 'Â',\n  'ã' => 'Ã',\n  'ä'
    => 'Ä',\n  'å' => 'Å',\n  'æ' => 'Æ',\n  'ç' => 'Ç',\n  'è' => 'È',\n  'é' =>
    'É',\n  'ê' => 'Ê',\n  'ë' => 'Ë',\n  'ì' => 'Ì',\n  'í' => 'Í',\n  'î' => 'Î',\n
    \ 'ï' => 'Ï',\n  'ð' => 'Ð',\n  'ñ' => 'Ñ',\n  'ò' => 'Ò',\n  'ó' => 'Ó',\n  'ô'
    => 'Ô',\n  'õ' => 'Õ',\n  'ö' => 'Ö',\n  'ø' => 'Ø',\n  'ù' => 'Ù',\n  'ú' =>
    'Ú',\n  'û' => 'Û',\n  'ü' => 'Ü',\n  'ý' => 'Ý',\n  'þ' => 'Þ',\n  'ÿ' => 'Ÿ',\n
    \ 'ā' => 'Ā',\n  'ă' => 'Ă',\n  'ą' => 'Ą',\n  'ć' => 'Ć',\n  'ĉ' => 'Ĉ',\n  'ċ'
    => 'Ċ',\n  'č' => 'Č',\n  'ď' => 'Ď',\n  'đ' => 'Đ',\n  'ē' => 'Ē',\n  'ĕ' =>
    'Ĕ',\n  'ė' => 'Ė',\n  'ę' => 'Ę',\n  'ě' => 'Ě',\n  'ĝ' => 'Ĝ',\n  'ğ' => 'Ğ',\n
    \ 'ġ' => 'Ġ',\n  'ģ' => 'Ģ',\n  'ĥ' => 'Ĥ',\n  'ħ' => 'Ħ',\n  'ĩ' => 'Ĩ',\n  'ī'
    => 'Ī',\n  'ĭ' => 'Ĭ',\n  'į' => 'Į',\n  'ı' => 'I',\n  'ĳ' => 'Ĳ',\n  'ĵ' =>
    'Ĵ',\n  'ķ' => 'Ķ',\n  'ĺ' => 'Ĺ',\n  'ļ' => 'Ļ',\n  'ľ' => 'Ľ',\n  'ŀ' => 'Ŀ',\n
    \ 'ł' => 'Ł',\n  'ń' => 'Ń',\n  'ņ' => 'Ņ',\n  'ň' => 'Ň',\n  'ŋ' => 'Ŋ',\n  'ō'
    => 'Ō',\n  'ŏ' => 'Ŏ',\n  'ő' => 'Ő',\n  'œ' => 'Œ',\n  'ŕ' => 'Ŕ',\n  'ŗ' =>
    'Ŗ',\n  'ř' => 'Ř',\n  'ś' => 'Ś',\n  'ŝ' => 'Ŝ',\n  'ş' => 'Ş',\n  'š' => 'Š',\n
    \ 'ţ' => 'Ţ',\n  'ť' => 'Ť',\n  'ŧ' => 'Ŧ',\n  'ũ' => 'Ũ',\n  'ū' => 'Ū',\n  'ŭ'
    => 'Ŭ',\n  'ů' => 'Ů',\n  'ű' => 'Ű',\n  'ų' => 'Ų',\n  'ŵ' => 'Ŵ',\n  'ŷ' =>
    'Ŷ',\n  'ź' => 'Ź',\n  'ż' => 'Ż',\n  'ž' => 'Ž',\n  'ſ' => 'S',\n  'ƀ' => 'Ƀ',\n
    \ 'ƃ' => 'Ƃ',\n  'ƅ' => 'Ƅ',\n  'ƈ' => 'Ƈ',\n  'ƌ' => 'Ƌ',\n  'ƒ' => 'Ƒ',\n  'ƕ'
    => 'Ƕ',\n  'ƙ' => 'Ƙ',\n  'ƚ' => 'Ƚ',\n  'ƞ' => 'Ƞ',\n  'ơ' => 'Ơ',\n  'ƣ' =>
    'Ƣ',\n  'ƥ' => 'Ƥ',\n  'ƨ' => 'Ƨ',\n  'ƭ' => 'Ƭ',\n  'ư' => 'Ư',\n  'ƴ' => 'Ƴ',\n
    \ 'ƶ' => 'Ƶ',\n  'ƹ' => 'Ƹ',\n  'ƽ' => 'Ƽ',\n  'ƿ' => 'Ƿ',\n  'ǅ' => 'Ǆ',\n  'ǆ'
    => 'Ǆ',\n  'ǈ' => 'Ǉ',\n  'ǉ' => 'Ǉ',\n  'ǋ' => 'Ǌ',\n  'ǌ' => 'Ǌ',\n  'ǎ' =>
    'Ǎ',\n  'ǐ' => 'Ǐ',\n  'ǒ' => 'Ǒ',\n  'ǔ' => 'Ǔ',\n  'ǖ' => 'Ǖ',\n  'ǘ' => 'Ǘ',\n
    \ 'ǚ' => 'Ǚ',\n  'ǜ' => 'Ǜ',\n  'ǝ' => 'Ǝ',\n  'ǟ' => 'Ǟ',\n  'ǡ' => 'Ǡ',\n  'ǣ'
    => 'Ǣ',\n  'ǥ' => 'Ǥ',\n  'ǧ' => 'Ǧ',\n  'ǩ' => 'Ǩ',\n  'ǫ' => 'Ǫ',\n  'ǭ' =>
    'Ǭ',\n  'ǯ' => 'Ǯ',\n  'ǲ' => 'Ǳ',\n  'ǳ' => 'Ǳ',\n  'ǵ' => 'Ǵ',\n  'ǹ' => 'Ǹ',\n
    \ 'ǻ' => 'Ǻ',\n  'ǽ' => 'Ǽ',\n  'ǿ' => 'Ǿ',\n  'ȁ' => 'Ȁ',\n  'ȃ' => 'Ȃ',\n  'ȅ'
    => 'Ȅ',\n  'ȇ' => 'Ȇ',\n  'ȉ' => 'Ȉ',\n  'ȋ' => 'Ȋ',\n  'ȍ' => 'Ȍ',\n  'ȏ' =>
    'Ȏ',\n  'ȑ' => 'Ȑ',\n  'ȓ' => 'Ȓ',\n  'ȕ' => 'Ȕ',\n  'ȗ' => 'Ȗ',\n  'ș' => 'Ș',\n
    \ 'ț' => 'Ț',\n  'ȝ' => 'Ȝ',\n  'ȟ' => 'Ȟ',\n  'ȣ' => 'Ȣ',\n  'ȥ' => 'Ȥ',\n  'ȧ'
    => 'Ȧ',\n  'ȩ' => 'Ȩ',\n  'ȫ' => 'Ȫ',\n  'ȭ' => 'Ȭ',\n  'ȯ' => 'Ȯ',\n  'ȱ' =>
    'Ȱ',\n  'ȳ' => 'Ȳ',\n  'ȼ' => 'Ȼ',\n  'ȿ' => 'Ȿ',\n  'ɀ' => 'Ɀ',\n  'ɂ' => 'Ɂ',\n
    \ 'ɇ' => 'Ɇ',\n  'ɉ' => 'Ɉ',\n  'ɋ' => 'Ɋ',\n  'ɍ' => 'Ɍ',\n  'ɏ' => 'Ɏ',\n  'ɐ'
    => 'Ɐ',\n  'ɑ' => 'Ɑ',\n  'ɒ' => 'Ɒ',\n  'ɓ' => 'Ɓ',\n  'ɔ' => 'Ɔ',\n  'ɖ' =>
    'Ɖ',\n  'ɗ' => 'Ɗ',\n  'ə' => 'Ə',\n  'ɛ' => 'Ɛ',\n  'ɜ' => 'Ɜ',\n  'ɠ' => 'Ɠ',\n
    \ 'ɡ' => 'Ɡ',\n  'ɣ' => 'Ɣ',\n  'ɥ' => 'Ɥ',\n  'ɦ' => 'Ɦ',\n  'ɨ' => 'Ɨ',\n  'ɩ'
    => 'Ɩ',\n  'ɪ' => 'Ɪ',\n  'ɫ' => 'Ɫ',\n  'ɬ' => 'Ɬ',\n  'ɯ' => 'Ɯ',\n  'ɱ' =>
    'Ɱ',\n  'ɲ' => 'Ɲ',\n  'ɵ' => 'Ɵ',\n  'ɽ' => 'Ɽ',\n  'ʀ' => 'Ʀ',\n  'ʂ' => 'Ʂ',\n
    \ 'ʃ' => 'Ʃ',\n  'ʇ' => 'Ʇ',\n  'ʈ' => 'Ʈ',\n  'ʉ' => 'Ʉ',\n  'ʊ' => 'Ʊ',\n  'ʋ'
    => 'Ʋ',\n  'ʌ' => 'Ʌ',\n  'ʒ' => 'Ʒ',\n  'ʝ' => 'Ʝ',\n  'ʞ' => 'Ʞ',\n  'ͅ' =>
    'Ι',\n  'ͱ' => 'Ͱ',\n  'ͳ' => 'Ͳ',\n  'ͷ' => 'Ͷ',\n  'ͻ' => 'Ͻ',\n  'ͼ' => 'Ͼ',\n
    \ 'ͽ' => 'Ͽ',\n  'ά' => 'Ά',\n  'έ' => 'Έ',\n  'ή' => 'Ή',\n  'ί' => 'Ί',\n  'α'
    => 'Α',\n  'β' => 'Β',\n  'γ' => 'Γ',\n  'δ' => 'Δ',\n  'ε' => 'Ε',\n  'ζ' =>
    'Ζ',\n  'η' => 'Η',\n  'θ' => 'Θ',\n  'ι' => 'Ι',\n  'κ' => 'Κ',\n  'λ' => 'Λ',\n
    \ 'μ' => 'Μ',\n  'ν' => 'Ν',\n  'ξ' => 'Ξ',\n  'ο' => 'Ο',\n  'π' => 'Π',\n  'ρ'
    => 'Ρ',\n  'ς' => 'Σ',\n  'σ' => 'Σ',\n  'τ' => 'Τ',\n  'υ' => 'Υ',\n  'φ' =>
    'Φ',\n  'χ' => 'Χ',\n  'ψ' => 'Ψ',\n  'ω' => 'Ω',\n  'ϊ' => 'Ϊ',\n  'ϋ' => 'Ϋ',\n
    \ 'ό' => 'Ό',\n  'ύ' => 'Ύ',\n  'ώ' => 'Ώ',\n  'ϐ' => 'Β',\n  'ϑ' => 'Θ',\n  'ϕ'
    => 'Φ',\n  'ϖ' => 'Π',\n  'ϗ' => 'Ϗ',\n  'ϙ' => 'Ϙ',\n  'ϛ' => 'Ϛ',\n  'ϝ' =>
    'Ϝ',\n  'ϟ' => 'Ϟ',\n  'ϡ' => 'Ϡ',\n  'ϣ' => 'Ϣ',\n  'ϥ' => 'Ϥ',\n  'ϧ' => 'Ϧ',\n
    \ 'ϩ' => 'Ϩ',\n  'ϫ' => 'Ϫ',\n  'ϭ' => 'Ϭ',\n  'ϯ' => 'Ϯ',\n  'ϰ' => 'Κ',\n  'ϱ'
    => 'Ρ',\n  'ϲ' => 'Ϲ',\n  'ϳ' => 'Ϳ',\n  'ϵ' => 'Ε',\n  'ϸ' => 'Ϸ',\n  'ϻ' =>
    'Ϻ',\n  'а' => 'А',\n  'б' => 'Б',\n  'в' => 'В',\n  'г' => 'Г',\n  'д' => 'Д',\n
    \ 'е' => 'Е',\n  'ж' => 'Ж',\n  'з' => 'З',\n  'и' => 'И',\n  'й' => 'Й',\n  'к'
    => 'К',\n  'л' => 'Л',\n  'м' => 'М',\n  'н' => 'Н',\n  'о' => 'О',\n  'п' =>
    'П',\n  'р' => 'Р',\n  'с' => 'С',\n  'т' => 'Т',\n  'у' => 'У',\n  'ф' => 'Ф',\n
    \ 'х' => 'Х',\n  'ц' => 'Ц',\n  'ч' => 'Ч',\n  'ш' => 'Ш',\n  'щ' => 'Щ',\n  'ъ'
    => 'Ъ',\n  'ы' => 'Ы',\n  'ь' => 'Ь',\n  'э' => 'Э',\n  'ю' => 'Ю',\n  'я' =>
    'Я',\n  'ѐ' => 'Ѐ',\n  'ё' => 'Ё',\n  'ђ' => 'Ђ',\n  'ѓ' => 'Ѓ',\n  'є' => 'Є',\n
    \ 'ѕ' => 'Ѕ',\n  'і' => 'І',\n  'ї' => 'Ї',\n  'ј' => 'Ј',\n  'љ' => 'Љ',\n  'њ'
    => 'Њ',\n  'ћ' => 'Ћ',\n  'ќ' => 'Ќ',\n  'ѝ' => 'Ѝ',\n  'ў' => 'Ў',\n  'џ' =>
    'Џ',\n  'ѡ' => 'Ѡ',\n  'ѣ' => 'Ѣ',\n  'ѥ' => 'Ѥ',\n  'ѧ' => 'Ѧ',\n  'ѩ' => 'Ѩ',\n
    \ 'ѫ' => 'Ѫ',\n  'ѭ' => 'Ѭ',\n  'ѯ' => 'Ѯ',\n  'ѱ' => 'Ѱ',\n  'ѳ' => 'Ѳ',\n  'ѵ'
    => 'Ѵ',\n  'ѷ' => 'Ѷ',\n  'ѹ' => 'Ѹ',\n  'ѻ' => 'Ѻ',\n  'ѽ' => 'Ѽ',\n  'ѿ' =>
    'Ѿ',\n  'ҁ' => 'Ҁ',\n  'ҋ' => 'Ҋ',\n  'ҍ' => 'Ҍ',\n  'ҏ' => 'Ҏ',\n  'ґ' => 'Ґ',\n
    \ 'ғ' => 'Ғ',\n  'ҕ' => 'Ҕ',\n  'җ' => 'Җ',\n  'ҙ' => 'Ҙ',\n  'қ' => 'Қ',\n  'ҝ'
    => 'Ҝ',\n  'ҟ' => 'Ҟ',\n  'ҡ' => 'Ҡ',\n  'ң' => 'Ң',\n  'ҥ' => 'Ҥ',\n  'ҧ' =>
    'Ҧ',\n  'ҩ' => 'Ҩ',\n  'ҫ' => 'Ҫ',\n  'ҭ' => 'Ҭ',\n  'ү' => 'Ү',\n  'ұ' => 'Ұ',\n
    \ 'ҳ' => 'Ҳ',\n  'ҵ' => 'Ҵ',\n  'ҷ' => 'Ҷ',\n  'ҹ' => 'Ҹ',\n  'һ' => 'Һ',\n  'ҽ'
    => 'Ҽ',\n  'ҿ' => 'Ҿ',\n  'ӂ' => 'Ӂ',\n  'ӄ' => 'Ӄ',\n  'ӆ' => 'Ӆ',\n  'ӈ' =>
    'Ӈ',\n  'ӊ' => 'Ӊ',\n  'ӌ' => 'Ӌ',\n  'ӎ' => 'Ӎ',\n  'ӏ' => 'Ӏ',\n  'ӑ' => 'Ӑ',\n
    \ 'ӓ' => 'Ӓ',\n  'ӕ' => 'Ӕ',\n  'ӗ' => 'Ӗ',\n  'ә' => 'Ә',\n  'ӛ' => 'Ӛ',\n  'ӝ'
    => 'Ӝ',\n  'ӟ' => 'Ӟ',\n  'ӡ' => 'Ӡ',\n  'ӣ' => 'Ӣ',\n  'ӥ' => 'Ӥ',\n  'ӧ' =>
    'Ӧ',\n  'ө' => 'Ө',\n  'ӫ' => 'Ӫ',\n  'ӭ' => 'Ӭ',\n  'ӯ' => 'Ӯ',\n  'ӱ' => 'Ӱ',\n
    \ 'ӳ' => 'Ӳ',\n  'ӵ' => 'Ӵ',\n  'ӷ' => 'Ӷ',\n  'ӹ' => 'Ӹ',\n  'ӻ' => 'Ӻ',\n  'ӽ'
    => 'Ӽ',\n  'ӿ' => 'Ӿ',\n  'ԁ' => 'Ԁ',\n  'ԃ' => 'Ԃ',\n  'ԅ' => 'Ԅ',\n  'ԇ' =>
    'Ԇ',\n  'ԉ' => 'Ԉ',\n  'ԋ' => 'Ԋ',\n  'ԍ' => 'Ԍ',\n  'ԏ' => 'Ԏ',\n  'ԑ' => 'Ԑ',\n
    \ 'ԓ' => 'Ԓ',\n  'ԕ' => 'Ԕ',\n  'ԗ' => 'Ԗ',\n  'ԙ' => 'Ԙ',\n  'ԛ' => 'Ԛ',\n  'ԝ'
    => 'Ԝ',\n  'ԟ' => 'Ԟ',\n  'ԡ' => 'Ԡ',\n  'ԣ' => 'Ԣ',\n  'ԥ' => 'Ԥ',\n  'ԧ' =>
    'Ԧ',\n  'ԩ' => 'Ԩ',\n  'ԫ' => 'Ԫ',\n  'ԭ' => 'Ԭ',\n  'ԯ' => 'Ԯ',\n  'ա' => 'Ա',\n
    \ 'բ' => 'Բ',\n  'գ' => 'Գ',\n  'դ' => 'Դ',\n  'ե' => 'Ե',\n  'զ' => 'Զ',\n  'է'
    => 'Է',\n  'ը' => 'Ը',\n  'թ' => 'Թ',\n  'ժ' => 'Ժ',\n  'ի' => 'Ի',\n  'լ' =>
    'Լ',\n  'խ' => 'Խ',\n  'ծ' => 'Ծ',\n  'կ' => 'Կ',\n  'հ' => 'Հ',\n  'ձ' => 'Ձ',\n
    \ 'ղ' => 'Ղ',\n  'ճ' => 'Ճ',\n  'մ' => 'Մ',\n  'յ' => 'Յ',\n  'ն' => 'Ն',\n  'շ'
    => 'Շ',\n  'ո' => 'Ո',\n  'չ' => 'Չ',\n  'պ' => 'Պ',\n  'ջ' => 'Ջ',\n  'ռ' =>
    'Ռ',\n  'ս' => 'Ս',\n  'վ' => 'Վ',\n  'տ' => 'Տ',\n  'ր' => 'Ր',\n  'ց' => 'Ց',\n
    \ 'ւ' => 'Ւ',\n  'փ' => 'Փ',\n  'ք' => 'Ք',\n  'օ' => 'Օ',\n  'ֆ' => 'Ֆ',\n  'ა'
    => 'Ა',\n  'ბ' => 'Ბ',\n  'გ' => 'Გ',\n  'დ' => 'Დ',\n  'ე' => 'Ე',\n  'ვ' =>
    'Ვ',\n  'ზ' => 'Ზ',\n  'თ' => 'Თ',\n  'ი' => 'Ი',\n  'კ' => 'Კ',\n  'ლ' => 'Ლ',\n
    \ 'მ' => 'Მ',\n  'ნ' => 'Ნ',\n  'ო' => 'Ო',\n  'პ' => 'Პ',\n  'ჟ' => 'Ჟ',\n  'რ'
    => 'Რ',\n  'ს' => 'Ს',\n  'ტ' => 'Ტ',\n  'უ' => 'Უ',\n  'ფ' => 'Ფ',\n  'ქ' =>
    'Ქ',\n  'ღ' => 'Ღ',\n  'ყ' => 'Ყ',\n  'შ' => 'Შ',\n  'ჩ' => 'Ჩ',\n  'ც' => 'Ც',\n
    \ 'ძ' => 'Ძ',\n  'წ' => 'Წ',\n  'ჭ' => 'Ჭ',\n  'ხ' => 'Ხ',\n  'ჯ' => 'Ჯ',\n  'ჰ'
    => 'Ჰ',\n  'ჱ' => 'Ჱ',\n  'ჲ' => 'Ჲ',\n  'ჳ' => 'Ჳ',\n  'ჴ' => 'Ჴ',\n  'ჵ' =>
    'Ჵ',\n  'ჶ' => 'Ჶ',\n  'ჷ' => 'Ჷ',\n  'ჸ' => 'Ჸ',\n  'ჹ' => 'Ჹ',\n  'ჺ' => 'Ჺ',\n
    \ 'ჽ' => 'Ჽ',\n  'ჾ' => 'Ჾ',\n  'ჿ' => 'Ჿ',\n  'ᏸ' => 'Ᏸ',\n  'ᏹ' => 'Ᏹ',\n  'ᏺ'
    => 'Ᏺ',\n  'ᏻ' => 'Ᏻ',\n  'ᏼ' => 'Ᏼ',\n  'ᏽ' => 'Ᏽ',\n  'ᲀ' => 'В',\n  'ᲁ' =>
    'Д',\n  'ᲂ' => 'О',\n  'ᲃ' => 'С',\n  'ᲄ' => 'Т',\n  'ᲅ' => 'Т',\n  'ᲆ' => 'Ъ',\n
    \ 'ᲇ' => 'Ѣ',\n  'ᲈ' => 'Ꙋ',\n  'ᵹ' => 'Ᵹ',\n  'ᵽ' => 'Ᵽ',\n  'ᶎ' => 'Ᶎ',\n  'ḁ'
    => 'Ḁ',\n  'ḃ' => 'Ḃ',\n  'ḅ' => 'Ḅ',\n  'ḇ' => 'Ḇ',\n  'ḉ' => 'Ḉ',\n  'ḋ' =>
    'Ḋ',\n  'ḍ' => 'Ḍ',\n  'ḏ' => 'Ḏ',\n  'ḑ' => 'Ḑ',\n  'ḓ' => 'Ḓ',\n  'ḕ' => 'Ḕ',\n
    \ 'ḗ' => 'Ḗ',\n  'ḙ' => 'Ḙ',\n  'ḛ' => 'Ḛ',\n  'ḝ' => 'Ḝ',\n  'ḟ' => 'Ḟ',\n  'ḡ'
    => 'Ḡ',\n  'ḣ' => 'Ḣ',\n  'ḥ' => 'Ḥ',\n  'ḧ' => 'Ḧ',\n  'ḩ' => 'Ḩ',\n  'ḫ' =>
    'Ḫ',\n  'ḭ' => 'Ḭ',\n  'ḯ' => 'Ḯ',\n  'ḱ' => 'Ḱ',\n  'ḳ' => 'Ḳ',\n  'ḵ' => 'Ḵ',\n
    \ 'ḷ' => 'Ḷ',\n  'ḹ' => 'Ḹ',\n  'ḻ' => 'Ḻ',\n  'ḽ' => 'Ḽ',\n  'ḿ' => 'Ḿ',\n  'ṁ'
    => 'Ṁ',\n  'ṃ' => 'Ṃ',\n  'ṅ' => 'Ṅ',\n  'ṇ' => 'Ṇ',\n  'ṉ' => 'Ṉ',\n  'ṋ' =>
    'Ṋ',\n  'ṍ' => 'Ṍ',\n  'ṏ' => 'Ṏ',\n  'ṑ' => 'Ṑ',\n  'ṓ' => 'Ṓ',\n  'ṕ' => 'Ṕ',\n
    \ 'ṗ' => 'Ṗ',\n  'ṙ' => 'Ṙ',\n  'ṛ' => 'Ṛ',\n  'ṝ' => 'Ṝ',\n  'ṟ' => 'Ṟ',\n  'ṡ'
    => 'Ṡ',\n  'ṣ' => 'Ṣ',\n  'ṥ' => 'Ṥ',\n  'ṧ' => 'Ṧ',\n  'ṩ' => 'Ṩ',\n  'ṫ' =>
    'Ṫ',\n  'ṭ' => 'Ṭ',\n  'ṯ' => 'Ṯ',\n  'ṱ' => 'Ṱ',\n  'ṳ' => 'Ṳ',\n  'ṵ' => 'Ṵ',\n
    \ 'ṷ' => 'Ṷ',\n  'ṹ' => 'Ṹ',\n  'ṻ' => 'Ṻ',\n  'ṽ' => 'Ṽ',\n  'ṿ' => 'Ṿ',\n  'ẁ'
    => 'Ẁ',\n  'ẃ' => 'Ẃ',\n  'ẅ' => 'Ẅ',\n  'ẇ' => 'Ẇ',\n  'ẉ' => 'Ẉ',\n  'ẋ' =>
    'Ẋ',\n  'ẍ' => 'Ẍ',\n  'ẏ' => 'Ẏ',\n  'ẑ' => 'Ẑ',\n  'ẓ' => 'Ẓ',\n  'ẕ' => 'Ẕ',\n
    \ 'ẛ' => 'Ṡ',\n  'ạ' => 'Ạ',\n  'ả' => 'Ả',\n  'ấ' => 'Ấ',\n  'ầ' => 'Ầ',\n  'ẩ'
    => 'Ẩ',\n  'ẫ' => 'Ẫ',\n  'ậ' => 'Ậ',\n  'ắ' => 'Ắ',\n  'ằ' => 'Ằ',\n  'ẳ' =>
    'Ẳ',\n  'ẵ' => 'Ẵ',\n  'ặ' => 'Ặ',\n  'ẹ' => 'Ẹ',\n  'ẻ' => 'Ẻ',\n  'ẽ' => 'Ẽ',\n
    \ 'ế' => 'Ế',\n  'ề' => 'Ề',\n  'ể' => 'Ể',\n  'ễ' => 'Ễ',\n  'ệ' => 'Ệ',\n  'ỉ'
    => 'Ỉ',\n  'ị' => 'Ị',\n  'ọ' => 'Ọ',\n  'ỏ' => 'Ỏ',\n  'ố' => 'Ố',\n  'ồ' =>
    'Ồ',\n  'ổ' => 'Ổ',\n  'ỗ' => 'Ỗ',\n  'ộ' => 'Ộ',\n  'ớ' => 'Ớ',\n  'ờ' => 'Ờ',\n
    \ 'ở' => 'Ở',\n  'ỡ' => 'Ỡ',\n  'ợ' => 'Ợ',\n  'ụ' => 'Ụ',\n  'ủ' => 'Ủ',\n  'ứ'
    => 'Ứ',\n  'ừ' => 'Ừ',\n  'ử' => 'Ử',\n  'ữ' => 'Ữ',\n  'ự' => 'Ự',\n  'ỳ' =>
    'Ỳ',\n  'ỵ' => 'Ỵ',\n  'ỷ' => 'Ỷ',\n  'ỹ' => 'Ỹ',\n  'ỻ' => 'Ỻ',\n  'ỽ' => 'Ỽ',\n
    \ 'ỿ' => 'Ỿ',\n  'ἀ' => 'Ἀ',\n  'ἁ' => 'Ἁ',\n  'ἂ' => 'Ἂ',\n  'ἃ' => 'Ἃ',\n  'ἄ'
    => 'Ἄ',\n  'ἅ' => 'Ἅ',\n  'ἆ' => 'Ἆ',\n  'ἇ' => 'Ἇ',\n  'ἐ' => 'Ἐ',\n  'ἑ' =>
    'Ἑ',\n  'ἒ' => 'Ἒ',\n  'ἓ' => 'Ἓ',\n  'ἔ' => 'Ἔ',\n  'ἕ' => 'Ἕ',\n  'ἠ' => 'Ἠ',\n
    \ 'ἡ' => 'Ἡ',\n  'ἢ' => 'Ἢ',\n  'ἣ' => 'Ἣ',\n  'ἤ' => 'Ἤ',\n  'ἥ' => 'Ἥ',\n  'ἦ'
    => 'Ἦ',\n  'ἧ' => 'Ἧ',\n  'ἰ' => 'Ἰ',\n  'ἱ' => 'Ἱ',\n  'ἲ' => 'Ἲ',\n  'ἳ' =>
    'Ἳ',\n  'ἴ' => 'Ἴ',\n  'ἵ' => 'Ἵ',\n  'ἶ' => 'Ἶ',\n  'ἷ' => 'Ἷ',\n  'ὀ' => 'Ὀ',\n
    \ 'ὁ' => 'Ὁ',\n  'ὂ' => 'Ὂ',\n  'ὃ' => 'Ὃ',\n  'ὄ' => 'Ὄ',\n  'ὅ' => 'Ὅ',\n  'ὑ'
    => 'Ὑ',\n  'ὓ' => 'Ὓ',\n  'ὕ' => 'Ὕ',\n  'ὗ' => 'Ὗ',\n  'ὠ' => 'Ὠ',\n  'ὡ' =>
    'Ὡ',\n  'ὢ' => 'Ὢ',\n  'ὣ' => 'Ὣ',\n  'ὤ' => 'Ὤ',\n  'ὥ' => 'Ὥ',\n  'ὦ' => 'Ὦ',\n
    \ 'ὧ' => 'Ὧ',\n  'ὰ' => 'Ὰ',\n  'ά' => 'Ά',\n  'ὲ' => 'Ὲ',\n  'έ' => 'Έ',\n  'ὴ'
    => 'Ὴ',\n  'ή' => 'Ή',\n  'ὶ' => 'Ὶ',\n  'ί' => 'Ί',\n  'ὸ' => 'Ὸ',\n  'ό' =>
    'Ό',\n  'ὺ' => 'Ὺ',\n  'ύ' => 'Ύ',\n  'ὼ' => 'Ὼ',\n  'ώ' => 'Ώ',\n  'ᾀ' => 'ἈΙ',\n
    \ 'ᾁ' => 'ἉΙ',\n  'ᾂ' => 'ἊΙ',\n  'ᾃ' => 'ἋΙ',\n  'ᾄ' => 'ἌΙ',\n  'ᾅ' => 'ἍΙ',\n
    \ 'ᾆ' => 'ἎΙ',\n  'ᾇ' => 'ἏΙ',\n  'ᾐ' => 'ἨΙ',\n  'ᾑ' => 'ἩΙ',\n  'ᾒ' => 'ἪΙ',\n
    \ 'ᾓ' => 'ἫΙ',\n  'ᾔ' => 'ἬΙ',\n  'ᾕ' => 'ἭΙ',\n  'ᾖ' => 'ἮΙ',\n  'ᾗ' => 'ἯΙ',\n
    \ 'ᾠ' => 'ὨΙ',\n  'ᾡ' => 'ὩΙ',\n  'ᾢ' => 'ὪΙ',\n  'ᾣ' => 'ὫΙ',\n  'ᾤ' => 'ὬΙ',\n
    \ 'ᾥ' => 'ὭΙ',\n  'ᾦ' => 'ὮΙ',\n  'ᾧ' => 'ὯΙ',\n  'ᾰ' => 'Ᾰ',\n  'ᾱ' => 'Ᾱ',\n
    \ 'ᾳ' => 'ΑΙ',\n  'ι' => 'Ι',\n  'ῃ' => 'ΗΙ',\n  'ῐ' => 'Ῐ',\n  'ῑ' => 'Ῑ',\n
    \ 'ῠ' => 'Ῠ',\n  'ῡ' => 'Ῡ',\n  'ῥ' => 'Ῥ',\n  'ῳ' => 'ΩΙ',\n  'ⅎ' => 'Ⅎ',\n  'ⅰ'
    => 'Ⅰ',\n  'ⅱ' => 'Ⅱ',\n  'ⅲ' => 'Ⅲ',\n  'ⅳ' => 'Ⅳ',\n  'ⅴ' => 'Ⅴ',\n  'ⅵ' =>
    'Ⅵ',\n  'ⅶ' => 'Ⅶ',\n  'ⅷ' => 'Ⅷ',\n  'ⅸ' => 'Ⅸ',\n  'ⅹ' => 'Ⅹ',\n  'ⅺ' => 'Ⅺ',\n
    \ 'ⅻ' => 'Ⅻ',\n  'ⅼ' => 'Ⅼ',\n  'ⅽ' => 'Ⅽ',\n  'ⅾ' => 'Ⅾ',\n  'ⅿ' => 'Ⅿ',\n  'ↄ'
    => 'Ↄ',\n  'ⓐ' => 'Ⓐ',\n  'ⓑ' => 'Ⓑ',\n  'ⓒ' => 'Ⓒ',\n  'ⓓ' => 'Ⓓ',\n  'ⓔ' =>
    'Ⓔ',\n  'ⓕ' => 'Ⓕ',\n  'ⓖ' => 'Ⓖ',\n  'ⓗ' => 'Ⓗ',\n  'ⓘ' => 'Ⓘ',\n  'ⓙ' => 'Ⓙ',\n
    \ 'ⓚ' => 'Ⓚ',\n  'ⓛ' => 'Ⓛ',\n  'ⓜ' => 'Ⓜ',\n  'ⓝ' => 'Ⓝ',\n  'ⓞ' => 'Ⓞ',\n  'ⓟ'
    => 'Ⓟ',\n  'ⓠ' => 'Ⓠ',\n  'ⓡ' => 'Ⓡ',\n  'ⓢ' => 'Ⓢ',\n  'ⓣ' => 'Ⓣ',\n  'ⓤ' =>
    'Ⓤ',\n  'ⓥ' => 'Ⓥ',\n  'ⓦ' => 'Ⓦ',\n  'ⓧ' => 'Ⓧ',\n  'ⓨ' => 'Ⓨ',\n  'ⓩ' => 'Ⓩ',\n
    \ 'ⰰ' => 'Ⰰ',\n  'ⰱ' => 'Ⰱ',\n  'ⰲ' => 'Ⰲ',\n  'ⰳ' => 'Ⰳ',\n  'ⰴ' => 'Ⰴ',\n  'ⰵ'
    => 'Ⰵ',\n  'ⰶ' => 'Ⰶ',\n  'ⰷ' => 'Ⰷ',\n  'ⰸ' => 'Ⰸ',\n  'ⰹ' => 'Ⰹ',\n  'ⰺ' =>
    'Ⰺ',\n  'ⰻ' => 'Ⰻ',\n  'ⰼ' => 'Ⰼ',\n  'ⰽ' => 'Ⰽ',\n  'ⰾ' => 'Ⰾ',\n  'ⰿ' => 'Ⰿ',\n
    \ 'ⱀ' => 'Ⱀ',\n  'ⱁ' => 'Ⱁ',\n  'ⱂ' => 'Ⱂ',\n  'ⱃ' => 'Ⱃ',\n  'ⱄ' => 'Ⱄ',\n  'ⱅ'
    => 'Ⱅ',\n  'ⱆ' => 'Ⱆ',\n  'ⱇ' => 'Ⱇ',\n  'ⱈ' => 'Ⱈ',\n  'ⱉ' => 'Ⱉ',\n  'ⱊ' =>
    'Ⱊ',\n  'ⱋ' => 'Ⱋ',\n  'ⱌ' => 'Ⱌ',\n  'ⱍ' => 'Ⱍ',\n  'ⱎ' => 'Ⱎ',\n  'ⱏ' => 'Ⱏ',\n
    \ 'ⱐ' => 'Ⱐ',\n  'ⱑ' => 'Ⱑ',\n  'ⱒ' => 'Ⱒ',\n  'ⱓ' => 'Ⱓ',\n  'ⱔ' => 'Ⱔ',\n  'ⱕ'
    => 'Ⱕ',\n  'ⱖ' => 'Ⱖ',\n  'ⱗ' => 'Ⱗ',\n  'ⱘ' => 'Ⱘ',\n  'ⱙ' => 'Ⱙ',\n  'ⱚ' =>
    'Ⱚ',\n  'ⱛ' => 'Ⱛ',\n  'ⱜ' => 'Ⱜ',\n  'ⱝ' => 'Ⱝ',\n  'ⱞ' => 'Ⱞ',\n  'ⱡ' => 'Ⱡ',\n
    \ 'ⱥ' => 'Ⱥ',\n  'ⱦ' => 'Ⱦ',\n  'ⱨ' => 'Ⱨ',\n  'ⱪ' => 'Ⱪ',\n  'ⱬ' => 'Ⱬ',\n  'ⱳ'
    => 'Ⱳ',\n  'ⱶ' => 'Ⱶ',\n  'ⲁ' => 'Ⲁ',\n  'ⲃ' => 'Ⲃ',\n  'ⲅ' => 'Ⲅ',\n  'ⲇ' =>
    'Ⲇ',\n  'ⲉ' => 'Ⲉ',\n  'ⲋ' => 'Ⲋ',\n  'ⲍ' => 'Ⲍ',\n  'ⲏ' => 'Ⲏ',\n  'ⲑ' => 'Ⲑ',\n
    \ 'ⲓ' => 'Ⲓ',\n  'ⲕ' => 'Ⲕ',\n  'ⲗ' => 'Ⲗ',\n  'ⲙ' => 'Ⲙ',\n  'ⲛ' => 'Ⲛ',\n  'ⲝ'
    => 'Ⲝ',\n  'ⲟ' => 'Ⲟ',\n  'ⲡ' => 'Ⲡ',\n  'ⲣ' => 'Ⲣ',\n  'ⲥ' => 'Ⲥ',\n  'ⲧ' =>
    'Ⲧ',\n  'ⲩ' => 'Ⲩ',\n  'ⲫ' => 'Ⲫ',\n  'ⲭ' => 'Ⲭ',\n  'ⲯ' => 'Ⲯ',\n  'ⲱ' => 'Ⲱ',\n
    \ 'ⲳ' => 'Ⲳ',\n  'ⲵ' => 'Ⲵ',\n  'ⲷ' => 'Ⲷ',\n  'ⲹ' => 'Ⲹ',\n  'ⲻ' => 'Ⲻ',\n  'ⲽ'
    => 'Ⲽ',\n  'ⲿ' => 'Ⲿ',\n  'ⳁ' => 'Ⳁ',\n  'ⳃ' => 'Ⳃ',\n  'ⳅ' => 'Ⳅ',\n  'ⳇ' =>
    'Ⳇ',\n  'ⳉ' => 'Ⳉ',\n  'ⳋ' => 'Ⳋ',\n  'ⳍ' => 'Ⳍ',\n  'ⳏ' => 'Ⳏ',\n  'ⳑ' => 'Ⳑ',\n
    \ 'ⳓ' => 'Ⳓ',\n  'ⳕ' => 'Ⳕ',\n  'ⳗ' => 'Ⳗ',\n  'ⳙ' => 'Ⳙ',\n  'ⳛ' => 'Ⳛ',\n  'ⳝ'
    => 'Ⳝ',\n  'ⳟ' => 'Ⳟ',\n  'ⳡ' => 'Ⳡ',\n  'ⳣ' => 'Ⳣ',\n  'ⳬ' => 'Ⳬ',\n  'ⳮ' =>
    'Ⳮ',\n  'ⳳ' => 'Ⳳ',\n  'ⴀ' => 'Ⴀ',\n  'ⴁ' => 'Ⴁ',\n  'ⴂ' => 'Ⴂ',\n  'ⴃ' => 'Ⴃ',\n
    \ 'ⴄ' => 'Ⴄ',\n  'ⴅ' => 'Ⴅ',\n  'ⴆ' => 'Ⴆ',\n  'ⴇ' => 'Ⴇ',\n  'ⴈ' => 'Ⴈ',\n  'ⴉ'
    => 'Ⴉ',\n  'ⴊ' => 'Ⴊ',\n  'ⴋ' => 'Ⴋ',\n  'ⴌ' => 'Ⴌ',\n  'ⴍ' => 'Ⴍ',\n  'ⴎ' =>
    'Ⴎ',\n  'ⴏ' => 'Ⴏ',\n  'ⴐ' => 'Ⴐ',\n  'ⴑ' => 'Ⴑ',\n  'ⴒ' => 'Ⴒ',\n  'ⴓ' => 'Ⴓ',\n
    \ 'ⴔ' => 'Ⴔ',\n  'ⴕ' => 'Ⴕ',\n  'ⴖ' => 'Ⴖ',\n  'ⴗ' => 'Ⴗ',\n  'ⴘ' => 'Ⴘ',\n  'ⴙ'
    => 'Ⴙ',\n  'ⴚ' => 'Ⴚ',\n  'ⴛ' => 'Ⴛ',\n  'ⴜ' => 'Ⴜ',\n  'ⴝ' => 'Ⴝ',\n  'ⴞ' =>
    'Ⴞ',\n  'ⴟ' => 'Ⴟ',\n  'ⴠ' => 'Ⴠ',\n  'ⴡ' => 'Ⴡ',\n  'ⴢ' => 'Ⴢ',\n  'ⴣ' => 'Ⴣ',\n
    \ 'ⴤ' => 'Ⴤ',\n  'ⴥ' => 'Ⴥ',\n  'ⴧ' => 'Ⴧ',\n  'ⴭ' => 'Ⴭ',\n  'ꙁ' => 'Ꙁ',\n  'ꙃ'
    => 'Ꙃ',\n  'ꙅ' => 'Ꙅ',\n  'ꙇ' => 'Ꙇ',\n  'ꙉ' => 'Ꙉ',\n  'ꙋ' => 'Ꙋ',\n  'ꙍ' =>
    'Ꙍ',\n  'ꙏ' => 'Ꙏ',\n  'ꙑ' => 'Ꙑ',\n  'ꙓ' => 'Ꙓ',\n  'ꙕ' => 'Ꙕ',\n  'ꙗ' => 'Ꙗ',\n
    \ 'ꙙ' => 'Ꙙ',\n  'ꙛ' => 'Ꙛ',\n  'ꙝ' => 'Ꙝ',\n  'ꙟ' => 'Ꙟ',\n  'ꙡ' => 'Ꙡ',\n  'ꙣ'
    => 'Ꙣ',\n  'ꙥ' => 'Ꙥ',\n  'ꙧ' => 'Ꙧ',\n  'ꙩ' => 'Ꙩ',\n  'ꙫ' => 'Ꙫ',\n  'ꙭ' =>
    'Ꙭ',\n  'ꚁ' => 'Ꚁ',\n  'ꚃ' => 'Ꚃ',\n  'ꚅ' => 'Ꚅ',\n  'ꚇ' => 'Ꚇ',\n  'ꚉ' => 'Ꚉ',\n
    \ 'ꚋ' => 'Ꚋ',\n  'ꚍ' => 'Ꚍ',\n  'ꚏ' => 'Ꚏ',\n  'ꚑ' => 'Ꚑ',\n  'ꚓ' => 'Ꚓ',\n  'ꚕ'
    => 'Ꚕ',\n  'ꚗ' => 'Ꚗ',\n  'ꚙ' => 'Ꚙ',\n  'ꚛ' => 'Ꚛ',\n  'ꜣ' => 'Ꜣ',\n  'ꜥ' =>
    'Ꜥ',\n  'ꜧ' => 'Ꜧ',\n  'ꜩ' => 'Ꜩ',\n  'ꜫ' => 'Ꜫ',\n  'ꜭ' => 'Ꜭ',\n  'ꜯ' => 'Ꜯ',\n
    \ 'ꜳ' => 'Ꜳ',\n  'ꜵ' => 'Ꜵ',\n  'ꜷ' => 'Ꜷ',\n  'ꜹ' => 'Ꜹ',\n  'ꜻ' => 'Ꜻ',\n  'ꜽ'
    => 'Ꜽ',\n  'ꜿ' => 'Ꜿ',\n  'ꝁ' => 'Ꝁ',\n  'ꝃ' => 'Ꝃ',\n  'ꝅ' => 'Ꝅ',\n  'ꝇ' =>
    'Ꝇ',\n  'ꝉ' => 'Ꝉ',\n  'ꝋ' => 'Ꝋ',\n  'ꝍ' => 'Ꝍ',\n  'ꝏ' => 'Ꝏ',\n  'ꝑ' => 'Ꝑ',\n
    \ 'ꝓ' => 'Ꝓ',\n  'ꝕ' => 'Ꝕ',\n  'ꝗ' => 'Ꝗ',\n  'ꝙ' => 'Ꝙ',\n  'ꝛ' => 'Ꝛ',\n  'ꝝ'
    => 'Ꝝ',\n  'ꝟ' => 'Ꝟ',\n  'ꝡ' => 'Ꝡ',\n  'ꝣ' => 'Ꝣ',\n  'ꝥ' => 'Ꝥ',\n  'ꝧ' =>
    'Ꝧ',\n  'ꝩ' => 'Ꝩ',\n  'ꝫ' => 'Ꝫ',\n  'ꝭ' => 'Ꝭ',\n  'ꝯ' => 'Ꝯ',\n  'ꝺ' => 'Ꝺ',\n
    \ 'ꝼ' => 'Ꝼ',\n  'ꝿ' => 'Ꝿ',\n  'ꞁ' => 'Ꞁ',\n  'ꞃ' => 'Ꞃ',\n  'ꞅ' => 'Ꞅ',\n  'ꞇ'
    => 'Ꞇ',\n  'ꞌ' => 'Ꞌ',\n  'ꞑ' => 'Ꞑ',\n  'ꞓ' => 'Ꞓ',\n  'ꞔ' => 'Ꞔ',\n  'ꞗ' =>
    'Ꞗ',\n  'ꞙ' => 'Ꞙ',\n  'ꞛ' => 'Ꞛ',\n  'ꞝ' => 'Ꞝ',\n  'ꞟ' => 'Ꞟ',\n  'ꞡ' => 'Ꞡ',\n
    \ 'ꞣ' => 'Ꞣ',\n  'ꞥ' => 'Ꞥ',\n  'ꞧ' => 'Ꞧ',\n  'ꞩ' => 'Ꞩ',\n  'ꞵ' => 'Ꞵ',\n  'ꞷ'
    => 'Ꞷ',\n  'ꞹ' => 'Ꞹ',\n  'ꞻ' => 'Ꞻ',\n  'ꞽ' => 'Ꞽ',\n  'ꞿ' => 'Ꞿ',\n  'ꟃ' =>
    'Ꟃ',\n  'ꟈ' => 'Ꟈ',\n  'ꟊ' => 'Ꟊ',\n  'ꟶ' => 'Ꟶ',\n  'ꭓ' => 'Ꭓ',\n  'ꭰ' => 'Ꭰ',\n
    \ 'ꭱ' => 'Ꭱ',\n  'ꭲ' => 'Ꭲ',\n  'ꭳ' => 'Ꭳ',\n  'ꭴ' => 'Ꭴ',\n  'ꭵ' => 'Ꭵ',\n  'ꭶ'
    => 'Ꭶ',\n  'ꭷ' => 'Ꭷ',\n  'ꭸ' => 'Ꭸ',\n  'ꭹ' => 'Ꭹ',\n  'ꭺ' => 'Ꭺ',\n  'ꭻ' =>
    'Ꭻ',\n  'ꭼ' => 'Ꭼ',\n  'ꭽ' => 'Ꭽ',\n  'ꭾ' => 'Ꭾ',\n  'ꭿ' => 'Ꭿ',\n  'ꮀ' => 'Ꮀ',\n
    \ 'ꮁ' => 'Ꮁ',\n  'ꮂ' => 'Ꮂ',\n  'ꮃ' => 'Ꮃ',\n  'ꮄ' => 'Ꮄ',\n  'ꮅ' => 'Ꮅ',\n  'ꮆ'
    => 'Ꮆ',\n  'ꮇ' => 'Ꮇ',\n  'ꮈ' => 'Ꮈ',\n  'ꮉ' => 'Ꮉ',\n  'ꮊ' => 'Ꮊ',\n  'ꮋ' =>
    'Ꮋ',\n  'ꮌ' => 'Ꮌ',\n  'ꮍ' => 'Ꮍ',\n  'ꮎ' => 'Ꮎ',\n  'ꮏ' => 'Ꮏ',\n  'ꮐ' => 'Ꮐ',\n
    \ 'ꮑ' => 'Ꮑ',\n  'ꮒ' => 'Ꮒ',\n  'ꮓ' => 'Ꮓ',\n  'ꮔ' => 'Ꮔ',\n  'ꮕ' => 'Ꮕ',\n  'ꮖ'
    => 'Ꮖ',\n  'ꮗ' => 'Ꮗ',\n  'ꮘ' => 'Ꮘ',\n  'ꮙ' => 'Ꮙ',\n  'ꮚ' => 'Ꮚ',\n  'ꮛ' =>
    'Ꮛ',\n  'ꮜ' => 'Ꮜ',\n  'ꮝ' => 'Ꮝ',\n  'ꮞ' => 'Ꮞ',\n  'ꮟ' => 'Ꮟ',\n  'ꮠ' => 'Ꮠ',\n
    \ 'ꮡ' => 'Ꮡ',\n  'ꮢ' => 'Ꮢ',\n  'ꮣ' => 'Ꮣ',\n  'ꮤ' => 'Ꮤ',\n  'ꮥ' => 'Ꮥ',\n  'ꮦ'
    => 'Ꮦ',\n  'ꮧ' => 'Ꮧ',\n  'ꮨ' => 'Ꮨ',\n  'ꮩ' => 'Ꮩ',\n  'ꮪ' => 'Ꮪ',\n  'ꮫ' =>
    'Ꮫ',\n  'ꮬ' => 'Ꮬ',\n  'ꮭ' => 'Ꮭ',\n  'ꮮ' => 'Ꮮ',\n  'ꮯ' => 'Ꮯ',\n  'ꮰ' => 'Ꮰ',\n
    \ 'ꮱ' => 'Ꮱ',\n  'ꮲ' => 'Ꮲ',\n  'ꮳ' => 'Ꮳ',\n  'ꮴ' => 'Ꮴ',\n  'ꮵ' => 'Ꮵ',\n  'ꮶ'
    => 'Ꮶ',\n  'ꮷ' => 'Ꮷ',\n  'ꮸ' => 'Ꮸ',\n  'ꮹ' => 'Ꮹ',\n  'ꮺ' => 'Ꮺ',\n  'ꮻ' =>
    'Ꮻ',\n  'ꮼ' => 'Ꮼ',\n  'ꮽ' => 'Ꮽ',\n  'ꮾ' => 'Ꮾ',\n  'ꮿ' => 'Ꮿ',\n  'ａ' => 'Ａ',\n
    \ 'ｂ' => 'Ｂ',\n  'ｃ' => 'Ｃ',\n  'ｄ' => 'Ｄ',\n  'ｅ' => 'Ｅ',\n  'ｆ' => 'Ｆ',\n  'ｇ'
    => 'Ｇ',\n  'ｈ' => 'Ｈ',\n  'ｉ' => 'Ｉ',\n  'ｊ' => 'Ｊ',\n  'ｋ' => 'Ｋ',\n  'ｌ' =>
    'Ｌ',\n  'ｍ' => 'Ｍ',\n  'ｎ' => 'Ｎ',\n  'ｏ' => 'Ｏ',\n  'ｐ' => 'Ｐ',\n  'ｑ' => 'Ｑ',\n
    \ 'ｒ' => 'Ｒ',\n  'ｓ' => 'Ｓ',\n  'ｔ' => 'Ｔ',\n  'ｕ' => 'Ｕ',\n  'ｖ' => 'Ｖ',\n  'ｗ'
    => 'Ｗ',\n  'ｘ' => 'Ｘ',\n  'ｙ' => 'Ｙ',\n  'ｚ' => 'Ｚ',\n  '\U00010428' => '\U00010400',\n
    \ '\U00010429' => '\U00010401',\n  '\U0001042A' => '\U00010402',\n  '\U0001042B'
    => '\U00010403',\n  '\U0001042C' => '\U00010404',\n  '\U0001042D' => '\U00010405',\n
    \ '\U0001042E' => '\U00010406',\n  '\U0001042F' => '\U00010407',\n  '\U00010430'
    => '\U00010408',\n  '\U00010431' => '\U00010409',\n  '\U00010432' => '\U0001040A',\n
    \ '\U00010433' => '\U0001040B',\n  '\U00010434' => '\U0001040C',\n  '\U00010435'
    => '\U0001040D',\n  '\U00010436' => '\U0001040E',\n  '\U00010437' => '\U0001040F',\n
    \ '\U00010438' => '\U00010410',\n  '\U00010439' => '\U00010411',\n  '\U0001043A'
    => '\U00010412',\n  '\U0001043B' => '\U00010413',\n  '\U0001043C' => '\U00010414',\n
    \ '\U0001043D' => '\U00010415',\n  '\U0001043E' => '\U00010416',\n  '\U0001043F'
    => '\U00010417',\n  '\U00010440' => '\U00010418',\n  '\U00010441' => '\U00010419',\n
    \ '\U00010442' => '\U0001041A',\n  '\U00010443' => '\U0001041B',\n  '\U00010444'
    => '\U0001041C',\n  '\U00010445' => '\U0001041D',\n  '\U00010446' => '\U0001041E',\n
    \ '\U00010447' => '\U0001041F',\n  '\U00010448' => '\U00010420',\n  '\U00010449'
    => '\U00010421',\n  '\U0001044A' => '\U00010422',\n  '\U0001044B' => '\U00010423',\n
    \ '\U0001044C' => '\U00010424',\n  '\U0001044D' => '\U00010425',\n  '\U0001044E'
    => '\U00010426',\n  '\U0001044F' => '\U00010427',\n  '\U000104D8' => '\U000104B0',\n
    \ '\U000104D9' => '\U000104B1',\n  '\U000104DA' => '\U000104B2',\n  '\U000104DB'
    => '\U000104B3',\n  '\U000104DC' => '\U000104B4',\n  '\U000104DD' => '\U000104B5',\n
    \ '\U000104DE' => '\U000104B6',\n  '\U000104DF' => '\U000104B7',\n  '\U000104E0'
    => '\U000104B8',\n  '\U000104E1' => '\U000104B9',\n  '\U000104E2' => '\U000104BA',\n
    \ '\U000104E3' => '\U000104BB',\n  '\U000104E4' => '\U000104BC',\n  '\U000104E5'
    => '\U000104BD',\n  '\U000104E6' => '\U000104BE',\n  '\U000104E7' => '\U000104BF',\n
    \ '\U000104E8' => '\U000104C0',\n  '\U000104E9' => '\U000104C1',\n  '\U000104EA'
    => '\U000104C2',\n  '\U000104EB' => '\U000104C3',\n  '\U000104EC' => '\U000104C4',\n
    \ '\U000104ED' => '\U000104C5',\n  '\U000104EE' => '\U000104C6',\n  '\U000104EF'
    => '\U000104C7',\n  '\U000104F0' => '\U000104C8',\n  '\U000104F1' => '\U000104C9',\n
    \ '\U000104F2' => '\U000104CA',\n  '\U000104F3' => '\U000104CB',\n  '\U000104F4'
    => '\U000104CC',\n  '\U000104F5' => '\U000104CD',\n  '\U000104F6' => '\U000104CE',\n
    \ '\U000104F7' => '\U000104CF',\n  '\U000104F8' => '\U000104D0',\n  '\U000104F9'
    => '\U000104D1',\n  '\U000104FA' => '\U000104D2',\n  '\U000104FB' => '\U000104D3',\n
    \ '\U00010CC0' => '\U00010C80',\n  '\U00010CC1' => '\U00010C81',\n  '\U00010CC2'
    => '\U00010C82',\n  '\U00010CC3' => '\U00010C83',\n  '\U00010CC4' => '\U00010C84',\n
    \ '\U00010CC5' => '\U00010C85',\n  '\U00010CC6' => '\U00010C86',\n  '\U00010CC7'
    => '\U00010C87',\n  '\U00010CC8' => '\U00010C88',\n  '\U00010CC9' => '\U00010C89',\n
    \ '\U00010CCA' => '\U00010C8A',\n  '\U00010CCB' => '\U00010C8B',\n  '\U00010CCC'
    => '\U00010C8C',\n  '\U00010CCD' => '\U00010C8D',\n  '\U00010CCE' => '\U00010C8E',\n
    \ '\U00010CCF' => '\U00010C8F',\n  '\U00010CD0' => '\U00010C90',\n  '\U00010CD1'
    => '\U00010C91',\n  '\U00010CD2' => '\U00010C92',\n  '\U00010CD3' => '\U00010C93',\n
    \ '\U00010CD4' => '\U00010C94',\n  '\U00010CD5' => '\U00010C95',\n  '\U00010CD6'
    => '\U00010C96',\n  '\U00010CD7' => '\U00010C97',\n  '\U00010CD8' => '\U00010C98',\n
    \ '\U00010CD9' => '\U00010C99',\n  '\U00010CDA' => '\U00010C9A',\n  '\U00010CDB'
    => '\U00010C9B',\n  '\U00010CDC' => '\U00010C9C',\n  '\U00010CDD' => '\U00010C9D',\n
    \ '\U00010CDE' => '\U00010C9E',\n  '\U00010CDF' => '\U00010C9F',\n  '\U00010CE0'
    => '\U00010CA0',\n  '\U00010CE1' => '\U00010CA1',\n  '\U00010CE2' => '\U00010CA2',\n
    \ '\U00010CE3' => '\U00010CA3',\n  '\U00010CE4' => '\U00010CA4',\n  '\U00010CE5'
    => '\U00010CA5',\n  '\U00010CE6' => '\U00010CA6',\n  '\U00010CE7' => '\U00010CA7',\n
    \ '\U00010CE8' => '\U00010CA8',\n  '\U00010CE9' => '\U00010CA9',\n  '\U00010CEA'
    => '\U00010CAA',\n  '\U00010CEB' => '\U00010CAB',\n  '\U00010CEC' => '\U00010CAC',\n
    \ '\U00010CED' => '\U00010CAD',\n  '\U00010CEE' => '\U00010CAE',\n  '\U00010CEF'
    => '\U00010CAF',\n  '\U00010CF0' => '\U00010CB0',\n  '\U00010CF1' => '\U00010CB1',\n
    \ '\U00010CF2' => '\U00010CB2',\n  '\U000118C0' => '\U000118A0',\n  '\U000118C1'
    => '\U000118A1',\n  '\U000118C2' => '\U000118A2',\n  '\U000118C3' => '\U000118A3',\n
    \ '\U000118C4' => '\U000118A4',\n  '\U000118C5' => '\U000118A5',\n  '\U000118C6'
    => '\U000118A6',\n  '\U000118C7' => '\U000118A7',\n  '\U000118C8' => '\U000118A8',\n
    \ '\U000118C9' => '\U000118A9',\n  '\U000118CA' => '\U000118AA',\n  '\U000118CB'
    => '\U000118AB',\n  '\U000118CC' => '\U000118AC',\n  '\U000118CD' => '\U000118AD',\n
    \ '\U000118CE' => '\U000118AE',\n  '\U000118CF' => '\U000118AF',\n  '\U000118D0'
    => '\U000118B0',\n  '\U000118D1' => '\U000118B1',\n  '\U000118D2' => '\U000118B2',\n
    \ '\U000118D3' => '\U000118B3',\n  '\U000118D4' => '\U000118B4',\n  '\U000118D5'
    => '\U000118B5',\n  '\U000118D6' => '\U000118B6',\n  '\U000118D7' => '\U000118B7',\n
    \ '\U000118D8' => '\U000118B8',\n  '\U000118D9' => '\U000118B9',\n  '\U000118DA'
    => '\U000118BA',\n  '\U000118DB' => '\U000118BB',\n  '\U000118DC' => '\U000118BC',\n
    \ '\U000118DD' => '\U000118BD',\n  '\U000118DE' => '\U000118BE',\n  '\U000118DF'
    => '\U000118BF',\n  '\U00016E60' => '\U00016E40',\n  '\U00016E61' => '\U00016E41',\n
    \ '\U00016E62' => '\U00016E42',\n  '\U00016E63' => '\U00016E43',\n  '\U00016E64'
    => '\U00016E44',\n  '\U00016E65' => '\U00016E45',\n  '\U00016E66' => '\U00016E46',\n
    \ '\U00016E67' => '\U00016E47',\n  '\U00016E68' => '\U00016E48',\n  '\U00016E69'
    => '\U00016E49',\n  '\U00016E6A' => '\U00016E4A',\n  '\U00016E6B' => '\U00016E4B',\n
    \ '\U00016E6C' => '\U00016E4C',\n  '\U00016E6D' => '\U00016E4D',\n  '\U00016E6E'
    => '\U00016E4E',\n  '\U00016E6F' => '\U00016E4F',\n  '\U00016E70' => '\U00016E50',\n
    \ '\U00016E71' => '\U00016E51',\n  '\U00016E72' => '\U00016E52',\n  '\U00016E73'
    => '\U00016E53',\n  '\U00016E74' => '\U00016E54',\n  '\U00016E75' => '\U00016E55',\n
    \ '\U00016E76' => '\U00016E56',\n  '\U00016E77' => '\U00016E57',\n  '\U00016E78'
    => '\U00016E58',\n  '\U00016E79' => '\U00016E59',\n  '\U00016E7A' => '\U00016E5A',\n
    \ '\U00016E7B' => '\U00016E5B',\n  '\U00016E7C' => '\U00016E5C',\n  '\U00016E7D'
    => '\U00016E5D',\n  '\U00016E7E' => '\U00016E5E',\n  '\U00016E7F' => '\U00016E5F',\n
    \ '\U0001E922' => '\U0001E900',\n  '\U0001E923' => '\U0001E901',\n  '\U0001E924'
    => '\U0001E902',\n  '\U0001E925' => '\U0001E903',\n  '\U0001E926' => '\U0001E904',\n
    \ '\U0001E927' => '\U0001E905',\n  '\U0001E928' => '\U0001E906',\n  '\U0001E929'
    => '\U0001E907',\n  '\U0001E92A' => '\U0001E908',\n  '\U0001E92B' => '\U0001E909',\n
    \ '\U0001E92C' => '\U0001E90A',\n  '\U0001E92D' => '\U0001E90B',\n  '\U0001E92E'
    => '\U0001E90C',\n  '\U0001E92F' => '\U0001E90D',\n  '\U0001E930' => '\U0001E90E',\n
    \ '\U0001E931' => '\U0001E90F',\n  '\U0001E932' => '\U0001E910',\n  '\U0001E933'
    => '\U0001E911',\n  '\U0001E934' => '\U0001E912',\n  '\U0001E935' => '\U0001E913',\n
    \ '\U0001E936' => '\U0001E914',\n  '\U0001E937' => '\U0001E915',\n  '\U0001E938'
    => '\U0001E916',\n  '\U0001E939' => '\U0001E917',\n  '\U0001E93A' => '\U0001E918',\n
    \ '\U0001E93B' => '\U0001E919',\n  '\U0001E93C' => '\U0001E91A',\n  '\U0001E93D'
    => '\U0001E91B',\n  '\U0001E93E' => '\U0001E91C',\n  '\U0001E93F' => '\U0001E91D',\n
    \ '\U0001E940' => '\U0001E91E',\n  '\U0001E941' => '\U0001E91F',\n  '\U0001E942'
    => '\U0001E920',\n  '\U0001E943' => '\U0001E921',\n  'ß' => 'SS',\n  'ﬀ' => 'FF',\n
    \ 'ﬁ' => 'FI',\n  'ﬂ' => 'FL',\n  'ﬃ' => 'FFI',\n  'ﬄ' => 'FFL',\n  'ﬅ' => 'ST',\n
    \ 'ﬆ' => 'ST',\n  'և' => 'ԵՒ',\n  'ﬓ' => 'ՄՆ',\n  'ﬔ' => 'ՄԵ',\n  'ﬕ' => 'ՄԻ',\n
    \ 'ﬖ' => 'ՎՆ',\n  'ﬗ' => 'ՄԽ',\n  'ŉ' => 'ʼN',\n  'ΐ' => 'Ϊ́',\n  'ΰ' => 'Ϋ́',\n
    \ 'ǰ' => 'J̌',\n  'ẖ' => 'H̱',\n  'ẗ' => 'T̈',\n  'ẘ' => 'W̊',\n  'ẙ' => 'Y̊',\n
    \ 'ẚ' => 'Aʾ',\n  'ὐ' => 'Υ̓',\n  'ὒ' => 'Υ̓̀',\n  'ὔ' => 'Υ̓́',\n  'ὖ' => 'Υ̓͂',\n
    \ 'ᾶ' => 'Α͂',\n  'ῆ' => 'Η͂',\n  'ῒ' => 'Ϊ̀',\n  'ΐ' => 'Ϊ́',\n  'ῖ' => 'Ι͂',\n
    \ 'ῗ' => 'Ϊ͂',\n  'ῢ' => 'Ϋ̀',\n  'ΰ' => 'Ϋ́',\n  'ῤ' => 'Ρ̓',\n  'ῦ' => 'Υ͂',\n
    \ 'ῧ' => 'Ϋ͂',\n  'ῶ' => 'Ω͂',\n  'ᾈ' => 'ἈΙ',\n  'ᾉ' => 'ἉΙ',\n  'ᾊ' => 'ἊΙ',\n
    \ 'ᾋ' => 'ἋΙ',\n  'ᾌ' => 'ἌΙ',\n  'ᾍ' => 'ἍΙ',\n  'ᾎ' => 'ἎΙ',\n  'ᾏ' => 'ἏΙ',\n
    \ 'ᾘ' => 'ἨΙ',\n  'ᾙ' => 'ἩΙ',\n  'ᾚ' => 'ἪΙ',\n  'ᾛ' => 'ἫΙ',\n  'ᾜ' => 'ἬΙ',\n
    \ 'ᾝ' => 'ἭΙ',\n  'ᾞ' => 'ἮΙ',\n  'ᾟ' => 'ἯΙ',\n  'ᾨ' => 'ὨΙ',\n  'ᾩ' => 'ὩΙ',\n
    \ 'ᾪ' => 'ὪΙ',\n  'ᾫ' => 'ὫΙ',\n  'ᾬ' => 'ὬΙ',\n  'ᾭ' => 'ὭΙ',\n  'ᾮ' => 'ὮΙ',\n
    \ 'ᾯ' => 'ὯΙ',\n  'ᾼ' => 'ΑΙ',\n  'ῌ' => 'ΗΙ',\n  'ῼ' => 'ΩΙ',\n  'ᾲ' => 'ᾺΙ',\n
    \ 'ᾴ' => 'ΆΙ',\n  'ῂ' => 'ῊΙ',\n  'ῄ' => 'ΉΙ',\n  'ῲ' => 'ῺΙ',\n  'ῴ' => 'ΏΙ',\n
    \ 'ᾷ' => 'Α͂Ι',\n  'ῇ' => 'Η͂Ι',\n  'ῷ' => 'Ω͂Ι',\n);\n"
  uploads-Carbon-vendor-symfony-polyfill-mbstring-bootstrap.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    use Symfony\Polyfill\Mbstring as p;

    if (\PHP_VERSION_ID >= 80000) {
        return require __DIR__.'/bootstrap80.php';
    }

    if (!function_exists('mb_convert_encoding')) {
        function mb_convert_encoding($string, $to_encoding, $from_encoding = null) { return p\Mbstring::mb_convert_encoding($string, $to_encoding, $from_encoding); }
    }
    if (!function_exists('mb_decode_mimeheader')) {
        function mb_decode_mimeheader($string) { return p\Mbstring::mb_decode_mimeheader($string); }
    }
    if (!function_exists('mb_encode_mimeheader')) {
        function mb_encode_mimeheader($string, $charset = null, $transfer_encoding = null, $newline = "\r\n", $indent = 0) { return p\Mbstring::mb_encode_mimeheader($string, $charset, $transfer_encoding, $newline, $indent); }
    }
    if (!function_exists('mb_decode_numericentity')) {
        function mb_decode_numericentity($string, $map, $encoding = null) { return p\Mbstring::mb_decode_numericentity($string, $map, $encoding); }
    }
    if (!function_exists('mb_encode_numericentity')) {
        function mb_encode_numericentity($string, $map, $encoding = null, $hex = false) { return p\Mbstring::mb_encode_numericentity($string, $map, $encoding, $hex); }
    }
    if (!function_exists('mb_convert_case')) {
        function mb_convert_case($string, $mode, $encoding = null) { return p\Mbstring::mb_convert_case($string, $mode, $encoding); }
    }
    if (!function_exists('mb_internal_encoding')) {
        function mb_internal_encoding($encoding = null) { return p\Mbstring::mb_internal_encoding($encoding); }
    }
    if (!function_exists('mb_language')) {
        function mb_language($language = null) { return p\Mbstring::mb_language($language); }
    }
    if (!function_exists('mb_list_encodings')) {
        function mb_list_encodings() { return p\Mbstring::mb_list_encodings(); }
    }
    if (!function_exists('mb_encoding_aliases')) {
        function mb_encoding_aliases($encoding) { return p\Mbstring::mb_encoding_aliases($encoding); }
    }
    if (!function_exists('mb_check_encoding')) {
        function mb_check_encoding($value = null, $encoding = null) { return p\Mbstring::mb_check_encoding($value, $encoding); }
    }
    if (!function_exists('mb_detect_encoding')) {
        function mb_detect_encoding($string, $encodings = null, $strict = false) { return p\Mbstring::mb_detect_encoding($string, $encodings, $strict); }
    }
    if (!function_exists('mb_detect_order')) {
        function mb_detect_order($encoding = null) { return p\Mbstring::mb_detect_order($encoding); }
    }
    if (!function_exists('mb_parse_str')) {
        function mb_parse_str($string, &$result = []) { parse_str($string, $result); return (bool) $result; }
    }
    if (!function_exists('mb_strlen')) {
        function mb_strlen($string, $encoding = null) { return p\Mbstring::mb_strlen($string, $encoding); }
    }
    if (!function_exists('mb_strpos')) {
        function mb_strpos($haystack, $needle, $offset = 0, $encoding = null) { return p\Mbstring::mb_strpos($haystack, $needle, $offset, $encoding); }
    }
    if (!function_exists('mb_strtolower')) {
        function mb_strtolower($string, $encoding = null) { return p\Mbstring::mb_strtolower($string, $encoding); }
    }
    if (!function_exists('mb_strtoupper')) {
        function mb_strtoupper($string, $encoding = null) { return p\Mbstring::mb_strtoupper($string, $encoding); }
    }
    if (!function_exists('mb_substitute_character')) {
        function mb_substitute_character($substitute_character = null) { return p\Mbstring::mb_substitute_character($substitute_character); }
    }
    if (!function_exists('mb_substr')) {
        function mb_substr($string, $start, $length = 2147483647, $encoding = null) { return p\Mbstring::mb_substr($string, $start, $length, $encoding); }
    }
    if (!function_exists('mb_stripos')) {
        function mb_stripos($haystack, $needle, $offset = 0, $encoding = null) { return p\Mbstring::mb_stripos($haystack, $needle, $offset, $encoding); }
    }
    if (!function_exists('mb_stristr')) {
        function mb_stristr($haystack, $needle, $before_needle = false, $encoding = null) { return p\Mbstring::mb_stristr($haystack, $needle, $before_needle, $encoding); }
    }
    if (!function_exists('mb_strrchr')) {
        function mb_strrchr($haystack, $needle, $before_needle = false, $encoding = null) { return p\Mbstring::mb_strrchr($haystack, $needle, $before_needle, $encoding); }
    }
    if (!function_exists('mb_strrichr')) {
        function mb_strrichr($haystack, $needle, $before_needle = false, $encoding = null) { return p\Mbstring::mb_strrichr($haystack, $needle, $before_needle, $encoding); }
    }
    if (!function_exists('mb_strripos')) {
        function mb_strripos($haystack, $needle, $offset = 0, $encoding = null) { return p\Mbstring::mb_strripos($haystack, $needle, $offset, $encoding); }
    }
    if (!function_exists('mb_strrpos')) {
        function mb_strrpos($haystack, $needle, $offset = 0, $encoding = null) { return p\Mbstring::mb_strrpos($haystack, $needle, $offset, $encoding); }
    }
    if (!function_exists('mb_strstr')) {
        function mb_strstr($haystack, $needle, $before_needle = false, $encoding = null) { return p\Mbstring::mb_strstr($haystack, $needle, $before_needle, $encoding); }
    }
    if (!function_exists('mb_get_info')) {
        function mb_get_info($type = 'all') { return p\Mbstring::mb_get_info($type); }
    }
    if (!function_exists('mb_http_output')) {
        function mb_http_output($encoding = null) { return p\Mbstring::mb_http_output($encoding); }
    }
    if (!function_exists('mb_strwidth')) {
        function mb_strwidth($string, $encoding = null) { return p\Mbstring::mb_strwidth($string, $encoding); }
    }
    if (!function_exists('mb_substr_count')) {
        function mb_substr_count($haystack, $needle, $encoding = null) { return p\Mbstring::mb_substr_count($haystack, $needle, $encoding); }
    }
    if (!function_exists('mb_output_handler')) {
        function mb_output_handler($string, $status) { return p\Mbstring::mb_output_handler($string, $status); }
    }
    if (!function_exists('mb_http_input')) {
        function mb_http_input($type = null) { return p\Mbstring::mb_http_input($type); }
    }

    if (!function_exists('mb_convert_variables')) {
        function mb_convert_variables($to_encoding, $from_encoding, &...$vars) { return p\Mbstring::mb_convert_variables($to_encoding, $from_encoding, ...$vars); }
    }

    if (!function_exists('mb_ord')) {
        function mb_ord($string, $encoding = null) { return p\Mbstring::mb_ord($string, $encoding); }
    }
    if (!function_exists('mb_chr')) {
        function mb_chr($codepoint, $encoding = null) { return p\Mbstring::mb_chr($codepoint, $encoding); }
    }
    if (!function_exists('mb_scrub')) {
        function mb_scrub($string, $encoding = null) { $encoding = null === $encoding ? mb_internal_encoding() : $encoding; return mb_convert_encoding($string, $encoding, $encoding); }
    }
    if (!function_exists('mb_str_split')) {
        function mb_str_split($string, $length = 1, $encoding = null) { return p\Mbstring::mb_str_split($string, $length, $encoding); }
    }

    if (extension_loaded('mbstring')) {
        return;
    }

    if (!defined('MB_CASE_UPPER')) {
        define('MB_CASE_UPPER', 0);
    }
    if (!defined('MB_CASE_LOWER')) {
        define('MB_CASE_LOWER', 1);
    }
    if (!defined('MB_CASE_TITLE')) {
        define('MB_CASE_TITLE', 2);
    }
  uploads-Carbon-vendor-symfony-polyfill-mbstring-bootstrap80.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    use Symfony\Polyfill\Mbstring as p;

    if (!function_exists('mb_convert_encoding')) {
        function mb_convert_encoding(array|string|null $string, ?string $to_encoding, array|string|null $from_encoding = null): array|string|false { return p\Mbstring::mb_convert_encoding($string ?? '', (string) $to_encoding, $from_encoding); }
    }
    if (!function_exists('mb_decode_mimeheader')) {
        function mb_decode_mimeheader(?string $string): string { return p\Mbstring::mb_decode_mimeheader((string) $string); }
    }
    if (!function_exists('mb_encode_mimeheader')) {
        function mb_encode_mimeheader(?string $string, ?string $charset = null, ?string $transfer_encoding = null, ?string $newline = "\r\n", ?int $indent = 0): string { return p\Mbstring::mb_encode_mimeheader((string) $string, $charset, $transfer_encoding, (string) $newline, (int) $indent); }
    }
    if (!function_exists('mb_decode_numericentity')) {
        function mb_decode_numericentity(?string $string, array $map, ?string $encoding = null): string { return p\Mbstring::mb_decode_numericentity((string) $string, $map, $encoding); }
    }
    if (!function_exists('mb_encode_numericentity')) {
        function mb_encode_numericentity(?string $string, array $map, ?string $encoding = null, ?bool $hex = false): string { return p\Mbstring::mb_encode_numericentity((string) $string, $map, $encoding, (bool) $hex); }
    }
    if (!function_exists('mb_convert_case')) {
        function mb_convert_case(?string $string, ?int $mode, ?string $encoding = null): string { return p\Mbstring::mb_convert_case((string) $string, (int) $mode, $encoding); }
    }
    if (!function_exists('mb_internal_encoding')) {
        function mb_internal_encoding(?string $encoding = null): string|bool { return p\Mbstring::mb_internal_encoding($encoding); }
    }
    if (!function_exists('mb_language')) {
        function mb_language(?string $language = null): string|bool { return p\Mbstring::mb_language($language); }
    }
    if (!function_exists('mb_list_encodings')) {
        function mb_list_encodings(): array { return p\Mbstring::mb_list_encodings(); }
    }
    if (!function_exists('mb_encoding_aliases')) {
        function mb_encoding_aliases(?string $encoding): array { return p\Mbstring::mb_encoding_aliases((string) $encoding); }
    }
    if (!function_exists('mb_check_encoding')) {
        function mb_check_encoding(array|string|null $value = null, ?string $encoding = null): bool { return p\Mbstring::mb_check_encoding($value, $encoding); }
    }
    if (!function_exists('mb_detect_encoding')) {
        function mb_detect_encoding(?string $string, array|string|null $encodings = null, ?bool $strict = false): string|false { return p\Mbstring::mb_detect_encoding((string) $string, $encodings, (bool) $strict); }
    }
    if (!function_exists('mb_detect_order')) {
        function mb_detect_order(array|string|null $encoding = null): array|bool { return p\Mbstring::mb_detect_order($encoding); }
    }
    if (!function_exists('mb_parse_str')) {
        function mb_parse_str(?string $string, &$result = []): bool { parse_str((string) $string, $result); return (bool) $result; }
    }
    if (!function_exists('mb_strlen')) {
        function mb_strlen(?string $string, ?string $encoding = null): int { return p\Mbstring::mb_strlen((string) $string, $encoding); }
    }
    if (!function_exists('mb_strpos')) {
        function mb_strpos(?string $haystack, ?string $needle, ?int $offset = 0, ?string $encoding = null): int|false { return p\Mbstring::mb_strpos((string) $haystack, (string) $needle, (int) $offset, $encoding); }
    }
    if (!function_exists('mb_strtolower')) {
        function mb_strtolower(?string $string, ?string $encoding = null): string { return p\Mbstring::mb_strtolower((string) $string, $encoding); }
    }
    if (!function_exists('mb_strtoupper')) {
        function mb_strtoupper(?string $string, ?string $encoding = null): string { return p\Mbstring::mb_strtoupper((string) $string, $encoding); }
    }
    if (!function_exists('mb_substitute_character')) {
        function mb_substitute_character(string|int|null $substitute_character = null): string|int|bool { return p\Mbstring::mb_substitute_character($substitute_character); }
    }
    if (!function_exists('mb_substr')) {
        function mb_substr(?string $string, ?int $start, ?int $length = null, ?string $encoding = null): string { return p\Mbstring::mb_substr((string) $string, (int) $start, $length, $encoding); }
    }
    if (!function_exists('mb_stripos')) {
        function mb_stripos(?string $haystack, ?string $needle, ?int $offset = 0, ?string $encoding = null): int|false { return p\Mbstring::mb_stripos((string) $haystack, (string) $needle, (int) $offset, $encoding); }
    }
    if (!function_exists('mb_stristr')) {
        function mb_stristr(?string $haystack, ?string $needle, ?bool $before_needle = false, ?string $encoding = null): string|false { return p\Mbstring::mb_stristr((string) $haystack, (string) $needle, (bool) $before_needle, $encoding); }
    }
    if (!function_exists('mb_strrchr')) {
        function mb_strrchr(?string $haystack, ?string $needle, ?bool $before_needle = false, ?string $encoding = null): string|false { return p\Mbstring::mb_strrchr((string) $haystack, (string) $needle, (bool) $before_needle, $encoding); }
    }
    if (!function_exists('mb_strrichr')) {
        function mb_strrichr(?string $haystack, ?string $needle, ?bool $before_needle = false, ?string $encoding = null): string|false { return p\Mbstring::mb_strrichr((string) $haystack, (string) $needle, (bool) $before_needle, $encoding); }
    }
    if (!function_exists('mb_strripos')) {
        function mb_strripos(?string $haystack, ?string $needle, ?int $offset = 0, ?string $encoding = null): int|false { return p\Mbstring::mb_strripos((string) $haystack, (string) $needle, (int) $offset, $encoding); }
    }
    if (!function_exists('mb_strrpos')) {
        function mb_strrpos(?string $haystack, ?string $needle, ?int $offset = 0, ?string $encoding = null): int|false { return p\Mbstring::mb_strrpos((string) $haystack, (string) $needle, (int) $offset, $encoding); }
    }
    if (!function_exists('mb_strstr')) {
        function mb_strstr(?string $haystack, ?string $needle, ?bool $before_needle = false, ?string $encoding = null): string|false { return p\Mbstring::mb_strstr((string) $haystack, (string) $needle, (bool) $before_needle, $encoding); }
    }
    if (!function_exists('mb_get_info')) {
        function mb_get_info(?string $type = 'all'): array|string|int|false { return p\Mbstring::mb_get_info((string) $type); }
    }
    if (!function_exists('mb_http_output')) {
        function mb_http_output(?string $encoding = null): string|bool { return p\Mbstring::mb_http_output($encoding); }
    }
    if (!function_exists('mb_strwidth')) {
        function mb_strwidth(?string $string, ?string $encoding = null): int { return p\Mbstring::mb_strwidth((string) $string, $encoding); }
    }
    if (!function_exists('mb_substr_count')) {
        function mb_substr_count(?string $haystack, ?string $needle, ?string $encoding = null): int { return p\Mbstring::mb_substr_count((string) $haystack, (string) $needle, $encoding); }
    }
    if (!function_exists('mb_output_handler')) {
        function mb_output_handler(?string $string, ?int $status): string { return p\Mbstring::mb_output_handler((string) $string, (int) $status); }
    }
    if (!function_exists('mb_http_input')) {
        function mb_http_input(?string $type = null): array|string|false { return p\Mbstring::mb_http_input($type); }
    }

    if (!function_exists('mb_convert_variables')) {
        function mb_convert_variables(?string $to_encoding, array|string|null $from_encoding, mixed &$var, mixed &...$vars): string|false { return p\Mbstring::mb_convert_variables((string) $to_encoding, $from_encoding ?? '', $var, ...$vars); }
    }

    if (!function_exists('mb_ord')) {
        function mb_ord(?string $string, ?string $encoding = null): int|false { return p\Mbstring::mb_ord((string) $string, $encoding); }
    }
    if (!function_exists('mb_chr')) {
        function mb_chr(?int $codepoint, ?string $encoding = null): string|false { return p\Mbstring::mb_chr((int) $codepoint, $encoding); }
    }
    if (!function_exists('mb_scrub')) {
        function mb_scrub(?string $string, ?string $encoding = null): string { $encoding ??= mb_internal_encoding(); return mb_convert_encoding((string) $string, $encoding, $encoding); }
    }
    if (!function_exists('mb_str_split')) {
        function mb_str_split(?string $string, ?int $length = 1, ?string $encoding = null): array { return p\Mbstring::mb_str_split((string) $string, (int) $length, $encoding); }
    }

    if (extension_loaded('mbstring')) {
        return;
    }

    if (!defined('MB_CASE_UPPER')) {
        define('MB_CASE_UPPER', 0);
    }
    if (!defined('MB_CASE_LOWER')) {
        define('MB_CASE_LOWER', 1);
    }
    if (!defined('MB_CASE_TITLE')) {
        define('MB_CASE_TITLE', 2);
    }
  uploads-Carbon-vendor-symfony-polyfill-mbstring-composer.json: |
    {
        "name": "symfony/polyfill-mbstring",
        "type": "library",
        "description": "Symfony polyfill for the Mbstring extension",
        "keywords": ["polyfill", "shim", "compatibility", "portable", "mbstring"],
        "homepage": "https://symfony.com",
        "license": "MIT",
        "authors": [
            {
                "name": "Nicolas Grekas",
                "email": "p@tchwork.com"
            },
            {
                "name": "Symfony Community",
                "homepage": "https://symfony.com/contributors"
            }
        ],
        "require": {
            "php": ">=7.1"
        },
        "autoload": {
            "psr-4": { "Symfony\\Polyfill\\Mbstring\\": "" },
            "files": [ "bootstrap.php" ]
        },
        "suggest": {
            "ext-mbstring": "For best performance"
        },
        "minimum-stability": "dev",
        "extra": {
            "branch-alias": {
                "dev-main": "1.23-dev"
            },
            "thanks": {
                "name": "symfony/polyfill",
                "url": "https://github.com/symfony/polyfill"
            }
        }
    }
  uploads-Carbon-vendor-symfony-polyfill-php80-LICENSE: |
    Copyright (c) 2020 Fabien Potencier

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished
    to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
  uploads-Carbon-vendor-symfony-polyfill-php80-Php80.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Polyfill\Php80;

    /**
     * @author Ion Bazan <ion.bazan@gmail.com>
     * @author Nico Oelgart <nicoswd@gmail.com>
     * @author Nicolas Grekas <p@tchwork.com>
     *
     * @internal
     */
    final class Php80
    {
        public static function fdiv(float $dividend, float $divisor): float
        {
            return @($dividend / $divisor);
        }

        public static function get_debug_type($value): string
        {
            switch (true) {
                case null === $value: return 'null';
                case \is_bool($value): return 'bool';
                case \is_string($value): return 'string';
                case \is_array($value): return 'array';
                case \is_int($value): return 'int';
                case \is_float($value): return 'float';
                case \is_object($value): break;
                case $value instanceof \__PHP_Incomplete_Class: return '__PHP_Incomplete_Class';
                default:
                    if (null === $type = @get_resource_type($value)) {
                        return 'unknown';
                    }

                    if ('Unknown' === $type) {
                        $type = 'closed';
                    }

                    return "resource ($type)";
            }

            $class = \get_class($value);

            if (false === strpos($class, '@')) {
                return $class;
            }

            return (get_parent_class($class) ?: key(class_implements($class)) ?: 'class').'@anonymous';
        }

        public static function get_resource_id($res): int
        {
            if (!\is_resource($res) && null === @get_resource_type($res)) {
                throw new \TypeError(sprintf('Argument 1 passed to get_resource_id() must be of the type resource, %s given', get_debug_type($res)));
            }

            return (int) $res;
        }

        public static function preg_last_error_msg(): string
        {
            switch (preg_last_error()) {
                case \PREG_INTERNAL_ERROR:
                    return 'Internal error';
                case \PREG_BAD_UTF8_ERROR:
                    return 'Malformed UTF-8 characters, possibly incorrectly encoded';
                case \PREG_BAD_UTF8_OFFSET_ERROR:
                    return 'The offset did not correspond to the beginning of a valid UTF-8 code point';
                case \PREG_BACKTRACK_LIMIT_ERROR:
                    return 'Backtrack limit exhausted';
                case \PREG_RECURSION_LIMIT_ERROR:
                    return 'Recursion limit exhausted';
                case \PREG_JIT_STACKLIMIT_ERROR:
                    return 'JIT stack limit exhausted';
                case \PREG_NO_ERROR:
                    return 'No error';
                default:
                    return 'Unknown error';
            }
        }

        public static function str_contains(string $haystack, string $needle): bool
        {
            return '' === $needle || false !== strpos($haystack, $needle);
        }

        public static function str_starts_with(string $haystack, string $needle): bool
        {
            return 0 === strncmp($haystack, $needle, \strlen($needle));
        }

        public static function str_ends_with(string $haystack, string $needle): bool
        {
            return '' === $needle || ('' !== $haystack && 0 === substr_compare($haystack, $needle, -\strlen($needle)));
        }
    }
  uploads-Carbon-vendor-symfony-polyfill-php80-README.md: |
    Symfony Polyfill / Php80
    ========================

    This component provides features added to PHP 8.0 core:

    - `Stringable` interface
    - [`fdiv`](https://php.net/fdiv)
    - `ValueError` class
    - `UnhandledMatchError` class
    - `FILTER_VALIDATE_BOOL` constant
    - [`get_debug_type`](https://php.net/get_debug_type)
    - [`preg_last_error_msg`](https://php.net/preg_last_error_msg)
    - [`str_contains`](https://php.net/str_contains)
    - [`str_starts_with`](https://php.net/str_starts_with)
    - [`str_ends_with`](https://php.net/str_ends_with)
    - [`get_resource_id`](https://php.net/get_resource_id)

    More information can be found in the
    [main Polyfill README](https://github.com/symfony/polyfill/blob/main/README.md).

    License
    =======

    This library is released under the [MIT license](LICENSE).
  uploads-Carbon-vendor-symfony-polyfill-php80-Resources-stubs-Attribute.php: |
    <?php

    #[Attribute(Attribute::TARGET_CLASS)]
    final class Attribute
    {
        public const TARGET_CLASS = 1;
        public const TARGET_FUNCTION = 2;
        public const TARGET_METHOD = 4;
        public const TARGET_PROPERTY = 8;
        public const TARGET_CLASS_CONSTANT = 16;
        public const TARGET_PARAMETER = 32;
        public const TARGET_ALL = 63;
        public const IS_REPEATABLE = 64;

        /** @var int */
        public $flags;

        public function __construct(int $flags = self::TARGET_ALL)
        {
            $this->flags = $flags;
        }
    }
  uploads-Carbon-vendor-symfony-polyfill-php80-Resources-stubs-Stringable.php: |
    <?php

    if (\PHP_VERSION_ID < 80000) {
        interface Stringable
        {
            /**
             * @return string
             */
            public function __toString();
        }
    }
  uploads-Carbon-vendor-symfony-polyfill-php80-Resources-stubs-UnhandledMatchError.php: |
    <?php

    class UnhandledMatchError extends Error
    {
    }
  uploads-Carbon-vendor-symfony-polyfill-php80-Resources-stubs-ValueError.php: |
    <?php

    class ValueError extends Error
    {
    }
  uploads-Carbon-vendor-symfony-polyfill-php80-bootstrap.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    use Symfony\Polyfill\Php80 as p;

    if (\PHP_VERSION_ID >= 80000) {
        return;
    }

    if (!defined('FILTER_VALIDATE_BOOL') && defined('FILTER_VALIDATE_BOOLEAN')) {
        define('FILTER_VALIDATE_BOOL', \FILTER_VALIDATE_BOOLEAN);
    }

    if (!function_exists('fdiv')) {
        function fdiv(float $num1, float $num2): float { return p\Php80::fdiv($num1, $num2); }
    }
    if (!function_exists('preg_last_error_msg')) {
        function preg_last_error_msg(): string { return p\Php80::preg_last_error_msg(); }
    }
    if (!function_exists('str_contains')) {
        function str_contains(?string $haystack, ?string $needle): bool { return p\Php80::str_contains($haystack ?? '', $needle ?? ''); }
    }
    if (!function_exists('str_starts_with')) {
        function str_starts_with(?string $haystack, ?string $needle): bool { return p\Php80::str_starts_with($haystack ?? '', $needle ?? ''); }
    }
    if (!function_exists('str_ends_with')) {
        function str_ends_with(?string $haystack, ?string $needle): bool { return p\Php80::str_ends_with($haystack ?? '', $needle ?? ''); }
    }
    if (!function_exists('get_debug_type')) {
        function get_debug_type($value): string { return p\Php80::get_debug_type($value); }
    }
    if (!function_exists('get_resource_id')) {
        function get_resource_id($resource): int { return p\Php80::get_resource_id($resource); }
    }
  uploads-Carbon-vendor-symfony-polyfill-php80-composer.json: |
    {
        "name": "symfony/polyfill-php80",
        "type": "library",
        "description": "Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions",
        "keywords": ["polyfill", "shim", "compatibility", "portable"],
        "homepage": "https://symfony.com",
        "license": "MIT",
        "authors": [
            {
                "name": "Ion Bazan",
                "email": "ion.bazan@gmail.com"
            },
            {
                "name": "Nicolas Grekas",
                "email": "p@tchwork.com"
            },
            {
                "name": "Symfony Community",
                "homepage": "https://symfony.com/contributors"
            }
        ],
        "require": {
            "php": ">=7.1"
        },
        "autoload": {
            "psr-4": { "Symfony\\Polyfill\\Php80\\": "" },
            "files": [ "bootstrap.php" ],
            "classmap": [ "Resources/stubs" ]
        },
        "minimum-stability": "dev",
        "extra": {
            "branch-alias": {
                "dev-main": "1.23-dev"
            },
            "thanks": {
                "name": "symfony/polyfill",
                "url": "https://github.com/symfony/polyfill"
            }
        }
    }
  uploads-Carbon-vendor-symfony-translation-Command-XliffLintCommand.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\Command;

    use Symfony\Component\Console\Command\Command;
    use Symfony\Component\Console\Exception\RuntimeException;
    use Symfony\Component\Console\Input\InputArgument;
    use Symfony\Component\Console\Input\InputInterface;
    use Symfony\Component\Console\Input\InputOption;
    use Symfony\Component\Console\Output\OutputInterface;
    use Symfony\Component\Console\Style\SymfonyStyle;
    use Symfony\Component\Translation\Exception\InvalidArgumentException;
    use Symfony\Component\Translation\Util\XliffUtils;

    /**
     * Validates XLIFF files syntax and outputs encountered errors.
     *
     * @author Grégoire Pineau <lyrixx@lyrixx.info>
     * @author Robin Chalas <robin.chalas@gmail.com>
     * @author Javier Eguiluz <javier.eguiluz@gmail.com>
     */
    class XliffLintCommand extends Command
    {
        protected static $defaultName = 'lint:xliff';

        private $format;
        private $displayCorrectFiles;
        private $directoryIteratorProvider;
        private $isReadableProvider;
        private $requireStrictFileNames;

        public function __construct(string $name = null, callable $directoryIteratorProvider = null, callable $isReadableProvider = null, bool $requireStrictFileNames = true)
        {
            parent::__construct($name);

            $this->directoryIteratorProvider = $directoryIteratorProvider;
            $this->isReadableProvider = $isReadableProvider;
            $this->requireStrictFileNames = $requireStrictFileNames;
        }

        /**
         * {@inheritdoc}
         */
        protected function configure()
        {
            $this
                ->setDescription('Lint an XLIFF file and outputs encountered errors')
                ->addArgument('filename', InputArgument::IS_ARRAY, 'A file, a directory or "-" for reading from STDIN')
                ->addOption('format', null, InputOption::VALUE_REQUIRED, 'The output format', 'txt')
                ->setHelp(<<<EOF
    The <info>%command.name%</info> command lints an XLIFF file and outputs to STDOUT
    the first encountered syntax error.

    You can validates XLIFF contents passed from STDIN:

      <info>cat filename | php %command.full_name% -</info>

    You can also validate the syntax of a file:

      <info>php %command.full_name% filename</info>

    Or of a whole directory:

      <info>php %command.full_name% dirname</info>
      <info>php %command.full_name% dirname --format=json</info>

    EOF
                )
            ;
        }

        protected function execute(InputInterface $input, OutputInterface $output)
        {
            $io = new SymfonyStyle($input, $output);
            $filenames = (array) $input->getArgument('filename');
            $this->format = $input->getOption('format');
            $this->displayCorrectFiles = $output->isVerbose();

            if (['-'] === $filenames) {
                return $this->display($io, [$this->validate(file_get_contents('php://stdin'))]);
            }

            // @deprecated to be removed in 5.0
            if (!$filenames) {
                if (0 !== ftell(\STDIN)) {
                    throw new RuntimeException('Please provide a filename or pipe file content to STDIN.');
                }

                @trigger_error('Piping content from STDIN to the "lint:xliff" command without passing the dash symbol "-" as argument is deprecated since Symfony 4.4.', \E_USER_DEPRECATED);

                return $this->display($io, [$this->validate(file_get_contents('php://stdin'))]);
            }

            $filesInfo = [];
            foreach ($filenames as $filename) {
                if (!$this->isReadable($filename)) {
                    throw new RuntimeException(sprintf('File or directory "%s" is not readable.', $filename));
                }

                foreach ($this->getFiles($filename) as $file) {
                    $filesInfo[] = $this->validate(file_get_contents($file), $file);
                }
            }

            return $this->display($io, $filesInfo);
        }

        private function validate(string $content, string $file = null): array
        {
            $errors = [];

            // Avoid: Warning DOMDocument::loadXML(): Empty string supplied as input
            if ('' === trim($content)) {
                return ['file' => $file, 'valid' => true];
            }

            $internal = libxml_use_internal_errors(true);

            $document = new \DOMDocument();
            $document->loadXML($content);

            if (null !== $targetLanguage = $this->getTargetLanguageFromFile($document)) {
                $normalizedLocalePattern = sprintf('(%s|%s)', preg_quote($targetLanguage, '/'), preg_quote(str_replace('-', '_', $targetLanguage), '/'));
                // strict file names require translation files to be named '____.locale.xlf'
                // otherwise, both '____.locale.xlf' and 'locale.____.xlf' are allowed
                // also, the regexp matching must be case-insensitive, as defined for 'target-language' values
                // http://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html#target-language
                $expectedFilenamePattern = $this->requireStrictFileNames ? sprintf('/^.*\.(?i:%s)\.(?:xlf|xliff)/', $normalizedLocalePattern) : sprintf('/^(?:.*\.(?i:%s)|(?i:%s)\..*)\.(?:xlf|xliff)/', $normalizedLocalePattern, $normalizedLocalePattern);

                if (0 === preg_match($expectedFilenamePattern, basename($file))) {
                    $errors[] = [
                        'line' => -1,
                        'column' => -1,
                        'message' => sprintf('There is a mismatch between the language included in the file name ("%s") and the "%s" value used in the "target-language" attribute of the file.', basename($file), $targetLanguage),
                    ];
                }
            }

            foreach (XliffUtils::validateSchema($document) as $xmlError) {
                $errors[] = [
                    'line' => $xmlError['line'],
                    'column' => $xmlError['column'],
                    'message' => $xmlError['message'],
                ];
            }

            libxml_clear_errors();
            libxml_use_internal_errors($internal);

            return ['file' => $file, 'valid' => 0 === \count($errors), 'messages' => $errors];
        }

        private function display(SymfonyStyle $io, array $files)
        {
            switch ($this->format) {
                case 'txt':
                    return $this->displayTxt($io, $files);
                case 'json':
                    return $this->displayJson($io, $files);
                default:
                    throw new InvalidArgumentException(sprintf('The format "%s" is not supported.', $this->format));
            }
        }

        private function displayTxt(SymfonyStyle $io, array $filesInfo)
        {
            $countFiles = \count($filesInfo);
            $erroredFiles = 0;

            foreach ($filesInfo as $info) {
                if ($info['valid'] && $this->displayCorrectFiles) {
                    $io->comment('<info>OK</info>'.($info['file'] ? sprintf(' in %s', $info['file']) : ''));
                } elseif (!$info['valid']) {
                    ++$erroredFiles;
                    $io->text('<error> ERROR </error>'.($info['file'] ? sprintf(' in %s', $info['file']) : ''));
                    $io->listing(array_map(function ($error) {
                        // general document errors have a '-1' line number
                        return -1 === $error['line'] ? $error['message'] : sprintf('Line %d, Column %d: %s', $error['line'], $error['column'], $error['message']);
                    }, $info['messages']));
                }
            }

            if (0 === $erroredFiles) {
                $io->success(sprintf('All %d XLIFF files contain valid syntax.', $countFiles));
            } else {
                $io->warning(sprintf('%d XLIFF files have valid syntax and %d contain errors.', $countFiles - $erroredFiles, $erroredFiles));
            }

            return min($erroredFiles, 1);
        }

        private function displayJson(SymfonyStyle $io, array $filesInfo)
        {
            $errors = 0;

            array_walk($filesInfo, function (&$v) use (&$errors) {
                $v['file'] = (string) $v['file'];
                if (!$v['valid']) {
                    ++$errors;
                }
            });

            $io->writeln(json_encode($filesInfo, \JSON_PRETTY_PRINT | \JSON_UNESCAPED_SLASHES));

            return min($errors, 1);
        }

        private function getFiles(string $fileOrDirectory)
        {
            if (is_file($fileOrDirectory)) {
                yield new \SplFileInfo($fileOrDirectory);

                return;
            }

            foreach ($this->getDirectoryIterator($fileOrDirectory) as $file) {
                if (!\in_array($file->getExtension(), ['xlf', 'xliff'])) {
                    continue;
                }

                yield $file;
            }
        }

        private function getDirectoryIterator(string $directory)
        {
            $default = function ($directory) {
                return new \RecursiveIteratorIterator(
                    new \RecursiveDirectoryIterator($directory, \FilesystemIterator::SKIP_DOTS | \FilesystemIterator::FOLLOW_SYMLINKS),
                    \RecursiveIteratorIterator::LEAVES_ONLY
                );
            };

            if (null !== $this->directoryIteratorProvider) {
                return ($this->directoryIteratorProvider)($directory, $default);
            }

            return $default($directory);
        }

        private function isReadable(string $fileOrDirectory)
        {
            $default = function ($fileOrDirectory) {
                return is_readable($fileOrDirectory);
            };

            if (null !== $this->isReadableProvider) {
                return ($this->isReadableProvider)($fileOrDirectory, $default);
            }

            return $default($fileOrDirectory);
        }

        private function getTargetLanguageFromFile(\DOMDocument $xliffContents): ?string
        {
            foreach ($xliffContents->getElementsByTagName('file')[0]->attributes ?? [] as $attribute) {
                if ('target-language' === $attribute->nodeName) {
                    return $attribute->nodeValue;
                }
            }

            return null;
        }
    }
  uploads-Carbon-vendor-symfony-translation-DataCollector-TranslationDataCollector.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation\DataCollector;

    use Symfony\Component\HttpFoundation\Request;
    use Symfony\Component\HttpFoundation\Response;
    use Symfony\Component\HttpKernel\DataCollector\DataCollector;
    use Symfony\Component\HttpKernel\DataCollector\LateDataCollectorInterface;
    use Symfony\Component\Translation\DataCollectorTranslator;
    use Symfony\Component\VarDumper\Cloner\Data;

    /**
     * @author Abdellatif Ait boudad <a.aitboudad@gmail.com>
     *
     * @final since Symfony 4.4
     */
    class TranslationDataCollector extends DataCollector implements LateDataCollectorInterface
    {
        private $translator;

        public function __construct(DataCollectorTranslator $translator)
        {
            $this->translator = $translator;
        }

        /**
         * {@inheritdoc}
         */
        public function lateCollect()
        {
            $messages = $this->sanitizeCollectedMessages($this->translator->getCollectedMessages());

            $this->data += $this->computeCount($messages);
            $this->data['messages'] = $messages;

            $this->data = $this->cloneVar($this->data);
        }

        /**
         * {@inheritdoc}
         *
         * @param \Throwable|null $exception
         */
        public function collect(Request $request, Response $response/*, \Throwable $exception = null*/)
        {
            $this->data['locale'] = $this->translator->getLocale();
            $this->data['fallback_locales'] = $this->translator->getFallbackLocales();
        }

        /**
         * {@inheritdoc}
         */
        public function reset()
        {
            $this->data = [];
        }

        /**
         * @return array|Data
         */
        public function getMessages()
        {
            return $this->data['messages'] ?? [];
        }

        /**
         * @return int
         */
        public function getCountMissings()
        {
            return $this->data[DataCollectorTranslator::MESSAGE_MISSING] ?? 0;
        }

        /**
         * @return int
         */
        public function getCountFallbacks()
        {
            return $this->data[DataCollectorTranslator::MESSAGE_EQUALS_FALLBACK] ?? 0;
        }

        /**
         * @return int
         */
        public function getCountDefines()
        {
            return $this->data[DataCollectorTranslator::MESSAGE_DEFINED] ?? 0;
        }

        public function getLocale()
        {
            return !empty($this->data['locale']) ? $this->data['locale'] : null;
        }

        /**
         * @internal since Symfony 4.2
         */
        public function getFallbackLocales()
        {
            return (isset($this->data['fallback_locales']) && \count($this->data['fallback_locales']) > 0) ? $this->data['fallback_locales'] : [];
        }

        /**
         * {@inheritdoc}
         */
        public function getName()
        {
            return 'translation';
        }

        private function sanitizeCollectedMessages(array $messages)
        {
            $result = [];
            foreach ($messages as $key => $message) {
                $messageId = $message['locale'].$message['domain'].$message['id'];

                if (!isset($result[$messageId])) {
                    $message['count'] = 1;
                    $message['parameters'] = !empty($message['parameters']) ? [$message['parameters']] : [];
                    $messages[$key]['translation'] = $this->sanitizeString($message['translation']);
                    $result[$messageId] = $message;
                } else {
                    if (!empty($message['parameters'])) {
                        $result[$messageId]['parameters'][] = $message['parameters'];
                    }

                    ++$result[$messageId]['count'];
                }

                unset($messages[$key]);
            }

            return $result;
        }

        private function computeCount(array $messages)
        {
            $count = [
                DataCollectorTranslator::MESSAGE_DEFINED => 0,
                DataCollectorTranslator::MESSAGE_MISSING => 0,
                DataCollectorTranslator::MESSAGE_EQUALS_FALLBACK => 0,
            ];

            foreach ($messages as $message) {
                ++$count[$message['state']];
            }

            return $count;
        }

        private function sanitizeString(string $string, int $length = 80)
        {
            $string = trim(preg_replace('/\s+/', ' ', $string));

            if (false !== $encoding = mb_detect_encoding($string, null, true)) {
                if (mb_strlen($string, $encoding) > $length) {
                    return mb_substr($string, 0, $length - 3, $encoding).'...';
                }
            } elseif (\strlen($string) > $length) {
                return substr($string, 0, $length - 3).'...';
            }

            return $string;
        }
    }
  uploads-Carbon-vendor-symfony-translation-DataCollectorTranslator.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation;

    use Symfony\Component\HttpKernel\CacheWarmer\WarmableInterface;
    use Symfony\Component\Translation\Exception\InvalidArgumentException;
    use Symfony\Component\Translation\TranslatorInterface as LegacyTranslatorInterface;
    use Symfony\Contracts\Translation\LocaleAwareInterface;
    use Symfony\Contracts\Translation\TranslatorInterface;

    /**
     * @author Abdellatif Ait boudad <a.aitboudad@gmail.com>
     */
    class DataCollectorTranslator implements LegacyTranslatorInterface, TranslatorInterface, TranslatorBagInterface, WarmableInterface
    {
        public const MESSAGE_DEFINED = 0;
        public const MESSAGE_MISSING = 1;
        public const MESSAGE_EQUALS_FALLBACK = 2;

        /**
         * @var TranslatorInterface|TranslatorBagInterface
         */
        private $translator;

        private $messages = [];

        /**
         * @param TranslatorInterface $translator The translator must implement TranslatorBagInterface
         */
        public function __construct($translator)
        {
            if (!$translator instanceof LegacyTranslatorInterface && !$translator instanceof TranslatorInterface) {
                throw new \TypeError(sprintf('Argument 1 passed to "%s()" must be an instance of "%s", "%s" given.', __METHOD__, TranslatorInterface::class, \is_object($translator) ? \get_class($translator) : \gettype($translator)));
            }
            if (!$translator instanceof TranslatorBagInterface || !$translator instanceof LocaleAwareInterface) {
                throw new InvalidArgumentException(sprintf('The Translator "%s" must implement TranslatorInterface, TranslatorBagInterface and LocaleAwareInterface.', \get_class($translator)));
            }

            $this->translator = $translator;
        }

        /**
         * {@inheritdoc}
         */
        public function trans($id, array $parameters = [], $domain = null, $locale = null)
        {
            $trans = $this->translator->trans($id, $parameters, $domain, $locale);
            $this->collectMessage($locale, $domain, $id, $trans, $parameters);

            return $trans;
        }

        /**
         * {@inheritdoc}
         *
         * @deprecated since Symfony 4.2, use the trans() method instead with a %count% parameter
         */
        public function transChoice($id, $number, array $parameters = [], $domain = null, $locale = null)
        {
            if ($this->translator instanceof TranslatorInterface) {
                $trans = $this->translator->trans($id, ['%count%' => $number] + $parameters, $domain, $locale);
            } else {
                $trans = $this->translator->transChoice($id, $number, $parameters, $domain, $locale);
            }

            $this->collectMessage($locale, $domain, $id, $trans, ['%count%' => $number] + $parameters);

            return $trans;
        }

        /**
         * {@inheritdoc}
         */
        public function setLocale($locale)
        {
            $this->translator->setLocale($locale);
        }

        /**
         * {@inheritdoc}
         */
        public function getLocale()
        {
            return $this->translator->getLocale();
        }

        /**
         * {@inheritdoc}
         */
        public function getCatalogue($locale = null)
        {
            return $this->translator->getCatalogue($locale);
        }

        /**
         * {@inheritdoc}
         */
        public function warmUp($cacheDir)
        {
            if ($this->translator instanceof WarmableInterface) {
                $this->translator->warmUp($cacheDir);
            }
        }

        /**
         * Gets the fallback locales.
         *
         * @return array The fallback locales
         */
        public function getFallbackLocales()
        {
            if ($this->translator instanceof Translator || method_exists($this->translator, 'getFallbackLocales')) {
                return $this->translator->getFallbackLocales();
            }

            return [];
        }

        /**
         * Passes through all unknown calls onto the translator object.
         */
        public function __call($method, $args)
        {
            return $this->translator->{$method}(...$args);
        }

        /**
         * @return array
         */
        public function getCollectedMessages()
        {
            return $this->messages;
        }

        private function collectMessage(?string $locale, ?string $domain, ?string $id, string $translation, ?array $parameters = [])
        {
            if (null === $domain) {
                $domain = 'messages';
            }

            $id = (string) $id;
            $catalogue = $this->translator->getCatalogue($locale);
            $locale = $catalogue->getLocale();
            $fallbackLocale = null;
            if ($catalogue->defines($id, $domain)) {
                $state = self::MESSAGE_DEFINED;
            } elseif ($catalogue->has($id, $domain)) {
                $state = self::MESSAGE_EQUALS_FALLBACK;

                $fallbackCatalogue = $catalogue->getFallbackCatalogue();
                while ($fallbackCatalogue) {
                    if ($fallbackCatalogue->defines($id, $domain)) {
                        $fallbackLocale = $fallbackCatalogue->getLocale();
                        break;
                    }
                    $fallbackCatalogue = $fallbackCatalogue->getFallbackCatalogue();
                }
            } else {
                $state = self::MESSAGE_MISSING;
            }

            $this->messages[] = [
                'locale' => $locale,
                'fallbackLocale' => $fallbackLocale,
                'domain' => $domain,
                'id' => $id,
                'translation' => $translation,
                'parameters' => $parameters,
                'state' => $state,
                'transChoiceNumber' => isset($parameters['%count%']) && is_numeric($parameters['%count%']) ? $parameters['%count%'] : null,
            ];
        }
    }
  uploads-Carbon-vendor-symfony-translation-TranslatorBagInterface.php: |
    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Symfony\Component\Translation;

    use Symfony\Component\Translation\Exception\InvalidArgumentException;

    /**
     * TranslatorBagInterface.
     *
     * @author Abdellatif Ait boudad <a.aitboudad@gmail.com>
     */
    interface TranslatorBagInterface
    {
        /**
         * Gets the catalogue by locale.
         *
         * @param string|null $locale The locale or null to use the default
         *
         * @return MessageCatalogueInterface
         *
         * @throws InvalidArgumentException If the locale contains invalid characters
         */
        public function getCatalogue($locale = null);
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: php-code-content-131
