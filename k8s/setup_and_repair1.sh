
# 13. T·∫°o Ingress
echo "üåê 13.T·∫°o Ingress cho PHP..."
cat <<EOF | kubectl apply -f -
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: php-ingress
spec:
  rules:
  - host: doannhanh.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: php-service
            port:
              number: 80
EOF

# Ki·ªÉm tra Ingress
echo "üîç Ki·ªÉm tra Ingress..."
kubectl get ingress php-ingress > /dev/null 2>&1 || {
  echo "‚ùå Kh√¥ng th·ªÉ t·∫°o Ingress."
  kubectl describe ingress php-ingress
  exit 1
}

# C·∫≠p nh·∫≠t /etc/hosts ƒë·ªÉ truy c·∫≠p Ingress
echo "üîç C·∫≠p nh·∫≠t /etc/hosts cho Ingress..."
minikube_ip=$(minikube ip)
echo "$minikube_ip doannhanh.local" | sudo tee -a /etc/hosts || {
  echo "‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t /etc/hosts. Vui l√≤ng th√™m d√≤ng sau v√†o /etc/hosts th·ªß c√¥ng:"
  echo "$minikube_ip doannhanh.local"
}

# B∆∞·ªõc 14: ƒê·ª£i c√°c pod s·∫µn s√†ng v·ªõi retry logic
echo "‚è≥ 14.ƒê·ª£i c√°c pod kh·ªüi ƒë·ªông..."
max_attempts=30  # TƒÉng l√™n 30 l·∫ßn (300 gi√¢y)
attempt=1
while [ $attempt -le $max_attempts ]; do
  echo "üîç Ki·ªÉm tra tr·∫°ng th√°i Pod (l·∫ßn $attempt/$max_attempts)..."
  kubectl get pods
  php_pod=$(kubectl get pods -l app=php -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
  mysql_pod=$(kubectl get pods -l app=mysql -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
  
  if [ -z "$php_pod" ] || [ -z "$mysql_pod" ]; then
    echo "‚ö†Ô∏è M·ªôt ho·∫∑c c·∫£ hai pod ch∆∞a ƒë∆∞·ª£c t·∫°o (PHP: $php_pod, MySQL: $mysql_pod)."
  else
    php_status=$(kubectl get pod $php_pod -o jsonpath='{.status.phase}' 2>/dev/null || echo "NotRunning")
    mysql_status=$(kubectl get pod $mysql_pod -o jsonpath='{.status.phase}' 2>/dev/null || echo "NotRunning")
    
    if [ "$php_status" = "CrashLoopBackOff" ] || [ "$mysql_status" = "CrashLoopBackOff" ] || \
       [ "$php_status" = "Error" ] || [ "$mysql_status" = "Error" ]; then
      echo "‚ùå Pod g·∫∑p l·ªói nghi√™m tr·ªçng (PHP: $php_status, MySQL: $mysql_status)."
      kubectl describe pod $php_pod
      kubectl describe pod $mysql_pod
      kubectl logs $php_pod 2>/dev/null || echo "Kh√¥ng c√≥ log (PHP pod ch∆∞a ch·∫°y)."
      kubectl logs $mysql_pod 2>/dev/null || echo "Kh√¥ng c√≥ log (MySQL pod ch∆∞a ch·∫°y)."
      exit 1
    fi
    
    if [ "$php_status" != "Running" ] || [ "$mysql_status" != "Running" ]; then
      echo "‚ö†Ô∏è M·ªôt ho·∫∑c c·∫£ hai pod ch∆∞a ·ªü tr·∫°ng th√°i Running (PHP: $php_status, MySQL: $mysql_status)."
    else
      php_ready=$(kubectl get pod $php_pod -o jsonpath='{.status.containerStatuses[0].ready}' 2>/dev/null || echo "false")
      mysql_ready=$(kubectl get pod $mysql_pod -o jsonpath='{.status.containerStatuses[0].ready}' 2>/dev/null || echo "false")
      
      if [ "$php_ready" = "true" ] && [ "$mysql_ready" = "true" ]; then
        echo "‚úÖ T·∫•t c·∫£ c√°c pod ƒë√£ s·∫µn s√†ng!"
        break
      fi
      echo "‚ö†Ô∏è Pod ch∆∞a s·∫µn s√†ng (PHP ready: $php_ready, MySQL ready: $mysql_ready)."
    fi
  fi
  
  if [ $attempt -eq $max_attempts ]; then
    echo "‚ùå H·∫øt th·ªùi gian ch·ªù, c√°c pod kh√¥ng s·∫µn s√†ng:"
    for pod in $php_pod $mysql_pod; do
      if [ -n "$pod" ]; then
        echo "üìù Chi ti·∫øt pod $pod:"
        kubectl describe pod $pod
        echo "üìù Log pod $pod:"
        kubectl logs $pod 2>/dev/null || echo "Kh√¥ng c√≥ log (pod ch∆∞a ch·∫°y)."
      fi
    done
    exit 1
  fi
  
  sleep 10
  attempt=$((attempt + 1))
done
# B∆∞·ªõc 15: Ki·ªÉm tra c∆° s·ªü d·ªØ li·ªáu MySQL
echo "üîç 15.Ki·ªÉm tra c∆° s·ªü d·ªØ li·ªáu MySQL..."
mysql_pod=$(kubectl get pods -l app=mysql -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

if [ -z "$mysql_pod" ]; then
  echo "‚ùå Kh√¥ng t√¨m th·∫•y pod MySQL. Ki·ªÉm tra l·∫°i deployment."
  kubectl get pods -l app=mysql
  exit 1
fi

mysql_status=$(kubectl get pod $mysql_pod -o jsonpath='{.status.phase}' 2>/dev/null || echo "NotRunning")
if [ "$mysql_status" != "Running" ]; then
  echo "‚ùå Pod MySQL ($mysql_pod) ch∆∞a ·ªü tr·∫°ng th√°i Running (tr·∫°ng th√°i: $mysql_status)."
  kubectl describe pod $mysql_pod
  exit 1
fi

mysql_ready=$(kubectl get pod $mysql_pod -o jsonpath='{.status.containerStatuses[0].ready}' 2>/dev/null || echo "false")
if [ "$mysql_ready" != "true" ]; then
  echo "‚ùå Pod MySQL ($mysql_pod) ch∆∞a s·∫µn s√†ng (ready: $mysql_ready)."
  kubectl describe pod $mysql_pod
  exit 1
fi

# Ki·ªÉm tra tr·∫°ng th√°i MySQL server
echo "üîç Ki·ªÉm tra tr·∫°ng th√°i MySQL server..."
max_attempts_mysql=3
attempt_mysql=1
while [ $attempt_mysql -le $max_attempts_mysql ]; do
  echo "üîç Ki·ªÉm tra MySQL server (l·∫ßn $attempt_mysql/$max_attempts_mysql)..."
  if kubectl exec $mysql_pod -- mysqladmin ping -h localhost -u root -p${MYSQL_ROOT_PASSWORD} > /dev/null 2>&1; then
    echo "‚úÖ MySQL server ƒëang ch·∫°y."
    break
  fi
  
  if [ $attempt_mysql -eq $max_attempts_mysql ]; then
    echo "‚ùå MySQL server kh√¥ng ch·∫°y trong pod $mysql_pod. Th·ª≠ kh·ªüi ƒë·ªông l·∫°i pod..."
    kubectl delete pod $mysql_pod --grace-period=0 --force
    sleep 30
    mysql_pod=$(kubectl get pods -l app=mysql -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
    if [ -z "$mysql_pod" ]; then
      echo "‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông l·∫°i pod MySQL."
      exit 1
    fi
    echo "üìù Log c·ªßa pod MySQL m·ªõi ($mysql_pod):"
    kubectl logs $mysql_pod 2>/dev/null || echo "Kh√¥ng c√≥ log."
    kubectl describe pod $mysql_pod
    exit 1
  fi
  
  sleep 5
  attempt_mysql=$((attempt_mysql + 1))
done

# Ki·ªÉm tra k·∫øt n·ªëi MySQL
echo "üîç Ki·ªÉm tra k·∫øt n·ªëi MySQL..."
kubectl exec $mysql_pod -- bash -c 'export MYSQL_PWD=userpass; mysql -uapp_user -h localhost -e "SHOW DATABASES;"' || {
  echo "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn MySQL."
  kubectl logs $mysql_pod
  exit 1
}
kubectl exec $mysql_pod -- bash -c 'export MYSQL_PWD=userpass; mysql -uapp_user -h localhost -e "SHOW TABLES FROM qlbandoannhanh;"'
# 16. Ki·ªÉm tra pod PHP
chmod +x ./k8s/deploy_php_step_16_1.sh
chmod +x ./k8s/deploy_php_step_16_2.sh
chmod +x ./k8s/deploy_php_step_16_3.sh
chmod +x ./k8s/deploy_php_step_16_4.sh
chmod +x ./k8s/deploy_php_step_16_5.sh
chmod +x ./k8s/deploy_php_step_17.sh

./k8s/deploy_php_step_16_1.sh
./k8s/deploy_php_step_16_2.sh
./k8s/deploy_php_step_16_3.sh
./k8s/deploy_php_step_16_4.sh
./k8s/deploy_php_step_16_5.sh
./k8s/deploy_php_step_17.sh


echo "‚úÖ Website PHP ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng."


