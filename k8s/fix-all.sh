#!/bin/bash

echo "üîß Script kh·∫Øc ph·ª•c to√†n di·ªán cho ·ª©ng d·ª•ng Kubernetes ƒê·ªì ƒÇn Nhanh"
echo "================================================================="

# 1. Kh·ªüi ƒë·ªông l·∫°i Minikube v·ªõi ƒë·ªß t√†i nguy√™n
echo "üöÄ Kh·ªüi ƒë·ªông l·∫°i Minikube v·ªõi t√†i nguy√™n c·∫ßn thi·∫øt..."
minikube stop
minikube delete
minikube start --driver=docker --memory=3072 --cpus=2 --disk-size=20g

echo "‚è≥ ƒê·ª£i minikube kh·ªüi ƒë·ªông ho√†n t·∫•t..."
sleep 10

# Ki·ªÉm tra Minikube
echo "‚úÖ Ki·ªÉm tra tr·∫°ng th√°i Minikube:"
minikube status

# 2. X√≥a m·ªçi t√†i nguy√™n c≈©
echo "üßπ D·ªçn d·∫πp t√†i nguy√™n c≈©..."
kubectl delete all --all --grace-period=0 --force
kubectl delete pvc,pv --all --grace-period=0 --force
kubectl delete configmap,secret --all --grace-period=0 --force --ignore-not-found=true
kubectl delete job --all --grace-period=0 --force --ignore-not-found=true

echo "‚è≥ ƒê·ª£i t√†i nguy√™n x√≥a ho√†n t·∫•t..."
sleep 5

# 3. T·∫°o Secret
echo "üîí T·∫°o MySQL Secret..."
kubectl create secret generic mysql-secret \
  --from-literal=root-password=rootpassword \
  --from-literal=user-password=userpassword \
  --from-literal=username=app_user

# 4. T·∫°o ConfigMap cho code PHP
echo "üìÑ T·∫°o ConfigMap cho code PHP..."
cat > simplified-php-code.yaml << EOF
apiVersion: v1
kind: ConfigMap
metadata:
  name: php-code
data:
  index.php: |
    <?php
    echo "<h1>·ª®ng d·ª•ng ƒê·ªì ƒÇn Nhanh</h1>";
    echo "<p>Tr·∫°ng th√°i k·∫øt n·ªëi:</p>";
    
    \$host = 'mysql-service';
    \$dbname = 'qlbandoannhanh';
    \$user = 'app_user';
    \$pass = 'userpassword';
    
    try {
        \$conn = new PDO("mysql:host=\$host;dbname=\$dbname", \$user, \$pass);
        \$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        echo "<p style='color:green'>‚úÖ K·∫øt n·ªëi MySQL th√†nh c√¥ng!</p>";
        
        // Th·ª≠ truy v·∫•n d·ªØ li·ªáu
        \$stmt = \$conn->query("SELECT * FROM categories LIMIT 5");
        echo "<h3>Danh m·ª•c s·∫£n ph·∫©m:</h3>";
        echo "<ul>";
        while (\$row = \$stmt->fetch(PDO::FETCH_ASSOC)) {
            echo "<li>" . \$row['name'] . ": " . \$row['description'] . "</li>";
        }
        echo "</ul>";
    } catch(PDOException \$e) {
        echo "<p style='color:red'>‚ùå L·ªói k·∫øt n·ªëi MySQL: " . \$e->getMessage() . "</p>";
    }
    ?>
    
    <h2>Th√¥ng tin h·ªá th·ªëng:</h2>
    <?php
    echo "<p>Server IP: " . \$_SERVER['SERVER_ADDR'] . "</p>";
    echo "<p>PHP Version: " . phpversion() . "</p>";
    ?>
EOF

kubectl apply -f simplified-php-code.yaml

# 5. T·∫°o ConfigMap cho MySQL kh·ªüi t·∫°o
echo "üì¶ T·∫°o ConfigMap cho kh·ªüi t·∫°o MySQL..."
cat > mysql-init.yaml << EOF
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS qlbandoannhanh;
    USE qlbandoannhanh;
    
    CREATE TABLE IF NOT EXISTS categories (
      id INT AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(100) NOT NULL,
      description TEXT
    );
    
    CREATE TABLE IF NOT EXISTS products (
      id INT AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(100) NOT NULL,
      description TEXT,
      price DECIMAL(10,2) NOT NULL,
      category_id INT,
      FOREIGN KEY (category_id) REFERENCES categories(id)
    );
    
    -- Th√™m d·ªØ li·ªáu m·∫´u
    INSERT IGNORE INTO categories (name, description) VALUES
    ('Burger', 'C√°c lo·∫°i b√°nh burger th∆°m ngon'),
    ('Pizza', 'Pizza ƒëa d·∫°ng h∆∞∆°ng v·ªã'),
    ('N∆∞·ªõc u·ªëng', 'ƒê·ªì u·ªëng gi·∫£i kh√°t');
    
    INSERT IGNORE INTO products (name, description, price, category_id) VALUES
    ('Burger Ph√¥ Mai', 'Burger v·ªõi l·ªõp ph√¥ mai b√©o ng·∫≠y', 55000, 1),
    ('Pizza H·∫£i S·∫£n', 'Pizza h·∫£i s·∫£n t∆∞∆°i ngon', 95000, 2),
    ('Coca Cola', 'N∆∞·ªõc gi·∫£i kh√°t c√≥ gas', 15000, 3);
EOF

kubectl apply -f mysql-init.yaml

# 6. T·∫°o MySQL Deployment (Thay v√¨ StatefulSet ƒë·ªÉ ƒë∆°n gi·∫£n h√≥a)
echo "üõ¢Ô∏è T·∫°o MySQL Deployment ƒë∆°n gi·∫£n..."
cat > mysql-deployment.yaml << EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: root-password
        - name: MYSQL_DATABASE
          value: qlbandoannhanh
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: user-password
        ports:
        - containerPort: 3306
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi" 
            cpu: "500m"
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mysql-storage
        emptyDir: {}
      - name: mysql-initdb
        configMap:
          name: mysql-init
EOF

kubectl apply -f mysql-deployment.yaml

# 7. T·∫°o MySQL Service
echo "üîÑ T·∫°o MySQL Service..."
cat > mysql-service.yaml << EOF
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
  - port: 3306
    targetPort: 3306
  type: ClusterIP
EOF

kubectl apply -f mysql-service.yaml

# 8. T·∫°o PHP Deployment ƒë∆°n gi·∫£n v·ªõi image c√≥ s·∫µn PDO
echo "üöÄ T·∫°o PHP Deployment..."
cat > php-deployment.yaml << EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: php-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: php-app
  template:
    metadata:
      labels:
        app: php-app
    spec:
      containers:
      - name: php-app
        image: php:8.0-apache
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: php-code-volume
          mountPath: /var/www/html
        command: ["/bin/sh", "-c"]
        args:
        - |
          apt-get update && \
          apt-get install -y default-mysql-client libpq-dev && \
          docker-php-ext-install pdo pdo_mysql && \
          cp /code-config/index.php /var/www/html/ && \
          chmod 644 /var/www/html/index.php && \
          apache2-foreground
      volumes:
      - name: php-code-volume
        configMap:
          name: php-code
EOF

kubectl apply -f php-deployment.yaml

# 9. T·∫°o PHP Service
echo "üåê T·∫°o PHP Service (NodePort)..."
cat > php-service.yaml << EOF
apiVersion: v1
kind: Service
metadata:
  name: php-service
spec:
  selector:
    app: php-app
  ports:
  - port: 80
    targetPort: 80
  type: NodePort
EOF

kubectl apply -f php-service.yaml

echo "‚è≥ ƒê·ª£i c√°c pod kh·ªüi ƒë·ªông..."
sleep 30

echo "üîç Ki·ªÉm tra tr·∫°ng th√°i Pod..."
kubectl get pods

echo "üîç M√¥ t·∫£ l·ªói n·∫øu c√≥:"
for pod in $(kubectl get pods -o custom-columns=:metadata.name); do
  status=$(kubectl get pod $pod -o jsonpath='{.status.phase}')
  if [ "$status" != "Running" ]; then
    echo "üìù Chi ti·∫øt l·ªói pod $pod:"
    kubectl describe pod $pod
    echo "üìù Log c·ªßa pod $pod:"
    kubectl logs $pod
  fi
done

# Ki·ªÉm tra URL truy c·∫≠p
echo "üîç Th√¥ng tin truy c·∫≠p d·ªãch v·ª•:"
minikube service php-service --url

echo "================================================================="
echo "‚úÖ Ho√†n t·∫•t! ƒê·ªÉ truy c·∫≠p ·ª©ng d·ª•ng PHP, ch·∫°y: minikube service php-service"
echo "üëâ Ho·∫∑c truy c·∫≠p URL ƒë√£ hi·ªÉn th·ªã ph√≠a tr√™n"
echo "================================================================="