name: CI/CD Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Build and test
      run: |
        docker build -t app:test .
        docker run --rm app:test php vendor/bin/phpunit
        
    - name: Run security scan
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy image app:test
        
    - name: Run kube-bench
      run: |
        docker run --rm -v `pwd`:/host aquasec/kube-bench:latest install
        ./kube-bench
        
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Update k8s deployment
      run: |
        kubectl set image deployment/app app=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/app
        kubectl get pods
        
    - name: Run post-deployment tests
      run: |
        curl -s http://app.example.com/health
        curl -s http://app.example.com/metrics
        
  monitor:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - name: Check application health
      run: |
        curl -s http://app.example.com/health | grep "ok"
        
    - name: Check metrics
      run: |
        curl -s http://app.example.com/metrics | grep "app_"
        
    - name: Check logs
      run: |
        kubectl logs -l app=app --tail=100
        
    - name: Check resources
      run: |
        kubectl top pods
        kubectl top nodes 